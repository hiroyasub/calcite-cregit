begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Spaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|CartesianProductEnumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Deterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|NonDeterministic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|FlatLists
operator|.
name|ComparableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibraryOperators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NumberUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimeWithTimeZoneString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampWithTimeZoneString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Unsafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|Soundex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|MathContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BinaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Helper methods to implement SQL functions in generated code.  *  *<p>Not present: and, or, not (builtin operators are better, because they  * use lazy evaluation. Implementations do not check for null values; the  * calling code must do that.</p>  *  *<p>Many of the functions do not check for null values. This is intentional.  * If null arguments are possible, the code-generation framework checks for  * nulls before calling the functions.</p>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnnecessaryUnboxing"
argument_list|)
annotation|@
name|Deterministic
specifier|public
class|class
name|SqlFunctions
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|DOUBLE_FORMAT
init|=
name|NumberUtil
operator|.
name|decimalFormat
argument_list|(
literal|"0.0E0"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|LOCAL_TZ
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|ROOT_DAY_FORMAT
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"EEEE"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|ROOT_MONTH_FORMAT
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"MMMM"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Soundex
name|SOUNDEX
init|=
operator|new
name|Soundex
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SOUNDEX_LENGTH
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FROM_BASE64_REGEXP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\t\\n\\r\\s]"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|,
name|Enumerable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|LIST_AS_ENUMERABLE
init|=
name|Linq4j
operator|::
name|asEnumerable
decl_stmt|;
comment|// It's important to have XDigit before Digit to match XDigit first
comment|// (i.e. see the posixRegex method)
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|POSIX_CHARACTER_CLASSES
init|=
operator|new
name|String
index|[]
block|{
literal|"Lower"
block|,
literal|"Upper"
block|,
literal|"ASCII"
block|,
literal|"Alpha"
block|,
literal|"XDigit"
block|,
literal|"Digit"
block|,
literal|"Alnum"
block|,
literal|"Punct"
block|,
literal|"Graph"
block|,
literal|"Print"
block|,
literal|"Blank"
block|,
literal|"Cntrl"
block|,
literal|"Space"
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|Object
index|[]
argument_list|,
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
name|ARRAY_CARTESIAN_PRODUCT
init|=
name|lists
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|Enumerator
argument_list|<
name|Object
argument_list|>
argument_list|>
name|enumerators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|list
range|:
name|lists
control|)
block|{
name|enumerators
operator|.
name|add
argument_list|(
name|Linq4j
operator|.
name|enumerator
argument_list|(
operator|(
name|List
operator|)
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|product
init|=
name|Linq4j
operator|.
name|product
argument_list|(
name|enumerators
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|transform
argument_list|(
name|product
argument_list|,
name|List
operator|::
name|toArray
argument_list|)
return|;
block|}
block|}
return|;
block|}
decl_stmt|;
comment|/** Holds, for each thread, a map from sequence name to sequence current    * value.    *    *<p>This is a straw man of an implementation whose main goal is to prove    * that sequences can be parsed, validated and planned. A real application    * will want persistent values for sequences, shared among threads. */
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|>
name|THREAD_SEQUENCES
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|HashMap
operator|::
operator|new
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|PATTERN_0_STAR_E
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"0*E"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ALLOW_FIELD_INDEX_ACCESS
init|=
name|CalciteSystemProperty
operator|.
name|ALLOW_FIELD_INDEX_ACCESS
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|private
name|SqlFunctions
parameter_list|()
block|{
block|}
comment|/** SQL TO_BASE64(string) function. */
specifier|public
specifier|static
name|String
name|toBase64
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|toBase64_
argument_list|(
name|string
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL TO_BASE64(string) function for binary string. */
specifier|public
specifier|static
name|String
name|toBase64
parameter_list|(
name|ByteString
name|string
parameter_list|)
block|{
return|return
name|toBase64_
argument_list|(
name|string
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|toBase64_
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|String
name|base64
init|=
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|(
name|base64
operator|.
name|length
argument_list|()
operator|+
name|base64
operator|.
name|length
argument_list|()
operator|/
literal|76
argument_list|)
decl_stmt|;
name|Splitter
operator|.
name|fixedLength
argument_list|(
literal|76
argument_list|)
operator|.
name|split
argument_list|(
name|base64
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|s
lambda|->
block|{
name|str
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** SQL FROM_BASE64(string) function. */
specifier|public
specifier|static
name|ByteString
name|fromBase64
parameter_list|(
name|String
name|base64
parameter_list|)
block|{
try|try
block|{
name|base64
operator|=
name|FROM_BASE64_REGEXP
operator|.
name|matcher
argument_list|(
name|base64
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteString
argument_list|(
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|base64
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** SQL MD5(string) function. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|String
name|md5
parameter_list|(
annotation|@
name|Nonnull
name|String
name|string
parameter_list|)
block|{
return|return
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|string
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL MD5(string) function for binary string. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|String
name|md5
parameter_list|(
annotation|@
name|Nonnull
name|ByteString
name|string
parameter_list|)
block|{
return|return
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|string
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL SHA1(string) function. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|String
name|sha1
parameter_list|(
annotation|@
name|Nonnull
name|String
name|string
parameter_list|)
block|{
return|return
name|DigestUtils
operator|.
name|sha1Hex
argument_list|(
name|string
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL SHA1(string) function for binary string. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|String
name|sha1
parameter_list|(
annotation|@
name|Nonnull
name|ByteString
name|string
parameter_list|)
block|{
return|return
name|DigestUtils
operator|.
name|sha1Hex
argument_list|(
name|string
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL {@code REGEXP_REPLACE} function with 3 arguments. */
specifier|public
specifier|static
name|String
name|regexpReplace
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|regex
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
return|return
name|regexpReplace
argument_list|(
name|s
argument_list|,
name|regex
argument_list|,
name|replacement
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** SQL {@code REGEXP_REPLACE} function with 4 arguments. */
specifier|public
specifier|static
name|String
name|regexpReplace
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|regex
parameter_list|,
name|String
name|replacement
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
return|return
name|regexpReplace
argument_list|(
name|s
argument_list|,
name|regex
argument_list|,
name|replacement
argument_list|,
name|pos
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** SQL {@code REGEXP_REPLACE} function with 5 arguments. */
specifier|public
specifier|static
name|String
name|regexpReplace
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|regex
parameter_list|,
name|String
name|replacement
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|occurrence
parameter_list|)
block|{
return|return
name|regexpReplace
argument_list|(
name|s
argument_list|,
name|regex
argument_list|,
name|replacement
argument_list|,
name|pos
argument_list|,
name|occurrence
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** SQL {@code REGEXP_REPLACE} function with 6 arguments. */
specifier|public
specifier|static
name|String
name|regexpReplace
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|regex
parameter_list|,
name|String
name|replacement
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|occurrence
parameter_list|,
name|String
name|matchType
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|<
literal|1
operator|||
name|pos
operator|>
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidInputForRegexpReplace
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pos
argument_list|)
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
specifier|final
name|int
name|flags
init|=
name|makeRegexpFlags
argument_list|(
name|matchType
argument_list|)
decl_stmt|;
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
name|Unsafe
operator|.
name|regexpReplace
argument_list|(
name|s
argument_list|,
name|pattern
argument_list|,
name|replacement
argument_list|,
name|pos
argument_list|,
name|occurrence
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|makeRegexpFlags
parameter_list|(
name|String
name|stringFlags
parameter_list|)
block|{
name|int
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|stringFlags
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringFlags
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|stringFlags
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|'i'
case|:
name|flags
operator||=
name|Pattern
operator|.
name|CASE_INSENSITIVE
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|flags
operator|&=
operator|~
name|Pattern
operator|.
name|CASE_INSENSITIVE
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|flags
operator||=
name|Pattern
operator|.
name|DOTALL
expr_stmt|;
break|break;
case|case
literal|'m'
case|:
name|flags
operator||=
name|Pattern
operator|.
name|MULTILINE
expr_stmt|;
break|break;
default|default:
throw|throw
name|RESOURCE
operator|.
name|invalidInputForRegexpReplace
argument_list|(
name|stringFlags
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
block|}
return|return
name|flags
return|;
block|}
comment|/** SQL SUBSTRING(string FROM ... FOR ...) function. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|c
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|l
parameter_list|)
block|{
name|int
name|lc
init|=
name|c
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
name|s
operator|+=
name|lc
operator|+
literal|1
expr_stmt|;
block|}
name|int
name|e
init|=
name|s
operator|+
name|l
decl_stmt|;
if|if
condition|(
name|e
operator|<
name|s
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|illegalNegativeSubstringLength
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
if|if
condition|(
name|s
operator|>
name|lc
operator|||
name|e
operator|<
literal|1
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|s1
init|=
name|Math
operator|.
name|max
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|e1
init|=
name|Math
operator|.
name|min
argument_list|(
name|e
argument_list|,
name|lc
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|substring
argument_list|(
name|s1
operator|-
literal|1
argument_list|,
name|e1
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** SQL SUBSTRING(string FROM ...) function. */
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|c
parameter_list|,
name|int
name|s
parameter_list|)
block|{
return|return
name|substring
argument_list|(
name|c
argument_list|,
name|s
argument_list|,
name|c
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/** SQL SUBSTRING(binary FROM ... FOR ...) function. */
specifier|public
specifier|static
name|ByteString
name|substring
parameter_list|(
name|ByteString
name|c
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|l
parameter_list|)
block|{
name|int
name|lc
init|=
name|c
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
name|s
operator|+=
name|lc
operator|+
literal|1
expr_stmt|;
block|}
name|int
name|e
init|=
name|s
operator|+
name|l
decl_stmt|;
if|if
condition|(
name|e
operator|<
name|s
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|illegalNegativeSubstringLength
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
if|if
condition|(
name|s
operator|>
name|lc
operator|||
name|e
operator|<
literal|1
condition|)
block|{
return|return
name|ByteString
operator|.
name|EMPTY
return|;
block|}
name|int
name|s1
init|=
name|Math
operator|.
name|max
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|e1
init|=
name|Math
operator|.
name|min
argument_list|(
name|e
argument_list|,
name|lc
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|substring
argument_list|(
name|s1
operator|-
literal|1
argument_list|,
name|e1
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** SQL SUBSTRING(binary FROM ...) function. */
specifier|public
specifier|static
name|ByteString
name|substring
parameter_list|(
name|ByteString
name|c
parameter_list|,
name|int
name|s
parameter_list|)
block|{
return|return
name|substring
argument_list|(
name|c
argument_list|,
name|s
argument_list|,
name|c
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/** SQL UPPER(string) function. */
specifier|public
specifier|static
name|String
name|upper
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
comment|/** SQL LOWER(string) function. */
specifier|public
specifier|static
name|String
name|lower
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
comment|/** SQL INITCAP(string) function. */
specifier|public
specifier|static
name|String
name|initcap
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// Assumes Alpha as [A-Za-z0-9]
comment|// white space is treated as everything else.
specifier|final
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|boolean
name|start
init|=
literal|true
decl_stmt|;
specifier|final
name|StringBuilder
name|newS
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curCh
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|c
init|=
operator|(
name|int
operator|)
name|curCh
decl_stmt|;
if|if
condition|(
name|start
condition|)
block|{
comment|// curCh is whitespace or first character of word.
if|if
condition|(
name|c
operator|>
literal|47
operator|&&
name|c
operator|<
literal|58
condition|)
block|{
comment|// 0-9
name|start
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|>
literal|64
operator|&&
name|c
operator|<
literal|91
condition|)
block|{
comment|// A-Z
name|start
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|>
literal|96
operator|&&
name|c
operator|<
literal|123
condition|)
block|{
comment|// a-z
name|start
operator|=
literal|false
expr_stmt|;
name|curCh
operator|=
operator|(
name|char
operator|)
operator|(
name|c
operator|-
literal|32
operator|)
expr_stmt|;
comment|// Uppercase this character
block|}
comment|// else {} whitespace
block|}
else|else
block|{
comment|// Inside of a word or white space after end of word.
if|if
condition|(
name|c
operator|>
literal|47
operator|&&
name|c
operator|<
literal|58
condition|)
block|{
comment|// 0-9
comment|// noop
block|}
if|else if
condition|(
name|c
operator|>
literal|64
operator|&&
name|c
operator|<
literal|91
condition|)
block|{
comment|// A-Z
name|curCh
operator|=
operator|(
name|char
operator|)
operator|(
name|c
operator|+
literal|32
operator|)
expr_stmt|;
comment|// Lowercase this character
block|}
if|else if
condition|(
name|c
operator|>
literal|96
operator|&&
name|c
operator|<
literal|123
condition|)
block|{
comment|// a-z
comment|// noop
block|}
else|else
block|{
comment|// whitespace
name|start
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|newS
operator|.
name|append
argument_list|(
name|curCh
argument_list|)
expr_stmt|;
block|}
comment|// for each character in s
return|return
name|newS
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** SQL REVERSE(string) function. */
specifier|public
specifier|static
name|String
name|reverse
parameter_list|(
name|String
name|s
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|buf
operator|.
name|reverse
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** SQL ASCII(string) function. */
specifier|public
specifier|static
name|int
name|ascii
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|s
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/** SQL REPEAT(string, int) function. */
specifier|public
specifier|static
name|String
name|repeat
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|1
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|Strings
operator|.
name|repeat
argument_list|(
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/** SQL SPACE(int) function. */
specifier|public
specifier|static
name|String
name|space
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|repeat
argument_list|(
literal|" "
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/** SQL STRCMP(String,String) function. */
specifier|public
specifier|static
name|int
name|strcmp
parameter_list|(
name|String
name|s0
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|signum
argument_list|(
name|s1
operator|.
name|compareTo
argument_list|(
name|s0
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL SOUNDEX(string) function. */
specifier|public
specifier|static
name|String
name|soundex
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|SOUNDEX
operator|.
name|soundex
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/** SQL DIFFERENCE(string, string) function. */
specifier|public
specifier|static
name|int
name|difference
parameter_list|(
name|String
name|s0
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
name|String
name|result0
init|=
name|soundex
argument_list|(
name|s0
argument_list|)
decl_stmt|;
name|String
name|result1
init|=
name|soundex
argument_list|(
name|s1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SOUNDEX_LENGTH
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|result0
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|result1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|SOUNDEX_LENGTH
return|;
block|}
comment|/** SQL LEFT(string, integer) function. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|String
name|left
parameter_list|(
annotation|@
name|Nonnull
name|String
name|s
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>=
name|len
condition|)
block|{
return|return
name|s
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/** SQL LEFT(ByteString, integer) function. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|ByteString
name|left
parameter_list|(
annotation|@
name|Nonnull
name|ByteString
name|s
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
name|ByteString
operator|.
name|EMPTY
return|;
block|}
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>=
name|len
condition|)
block|{
return|return
name|s
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/** SQL RIGHT(string, integer) function. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|String
name|right
parameter_list|(
annotation|@
name|Nonnull
name|String
name|s
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>=
name|len
condition|)
block|{
return|return
name|s
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|len
operator|-
name|n
argument_list|)
return|;
block|}
comment|/** SQL RIGHT(ByteString, integer) function. */
specifier|public
specifier|static
annotation|@
name|Nonnull
name|ByteString
name|right
parameter_list|(
annotation|@
name|Nonnull
name|ByteString
name|s
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
name|ByteString
operator|.
name|EMPTY
return|;
block|}
specifier|final
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>=
name|len
condition|)
block|{
return|return
name|s
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|len
operator|-
name|n
argument_list|)
return|;
block|}
comment|/** SQL CHR(long) function. */
specifier|public
specifier|static
name|String
name|chr
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|Character
operator|.
name|toChars
argument_list|(
operator|(
name|int
operator|)
name|n
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL CHARACTER_LENGTH(string) function. */
specifier|public
specifier|static
name|int
name|charLength
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|length
argument_list|()
return|;
block|}
comment|/** SQL {@code string || string} operator. */
specifier|public
specifier|static
name|String
name|concat
parameter_list|(
name|String
name|s0
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
name|s0
operator|+
name|s1
return|;
block|}
comment|/** SQL {@code binary || binary} operator. */
specifier|public
specifier|static
name|ByteString
name|concat
parameter_list|(
name|ByteString
name|s0
parameter_list|,
name|ByteString
name|s1
parameter_list|)
block|{
return|return
name|s0
operator|.
name|concat
argument_list|(
name|s1
argument_list|)
return|;
block|}
comment|/** SQL {@code CONCAT(arg0, arg1, arg2, ...)} function. */
specifier|public
specifier|static
name|String
name|concatMulti
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/** SQL {@code RTRIM} function applied to string. */
specifier|public
specifier|static
name|String
name|rtrim
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|" "
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code LTRIM} function. */
specifier|public
specifier|static
name|String
name|ltrim
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|" "
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM(... seek FROM s)} function. */
specifier|public
specifier|static
name|String
name|trim
parameter_list|(
name|boolean
name|left
parameter_list|,
name|boolean
name|right
parameter_list|,
name|String
name|seek
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|trim
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|seek
argument_list|,
name|s
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|trim
parameter_list|(
name|boolean
name|left
parameter_list|,
name|boolean
name|right
parameter_list|,
name|String
name|seek
parameter_list|,
name|String
name|s
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
if|if
condition|(
name|strict
operator|&&
name|seek
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|trimError
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
name|int
name|j
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|seek
operator|.
name|indexOf
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|j
operator|-
literal|1
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
operator|--
name|j
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|left
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|seek
operator|.
name|indexOf
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM} function applied to binary string. */
specifier|public
specifier|static
name|ByteString
name|trim
parameter_list|(
name|ByteString
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Helper for CAST. */
specifier|public
specifier|static
name|ByteString
name|rtrim
parameter_list|(
name|ByteString
name|s
parameter_list|)
block|{
return|return
name|trim_
argument_list|(
name|s
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** SQL {@code TRIM} function applied to binary string. */
specifier|private
specifier|static
name|ByteString
name|trim_
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|boolean
name|left
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
name|int
name|j
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
return|return
name|ByteString
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
name|s
operator|.
name|byteAt
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
operator|--
name|j
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|left
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
condition|)
block|{
return|return
name|ByteString
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
name|s
operator|.
name|byteAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function. */
specifier|public
specifier|static
name|String
name|overlay
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|r
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|+
name|r
operator|+
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|r
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function. */
specifier|public
specifier|static
name|String
name|overlay
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|r
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|+
name|r
operator|+
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|length
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function applied to binary strings. */
specifier|public
specifier|static
name|ByteString
name|overlay
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|ByteString
name|r
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|.
name|concat
argument_list|(
name|r
argument_list|)
operator|.
name|concat
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|r
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL {@code OVERLAY} function applied to binary strings. */
specifier|public
specifier|static
name|ByteString
name|overlay
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|ByteString
name|r
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
operator|-
literal|1
argument_list|)
operator|.
name|concat
argument_list|(
name|r
argument_list|)
operator|.
name|concat
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|start
operator|-
literal|1
operator|+
name|length
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL {@code LIKE} function. */
specifier|public
specifier|static
name|boolean
name|like
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexLike
argument_list|(
name|pattern
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code LIKE} function with escape. */
specifier|public
specifier|static
name|boolean
name|like
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|escape
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexLike
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code SIMILAR} function. */
specifier|public
specifier|static
name|boolean
name|similar
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexSimilar
argument_list|(
name|pattern
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** SQL {@code SIMILAR} function with escape. */
specifier|public
specifier|static
name|boolean
name|similar
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|escape
parameter_list|)
block|{
specifier|final
name|String
name|regex
init|=
name|Like
operator|.
name|sqlToRegexSimilar
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|matches
argument_list|(
name|regex
argument_list|,
name|s
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|posixRegex
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|regex
parameter_list|,
name|Boolean
name|caseSensitive
parameter_list|)
block|{
comment|// Replace existing character classes with java equivalent ones
name|String
name|originalRegex
init|=
name|regex
decl_stmt|;
name|String
index|[]
name|existingExpressions
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|POSIX_CHARACTER_CLASSES
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|originalRegex
operator|.
name|contains
argument_list|(
name|v
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|existingExpressions
control|)
block|{
name|regex
operator|=
name|regex
operator|.
name|replace
argument_list|(
name|v
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
literal|"\\p{"
operator|+
name|v
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
name|int
name|flags
init|=
name|caseSensitive
condition|?
literal|0
else|:
name|Pattern
operator|.
name|CASE_INSENSITIVE
decl_stmt|;
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|flags
argument_list|)
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
comment|// =
comment|/** SQL<code>=</code> operator applied to BigDecimal values (neither may be    * null). */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|stripTrailingZeros
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|stripTrailingZeros
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>=</code> operator applied to Object[] values (neither may be    * null). */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|Object
index|[]
name|b0
parameter_list|,
name|Object
index|[]
name|b1
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>=</code> operator applied to Object values (including String;    * neither side may be null). */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>=</code> operator applied to String values with a certain Comparator. */
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|String
name|s0
parameter_list|,
name|String
name|s1
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|s0
argument_list|,
name|s1
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/** SQL<code>=</code> operator applied to Object values (at least one operand    * has ANY type; neither may be null). */
specifier|public
specifier|static
name|boolean
name|eqAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
comment|// The result of SqlFunctions.eq(BigDecimal, BigDecimal) makes more sense
comment|// than BigDecimal.equals(BigDecimal). So if both of types are BigDecimal,
comment|// we just use SqlFunctions.eq(BigDecimal, BigDecimal).
if|if
condition|(
name|BigDecimal
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|b0
argument_list|)
condition|)
block|{
return|return
name|eq
argument_list|(
operator|(
name|BigDecimal
operator|)
name|b0
argument_list|,
operator|(
name|BigDecimal
operator|)
name|b1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|b0
operator|.
name|equals
argument_list|(
name|b1
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|eq
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// We shouldn't rely on implementation even though overridden equals can
comment|// handle other types which may create worse result: for example,
comment|// a.equals(b) != b.equals(a)
return|return
literal|false
return|;
block|}
comment|/** Returns whether two objects can both be assigned to a given class. */
specifier|private
specifier|static
name|boolean
name|allAssignable
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Object
name|o0
parameter_list|,
name|Object
name|o1
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|isInstance
argument_list|(
name|o0
argument_list|)
operator|&&
name|clazz
operator|.
name|isInstance
argument_list|(
name|o1
argument_list|)
return|;
block|}
comment|//<>
comment|/** SQL<code>&lt;gt;</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|ne
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|!=
literal|0
return|;
block|}
comment|/** SQL<code>&lt;gt;</code> operator applied to Object values (including    * String; neither side may be null). */
specifier|public
specifier|static
name|boolean
name|ne
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
operator|!
name|eq
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>&lt;gt;</code> operator applied to OString values with a certain Comparator. */
specifier|public
specifier|static
name|boolean
name|ne
parameter_list|(
name|String
name|s0
parameter_list|,
name|String
name|s1
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|!
name|eq
argument_list|(
name|s0
argument_list|,
name|s1
argument_list|,
name|comparator
argument_list|)
return|;
block|}
comment|/** SQL<code>&lt;gt;</code> operator applied to Object values (at least one    *  operand has ANY type, including String; neither may be null). */
specifier|public
specifier|static
name|boolean
name|neAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
operator|!
name|eqAny
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|//<
comment|/** SQL<code>&lt;</code> operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL<code>&lt;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL<code>&lt;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL<code>&lt;</code> operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL<code>&lt;</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|lt
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** SQL<code>&lt;</code> operator applied to Object values. */
specifier|public
specifier|static
name|boolean
name|ltAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|b0
operator|instanceof
name|Comparable
condition|)
block|{
comment|//noinspection unchecked
return|return
operator|(
operator|(
name|Comparable
operator|)
name|b0
operator|)
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
return|;
block|}
if|else if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|lt
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notComparable
argument_list|(
literal|"<"
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
comment|//<=
comment|/** SQL<code>&le;</code> operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL<code>&le;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL<code>&le;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL<code>&le;</code> operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL<code>&le;</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|le
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
comment|/** SQL<code>&le;</code> operator applied to Object values (at least one    * operand has ANY type; neither may be null). */
specifier|public
specifier|static
name|boolean
name|leAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|b0
operator|instanceof
name|Comparable
condition|)
block|{
comment|//noinspection unchecked
return|return
operator|(
operator|(
name|Comparable
operator|)
name|b0
operator|)
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<=
literal|0
return|;
block|}
if|else if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|le
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notComparable
argument_list|(
literal|"<="
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
comment|//>
comment|/** SQL<code>&gt;</code> operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL<code>&gt;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL<code>&gt;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL<code>&gt;</code> operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL<code>&gt;</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|gt
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/** SQL<code>&gt;</code> operator applied to Object values (at least one    * operand has ANY type; neither may be null). */
specifier|public
specifier|static
name|boolean
name|gtAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|b0
operator|instanceof
name|Comparable
condition|)
block|{
comment|//noinspection unchecked
return|return
operator|(
operator|(
name|Comparable
operator|)
name|b0
operator|)
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
return|;
block|}
if|else if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|gt
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notComparable
argument_list|(
literal|">"
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
comment|//>=
comment|/** SQL<code>&ge;</code> operator applied to boolean values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL<code>&ge;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL<code>&ge;</code> operator applied to String values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|String
name|b0
parameter_list|,
name|String
name|b1
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL<code>&ge;</code> operator applied to ByteString values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL<code>&ge;</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|boolean
name|ge
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/** SQL<code>&ge;</code> operator applied to Object values (at least one    * operand has ANY type; neither may be null). */
specifier|public
specifier|static
name|boolean
name|geAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|b1
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|b0
operator|instanceof
name|Comparable
condition|)
block|{
comment|//noinspection unchecked
return|return
operator|(
operator|(
name|Comparable
operator|)
name|b0
operator|)
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>=
literal|0
return|;
block|}
if|else if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|ge
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notComparable
argument_list|(
literal|">="
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
comment|// +
comment|/** SQL<code>+</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|+
name|b1
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|+
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|plus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|+
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|plus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|add
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>+</code> operator applied to Object values (at least one operand    * has ANY type; either may be null). */
specifier|public
specifier|static
name|Object
name|plusAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|plus
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notArithmetic
argument_list|(
literal|"+"
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
comment|// -
comment|/** SQL<code>-</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|-
name|b1
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|-
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|minus
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|-
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|minus
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|subtract
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>-</code> operator applied to Object values (at least one operand    * has ANY type; either may be null). */
specifier|public
specifier|static
name|Object
name|minusAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|minus
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notArithmetic
argument_list|(
literal|"-"
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
comment|// /
comment|/** SQL<code>/</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|/
name|b1
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|/
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|divide
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|/
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|divide
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|divide
argument_list|(
name|b1
argument_list|,
name|MathContext
operator|.
name|DECIMAL64
argument_list|)
return|;
block|}
comment|/** SQL<code>/</code> operator applied to Object values (at least one operand    * has ANY type; either may be null). */
specifier|public
specifier|static
name|Object
name|divideAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|divide
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notArithmetic
argument_list|(
literal|"/"
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|int
name|divide
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
operator|.
name|divide
argument_list|(
name|b1
argument_list|,
name|RoundingMode
operator|.
name|HALF_DOWN
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|divide
parameter_list|(
name|long
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
operator|.
name|divide
argument_list|(
name|b1
argument_list|,
name|RoundingMode
operator|.
name|HALF_DOWN
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|// *
comment|/** SQL<code>*</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|*
name|b1
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; left side may be    * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to int values; right side may be    * null. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|int
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
name|b1
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int values. */
specifier|public
specifier|static
name|Integer
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|*
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable long and int values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Long
name|b0
parameter_list|,
name|Integer
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to nullable int and long values. */
specifier|public
specifier|static
name|Long
name|multiply
parameter_list|(
name|Integer
name|b0
parameter_list|,
name|Long
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
name|b0
operator|.
name|longValue
argument_list|()
operator|*
name|b1
operator|.
name|longValue
argument_list|()
operator|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|multiply
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
operator|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|b0
operator|.
name|multiply
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>*</code> operator applied to Object values (at least one operand    * has ANY type; either may be null). */
specifier|public
specifier|static
name|Object
name|multiplyAny
parameter_list|(
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|==
literal|null
operator|||
name|b1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|allAssignable
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
condition|)
block|{
return|return
name|multiply
argument_list|(
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b0
argument_list|)
argument_list|,
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|b1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|notArithmetic
argument_list|(
literal|"*"
argument_list|,
name|b0
argument_list|,
name|b1
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|RuntimeException
name|notArithmetic
parameter_list|(
name|String
name|op
parameter_list|,
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
name|RESOURCE
operator|.
name|invalidTypesForArithmetic
argument_list|(
name|b0
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|op
argument_list|,
name|b1
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|RuntimeException
name|notComparable
parameter_list|(
name|String
name|op
parameter_list|,
name|Object
name|b0
parameter_list|,
name|Object
name|b1
parameter_list|)
block|{
return|return
name|RESOURCE
operator|.
name|invalidTypesForComparison
argument_list|(
name|b0
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|op
argument_list|,
name|b1
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
return|;
block|}
comment|/** Bitwise function<code>BIT_AND</code> applied to integer values. */
specifier|public
specifier|static
name|long
name|bitAnd
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|&
name|b1
return|;
block|}
comment|/** Bitwise function<code>BIT_AND</code> applied to binary values. */
specifier|public
specifier|static
name|ByteString
name|bitAnd
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|binaryOperator
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|,
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
lambda|->
operator|(
name|byte
operator|)
operator|(
name|x
operator|&
name|y
operator|)
argument_list|)
return|;
block|}
comment|/** Bitwise function<code>BIT_OR</code> applied to integer values. */
specifier|public
specifier|static
name|long
name|bitOr
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator||
name|b1
return|;
block|}
comment|/** Bitwise function<code>BIT_OR</code> applied to binary values. */
specifier|public
specifier|static
name|ByteString
name|bitOr
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|binaryOperator
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|,
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
lambda|->
operator|(
name|byte
operator|)
operator|(
name|x
operator||
name|y
operator|)
argument_list|)
return|;
block|}
comment|/** Bitwise function<code>BIT_XOR</code> applied to integer values. */
specifier|public
specifier|static
name|long
name|bitXor
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|^
name|b1
return|;
block|}
comment|/** Bitwise function<code>BIT_XOR</code> applied to binary values. */
specifier|public
specifier|static
name|ByteString
name|bitXor
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|)
block|{
return|return
name|binaryOperator
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|,
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
lambda|->
operator|(
name|byte
operator|)
operator|(
name|x
operator|^
name|y
operator|)
argument_list|)
return|;
block|}
comment|/**    * Utility for bitwise function applied to two byteString values.    *    * @param b0 The first byteString value operand of bitwise function.    * @param b1 The second byteString value operand of bitwise function.    * @param bitOp BitWise binary operator.    * @return ByteString after bitwise operation.    */
specifier|private
specifier|static
name|ByteString
name|binaryOperator
parameter_list|(
name|ByteString
name|b0
parameter_list|,
name|ByteString
name|b1
parameter_list|,
name|BinaryOperator
argument_list|<
name|Byte
argument_list|>
name|bitOp
parameter_list|)
block|{
if|if
condition|(
name|b0
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|b1
return|;
block|}
if|if
condition|(
name|b1
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|b0
return|;
block|}
if|if
condition|(
name|b0
operator|.
name|length
argument_list|()
operator|!=
name|b1
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|differentLengthForBitwiseOperands
argument_list|(
name|b0
operator|.
name|length
argument_list|()
argument_list|,
name|b1
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
specifier|final
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|b0
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b0
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|bitOp
operator|.
name|apply
argument_list|(
name|b0
operator|.
name|byteAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|b1
operator|.
name|byteAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ByteString
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|// EXP
comment|/** SQL<code>EXP</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|exp
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|exp
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// POWER
comment|/** SQL<code>POWER</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|double
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|b1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|power
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|b1
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// LN
comment|/** SQL {@code LN(number)} function applied to double values. */
specifier|public
specifier|static
name|double
name|ln
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/** SQL {@code LN(number)} function applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|ln
parameter_list|(
name|BigDecimal
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|d
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// LOG10
comment|/** SQL<code>LOG10(numeric)</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|log10
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL {@code LOG10(number)} function applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|log10
parameter_list|(
name|BigDecimal
name|d
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|d
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|// MOD
comment|/** SQL<code>MOD</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|mod
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
operator|(
name|b0
operator|%
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>MOD</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|mod
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
operator|(
name|b0
operator|%
name|b1
operator|)
return|;
block|}
comment|/** SQL<code>MOD</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|mod
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|%
name|b1
return|;
block|}
comment|/** SQL<code>MOD</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|mod
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|%
name|b1
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|mod
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|mod
argument_list|(
name|b0
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|mod
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|mod
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
argument_list|,
name|b1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|mod
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
specifier|final
name|BigDecimal
index|[]
name|bigDecimals
init|=
name|b0
operator|.
name|divideAndRemainder
argument_list|(
name|b1
argument_list|)
decl_stmt|;
return|return
name|bigDecimals
index|[
literal|1
index|]
return|;
block|}
comment|// FLOOR
specifier|public
specifier|static
name|double
name|floor
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|floor
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|floor
parameter_list|(
name|float
name|b0
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|floor
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|b0
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|RoundingMode
operator|.
name|FLOOR
argument_list|)
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|floor
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|floor
argument_list|(
operator|(
name|int
operator|)
name|b0
argument_list|,
operator|(
name|int
operator|)
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|floor
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|floor
argument_list|(
operator|(
name|int
operator|)
name|b0
argument_list|,
operator|(
name|int
operator|)
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|floor
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
name|int
name|r
init|=
name|b0
operator|%
name|b1
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|r
operator|+=
name|b1
expr_stmt|;
block|}
return|return
name|b0
operator|-
name|r
return|;
block|}
comment|/** SQL<code>FLOOR</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|floor
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
name|long
name|r
init|=
name|b0
operator|%
name|b1
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|r
operator|+=
name|b1
expr_stmt|;
block|}
return|return
name|b0
operator|-
name|r
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|floor
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
name|b0
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|int
name|floor
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|floor
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
specifier|final
name|BigDecimal
index|[]
name|bigDecimals
init|=
name|b0
operator|.
name|divideAndRemainder
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|BigDecimal
name|r
init|=
name|bigDecimals
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|signum
argument_list|()
operator|<
literal|0
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|add
argument_list|(
name|b1
argument_list|)
expr_stmt|;
block|}
return|return
name|b0
operator|.
name|subtract
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|// CEIL
specifier|public
specifier|static
name|double
name|ceil
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|ceil
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|ceil
parameter_list|(
name|float
name|b0
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|ceil
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|b0
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|RoundingMode
operator|.
name|CEILING
argument_list|)
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|ceil
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|b0
operator|+
name|b1
operator|-
literal|1
operator|)
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|ceil
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
operator|(
name|short
operator|)
operator|(
name|b0
operator|+
name|b1
operator|-
literal|1
operator|)
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|ceil
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
name|int
name|r
init|=
name|b0
operator|%
name|b1
decl_stmt|;
if|if
condition|(
name|r
operator|>
literal|0
condition|)
block|{
name|r
operator|-=
name|b1
expr_stmt|;
block|}
return|return
name|b0
operator|-
name|r
return|;
block|}
comment|/** SQL<code>CEIL</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|ceil
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|floor
argument_list|(
name|b0
operator|+
name|b1
operator|-
literal|1
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|BigDecimal
name|ceil
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|ceil
argument_list|(
name|b0
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b1
argument_list|)
argument_list|)
return|;
block|}
comment|// temporary
specifier|public
specifier|static
name|int
name|ceil
parameter_list|(
name|int
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|ceil
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|ceil
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
specifier|final
name|BigDecimal
index|[]
name|bigDecimals
init|=
name|b0
operator|.
name|divideAndRemainder
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|BigDecimal
name|r
init|=
name|bigDecimals
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|signum
argument_list|()
operator|>
literal|0
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|subtract
argument_list|(
name|b1
argument_list|)
expr_stmt|;
block|}
return|return
name|b0
operator|.
name|subtract
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|// ABS
comment|/** SQL<code>ABS</code> operator applied to byte values. */
specifier|public
specifier|static
name|byte
name|abs
parameter_list|(
name|byte
name|b0
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to short values. */
specifier|public
specifier|static
name|short
name|abs
parameter_list|(
name|short
name|b0
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|abs
parameter_list|(
name|int
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|abs
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to float values. */
specifier|public
specifier|static
name|float
name|abs
parameter_list|(
name|float
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|abs
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>ABS</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|abs
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|b0
operator|.
name|abs
argument_list|()
return|;
block|}
comment|// ACOS
comment|/** SQL<code>ACOS</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|acos
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|acos
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>ACOS</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|acos
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|acos
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// ASIN
comment|/** SQL<code>ASIN</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|asin
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|asin
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>ASIN</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|asin
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|asin
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// ATAN
comment|/** SQL<code>ATAN</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|atan
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>ATAN</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|atan
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// ATAN2
comment|/** SQL<code>ATAN2</code> operator applied to double/BigDecimal values. */
specifier|public
specifier|static
name|double
name|atan2
parameter_list|(
name|double
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|b0
argument_list|,
name|b1
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>ATAN2</code> operator applied to BigDecimal/double values. */
specifier|public
specifier|static
name|double
name|atan2
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>ATAN2</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|atan2
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|BigDecimal
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|b1
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>ATAN2</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|atan2
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|// CBRT
comment|/** SQL<code>CBRT</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|cbrt
parameter_list|(
name|BigDecimal
name|b
parameter_list|)
block|{
return|return
name|cbrt
argument_list|(
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>CBRT</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|cbrt
parameter_list|(
name|double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cbrt
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|// COS
comment|/** SQL<code>COS</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|cos
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cos
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>COS</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|cos
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cos
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// COSH
comment|/** SQL<code>COSH</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|cosh
parameter_list|(
name|BigDecimal
name|b
parameter_list|)
block|{
return|return
name|cosh
argument_list|(
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>COSH</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|cosh
parameter_list|(
name|double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cosh
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|// COT
comment|/** SQL<code>COT</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|cot
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
literal|1.0d
operator|/
name|Math
operator|.
name|tan
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>COT</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|cot
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
literal|1.0d
operator|/
name|Math
operator|.
name|tan
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// DEGREES
comment|/** SQL<code>DEGREES</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|degrees
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toDegrees
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>DEGREES</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|degrees
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toDegrees
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// RADIANS
comment|/** SQL<code>RADIANS</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|radians
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toRadians
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>RADIANS</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|radians
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|toRadians
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// SQL ROUND
comment|/** SQL<code>ROUND</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|sround
parameter_list|(
name|int
name|b0
parameter_list|)
block|{
return|return
name|sround
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/** SQL<code>ROUND</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|sround
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|sround
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
argument_list|,
name|b1
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/** SQL<code>ROUND</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|sround
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|sround
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/** SQL<code>ROUND</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|sround
parameter_list|(
name|long
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|sround
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
argument_list|,
name|b1
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/** SQL<code>ROUND</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|sround
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|sround
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/** SQL<code>ROUND</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|sround
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|movePointRight
argument_list|(
name|b1
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
operator|.
name|movePointLeft
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>ROUND</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|sround
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|sround
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/** SQL<code>ROUND</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|sround
parameter_list|(
name|double
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|sround
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
argument_list|,
name|b1
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|// SQL TRUNCATE
comment|/** SQL<code>TRUNCATE</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|struncate
parameter_list|(
name|int
name|b0
parameter_list|)
block|{
return|return
name|struncate
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|struncate
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|struncate
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
argument_list|,
name|b1
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/** SQL<code>TRUNCATE</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|struncate
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|struncate
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|struncate
parameter_list|(
name|long
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|struncate
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
argument_list|,
name|b1
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/** SQL<code>TRUNCATE</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|struncate
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|struncate
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|struncate
parameter_list|(
name|BigDecimal
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|.
name|movePointRight
argument_list|(
name|b1
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|RoundingMode
operator|.
name|DOWN
argument_list|)
operator|.
name|movePointLeft
argument_list|(
name|b1
argument_list|)
return|;
block|}
comment|/** SQL<code>TRUNCATE</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|struncate
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|struncate
argument_list|(
name|b0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|struncate
parameter_list|(
name|double
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|struncate
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
argument_list|)
argument_list|,
name|b1
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|// SIGN
comment|/** SQL<code>SIGN</code> operator applied to int values. */
specifier|public
specifier|static
name|int
name|sign
parameter_list|(
name|int
name|b0
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|signum
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>SIGN</code> operator applied to long values. */
specifier|public
specifier|static
name|long
name|sign
parameter_list|(
name|long
name|b0
parameter_list|)
block|{
return|return
name|Long
operator|.
name|signum
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|/** SQL<code>SIGN</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|BigDecimal
name|sign
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|b0
operator|.
name|signum
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>SIGN</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|sign
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|signum
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// SIN
comment|/** SQL<code>SIN</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|sin
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sin
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>SIN</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|sin
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sin
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// SINH
comment|/** SQL<code>SINH</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|sinh
parameter_list|(
name|BigDecimal
name|b
parameter_list|)
block|{
return|return
name|sinh
argument_list|(
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>SINH</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|sinh
parameter_list|(
name|double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sinh
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|// TAN
comment|/** SQL<code>TAN</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|tan
parameter_list|(
name|BigDecimal
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|tan
argument_list|(
name|b0
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>TAN</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|tan
parameter_list|(
name|double
name|b0
parameter_list|)
block|{
return|return
name|Math
operator|.
name|tan
argument_list|(
name|b0
argument_list|)
return|;
block|}
comment|// TANH
comment|/** SQL<code>TANH</code> operator applied to BigDecimal values. */
specifier|public
specifier|static
name|double
name|tanh
parameter_list|(
name|BigDecimal
name|b
parameter_list|)
block|{
return|return
name|tanh
argument_list|(
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** SQL<code>TANH</code> operator applied to double values. */
specifier|public
specifier|static
name|double
name|tanh
parameter_list|(
name|double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|tanh
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|// Helpers
comment|/** Helper for implementing MIN. Somewhat similar to LEAST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|lesser
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** LEAST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|least
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b1
operator|!=
literal|null
operator|&&
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|>
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|greater
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|||
name|b1
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lesser
parameter_list|(
name|boolean
name|b0
parameter_list|,
name|boolean
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|&&
name|b1
return|;
block|}
specifier|public
specifier|static
name|byte
name|greater
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|byte
name|lesser
parameter_list|(
name|byte
name|b0
parameter_list|,
name|byte
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|char
name|greater
parameter_list|(
name|char
name|b0
parameter_list|,
name|char
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|char
name|lesser
parameter_list|(
name|char
name|b0
parameter_list|,
name|char
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|short
name|greater
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|short
name|lesser
parameter_list|(
name|short
name|b0
parameter_list|,
name|short
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|int
name|greater
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|int
name|lesser
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|long
name|greater
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|long
name|lesser
parameter_list|(
name|long
name|b0
parameter_list|,
name|long
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|float
name|greater
parameter_list|(
name|float
name|b0
parameter_list|,
name|float
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|float
name|lesser
parameter_list|(
name|float
name|b0
parameter_list|,
name|float
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
specifier|public
specifier|static
name|double
name|greater
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b0
else|:
name|b1
return|;
block|}
specifier|public
specifier|static
name|double
name|lesser
parameter_list|(
name|double
name|b0
parameter_list|,
name|double
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|>
name|b1
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** Helper for implementing MAX. Somewhat similar to GREATEST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|greater
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** GREATEST operator. */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|greatest
parameter_list|(
name|T
name|b0
parameter_list|,
name|T
name|b1
parameter_list|)
block|{
return|return
name|b0
operator|==
literal|null
operator|||
name|b1
operator|!=
literal|null
operator|&&
name|b0
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|)
operator|<
literal|0
condition|?
name|b1
else|:
name|b0
return|;
block|}
comment|/** Boolean comparison. */
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|boolean
name|x
parameter_list|,
name|boolean
name|y
parameter_list|)
block|{
return|return
name|x
operator|==
name|y
condition|?
literal|0
else|:
name|x
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
comment|/** CAST(FLOAT AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|float
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|"0E0"
return|;
block|}
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|x
argument_list|,
name|MathContext
operator|.
name|DECIMAL32
argument_list|)
operator|.
name|stripTrailingZeros
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|bigDecimal
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|PATTERN_0_STAR_E
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"E"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"E+"
argument_list|,
literal|"E"
argument_list|)
return|;
block|}
comment|/** CAST(DOUBLE AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|"0E0"
return|;
block|}
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|x
argument_list|,
name|MathContext
operator|.
name|DECIMAL64
argument_list|)
operator|.
name|stripTrailingZeros
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|bigDecimal
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|PATTERN_0_STAR_E
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"E"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"E+"
argument_list|,
literal|"E"
argument_list|)
return|;
block|}
comment|/** CAST(DECIMAL AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|BigDecimal
name|x
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|x
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"0."
argument_list|)
condition|)
block|{
comment|// we want ".1" not "0.1"
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"-0."
argument_list|)
condition|)
block|{
comment|// we want "-.1" not "-0.1"
return|return
literal|"-"
operator|+
name|s
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
comment|/** CAST(BOOLEAN AS VARCHAR). */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|boolean
name|x
parameter_list|)
block|{
comment|// Boolean.toString returns lower case -- no good.
return|return
name|x
condition|?
literal|"TRUE"
else|:
literal|"FALSE"
return|;
block|}
annotation|@
name|NonDeterministic
specifier|private
specifier|static
name|Object
name|cannotConvert
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
name|toType
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|cannotConvert
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
argument_list|,
name|toType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
comment|/** CAST(VARCHAR AS BOOLEAN). */
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|trim
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|" "
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
name|RESOURCE
operator|.
name|invalidCharacterForCast
argument_list|(
name|s
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
operator|!
name|number
operator|.
name|equals
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Boolean
condition|?
operator|(
name|Boolean
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toBoolean
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toBoolean
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Boolean
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Don't need parseByte etc. - Byte.parseByte is sufficient.
specifier|public
specifier|static
name|byte
name|toByte
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Byte
condition|?
operator|(
name|Byte
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toByte
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|Byte
operator|.
name|parseByte
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
name|toByte
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|byteValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|char
name|toChar
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Character
name|toCharBoxed
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Short
operator|.
name|parseShort
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|shortValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Short
condition|?
operator|(
name|Short
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toShort
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toShort
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Short
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|short
operator|.
name|class
argument_list|)
return|;
block|}
comment|/** Converts the Java type used for UDF parameters of SQL DATE type    * ({@link java.sql.Date}) to internal representation (int).    *    *<p>Converse of {@link #internalToDate(int)}. */
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|)
block|{
return|return
name|toInt
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|toLong
argument_list|(
name|v
argument_list|,
name|timeZone
argument_list|)
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toIntOptional
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toInt
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toIntOptional
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toInt
argument_list|(
name|v
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Date
name|v
parameter_list|)
block|{
return|return
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
comment|/** Converts the Java type used for UDF parameters of SQL TIME type    * ({@link java.sql.Time}) to internal representation (int).    *    *<p>Converse of {@link #internalToTime(int)}. */
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Time
name|v
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|toLong
argument_list|(
name|v
argument_list|)
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toIntOptional
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Time
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toInt
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Integer
condition|?
operator|(
name|Integer
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toInt
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toInt
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
condition|?
name|toInt
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|o
argument_list|)
else|:
operator|(
name|Integer
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|int
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toIntOptional
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|toInt
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/** Converts the Java type used for UDF parameters of SQL TIMESTAMP type    * ({@link java.sql.Timestamp}) to internal representation (long).    *    *<p>Converse of {@link #internalToTimestamp(long)}. */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Timestamp
name|v
parameter_list|)
block|{
return|return
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
comment|// mainly intended for java.sql.Timestamp but works for other dates also
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
specifier|final
name|long
name|time
init|=
name|v
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|time
operator|+
name|timeZone
operator|.
name|getOffset
argument_list|(
name|time
argument_list|)
return|;
block|}
comment|// mainly intended for java.sql.Timestamp but works for other dates also
specifier|public
specifier|static
name|Long
name|toLongOptional
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Long
name|toLongOptional
parameter_list|(
name|Timestamp
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|toLong
argument_list|(
name|v
argument_list|,
name|LOCAL_TZ
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"199"
argument_list|)
operator|&&
name|s
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Long
condition|?
operator|(
name|Long
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toLong
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toLong
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
condition|?
name|toLong
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|o
argument_list|)
else|:
operator|(
name|Long
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|long
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Long
name|toLongOptional
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|toLong
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|floatValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Float
condition|?
operator|(
name|Float
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toFloat
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toFloat
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Float
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|float
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Double
condition|?
operator|(
name|Double
operator|)
name|o
else|:
name|o
operator|instanceof
name|Number
condition|?
name|toDouble
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|o
operator|instanceof
name|String
condition|?
name|toDouble
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
operator|(
name|Double
operator|)
name|cannotConvert
argument_list|(
name|o
argument_list|,
name|double
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
comment|// There are some values of "long" that cannot be represented as "double".
comment|// Not so "int". If it isn't a long, go straight to double.
return|return
name|number
operator|instanceof
name|BigDecimal
condition|?
operator|(
name|BigDecimal
operator|)
name|number
else|:
name|number
operator|instanceof
name|BigInteger
condition|?
operator|new
name|BigDecimal
argument_list|(
operator|(
name|BigInteger
operator|)
name|number
argument_list|)
else|:
name|number
operator|instanceof
name|Long
condition|?
operator|new
name|BigDecimal
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
else|:
operator|new
name|BigDecimal
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Number
condition|?
name|toBigDecimal
argument_list|(
operator|(
name|Number
operator|)
name|o
argument_list|)
else|:
name|toBigDecimal
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Converts the internal representation of a SQL DATE (int) to the Java    * type used for UDF parameters ({@link java.sql.Date}). */
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Date
name|internalToDate
parameter_list|(
name|int
name|v
parameter_list|)
block|{
specifier|final
name|long
name|t
init|=
name|v
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
decl_stmt|;
return|return
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|t
operator|-
name|LOCAL_TZ
operator|.
name|getOffset
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
comment|/** As {@link #internalToDate(int)} but allows nulls. */
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Date
name|internalToDate
parameter_list|(
name|Integer
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|internalToDate
argument_list|(
name|v
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Converts the internal representation of a SQL TIME (int) to the Java    * type used for UDF parameters ({@link java.sql.Time}). */
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Time
name|internalToTime
parameter_list|(
name|int
name|v
parameter_list|)
block|{
return|return
operator|new
name|java
operator|.
name|sql
operator|.
name|Time
argument_list|(
name|v
operator|-
name|LOCAL_TZ
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Time
name|internalToTime
parameter_list|(
name|Integer
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|internalToTime
argument_list|(
name|v
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toTimeWithLocalTimeZone
parameter_list|(
name|String
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TimeWithTimeZoneString
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
operator|.
name|getLocalTimeString
argument_list|()
operator|.
name|getMillisOfDay
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Integer
name|toTimeWithLocalTimeZone
parameter_list|(
name|String
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TimeWithTimeZoneString
argument_list|(
name|v
operator|+
literal|" "
operator|+
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
operator|.
name|getLocalTimeString
argument_list|()
operator|.
name|getMillisOfDay
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|timeWithLocalTimeZoneToTime
parameter_list|(
name|int
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|TimeWithTimeZoneString
operator|.
name|fromMillisOfDay
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|timeZone
argument_list|)
operator|.
name|getLocalTimeString
argument_list|()
operator|.
name|getMillisOfDay
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|timeWithLocalTimeZoneToTimestamp
parameter_list|(
name|String
name|date
parameter_list|,
name|int
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
specifier|final
name|TimeWithTimeZoneString
name|tTZ
init|=
name|TimeWithTimeZoneString
operator|.
name|fromMillisOfDay
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimestampWithTimeZoneString
argument_list|(
name|date
operator|+
literal|" "
operator|+
name|tTZ
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|timeZone
argument_list|)
operator|.
name|getLocalTimestampString
argument_list|()
operator|.
name|getMillisSinceEpoch
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|timeWithLocalTimeZoneToTimestampWithLocalTimeZone
parameter_list|(
name|String
name|date
parameter_list|,
name|int
name|v
parameter_list|)
block|{
specifier|final
name|TimeWithTimeZoneString
name|tTZ
init|=
name|TimeWithTimeZoneString
operator|.
name|fromMillisOfDay
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimestampWithTimeZoneString
argument_list|(
name|date
operator|+
literal|" "
operator|+
name|tTZ
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLocalTimestampString
argument_list|()
operator|.
name|getMillisSinceEpoch
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|timeWithLocalTimeZoneToString
parameter_list|(
name|int
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|TimeWithTimeZoneString
operator|.
name|fromMillisOfDay
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|timeZone
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Converts the internal representation of a SQL TIMESTAMP (long) to the Java    * type used for UDF parameters ({@link java.sql.Timestamp}). */
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|internalToTimestamp
parameter_list|(
name|long
name|v
parameter_list|)
block|{
return|return
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|v
operator|-
name|LOCAL_TZ
operator|.
name|getOffset
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|internalToTimestamp
parameter_list|(
name|Long
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|internalToTimestamp
argument_list|(
name|v
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|timestampWithLocalTimeZoneToDate
parameter_list|(
name|long
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|TimestampWithTimeZoneString
operator|.
name|fromMillisSinceEpoch
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|timeZone
argument_list|)
operator|.
name|getLocalDateString
argument_list|()
operator|.
name|getDaysSinceEpoch
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|timestampWithLocalTimeZoneToTime
parameter_list|(
name|long
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|TimestampWithTimeZoneString
operator|.
name|fromMillisSinceEpoch
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|timeZone
argument_list|)
operator|.
name|getLocalTimeString
argument_list|()
operator|.
name|getMillisOfDay
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|timestampWithLocalTimeZoneToTimestamp
parameter_list|(
name|long
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|TimestampWithTimeZoneString
operator|.
name|fromMillisSinceEpoch
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|timeZone
argument_list|)
operator|.
name|getLocalTimestampString
argument_list|()
operator|.
name|getMillisSinceEpoch
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|timestampWithLocalTimeZoneToString
parameter_list|(
name|long
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|TimestampWithTimeZoneString
operator|.
name|fromMillisSinceEpoch
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|timeZone
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|timestampWithLocalTimeZoneToTimeWithLocalTimeZone
parameter_list|(
name|long
name|v
parameter_list|)
block|{
return|return
name|TimestampWithTimeZoneString
operator|.
name|fromMillisSinceEpoch
argument_list|(
name|v
argument_list|)
operator|.
name|getLocalTimeString
argument_list|()
operator|.
name|getMillisOfDay
argument_list|()
return|;
block|}
comment|/** For {@link SqlLibraryOperators#TIMESTAMP_SECONDS}. */
specifier|public
specifier|static
name|long
name|timestampSeconds
parameter_list|(
name|long
name|v
parameter_list|)
block|{
return|return
name|v
operator|*
literal|1000
return|;
block|}
comment|/** For {@link SqlLibraryOperators#TIMESTAMP_MILLIS}. */
specifier|public
specifier|static
name|long
name|timestampMillis
parameter_list|(
name|long
name|v
parameter_list|)
block|{
comment|// translation is trivial, because Calcite represents TIMESTAMP values as
comment|// millis since epoch
return|return
name|v
return|;
block|}
comment|/** For {@link SqlLibraryOperators#TIMESTAMP_MICROS}. */
specifier|public
specifier|static
name|long
name|timestampMicros
parameter_list|(
name|long
name|v
parameter_list|)
block|{
return|return
name|v
operator|/
literal|1000
return|;
block|}
comment|/** For {@link SqlLibraryOperators#UNIX_SECONDS}. */
specifier|public
specifier|static
name|long
name|unixSeconds
parameter_list|(
name|long
name|v
parameter_list|)
block|{
return|return
name|v
operator|/
literal|1000
return|;
block|}
comment|/** For {@link SqlLibraryOperators#UNIX_MILLIS}. */
specifier|public
specifier|static
name|long
name|unixMillis
parameter_list|(
name|long
name|v
parameter_list|)
block|{
comment|// translation is trivial, because Calcite represents TIMESTAMP values as
comment|// millis since epoch
return|return
name|v
return|;
block|}
comment|/** For {@link SqlLibraryOperators#UNIX_MICROS}. */
specifier|public
specifier|static
name|long
name|unixMicros
parameter_list|(
name|long
name|v
parameter_list|)
block|{
return|return
name|v
operator|*
literal|1000
return|;
block|}
comment|/** For {@link SqlLibraryOperators#DATE_FROM_UNIX_DATE}. */
specifier|public
specifier|static
name|int
name|dateFromUnixDate
parameter_list|(
name|int
name|v
parameter_list|)
block|{
comment|// translation is trivial, because Calcite represents dates as Unix integers
return|return
name|v
return|;
block|}
comment|/** For {@link SqlLibraryOperators#UNIX_DATE}. */
specifier|public
specifier|static
name|int
name|unixDate
parameter_list|(
name|int
name|v
parameter_list|)
block|{
comment|// translation is trivial, because Calcite represents dates as Unix integers
return|return
name|v
return|;
block|}
specifier|public
specifier|static
name|Long
name|toTimestampWithLocalTimeZone
parameter_list|(
name|String
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TimestampWithTimeZoneString
argument_list|(
name|v
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
operator|.
name|getLocalTimestampString
argument_list|()
operator|.
name|getMillisSinceEpoch
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Long
name|toTimestampWithLocalTimeZone
parameter_list|(
name|String
name|v
parameter_list|,
name|TimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TimestampWithTimeZoneString
argument_list|(
name|v
operator|+
literal|" "
operator|+
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|withTimeZone
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
operator|.
name|getLocalTimestampString
argument_list|()
operator|.
name|getMillisSinceEpoch
argument_list|()
return|;
block|}
comment|// Don't need shortValueOf etc. - Short.valueOf is sufficient.
comment|/** Helper for CAST(... AS VARCHAR(maxLength)). */
specifier|public
specifier|static
name|String
name|truncate
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|maxLength
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
comment|/** Helper for CAST(... AS CHAR(maxLength)). */
specifier|public
specifier|static
name|String
name|truncateOrPad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|int
name|length
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|maxLength
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|length
operator|<
name|maxLength
condition|?
name|Spaces
operator|.
name|padRight
argument_list|(
name|s
argument_list|,
name|maxLength
argument_list|)
else|:
name|s
return|;
block|}
block|}
block|}
comment|/** Helper for CAST(... AS VARBINARY(maxLength)). */
specifier|public
specifier|static
name|ByteString
name|truncate
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|maxLength
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
comment|/** Helper for CAST(... AS BINARY(maxLength)). */
specifier|public
specifier|static
name|ByteString
name|truncateOrPad
parameter_list|(
name|ByteString
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|int
name|length
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|maxLength
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
if|else if
condition|(
name|length
operator|<
name|maxLength
condition|)
block|{
return|return
name|s
operator|.
name|concat
argument_list|(
operator|new
name|ByteString
argument_list|(
operator|new
name|byte
index|[
name|maxLength
operator|-
name|length
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
block|}
comment|/** SQL {@code POSITION(seek IN string)} function. */
specifier|public
specifier|static
name|int
name|position
parameter_list|(
name|String
name|seek
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|indexOf
argument_list|(
name|seek
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** SQL {@code POSITION(seek IN string)} function for byte strings. */
specifier|public
specifier|static
name|int
name|position
parameter_list|(
name|ByteString
name|seek
parameter_list|,
name|ByteString
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|indexOf
argument_list|(
name|seek
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** SQL {@code POSITION(seek IN string FROM integer)} function. */
specifier|public
specifier|static
name|int
name|position
parameter_list|(
name|String
name|seek
parameter_list|,
name|String
name|s
parameter_list|,
name|int
name|from
parameter_list|)
block|{
specifier|final
name|int
name|from0
init|=
name|from
operator|-
literal|1
decl_stmt|;
comment|// 0-based
if|if
condition|(
name|from0
operator|>
name|s
operator|.
name|length
argument_list|()
operator|||
name|from0
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|s
operator|.
name|indexOf
argument_list|(
name|seek
argument_list|,
name|from0
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** SQL {@code POSITION(seek IN string FROM integer)} function for byte    * strings. */
specifier|public
specifier|static
name|int
name|position
parameter_list|(
name|ByteString
name|seek
parameter_list|,
name|ByteString
name|s
parameter_list|,
name|int
name|from
parameter_list|)
block|{
specifier|final
name|int
name|from0
init|=
name|from
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|from0
operator|>
name|s
operator|.
name|length
argument_list|()
operator|||
name|from0
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|s
operator|.
name|indexOf
argument_list|(
name|seek
argument_list|,
name|from0
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|long
name|round
parameter_list|(
name|long
name|v
parameter_list|,
name|long
name|x
parameter_list|)
block|{
return|return
name|truncate
argument_list|(
name|v
operator|+
name|x
operator|/
literal|2
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|long
name|truncate
parameter_list|(
name|long
name|v
parameter_list|,
name|long
name|x
parameter_list|)
block|{
name|long
name|remainder
init|=
name|v
operator|%
name|x
decl_stmt|;
if|if
condition|(
name|remainder
operator|<
literal|0
condition|)
block|{
name|remainder
operator|+=
name|x
expr_stmt|;
block|}
return|return
name|v
operator|-
name|remainder
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|int
name|round
parameter_list|(
name|int
name|v
parameter_list|,
name|int
name|x
parameter_list|)
block|{
return|return
name|truncate
argument_list|(
name|v
operator|+
name|x
operator|/
literal|2
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|/** Helper for rounding. Truncate(12345, 1000) returns 12000. */
specifier|public
specifier|static
name|int
name|truncate
parameter_list|(
name|int
name|v
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|int
name|remainder
init|=
name|v
operator|%
name|x
decl_stmt|;
if|if
condition|(
name|remainder
operator|<
literal|0
condition|)
block|{
name|remainder
operator|+=
name|x
expr_stmt|;
block|}
return|return
name|v
operator|-
name|remainder
return|;
block|}
comment|/**    * SQL {@code LAST_DAY} function.    *    * @param date days since epoch    * @return days of the last day of the month since epoch    */
specifier|public
specifier|static
name|int
name|lastDay
parameter_list|(
name|int
name|date
parameter_list|)
block|{
name|int
name|y0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|m0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|last
init|=
name|lastDay
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|)
decl_stmt|;
return|return
name|DateTimeUtils
operator|.
name|ymdToUnixDate
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|,
name|last
argument_list|)
return|;
block|}
comment|/**    * SQL {@code LAST_DAY} function.    *    * @param timestamp milliseconds from epoch    * @return milliseconds of the last day of the month since epoch    */
specifier|public
specifier|static
name|int
name|lastDay
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|int
name|date
init|=
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
name|int
name|y0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|m0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|last
init|=
name|lastDay
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|)
decl_stmt|;
return|return
name|DateTimeUtils
operator|.
name|ymdToUnixDate
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|,
name|last
argument_list|)
return|;
block|}
comment|/**    * SQL {@code DAYNAME} function, applied to a TIMESTAMP argument.    *    * @param timestamp Milliseconds from epoch    * @param locale Locale    * @return Name of the weekday in the given locale    */
specifier|public
specifier|static
name|String
name|dayNameWithTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|timeStampToLocalDate
argument_list|(
name|timestamp
argument_list|)
operator|.
name|format
argument_list|(
name|ROOT_DAY_FORMAT
operator|.
name|withLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * SQL {@code DAYNAME} function, applied to a DATE argument.    *    * @param date Days since epoch    * @param locale Locale    * @return Name of the weekday in the given locale    */
specifier|public
specifier|static
name|String
name|dayNameWithDate
parameter_list|(
name|int
name|date
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|dateToLocalDate
argument_list|(
name|date
argument_list|)
operator|.
name|format
argument_list|(
name|ROOT_DAY_FORMAT
operator|.
name|withLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * SQL {@code MONTHNAME} function, applied to a TIMESTAMP argument.    *    * @param timestamp Milliseconds from epoch    * @param locale Locale    * @return Name of the month in the given locale    */
specifier|public
specifier|static
name|String
name|monthNameWithTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|timeStampToLocalDate
argument_list|(
name|timestamp
argument_list|)
operator|.
name|format
argument_list|(
name|ROOT_MONTH_FORMAT
operator|.
name|withLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * SQL {@code MONTHNAME} function, applied to a DATE argument.    *    * @param date Days from epoch    * @param locale Locale    * @return Name of the month in the given locale    */
specifier|public
specifier|static
name|String
name|monthNameWithDate
parameter_list|(
name|int
name|date
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|dateToLocalDate
argument_list|(
name|date
argument_list|)
operator|.
name|format
argument_list|(
name|ROOT_MONTH_FORMAT
operator|.
name|withLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Converts a date (days since epoch) to a {@link LocalDate}.    *    * @param date days since epoch    * @return localDate    */
specifier|private
specifier|static
name|LocalDate
name|dateToLocalDate
parameter_list|(
name|int
name|date
parameter_list|)
block|{
name|int
name|y0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|m0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|d0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|,
name|date
argument_list|)
decl_stmt|;
return|return
name|LocalDate
operator|.
name|of
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|,
name|d0
argument_list|)
return|;
block|}
comment|/**    * Converts a timestamp (milliseconds since epoch) to a {@link LocalDate}.    *    * @param timestamp milliseconds from epoch    * @return localDate    */
specifier|private
specifier|static
name|LocalDate
name|timeStampToLocalDate
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|int
name|date
init|=
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
return|return
name|dateToLocalDate
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/** SQL {@code CURRENT_TIMESTAMP} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|currentTimestamp
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
comment|// Cast required for JDK 1.6.
return|return
operator|(
name|Long
operator|)
name|DataContext
operator|.
name|Variable
operator|.
name|CURRENT_TIMESTAMP
operator|.
name|get
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/** SQL {@code CURRENT_TIME} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|int
name|currentTime
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
name|int
name|time
init|=
operator|(
name|int
operator|)
operator|(
name|currentTimestamp
argument_list|(
name|root
argument_list|)
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|<
literal|0
condition|)
block|{
name|time
operator|=
operator|(
name|int
operator|)
operator|(
name|time
operator|+
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
expr_stmt|;
block|}
return|return
name|time
return|;
block|}
comment|/** SQL {@code CURRENT_DATE} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|int
name|currentDate
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
specifier|final
name|long
name|timestamp
init|=
name|currentTimestamp
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|int
name|date
init|=
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
specifier|final
name|int
name|time
init|=
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|<
literal|0
condition|)
block|{
operator|--
name|date
expr_stmt|;
block|}
return|return
name|date
return|;
block|}
comment|/** SQL {@code LOCAL_TIMESTAMP} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|localTimestamp
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
comment|// Cast required for JDK 1.6.
return|return
operator|(
name|Long
operator|)
name|DataContext
operator|.
name|Variable
operator|.
name|LOCAL_TIMESTAMP
operator|.
name|get
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/** SQL {@code LOCAL_TIME} function. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|int
name|localTime
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|localTimestamp
argument_list|(
name|root
argument_list|)
operator|%
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
return|;
block|}
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|TimeZone
name|timeZone
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|(
name|TimeZone
operator|)
name|DataContext
operator|.
name|Variable
operator|.
name|TIME_ZONE
operator|.
name|get
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/** SQL {@code USER} function. */
annotation|@
name|Deterministic
specifier|public
specifier|static
name|String
name|user
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|DataContext
operator|.
name|Variable
operator|.
name|USER
operator|.
name|get
argument_list|(
name|root
argument_list|)
argument_list|)
return|;
block|}
comment|/** SQL {@code SYSTEM_USER} function. */
annotation|@
name|Deterministic
specifier|public
specifier|static
name|String
name|systemUser
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|DataContext
operator|.
name|Variable
operator|.
name|SYSTEM_USER
operator|.
name|get
argument_list|(
name|root
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|Locale
name|locale
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|(
name|Locale
operator|)
name|DataContext
operator|.
name|Variable
operator|.
name|LOCALE
operator|.
name|get
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/** SQL {@code TRANSLATE(string, search_chars, replacement_chars)}    * function. */
specifier|public
specifier|static
name|String
name|translate3
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|search
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|replaceChars
argument_list|(
name|s
argument_list|,
name|search
argument_list|,
name|replacement
argument_list|)
return|;
block|}
comment|/** SQL {@code REPLACE(string, search, replacement)} function. */
specifier|public
specifier|static
name|String
name|replace
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|search
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
return|return
name|s
operator|.
name|replace
argument_list|(
name|search
argument_list|,
name|replacement
argument_list|)
return|;
block|}
comment|/** Helper for "array element reference". Caller has already ensured that    * array and index are not null. Index is 1-based, per SQL. */
specifier|public
specifier|static
name|Object
name|arrayItem
parameter_list|(
name|List
name|list
parameter_list|,
name|int
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|<
literal|1
operator|||
name|item
operator|>
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|item
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** Helper for "map element reference". Caller has already ensured that    * array and index are not null. Index is 1-based, per SQL. */
specifier|public
specifier|static
name|Object
name|mapItem
parameter_list|(
name|Map
name|map
parameter_list|,
name|Object
name|item
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|item
argument_list|)
return|;
block|}
comment|/** Implements the {@code [ ... ]} operator on an object whose type is not    * known until runtime.    */
specifier|public
specifier|static
name|Object
name|item
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|index
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Map
condition|)
block|{
return|return
name|mapItem
argument_list|(
operator|(
name|Map
operator|)
name|object
argument_list|,
name|index
argument_list|)
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|List
operator|&&
name|index
operator|instanceof
name|Number
condition|)
block|{
return|return
name|arrayItem
argument_list|(
operator|(
name|List
operator|)
name|object
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|index
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|index
operator|instanceof
name|Number
condition|)
block|{
return|return
name|structAccess
argument_list|(
name|object
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|index
operator|)
operator|.
name|intValue
argument_list|()
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
comment|// 1 indexed
block|}
if|if
condition|(
name|index
operator|instanceof
name|String
condition|)
block|{
return|return
name|structAccess
argument_list|(
name|object
argument_list|,
operator|-
literal|1
argument_list|,
name|index
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** As {@link #arrayItem} method, but allows array to be nullable. */
specifier|public
specifier|static
name|Object
name|arrayItemOptional
parameter_list|(
name|List
name|list
parameter_list|,
name|int
name|item
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|arrayItem
argument_list|(
name|list
argument_list|,
name|item
argument_list|)
return|;
block|}
comment|/** As {@link #mapItem} method, but allows map to be nullable. */
specifier|public
specifier|static
name|Object
name|mapItemOptional
parameter_list|(
name|Map
name|map
parameter_list|,
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|mapItem
argument_list|(
name|map
argument_list|,
name|item
argument_list|)
return|;
block|}
comment|/** As {@link #item} method, but allows object to be nullable. */
specifier|public
specifier|static
name|Object
name|itemOptional
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|index
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|item
argument_list|(
name|object
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/** NULL&rarr; FALSE, FALSE&rarr; FALSE, TRUE&rarr; TRUE. */
specifier|public
specifier|static
name|boolean
name|isTrue
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|!=
literal|null
operator|&&
name|b
return|;
block|}
comment|/** NULL&rarr; FALSE, FALSE&rarr; TRUE, TRUE&rarr; FALSE. */
specifier|public
specifier|static
name|boolean
name|isFalse
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|!=
literal|null
operator|&&
operator|!
name|b
return|;
block|}
comment|/** NULL&rarr; TRUE, FALSE&rarr; TRUE, TRUE&rarr; FALSE. */
specifier|public
specifier|static
name|boolean
name|isNotTrue
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
operator|||
operator|!
name|b
return|;
block|}
comment|/** NULL&rarr; TRUE, FALSE&rarr; FALSE, TRUE&rarr; TRUE. */
specifier|public
specifier|static
name|boolean
name|isNotFalse
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
operator|||
name|b
return|;
block|}
comment|/** NULL&rarr; NULL, FALSE&rarr; TRUE, TRUE&rarr; FALSE. */
specifier|public
specifier|static
name|Boolean
name|not
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
operator|(
name|b
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|!
name|b
return|;
block|}
comment|/** Converts a JDBC array to a list. */
specifier|public
specifier|static
name|List
name|arrayToList
parameter_list|(
specifier|final
name|java
operator|.
name|sql
operator|.
name|Array
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|Primitive
operator|.
name|asList
argument_list|(
name|a
operator|.
name|getArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|toUnchecked
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Support the {@code CURRENT VALUE OF sequence} operator. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|sequenceCurrentValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getAtomicLong
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Support the {@code NEXT VALUE OF sequence} operator. */
annotation|@
name|NonDeterministic
specifier|public
specifier|static
name|long
name|sequenceNextValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getAtomicLong
argument_list|(
name|key
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|AtomicLong
name|getAtomicLong
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
name|map
init|=
name|THREAD_SEQUENCES
operator|.
name|get
argument_list|()
decl_stmt|;
name|AtomicLong
name|atomic
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomic
operator|==
literal|null
condition|)
block|{
name|atomic
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|atomic
argument_list|)
expr_stmt|;
block|}
return|return
name|atomic
return|;
block|}
comment|/** Support the SLICE function. */
specifier|public
specifier|static
name|List
name|slice
parameter_list|(
name|List
name|list
parameter_list|)
block|{
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|list
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|structAccess
argument_list|(
name|e
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** Support the ELEMENT function. */
specifier|public
specifier|static
name|Object
name|element
parameter_list|(
name|List
name|list
parameter_list|)
block|{
switch|switch
condition|(
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|null
return|;
case|case
literal|1
case|:
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
throw|throw
name|RESOURCE
operator|.
name|moreThanOneValueInList
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
comment|/** Support the MEMBER OF function. */
specifier|public
specifier|static
name|boolean
name|memberOf
parameter_list|(
name|Object
name|object
parameter_list|,
name|Collection
name|collection
parameter_list|)
block|{
return|return
name|collection
operator|.
name|contains
argument_list|(
name|object
argument_list|)
return|;
block|}
comment|/** Support the MULTISET INTERSECT DISTINCT function. */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|multisetIntersectDistinct
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|c1
parameter_list|,
name|Collection
argument_list|<
name|E
argument_list|>
name|c2
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|E
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|result
operator|.
name|retainAll
argument_list|(
name|c2
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/** Support the MULTISET INTERSECT ALL function. */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|multisetIntersectAll
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|c1
parameter_list|,
name|Collection
argument_list|<
name|E
argument_list|>
name|c2
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|c1
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|c2Copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|c2
argument_list|)
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|c1
control|)
block|{
if|if
condition|(
name|c2Copy
operator|.
name|remove
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** Support the MULTISET EXCEPT ALL function. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|multisetExceptAll
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|c1
parameter_list|,
name|Collection
argument_list|<
name|E
argument_list|>
name|c2
parameter_list|)
block|{
comment|// TOOD: use Multisets?
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|c1
argument_list|)
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|c2
control|)
block|{
name|result
operator|.
name|remove
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** Support the MULTISET EXCEPT DISTINCT function. */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|multisetExceptDistinct
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|c1
parameter_list|,
name|Collection
argument_list|<
name|E
argument_list|>
name|c2
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|E
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|result
operator|.
name|removeAll
argument_list|(
name|c2
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/** Support the IS A SET function. */
specifier|public
specifier|static
name|boolean
name|isASet
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|instanceof
name|Set
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// capacity calculation is in the same way like for new HashSet(Collection)
comment|// however return immediately in case of duplicates
name|Set
name|set
init|=
operator|new
name|HashSet
argument_list|(
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
operator|(
name|collection
operator|.
name|size
argument_list|()
operator|/
literal|.75f
operator|)
operator|+
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|collection
control|)
block|{
if|if
condition|(
operator|!
name|set
operator|.
name|add
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** Support the SUBMULTISET OF function. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
specifier|public
specifier|static
name|boolean
name|submultisetOf
parameter_list|(
name|Collection
name|possibleSubMultiset
parameter_list|,
name|Collection
name|multiset
parameter_list|)
block|{
if|if
condition|(
name|possibleSubMultiset
operator|.
name|size
argument_list|()
operator|>
name|multiset
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// TODO: use Multisets?
name|Collection
name|multisetLocal
init|=
operator|new
name|LinkedList
argument_list|(
name|multiset
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|e
range|:
name|possibleSubMultiset
control|)
block|{
if|if
condition|(
operator|!
name|multisetLocal
operator|.
name|remove
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** Support the MULTISET UNION function. */
specifier|public
specifier|static
name|Collection
name|multisetUnionDistinct
parameter_list|(
name|Collection
name|collection1
parameter_list|,
name|Collection
name|collection2
parameter_list|)
block|{
comment|// capacity calculation is in the same way like for new HashSet(Collection)
name|Set
name|resultCollection
init|=
operator|new
name|HashSet
argument_list|(
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
operator|(
operator|(
name|collection1
operator|.
name|size
argument_list|()
operator|+
name|collection2
operator|.
name|size
argument_list|()
operator|)
operator|/
literal|.75f
operator|)
operator|+
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|resultCollection
operator|.
name|addAll
argument_list|(
name|collection1
argument_list|)
expr_stmt|;
name|resultCollection
operator|.
name|addAll
argument_list|(
name|collection2
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|(
name|resultCollection
argument_list|)
return|;
block|}
comment|/** Support the MULTISET UNION ALL function. */
specifier|public
specifier|static
name|Collection
name|multisetUnionAll
parameter_list|(
name|Collection
name|collection1
parameter_list|,
name|Collection
name|collection2
parameter_list|)
block|{
name|List
name|resultCollection
init|=
operator|new
name|ArrayList
argument_list|(
name|collection1
operator|.
name|size
argument_list|()
operator|+
name|collection2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|resultCollection
operator|.
name|addAll
argument_list|(
name|collection1
argument_list|)
expr_stmt|;
name|resultCollection
operator|.
name|addAll
argument_list|(
name|collection2
argument_list|)
expr_stmt|;
return|return
name|resultCollection
return|;
block|}
comment|/**    * Function that, given a certain List containing single-item structs (i.e. arrays / lists with    * a single item), builds an Enumerable that returns those single items inside the structs.    */
specifier|public
specifier|static
name|Function1
argument_list|<
name|Object
argument_list|,
name|Enumerable
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|flatList
parameter_list|()
block|{
return|return
name|inputObject
lambda|->
block|{
specifier|final
name|List
name|list
init|=
operator|(
name|List
operator|)
name|inputObject
decl_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|list
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Comparable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|Comparable
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Comparable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
name|enumerator
operator|.
name|moveNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparable
name|current
parameter_list|()
block|{
specifier|final
name|Object
name|element
init|=
name|enumerator
operator|.
name|current
argument_list|()
decl_stmt|;
specifier|final
name|Comparable
name|comparable
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|comparable
operator|=
operator|(
name|Comparable
operator|)
operator|(
operator|(
name|Object
index|[]
operator|)
name|element
operator|)
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|comparable
operator|=
operator|(
name|Comparable
operator|)
operator|(
operator|(
name|List
operator|)
name|element
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|comparable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|enumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
return|;
block|}
specifier|public
specifier|static
name|Function1
argument_list|<
name|Object
argument_list|,
name|Enumerable
argument_list|<
name|ComparableList
argument_list|<
name|Comparable
argument_list|>
argument_list|>
argument_list|>
name|flatProduct
parameter_list|(
specifier|final
name|int
index|[]
name|fieldCounts
parameter_list|,
specifier|final
name|boolean
name|withOrdinality
parameter_list|,
specifier|final
name|FlatProductInputType
index|[]
name|inputTypes
parameter_list|)
block|{
if|if
condition|(
name|fieldCounts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|withOrdinality
operator|&&
name|inputTypes
index|[
literal|0
index|]
operator|==
name|FlatProductInputType
operator|.
name|SCALAR
condition|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|Function1
operator|)
name|LIST_AS_ENUMERABLE
return|;
block|}
else|else
block|{
return|return
name|row
lambda|->
name|p2
argument_list|(
operator|new
name|Object
index|[]
block|{
name|row
block|}
argument_list|,
name|fieldCounts
argument_list|,
name|withOrdinality
argument_list|,
name|inputTypes
argument_list|)
return|;
block|}
block|}
return|return
name|lists
lambda|->
name|p2
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|lists
argument_list|,
name|fieldCounts
argument_list|,
name|withOrdinality
argument_list|,
name|inputTypes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Enumerable
argument_list|<
name|FlatLists
operator|.
name|ComparableList
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|p2
parameter_list|(
name|Object
index|[]
name|lists
parameter_list|,
name|int
index|[]
name|fieldCounts
parameter_list|,
name|boolean
name|withOrdinality
parameter_list|,
name|FlatProductInputType
index|[]
name|inputTypes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
argument_list|>
name|enumerators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|totalFieldCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lists
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldCount
init|=
name|fieldCounts
index|[
name|i
index|]
decl_stmt|;
name|FlatProductInputType
name|inputType
init|=
name|inputTypes
index|[
name|i
index|]
decl_stmt|;
name|Object
name|inputObject
init|=
name|lists
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|inputType
condition|)
block|{
case|case
name|SCALAR
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Comparable
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Comparable
argument_list|>
operator|)
name|inputObject
decl_stmt|;
name|enumerators
operator|.
name|add
argument_list|(
name|Linq4j
operator|.
name|transform
argument_list|(
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|list
argument_list|)
argument_list|,
name|FlatLists
operator|::
name|of
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|listList
init|=
operator|(
name|List
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
operator|)
name|inputObject
decl_stmt|;
name|enumerators
operator|.
name|add
argument_list|(
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|listList
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Comparable
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Comparable
argument_list|>
operator|)
name|inputObject
decl_stmt|;
name|Enumerator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Comparable
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|enumerator
init|=
name|Linq4j
operator|.
name|enumerator
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|transformed
init|=
name|Linq4j
operator|.
name|transform
argument_list|(
name|enumerator
argument_list|,
name|e
lambda|->
name|FlatLists
operator|.
name|of
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|enumerators
operator|.
name|add
argument_list|(
name|transformed
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|fieldCount
operator|<
literal|0
condition|)
block|{
operator|++
name|totalFieldCount
expr_stmt|;
block|}
else|else
block|{
name|totalFieldCount
operator|+=
name|fieldCount
expr_stmt|;
block|}
block|}
if|if
condition|(
name|withOrdinality
condition|)
block|{
operator|++
name|totalFieldCount
expr_stmt|;
block|}
return|return
name|product
argument_list|(
name|enumerators
argument_list|,
name|totalFieldCount
argument_list|,
name|withOrdinality
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
index|[]
name|array
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|args
return|;
block|}
comment|/** Similar to {@link Linq4j#product(Iterable)} but each resulting list    * implements {@link FlatLists.ComparableList}. */
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Comparable
parameter_list|>
name|Enumerable
argument_list|<
name|FlatLists
operator|.
name|ComparableList
argument_list|<
name|E
argument_list|>
argument_list|>
name|product
parameter_list|(
specifier|final
name|List
argument_list|<
name|Enumerator
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|enumerators
parameter_list|,
specifier|final
name|int
name|fieldCount
parameter_list|,
specifier|final
name|boolean
name|withOrdinality
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|FlatLists
operator|.
name|ComparableList
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|FlatLists
operator|.
name|ComparableList
argument_list|<
name|E
argument_list|>
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|ProductComparableListEnumerator
argument_list|<>
argument_list|(
name|enumerators
argument_list|,
name|fieldCount
argument_list|,
name|withOrdinality
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Adds a given number of months to a timestamp, represented as the number    * of milliseconds since the epoch. */
specifier|public
specifier|static
name|long
name|addMonths
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|int
name|m
parameter_list|)
block|{
specifier|final
name|long
name|millis
init|=
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|timestamp
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
decl_stmt|;
name|timestamp
operator|-=
name|millis
expr_stmt|;
specifier|final
name|long
name|x
init|=
name|addMonths
argument_list|(
operator|(
name|int
operator|)
operator|(
name|timestamp
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|)
argument_list|,
name|m
argument_list|)
decl_stmt|;
return|return
name|x
operator|*
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
operator|+
name|millis
return|;
block|}
comment|/** Adds a given number of months to a date, represented as the number of    * days since the epoch. */
specifier|public
specifier|static
name|int
name|addMonths
parameter_list|(
name|int
name|date
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|int
name|y0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|m0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|int
name|d0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|m0
operator|+=
name|m
expr_stmt|;
name|int
name|deltaYear
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|floorDiv
argument_list|(
name|m0
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|y0
operator|+=
name|deltaYear
expr_stmt|;
name|m0
operator|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|m0
argument_list|,
literal|12
argument_list|)
expr_stmt|;
if|if
condition|(
name|m0
operator|==
literal|0
condition|)
block|{
name|y0
operator|-=
literal|1
expr_stmt|;
name|m0
operator|+=
literal|12
expr_stmt|;
block|}
name|int
name|last
init|=
name|lastDay
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|)
decl_stmt|;
if|if
condition|(
name|d0
operator|>
name|last
condition|)
block|{
name|d0
operator|=
name|last
expr_stmt|;
block|}
return|return
name|DateTimeUtils
operator|.
name|ymdToUnixDate
argument_list|(
name|y0
argument_list|,
name|m0
argument_list|,
name|d0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|lastDay
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|m
parameter_list|)
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
literal|2
case|:
return|return
name|y
operator|%
literal|4
operator|==
literal|0
operator|&&
operator|(
name|y
operator|%
literal|100
operator|!=
literal|0
operator|||
name|y
operator|%
literal|400
operator|==
literal|0
operator|)
condition|?
literal|29
else|:
literal|28
return|;
case|case
literal|4
case|:
case|case
literal|6
case|:
case|case
literal|9
case|:
case|case
literal|11
case|:
return|return
literal|30
return|;
default|default:
return|return
literal|31
return|;
block|}
block|}
comment|/** Finds the number of months between two dates, each represented as the    * number of days since the epoch. */
specifier|public
specifier|static
name|int
name|subtractMonths
parameter_list|(
name|int
name|date0
parameter_list|,
name|int
name|date1
parameter_list|)
block|{
if|if
condition|(
name|date0
operator|<
name|date1
condition|)
block|{
return|return
operator|-
name|subtractMonths
argument_list|(
name|date1
argument_list|,
name|date0
argument_list|)
return|;
block|}
comment|// Start with an estimate.
comment|// Since no month has more than 31 days, the estimate is<= the true value.
name|int
name|m
init|=
operator|(
name|date0
operator|-
name|date1
operator|)
operator|/
literal|31
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|date2
init|=
name|addMonths
argument_list|(
name|date1
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|date2
operator|>=
name|date0
condition|)
block|{
return|return
name|m
return|;
block|}
name|int
name|date3
init|=
name|addMonths
argument_list|(
name|date1
argument_list|,
name|m
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|date3
operator|>
name|date0
condition|)
block|{
return|return
name|m
return|;
block|}
operator|++
name|m
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|subtractMonths
parameter_list|(
name|long
name|t0
parameter_list|,
name|long
name|t1
parameter_list|)
block|{
specifier|final
name|long
name|millis0
init|=
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|t0
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
decl_stmt|;
specifier|final
name|int
name|d0
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|floorDiv
argument_list|(
name|t0
operator|-
name|millis0
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
decl_stmt|;
specifier|final
name|long
name|millis1
init|=
name|DateTimeUtils
operator|.
name|floorMod
argument_list|(
name|t1
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
decl_stmt|;
specifier|final
name|int
name|d1
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|floorDiv
argument_list|(
name|t1
operator|-
name|millis1
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|subtractMonths
argument_list|(
name|d0
argument_list|,
name|d1
argument_list|)
decl_stmt|;
specifier|final
name|long
name|d2
init|=
name|addMonths
argument_list|(
name|d1
argument_list|,
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|d2
operator|==
name|d0
operator|&&
name|millis0
operator|<
name|millis1
condition|)
block|{
operator|--
name|x
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
comment|/**    * Implements the {@code .} (field access) operator on an object    * whose type is not known until runtime.    *    *<p>A struct object can be represented in various ways by the    * runtime and depends on the    * {@link org.apache.calcite.adapter.enumerable.JavaRowFormat}.    */
annotation|@
name|Experimental
specifier|public
specifier|static
name|Object
name|structAccess
parameter_list|(
name|Object
name|structObject
parameter_list|,
name|int
name|index
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|structObject
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|structObject
operator|instanceof
name|Object
index|[]
condition|)
block|{
return|return
operator|(
operator|(
name|Object
index|[]
operator|)
name|structObject
operator|)
index|[
name|index
index|]
return|;
block|}
if|else if
condition|(
name|structObject
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
operator|(
name|List
operator|)
name|structObject
operator|)
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
if|else if
condition|(
name|structObject
operator|instanceof
name|Row
condition|)
block|{
return|return
operator|(
operator|(
name|Row
operator|)
name|structObject
operator|)
operator|.
name|getObject
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
init|=
name|structObject
operator|.
name|getClass
argument_list|()
decl_stmt|;
try|try
block|{
name|Field
name|structField
decl_stmt|;
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ALLOW_FIELD_INDEX_ACCESS
condition|)
block|{
name|structField
operator|=
name|beanClass
operator|.
name|getDeclaredFields
argument_list|()
index|[
name|index
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fieldName is null, fieldIndex is "
operator|+
operator|(
name|index
operator|+
literal|1
operator|)
operator|+
literal|", you might add 'calcite.enable.enumerable.fieldIndexAccess=true' to allow "
operator|+
literal|"index-based field access"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|structField
operator|=
name|beanClass
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|structField
operator|.
name|get
argument_list|(
name|structObject
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
decl||
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
name|RESOURCE
operator|.
name|failedToAccessField
argument_list|(
name|fieldName
argument_list|,
name|index
argument_list|,
name|beanClass
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Enumerates over the cartesian product of the given lists, returning    * a comparable list for each row.    *    * @param<E> element type */
specifier|private
specifier|static
class|class
name|ProductComparableListEnumerator
parameter_list|<
name|E
extends|extends
name|Comparable
parameter_list|>
extends|extends
name|CartesianProductEnumerator
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|,
name|FlatLists
operator|.
name|ComparableList
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
specifier|final
name|E
index|[]
name|flatElements
decl_stmt|;
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|list
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|withOrdinality
decl_stmt|;
specifier|private
name|int
name|ordinality
decl_stmt|;
name|ProductComparableListEnumerator
parameter_list|(
name|List
argument_list|<
name|Enumerator
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|enumerators
parameter_list|,
name|int
name|fieldCount
parameter_list|,
name|boolean
name|withOrdinality
parameter_list|)
block|{
name|super
argument_list|(
name|enumerators
argument_list|)
expr_stmt|;
name|this
operator|.
name|withOrdinality
operator|=
name|withOrdinality
expr_stmt|;
name|flatElements
operator|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Comparable
index|[
name|fieldCount
index|]
expr_stmt|;
name|list
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|flatElements
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
name|boolean
name|hasNext
init|=
name|super
operator|.
name|moveNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasNext
operator|&&
name|withOrdinality
condition|)
block|{
name|ordinality
operator|++
expr_stmt|;
block|}
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
name|FlatLists
operator|.
name|ComparableList
argument_list|<
name|E
argument_list|>
name|current
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
operator|(
name|Object
index|[]
operator|)
name|elements
control|)
block|{
name|Object
index|[]
name|a
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|a
operator|=
operator|(
name|Object
index|[]
operator|)
name|element
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|List
name|list2
init|=
operator|(
name|List
operator|)
name|element
decl_stmt|;
name|a
operator|=
name|list2
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|flatElements
argument_list|,
name|i
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
name|i
operator|+=
name|a
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|withOrdinality
condition|)
block|{
name|flatElements
index|[
name|i
index|]
operator|=
operator|(
name|E
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|ordinality
argument_list|)
expr_stmt|;
block|}
return|return
name|FlatLists
operator|.
name|ofComparable
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|withOrdinality
condition|)
block|{
name|ordinality
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
comment|/** Type of argument passed into {@link #flatProduct}. */
specifier|public
enum|enum
name|FlatProductInputType
block|{
name|SCALAR
block|,
name|LIST
block|,
name|MAP
block|}
block|}
end_class

end_unit

