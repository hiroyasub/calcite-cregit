begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_comment
comment|/**  * Socket factory that trusts all SSL connections.  */
end_comment

begin_class
specifier|public
class|class
name|TrustAllSslSocketFactory
extends|extends
name|SocketFactoryImpl
block|{
specifier|private
specifier|static
specifier|final
name|TrustAllSslSocketFactory
name|DEFAULT
init|=
operator|new
name|TrustAllSslSocketFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SSLSocketFactory
name|sslSocketFactory
decl_stmt|;
specifier|protected
name|TrustAllSslSocketFactory
parameter_list|()
block|{
name|TrustManager
index|[]
name|trustAllCerts
init|=
block|{
operator|new
name|DummyTrustManager
argument_list|()
block|}
decl_stmt|;
name|SSLSocketFactory
name|factory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SSLContext
name|sc
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|trustAllCerts
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|=
name|sc
operator|.
name|getSocketFactory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|sslSocketFactory
operator|=
name|factory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|applySettings
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|applySettings
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localAddress
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|applySettings
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|address
argument_list|,
name|port
argument_list|,
name|localAddress
argument_list|,
name|localPort
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|applySettings
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localHost
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|applySettings
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|localHost
argument_list|,
name|localPort
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a copy of the environment's default socket factory.    *    * @see javax.net.SocketFactory#getDefault()    */
specifier|public
specifier|static
name|TrustAllSslSocketFactory
name|getDefault
parameter_list|()
block|{
return|return
name|DEFAULT
return|;
block|}
specifier|public
specifier|static
name|SSLSocketFactory
name|getDefaultSSLSocketFactory
parameter_list|()
block|{
return|return
name|DEFAULT
operator|.
name|sslSocketFactory
return|;
block|}
comment|/**    * Creates an "accept-all" SSLSocketFactory - ssl sockets will accept ANY    * certificate sent to them - thus effectively just securing the    * communications. This could be set in a HttpsURLConnection using    * HttpsURLConnection.setSSLSocketFactory(.....)    *    * @return SSLSocketFactory    */
specifier|public
specifier|static
name|SSLSocketFactory
name|createSSLSocketFactory
parameter_list|()
block|{
name|SSLSocketFactory
name|sslsocketfactory
init|=
literal|null
decl_stmt|;
name|TrustManager
index|[]
name|trustAllCerts
init|=
block|{
operator|new
name|DummyTrustManager
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|SSLContext
name|sc
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|trustAllCerts
argument_list|,
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|sslsocketfactory
operator|=
name|sc
operator|.
name|getSocketFactory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|sslsocketfactory
return|;
block|}
comment|/** Implementation of {@link X509TrustManager} that trusts all    * certificates. */
specifier|private
specifier|static
class|class
name|DummyTrustManager
implements|implements
name|X509TrustManager
block|{
specifier|public
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|authType
parameter_list|)
block|{
block|}
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|authType
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

