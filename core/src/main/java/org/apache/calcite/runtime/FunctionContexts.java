begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|NullSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|FunctionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Runtime support for {@link org.apache.calcite.schema.FunctionContext}.  */
end_comment

begin_class
specifier|public
class|class
name|FunctionContexts
block|{
specifier|private
name|FunctionContexts
parameter_list|()
block|{
block|}
comment|/** Creates a FunctionContext. */
specifier|public
specifier|static
name|FunctionContext
name|of
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|Object
index|[]
name|argumentValues
parameter_list|)
block|{
return|return
operator|new
name|FunctionContextImpl
argument_list|(
name|root
argument_list|,
name|argumentValues
argument_list|)
return|;
block|}
comment|/** Implementation of {@link org.apache.calcite.schema.FunctionContext}. */
specifier|private
specifier|static
class|class
name|FunctionContextImpl
implements|implements
name|FunctionContext
block|{
specifier|private
specifier|final
name|DataContext
name|root
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|Object
index|[]
name|argumentValues
decl_stmt|;
name|FunctionContextImpl
parameter_list|(
name|DataContext
name|root
parameter_list|,
annotation|@
name|Nullable
name|Object
index|[]
name|argumentValues
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|argumentValues
operator|=
name|argumentValues
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTypeFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getParameterCount
parameter_list|()
block|{
return|return
name|argumentValues
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isArgumentConstant
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|argumentValue
argument_list|(
name|ordinal
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|private
annotation|@
name|Nullable
name|Object
name|argumentValue
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
if|if
condition|(
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|argumentValues
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"argument ordinal "
operator|+
name|ordinal
operator|+
literal|" is out of range"
argument_list|)
throw|;
block|}
return|return
name|argumentValues
index|[
name|ordinal
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|V
parameter_list|>
annotation|@
name|Nullable
name|V
name|getArgumentValueAs
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueClass
parameter_list|)
block|{
specifier|final
name|Object
name|v
init|=
name|argumentValue
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value of argument "
operator|+
name|ordinal
operator|+
literal|" is not constant"
argument_list|)
throw|;
block|}
if|if
condition|(
name|v
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
return|return
literal|null
return|;
comment|// value is constant NULL
block|}
if|if
condition|(
name|valueClass
operator|==
name|String
operator|.
name|class
operator|&&
operator|!
operator|(
name|v
operator|instanceof
name|String
operator|)
condition|)
block|{
return|return
name|valueClass
operator|.
name|cast
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|valueClass
operator|.
name|cast
argument_list|(
name|v
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

