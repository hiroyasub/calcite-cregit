begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ExtensibleTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|FilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ModifiableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|QueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|StreamableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlModality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link org.apache.calcite.plan.RelOptTable}.  */
end_comment

begin_class
specifier|public
class|class
name|RelOptTableImpl
implements|implements
name|Prepare
operator|.
name|PreparingTable
block|{
specifier|private
specifier|final
name|RelOptSchema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
name|expressionFunction
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
comment|/** Estimate for the row count, or null.    *    *<p>If not null, overrides the estimate from the actual table.    *    *<p>Useful when a table that contains a materialized query result is being    * used to replace a query expression that wildly underestimates the row    * count. Now the materialized table can tell the same lie. */
specifier|private
specifier|final
name|Double
name|rowCount
decl_stmt|;
specifier|private
name|RelOptTableImpl
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|Table
name|table
parameter_list|,
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
name|expressionFunction
parameter_list|,
name|Double
name|rowCount
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|rowType
argument_list|)
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
comment|// may be null
name|this
operator|.
name|expressionFunction
operator|=
name|expressionFunction
expr_stmt|;
comment|// may be null
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
comment|// may be null
block|}
specifier|public
specifier|static
name|RelOptTableImpl
name|create
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
comment|//noinspection unchecked
specifier|final
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
name|expressionFunction
init|=
operator|(
name|Function
operator|)
name|Functions
operator|.
name|constant
argument_list|(
name|expression
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelOptTableImpl
argument_list|(
name|schema
argument_list|,
name|rowType
argument_list|,
name|names
argument_list|,
literal|null
argument_list|,
name|expressionFunction
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelOptTableImpl
name|create
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|Table
name|table
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
specifier|final
name|SchemaPlus
name|schemaPlus
init|=
name|MySchemaPlus
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
name|expressionFunction
init|=
name|getClassExpressionFunction
argument_list|(
name|schemaPlus
argument_list|,
name|Util
operator|.
name|last
argument_list|(
name|path
argument_list|)
operator|.
name|left
argument_list|,
name|table
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelOptTableImpl
argument_list|(
name|schema
argument_list|,
name|rowType
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|path
argument_list|)
argument_list|,
name|table
argument_list|,
name|expressionFunction
argument_list|,
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|getRowCount
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelOptTableImpl
name|create
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
specifier|final
name|CalciteSchema
operator|.
name|TableEntry
name|tableEntry
parameter_list|,
name|Double
name|rowCount
parameter_list|)
block|{
specifier|final
name|Table
name|table
init|=
name|tableEntry
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
name|expressionFunction
init|=
name|getClassExpressionFunction
argument_list|(
name|tableEntry
argument_list|,
name|table
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelOptTableImpl
argument_list|(
name|schema
argument_list|,
name|rowType
argument_list|,
name|tableEntry
operator|.
name|path
argument_list|()
argument_list|,
name|table
argument_list|,
name|expressionFunction
argument_list|,
name|rowCount
argument_list|)
return|;
block|}
comment|/**    * Creates a copy of this RelOptTable. The new RelOptTable will have newRowType.    */
specifier|public
name|RelOptTableImpl
name|copy
parameter_list|(
name|RelDataType
name|newRowType
parameter_list|)
block|{
return|return
operator|new
name|RelOptTableImpl
argument_list|(
name|this
operator|.
name|schema
argument_list|,
name|newRowType
argument_list|,
name|this
operator|.
name|names
argument_list|,
name|this
operator|.
name|table
argument_list|,
name|this
operator|.
name|expressionFunction
argument_list|,
name|this
operator|.
name|rowCount
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
name|getClassExpressionFunction
parameter_list|(
name|CalciteSchema
operator|.
name|TableEntry
name|tableEntry
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
return|return
name|getClassExpressionFunction
argument_list|(
name|tableEntry
operator|.
name|schema
operator|.
name|plus
argument_list|()
argument_list|,
name|tableEntry
operator|.
name|name
argument_list|,
name|table
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
name|getClassExpressionFunction
parameter_list|(
specifier|final
name|SchemaPlus
name|schema
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|Table
name|table
parameter_list|)
block|{
if|if
condition|(
name|table
operator|instanceof
name|QueryableTable
condition|)
block|{
specifier|final
name|QueryableTable
name|queryableTable
init|=
operator|(
name|QueryableTable
operator|)
name|table
decl_stmt|;
return|return
operator|new
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
argument_list|()
block|{
specifier|public
name|Expression
name|apply
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|queryableTable
operator|.
name|getExpression
argument_list|(
name|schema
argument_list|,
name|tableName
argument_list|,
name|clazz
argument_list|)
return|;
block|}
block|}
return|;
block|}
if|else if
condition|(
name|table
operator|instanceof
name|ScannableTable
operator|||
name|table
operator|instanceof
name|FilterableTable
operator|||
name|table
operator|instanceof
name|ProjectableFilterableTable
condition|)
block|{
return|return
operator|new
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
argument_list|()
block|{
specifier|public
name|Expression
name|apply
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|Schemas
operator|.
name|tableExpression
argument_list|(
name|schema
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|tableName
argument_list|,
name|table
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
if|else if
condition|(
name|table
operator|instanceof
name|StreamableTable
condition|)
block|{
return|return
name|getClassExpressionFunction
argument_list|(
name|schema
argument_list|,
name|tableName
argument_list|,
operator|(
operator|(
name|StreamableTable
operator|)
name|table
operator|)
operator|.
name|stream
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Function
argument_list|<
name|Class
argument_list|,
name|Expression
argument_list|>
argument_list|()
block|{
specifier|public
name|Expression
name|apply
parameter_list|(
name|Class
name|input
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
specifier|public
specifier|static
name|RelOptTableImpl
name|create
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|Table
name|table
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
assert|assert
name|table
operator|instanceof
name|TranslatableTable
operator|||
name|table
operator|instanceof
name|ScannableTable
operator|||
name|table
operator|instanceof
name|ModifiableTable
assert|;
return|return
operator|new
name|RelOptTableImpl
argument_list|(
name|schema
argument_list|,
name|rowType
argument_list|,
name|names
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|table
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|==
name|CalciteSchema
operator|.
name|class
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|Schemas
operator|.
name|subSchema
argument_list|(
operator|(
operator|(
name|CalciteCatalogReader
operator|)
name|schema
operator|)
operator|.
name|rootSchema
argument_list|,
name|Util
operator|.
name|skipLast
argument_list|(
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|expressionFunction
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|expressionFunction
operator|.
name|apply
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|public
name|RelOptTable
name|extend
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|extendedFields
parameter_list|)
block|{
if|if
condition|(
name|table
operator|instanceof
name|ExtensibleTable
condition|)
block|{
specifier|final
name|Table
name|extendedTable
init|=
operator|(
operator|(
name|ExtensibleTable
operator|)
name|table
operator|)
operator|.
name|extend
argument_list|(
name|extendedFields
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|extendedRowType
init|=
name|extendedTable
operator|.
name|getRowType
argument_list|(
name|schema
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelOptTableImpl
argument_list|(
name|schema
argument_list|,
name|extendedRowType
argument_list|,
name|names
argument_list|,
name|extendedTable
argument_list|,
name|expressionFunction
argument_list|,
name|rowCount
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot extend "
operator|+
name|table
argument_list|)
throw|;
comment|// TODO: user error
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|RelOptTableImpl
operator|&&
name|this
operator|.
name|rowType
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RelOptTableImpl
operator|)
name|obj
operator|)
operator|.
name|getRowType
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|table
operator|==
operator|(
operator|(
name|RelOptTableImpl
operator|)
name|obj
operator|)
operator|.
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|table
operator|==
literal|null
operator|)
condition|?
name|super
operator|.
name|hashCode
argument_list|()
else|:
name|this
operator|.
name|table
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|double
name|getRowCount
parameter_list|()
block|{
if|if
condition|(
name|rowCount
operator|!=
literal|null
condition|)
block|{
return|return
name|rowCount
return|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Double
name|rowCount
init|=
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowCount
operator|!=
literal|null
condition|)
block|{
return|return
name|rowCount
return|;
block|}
block|}
return|return
literal|100d
return|;
block|}
specifier|public
name|RelOptSchema
name|getRelOptSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
comment|// Make sure rowType's list is immutable. If rowType is DynamicRecordType, creates a new
comment|// RelOptTable by replacing with immutable RelRecordType using the same field list.
if|if
condition|(
name|this
operator|.
name|getRowType
argument_list|()
operator|.
name|isDynamicStruct
argument_list|()
condition|)
block|{
specifier|final
name|RelDataType
name|staticRowType
init|=
operator|new
name|RelRecordType
argument_list|(
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelOptTable
name|relOptTable
init|=
name|this
operator|.
name|copy
argument_list|(
name|staticRowType
argument_list|)
decl_stmt|;
return|return
name|relOptTable
operator|.
name|toRel
argument_list|(
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|table
operator|instanceof
name|TranslatableTable
condition|)
block|{
return|return
operator|(
operator|(
name|TranslatableTable
operator|)
name|table
operator|)
operator|.
name|toRel
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|final
name|RelOptCluster
name|cluster
init|=
name|context
operator|.
name|getCluster
argument_list|()
decl_stmt|;
if|if
condition|(
name|Hook
operator|.
name|ENABLE_BINDABLE
operator|.
name|get
argument_list|(
literal|false
argument_list|)
condition|)
block|{
return|return
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|CalcitePrepareImpl
operator|.
name|ENABLE_ENUMERABLE
operator|&&
name|table
operator|instanceof
name|QueryableTable
condition|)
block|{
return|return
name|EnumerableTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|table
operator|instanceof
name|ScannableTable
operator|||
name|table
operator|instanceof
name|FilterableTable
operator|||
name|table
operator|instanceof
name|ProjectableFilterableTable
condition|)
block|{
return|return
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|CalcitePrepareImpl
operator|.
name|ENABLE_ENUMERABLE
condition|)
block|{
return|return
name|EnumerableTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|this
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|public
name|List
argument_list|<
name|RelCollation
argument_list|>
name|getCollationList
parameter_list|()
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|getCollations
argument_list|()
return|;
block|}
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|()
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|getDistribution
argument_list|()
return|;
block|}
return|return
name|RelDistributionTraitDef
operator|.
name|INSTANCE
operator|.
name|getDefault
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|ImmutableBitSet
name|columns
parameter_list|)
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|isKey
argument_list|(
name|columns
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|boolean
name|supportsModality
parameter_list|(
name|SqlModality
name|modality
parameter_list|)
block|{
switch|switch
condition|(
name|modality
condition|)
block|{
case|case
name|STREAM
case|:
return|return
name|table
operator|instanceof
name|StreamableTable
return|;
default|default:
return|return
operator|!
operator|(
name|table
operator|instanceof
name|StreamableTable
operator|)
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQualifiedName
parameter_list|()
block|{
return|return
name|names
return|;
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
specifier|final
name|int
name|i
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|RelCollation
name|collation
range|:
name|table
operator|.
name|getStatistic
argument_list|()
operator|.
name|getCollations
argument_list|()
control|)
block|{
specifier|final
name|RelFieldCollation
name|fieldCollation
init|=
name|collation
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldCollation
operator|.
name|getFieldIndex
argument_list|()
operator|==
name|i
condition|)
block|{
return|return
name|fieldCollation
operator|.
name|direction
operator|.
name|monotonicity
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
return|;
block|}
specifier|public
name|SqlAccessType
name|getAllowedAccess
parameter_list|()
block|{
return|return
name|SqlAccessType
operator|.
name|ALL
return|;
block|}
comment|/** Im0plementation of {@link SchemaPlus} that wraps a regular schema and knows    * its name and parent.    *    *<p>It is read-only, and functionality is limited in other ways, it but    * allows table expressions to be genenerated. */
specifier|private
specifier|static
class|class
name|MySchemaPlus
implements|implements
name|SchemaPlus
block|{
specifier|private
specifier|final
name|SchemaPlus
name|parent
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|public
name|MySchemaPlus
parameter_list|(
name|SchemaPlus
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
specifier|public
specifier|static
name|MySchemaPlus
name|create
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
name|pair
init|=
name|Util
operator|.
name|last
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|SchemaPlus
name|parent
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|parent
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|=
name|create
argument_list|(
name|path
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MySchemaPlus
argument_list|(
name|parent
argument_list|,
name|pair
operator|.
name|left
argument_list|,
name|pair
operator|.
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SchemaPlus
name|getParentSchema
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|SchemaPlus
name|getSubSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Schema
name|subSchema
init|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|subSchema
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|MySchemaPlus
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|subSchema
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SchemaPlus
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Function
name|function
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Lattice
name|lattice
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMutable
parameter_list|()
block|{
return|return
name|schema
operator|.
name|isMutable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPath
parameter_list|(
name|ImmutableList
argument_list|<
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
name|path
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCacheEnabled
parameter_list|(
name|boolean
name|cache
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|schema
operator|.
name|getTable
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTableNames
parameter_list|()
block|{
return|return
name|schema
operator|.
name|getTableNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Function
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|schema
operator|.
name|getFunctions
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|()
block|{
return|return
name|schema
operator|.
name|getFunctionNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSubSchemaNames
parameter_list|()
block|{
return|return
name|schema
operator|.
name|getSubSchemaNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|SchemaPlus
name|parentSchema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|schema
operator|.
name|getExpression
argument_list|(
name|parentSchema
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contentsHaveChangedSince
parameter_list|(
name|long
name|lastCheck
parameter_list|,
name|long
name|now
parameter_list|)
block|{
return|return
name|schema
operator|.
name|contentsHaveChangedSince
argument_list|(
name|lastCheck
argument_list|,
name|now
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RelOptTableImpl.java
end_comment

end_unit

