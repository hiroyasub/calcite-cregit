begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelHomogeneousShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexSubQuery
import|;
end_import

begin_comment
comment|/**  * Shuttle that finds references to a given {@link CorrelationId} within a tree  * of {@link RelNode}s.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CorrelationReferenceFinder
extends|extends
name|RelHomogeneousShuttle
block|{
specifier|private
specifier|final
name|MyRexVisitor
name|rexVisitor
decl_stmt|;
comment|/** Creates CorrelationReferenceFinder. */
specifier|protected
name|CorrelationReferenceFinder
parameter_list|()
block|{
name|rexVisitor
operator|=
operator|new
name|MyRexVisitor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|RexNode
name|handle
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|RelNode
name|other
parameter_list|)
block|{
name|RelNode
name|next
init|=
name|super
operator|.
name|visit
argument_list|(
name|other
argument_list|)
decl_stmt|;
return|return
name|next
operator|.
name|accept
argument_list|(
name|rexVisitor
argument_list|)
return|;
block|}
comment|/**    * Replaces alternative names of correlation variable to its canonical name.    */
specifier|private
specifier|static
class|class
name|MyRexVisitor
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|CorrelationReferenceFinder
name|finder
decl_stmt|;
specifier|private
name|MyRexVisitor
parameter_list|(
name|CorrelationReferenceFinder
name|finder
parameter_list|)
block|{
name|this
operator|.
name|finder
operator|=
name|finder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
if|if
condition|(
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
operator|instanceof
name|RexCorrelVariable
condition|)
block|{
return|return
name|finder
operator|.
name|handle
argument_list|(
name|fieldAccess
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|visitFieldAccess
argument_list|(
name|fieldAccess
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitSubQuery
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|)
block|{
specifier|final
name|RelNode
name|r
init|=
name|subQuery
operator|.
name|rel
operator|.
name|accept
argument_list|(
name|finder
argument_list|)
decl_stmt|;
comment|// look inside sub-queries
if|if
condition|(
name|r
operator|!=
name|subQuery
operator|.
name|rel
condition|)
block|{
name|subQuery
operator|=
name|subQuery
operator|.
name|clone
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visitSubQuery
argument_list|(
name|subQuery
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

