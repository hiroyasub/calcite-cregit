begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelHomogeneousShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexSubQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|initialization
operator|.
name|qual
operator|.
name|NotOnlyInitialized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|initialization
operator|.
name|qual
operator|.
name|UnderInitialization
import|;
end_import

begin_comment
comment|/**  * Rewrites relations to ensure the same correlation is referenced by the same  * correlation variable.  */
end_comment

begin_class
specifier|public
class|class
name|DeduplicateCorrelateVariables
extends|extends
name|RelHomogeneousShuttle
block|{
annotation|@
name|NotOnlyInitialized
specifier|private
specifier|final
name|RexShuttle
name|dedupRex
decl_stmt|;
comment|/** Creates a DeduplicateCorrelateVariables. */
specifier|private
name|DeduplicateCorrelateVariables
parameter_list|(
name|RexBuilder
name|builder
parameter_list|,
name|CorrelationId
name|canonicalId
parameter_list|,
name|ImmutableSet
argument_list|<
name|CorrelationId
argument_list|>
name|alternateIds
parameter_list|)
block|{
name|dedupRex
operator|=
operator|new
name|DeduplicateCorrelateVariablesShuttle
argument_list|(
name|builder
argument_list|,
name|canonicalId
argument_list|,
name|alternateIds
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rewrites a relational expression, replacing alternate correlation variables    * with a canonical correlation variable.    */
specifier|public
specifier|static
name|RelNode
name|go
parameter_list|(
name|RexBuilder
name|builder
parameter_list|,
name|CorrelationId
name|canonicalId
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|CorrelationId
argument_list|>
name|alternateIds
parameter_list|,
name|RelNode
name|r
parameter_list|)
block|{
return|return
name|r
operator|.
name|accept
argument_list|(
operator|new
name|DeduplicateCorrelateVariables
argument_list|(
name|builder
argument_list|,
name|canonicalId
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|alternateIds
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|RelNode
name|other
parameter_list|)
block|{
name|RelNode
name|next
init|=
name|super
operator|.
name|visit
argument_list|(
name|other
argument_list|)
decl_stmt|;
return|return
name|next
operator|.
name|accept
argument_list|(
name|dedupRex
argument_list|)
return|;
block|}
comment|/**    * Replaces alternative names of correlation variable to its canonical name.    */
specifier|private
specifier|static
class|class
name|DeduplicateCorrelateVariablesShuttle
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|CorrelationId
name|canonicalId
decl_stmt|;
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|CorrelationId
argument_list|>
name|alternateIds
decl_stmt|;
annotation|@
name|NotOnlyInitialized
specifier|private
specifier|final
name|DeduplicateCorrelateVariables
name|shuttle
decl_stmt|;
specifier|private
name|DeduplicateCorrelateVariablesShuttle
parameter_list|(
name|RexBuilder
name|builder
parameter_list|,
name|CorrelationId
name|canonicalId
parameter_list|,
name|ImmutableSet
argument_list|<
name|CorrelationId
argument_list|>
name|alternateIds
parameter_list|,
annotation|@
name|UnderInitialization
name|DeduplicateCorrelateVariables
name|shuttle
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|canonicalId
operator|=
name|canonicalId
expr_stmt|;
name|this
operator|.
name|alternateIds
operator|=
name|alternateIds
expr_stmt|;
name|this
operator|.
name|shuttle
operator|=
name|shuttle
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|variable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|alternateIds
operator|.
name|contains
argument_list|(
name|variable
operator|.
name|id
argument_list|)
condition|)
block|{
return|return
name|variable
return|;
block|}
return|return
name|builder
operator|.
name|makeCorrel
argument_list|(
name|variable
operator|.
name|getType
argument_list|()
argument_list|,
name|canonicalId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitSubQuery
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|)
block|{
if|if
condition|(
name|shuttle
operator|!=
literal|null
condition|)
block|{
name|RelNode
name|r
init|=
name|subQuery
operator|.
name|rel
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
comment|// look inside sub-queries
if|if
condition|(
name|r
operator|!=
name|subQuery
operator|.
name|rel
condition|)
block|{
name|subQuery
operator|=
name|subQuery
operator|.
name|clone
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|visitSubQuery
argument_list|(
name|subQuery
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

