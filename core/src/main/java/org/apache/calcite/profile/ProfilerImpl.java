begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|NullSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|FlatLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|PartiallyOrderedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yahoo
operator|.
name|sketches
operator|.
name|hll
operator|.
name|HllSketch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|profile
operator|.
name|ProfilerImpl
operator|.
name|CompositeCollector
operator|.
name|OF
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Profiler} that only investigates "interesting"  * combinations of columns.  */
end_comment

begin_class
specifier|public
class|class
name|ProfilerImpl
implements|implements
name|Profiler
block|{
comment|/** The number of combinations to consider per pass.    * The number is determined by memory, but a value of 1,000 is typical.    * You need 2KB memory per sketch, and one sketch for each combination. */
specifier|private
specifier|final
name|int
name|combinationsPerPass
decl_stmt|;
comment|/** The minimum number of combinations considered "interesting". After that,    * a combination is only considered "interesting" if its surprise is greater    * than the median surprise. */
specifier|private
specifier|final
name|int
name|interestingCount
decl_stmt|;
comment|/** Whether a successor is considered interesting enough to analyze. */
specifier|private
specifier|final
name|Predicate
argument_list|<
name|Pair
argument_list|<
name|Space
argument_list|,
name|Column
argument_list|>
argument_list|>
name|predicate
decl_stmt|;
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Creates a {@code ProfilerImpl}.    *    * @param combinationsPerPass Maximum number of columns (or combinations of    *   columns) to compute each pass    * @param interestingCount Minimum number of combinations considered    *   interesting    * @param predicate Whether a successor is considered interesting enough to    *   analyze    */
name|ProfilerImpl
parameter_list|(
name|int
name|combinationsPerPass
parameter_list|,
name|int
name|interestingCount
parameter_list|,
name|Predicate
argument_list|<
name|Pair
argument_list|<
name|Space
argument_list|,
name|Column
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|combinationsPerPass
operator|>
literal|2
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|interestingCount
operator|>
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|combinationsPerPass
operator|=
name|combinationsPerPass
expr_stmt|;
name|this
operator|.
name|interestingCount
operator|=
name|interestingCount
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
block|}
specifier|public
name|Profile
name|profile
parameter_list|(
name|Iterable
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|rows
parameter_list|,
specifier|final
name|List
argument_list|<
name|Column
argument_list|>
name|columns
parameter_list|,
name|Collection
argument_list|<
name|ImmutableBitSet
argument_list|>
name|initialGroups
parameter_list|)
block|{
return|return
operator|new
name|Run
argument_list|(
name|columns
argument_list|,
name|initialGroups
argument_list|)
operator|.
name|profile
argument_list|(
name|rows
argument_list|)
return|;
block|}
comment|/** A run of the profiler. */
class|class
name|Run
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Column
argument_list|>
name|columns
decl_stmt|;
specifier|final
name|PartiallyOrderedSet
argument_list|<
name|ImmutableBitSet
argument_list|>
name|keyPoset
init|=
operator|new
name|PartiallyOrderedSet
argument_list|<>
argument_list|(
name|PartiallyOrderedSet
operator|.
name|BIT_SET_INCLUSION_ORDERING
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ImmutableBitSet
argument_list|,
name|Distribution
argument_list|>
name|distributions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** List of spaces that have one column. */
specifier|final
name|List
argument_list|<
name|Space
argument_list|>
name|singletonSpaces
decl_stmt|;
comment|/** Combinations of columns that we have computed but whose successors have      * not yet been computed. We may add some of those successors to      * {@link #spaceQueue}. */
specifier|final
name|Queue
argument_list|<
name|Space
argument_list|>
name|doneQueue
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
literal|100
argument_list|,
parameter_list|(
name|s0
parameter_list|,
name|s1
parameter_list|)
lambda|->
block|{
comment|// The space with 0 columns is more interesting than
comment|// any space with 1 column, and so forth.
comment|// For spaces with 2 or more columns we compare "surprise":
comment|// how many fewer values did it have than expected?
name|int
name|c
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|s0
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|,
name|s1
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|s0
operator|.
name|surprise
argument_list|()
argument_list|,
name|s1
operator|.
name|surprise
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
argument_list|)
decl_stmt|;
specifier|final
name|SurpriseQueue
name|surprises
decl_stmt|;
comment|/** Combinations of columns that we will compute next pass. */
specifier|final
name|Deque
argument_list|<
name|ImmutableBitSet
argument_list|>
name|spaceQueue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Unique
argument_list|>
name|uniques
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FunctionalDependency
argument_list|>
name|functionalDependencies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Column ordinals that have ever been placed on {@link #spaceQueue}.      * Ensures that we do not calculate the same combination more than once,      * even though we generate a column set from multiple parents. */
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|resultSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|PartiallyOrderedSet
argument_list|<
name|Space
argument_list|>
name|results
init|=
operator|new
name|PartiallyOrderedSet
argument_list|<>
argument_list|(
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
name|e2
operator|.
name|columnOrdinals
operator|.
name|contains
argument_list|(
name|e1
operator|.
name|columnOrdinals
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|keyOrdinalLists
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|rowCount
decl_stmt|;
comment|/**      * Creates a Run.      *      * @param columns List of columns      *      * @param initialGroups List of combinations of columns that should be      *                     profiled early, because they may be interesting      */
name|Run
parameter_list|(
specifier|final
name|List
argument_list|<
name|Column
argument_list|>
name|columns
parameter_list|,
name|Collection
argument_list|<
name|ImmutableBitSet
argument_list|>
name|initialGroups
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|columns
argument_list|)
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Column
argument_list|>
name|column
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|columns
argument_list|)
control|)
block|{
if|if
condition|(
name|column
operator|.
name|e
operator|.
name|ordinal
operator|!=
name|column
operator|.
name|i
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
name|this
operator|.
name|singletonSpaces
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|columns
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|Space
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|combinationsPerPass
operator|>
name|Math
operator|.
name|pow
argument_list|(
literal|2D
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
comment|// There are not many columns. We can compute all combinations in the
comment|// first pass.
for|for
control|(
name|ImmutableBitSet
name|ordinals
range|:
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|columns
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|powerSet
argument_list|()
control|)
block|{
name|spaceQueue
operator|.
name|add
argument_list|(
name|ordinals
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We will need to take multiple passes.
comment|// Pass 0, just put the empty combination on the queue.
comment|// Next pass, we will do its successors, the singleton combinations.
name|spaceQueue
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|spaceQueue
operator|.
name|addAll
argument_list|(
name|initialGroups
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|<
name|combinationsPerPass
condition|)
block|{
comment|// There are not very many columns. Compute the singleton
comment|// groups in pass 0.
for|for
control|(
name|Column
name|column
range|:
name|columns
control|)
block|{
name|spaceQueue
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|column
operator|.
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// The surprise queue must have enough room for all singleton groups
comment|// plus all initial groups.
name|surprises
operator|=
operator|new
name|SurpriseQueue
argument_list|(
literal|1
operator|+
name|columns
operator|.
name|size
argument_list|()
operator|+
name|initialGroups
operator|.
name|size
argument_list|()
argument_list|,
name|interestingCount
argument_list|)
expr_stmt|;
block|}
name|Profile
name|profile
parameter_list|(
name|Iterable
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|rows
parameter_list|)
block|{
name|int
name|pass
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|List
argument_list|<
name|Space
argument_list|>
name|spaces
init|=
name|nextBatch
argument_list|(
name|pass
argument_list|)
decl_stmt|;
if|if
condition|(
name|spaces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|pass
argument_list|(
name|pass
operator|++
argument_list|,
name|spaces
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Space
name|s
range|:
name|singletonSpaces
control|)
block|{
for|for
control|(
name|ImmutableBitSet
name|dependent
range|:
name|s
operator|.
name|dependents
control|)
block|{
name|functionalDependencies
operator|.
name|add
argument_list|(
operator|new
name|FunctionalDependency
argument_list|(
name|toColumns
argument_list|(
name|dependent
argument_list|)
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|s
operator|.
name|columns
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Profile
argument_list|(
name|columns
argument_list|,
operator|new
name|RowCount
argument_list|(
name|rowCount
argument_list|)
argument_list|,
name|functionalDependencies
argument_list|,
name|distributions
operator|.
name|values
argument_list|()
argument_list|,
name|uniques
argument_list|)
return|;
block|}
comment|/** Populates {@code spaces} with the next batch.      * Returns an empty list if done. */
name|List
argument_list|<
name|Space
argument_list|>
name|nextBatch
parameter_list|(
name|int
name|pass
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Space
argument_list|>
name|spaces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|loop
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|spaces
operator|.
name|size
argument_list|()
operator|>=
name|combinationsPerPass
condition|)
block|{
comment|// We have enough for the next pass.
return|return
name|spaces
return|;
block|}
comment|// First, see if there is a space we did have room for last pass.
specifier|final
name|ImmutableBitSet
name|ordinals
init|=
name|spaceQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordinals
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Space
name|space
init|=
operator|new
name|Space
argument_list|(
name|this
argument_list|,
name|ordinals
argument_list|,
name|toColumns
argument_list|(
name|ordinals
argument_list|)
argument_list|)
decl_stmt|;
name|spaces
operator|.
name|add
argument_list|(
name|space
argument_list|)
expr_stmt|;
if|if
condition|(
name|ordinals
operator|.
name|cardinality
argument_list|()
operator|==
literal|1
condition|)
block|{
name|singletonSpaces
operator|.
name|set
argument_list|(
name|ordinals
operator|.
name|nth
argument_list|(
literal|0
argument_list|)
argument_list|,
name|space
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Next, take a space that was done last time, generate its
comment|// successors, and add the interesting ones to the space queue.
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|Space
name|doneSpace
init|=
name|doneQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|doneSpace
operator|==
literal|null
condition|)
block|{
comment|// There are no more done spaces. We're done.
return|return
name|spaces
return|;
block|}
if|if
condition|(
name|doneSpace
operator|.
name|columnOrdinals
operator|.
name|cardinality
argument_list|()
operator|>
literal|4
condition|)
block|{
comment|// Do not generate successors for groups with lots of columns,
comment|// probably initial groups
continue|continue;
block|}
for|for
control|(
name|Column
name|column
range|:
name|columns
control|)
block|{
if|if
condition|(
operator|!
name|doneSpace
operator|.
name|columnOrdinals
operator|.
name|get
argument_list|(
name|column
operator|.
name|ordinal
argument_list|)
condition|)
block|{
if|if
condition|(
name|pass
operator|==
literal|0
operator|||
name|doneSpace
operator|.
name|columnOrdinals
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|containsKey
argument_list|(
name|doneSpace
operator|.
name|columnOrdinals
operator|.
name|set
argument_list|(
name|column
operator|.
name|ordinal
argument_list|)
argument_list|)
operator|&&
name|predicate
operator|.
name|test
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|doneSpace
argument_list|,
name|column
argument_list|)
argument_list|)
condition|)
block|{
specifier|final
name|ImmutableBitSet
name|nextOrdinals
init|=
name|doneSpace
operator|.
name|columnOrdinals
operator|.
name|set
argument_list|(
name|column
operator|.
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|add
argument_list|(
name|nextOrdinals
argument_list|)
condition|)
block|{
name|spaceQueue
operator|.
name|add
argument_list|(
name|nextOrdinals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// We've converted at a space into at least one interesting
comment|// successor.
if|if
condition|(
operator|!
name|spaceQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue
name|loop
continue|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|containsKey
parameter_list|(
name|ImmutableBitSet
name|ordinals
parameter_list|)
block|{
for|for
control|(
name|ImmutableBitSet
name|keyOrdinals
range|:
name|keyOrdinalLists
control|)
block|{
if|if
condition|(
name|ordinals
operator|.
name|contains
argument_list|(
name|keyOrdinals
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|void
name|pass
parameter_list|(
name|int
name|pass
parameter_list|,
name|List
argument_list|<
name|Space
argument_list|>
name|spaces
parameter_list|,
name|Iterable
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|rows
parameter_list|)
block|{
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|DEBUG
operator|.
name|value
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pass: "
operator|+
name|pass
operator|+
literal|", spaces.size: "
operator|+
name|spaces
operator|.
name|size
argument_list|()
operator|+
literal|", distributions.size: "
operator|+
name|distributions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Space
name|space
range|:
name|spaces
control|)
block|{
name|space
operator|.
name|collector
operator|=
name|Collector
operator|.
name|create
argument_list|(
name|space
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|List
argument_list|<
name|Comparable
argument_list|>
name|row
range|:
name|rows
control|)
block|{
operator|++
name|rowCount
expr_stmt|;
for|for
control|(
name|Space
name|space
range|:
name|spaces
control|)
block|{
name|space
operator|.
name|collector
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Populate unique keys.
comment|// If [x, y] is a key,
comment|// then [x, y, z] is a non-minimal key (therefore not interesting),
comment|// and [x, y] => [a] is a functional dependency but not interesting,
comment|// and [x, y, z] is not an interesting distribution.
for|for
control|(
name|Space
name|space
range|:
name|spaces
control|)
block|{
name|space
operator|.
name|collector
operator|.
name|finish
argument_list|()
expr_stmt|;
name|space
operator|.
name|collector
operator|=
literal|null
expr_stmt|;
comment|//        results.add(space);
name|int
name|nonMinimal
init|=
literal|0
decl_stmt|;
name|dependents
label|:
for|for
control|(
name|Space
name|s
range|:
name|results
operator|.
name|getDescendants
argument_list|(
name|space
argument_list|)
control|)
block|{
if|if
condition|(
name|s
operator|.
name|cardinality
operator|==
name|space
operator|.
name|cardinality
condition|)
block|{
comment|// We have discovered a sub-set that has the same cardinality.
comment|// The column(s) that are not in common are functionally
comment|// dependent.
specifier|final
name|ImmutableBitSet
name|dependents
init|=
name|space
operator|.
name|columnOrdinals
operator|.
name|except
argument_list|(
name|s
operator|.
name|columnOrdinals
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|s
operator|.
name|columnOrdinals
control|)
block|{
specifier|final
name|Space
name|s1
init|=
name|singletonSpaces
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|rest
init|=
name|s
operator|.
name|columnOrdinals
operator|.
name|clear
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|dependent
range|:
name|s1
operator|.
name|dependents
control|)
block|{
if|if
condition|(
name|rest
operator|.
name|contains
argument_list|(
name|dependent
argument_list|)
condition|)
block|{
comment|// The "key" of this functional dependency is not minimal.
comment|// For instance, if we know that
comment|//   (a) -> x
comment|// then
comment|//   (a, b, x) -> y
comment|// is not minimal; we could say the same with a smaller key:
comment|//   (a, b) -> y
operator|++
name|nonMinimal
expr_stmt|;
continue|continue
name|dependents
continue|;
block|}
block|}
block|}
for|for
control|(
name|int
name|dependent
range|:
name|dependents
control|)
block|{
specifier|final
name|Space
name|s1
init|=
name|singletonSpaces
operator|.
name|get
argument_list|(
name|dependent
argument_list|)
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|d
range|:
name|s1
operator|.
name|dependents
control|)
block|{
if|if
condition|(
name|s
operator|.
name|columnOrdinals
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
block|{
operator|++
name|nonMinimal
expr_stmt|;
continue|continue
name|dependents
continue|;
block|}
block|}
block|}
name|space
operator|.
name|dependencies
operator|.
name|or
argument_list|(
name|dependents
operator|.
name|toBitSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
range|:
name|dependents
control|)
block|{
name|singletonSpaces
operator|.
name|get
argument_list|(
name|d
argument_list|)
operator|.
name|dependents
operator|.
name|add
argument_list|(
name|s
operator|.
name|columnOrdinals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nonMinimal
operator|>
literal|0
condition|)
block|{
continue|continue;
block|}
specifier|final
name|String
name|s
init|=
name|space
operator|.
name|columns
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// for debug
name|Util
operator|.
name|discard
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|double
name|expectedCardinality
init|=
name|expectedCardinality
argument_list|(
name|rowCount
argument_list|,
name|space
operator|.
name|columnOrdinals
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|minimal
init|=
name|nonMinimal
operator|==
literal|0
operator|&&
operator|!
name|space
operator|.
name|unique
operator|&&
operator|!
name|containsKey
argument_list|(
name|space
operator|.
name|columnOrdinals
argument_list|)
decl_stmt|;
name|space
operator|.
name|expectedCardinality
operator|=
name|expectedCardinality
expr_stmt|;
if|if
condition|(
name|minimal
condition|)
block|{
specifier|final
name|Distribution
name|distribution
init|=
operator|new
name|Distribution
argument_list|(
name|space
operator|.
name|columns
argument_list|,
name|space
operator|.
name|valueSet
argument_list|,
name|space
operator|.
name|cardinality
argument_list|,
name|space
operator|.
name|nullCount
argument_list|,
name|expectedCardinality
argument_list|,
name|minimal
argument_list|)
decl_stmt|;
specifier|final
name|double
name|surprise
init|=
name|distribution
operator|.
name|surprise
argument_list|()
decl_stmt|;
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|DEBUG
operator|.
name|value
argument_list|()
operator|&&
name|surprise
operator|>
literal|0.1d
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|distribution
operator|.
name|columnOrdinals
argument_list|()
operator|+
literal|" "
operator|+
name|distribution
operator|.
name|columns
operator|+
literal|", cardinality: "
operator|+
name|distribution
operator|.
name|cardinality
operator|+
literal|", expected: "
operator|+
name|distribution
operator|.
name|expectedCardinality
operator|+
literal|", surprise: "
operator|+
name|distribution
operator|.
name|surprise
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|surprises
operator|.
name|offer
argument_list|(
name|surprise
argument_list|)
condition|)
block|{
name|distributions
operator|.
name|put
argument_list|(
name|space
operator|.
name|columnOrdinals
argument_list|,
name|distribution
argument_list|)
expr_stmt|;
name|keyPoset
operator|.
name|add
argument_list|(
name|space
operator|.
name|columnOrdinals
argument_list|)
expr_stmt|;
name|doneQueue
operator|.
name|add
argument_list|(
name|space
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|space
operator|.
name|cardinality
operator|==
name|rowCount
condition|)
block|{
comment|// We have discovered a new key. It is not a super-set of a key.
name|uniques
operator|.
name|add
argument_list|(
operator|new
name|Unique
argument_list|(
name|space
operator|.
name|columns
argument_list|)
argument_list|)
expr_stmt|;
name|keyOrdinalLists
operator|.
name|add
argument_list|(
name|space
operator|.
name|columnOrdinals
argument_list|)
expr_stmt|;
name|space
operator|.
name|unique
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
block|}
comment|/** Estimates the cardinality of a collection of columns represented by      * {@code columnOrdinals}, drawing on existing distributions. */
specifier|private
name|double
name|cardinality
parameter_list|(
name|double
name|rowCount
parameter_list|,
name|ImmutableBitSet
name|columns
parameter_list|)
block|{
specifier|final
name|Distribution
name|distribution
init|=
name|distributions
operator|.
name|get
argument_list|(
name|columns
argument_list|)
decl_stmt|;
if|if
condition|(
name|distribution
operator|!=
literal|null
condition|)
block|{
return|return
name|distribution
operator|.
name|cardinality
return|;
block|}
else|else
block|{
return|return
name|expectedCardinality
argument_list|(
name|rowCount
argument_list|,
name|columns
argument_list|)
return|;
block|}
block|}
comment|/** Estimates the cardinality of a collection of columns represented by      * {@code columnOrdinals}, drawing on existing distributions. Does not      * look in the distribution map for this column set. */
specifier|private
name|double
name|expectedCardinality
parameter_list|(
name|double
name|rowCount
parameter_list|,
name|ImmutableBitSet
name|columns
parameter_list|)
block|{
switch|switch
condition|(
name|columns
operator|.
name|cardinality
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|1d
return|;
case|case
literal|1
case|:
return|return
name|rowCount
return|;
default|default:
name|double
name|c
init|=
name|rowCount
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|bitSet
range|:
name|keyPoset
operator|.
name|getParents
argument_list|(
name|columns
argument_list|,
literal|true
argument_list|)
control|)
block|{
if|if
condition|(
name|bitSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If the parent is the empty group (i.e. "GROUP BY ()", the grand
comment|// total) we cannot improve on the estimate.
continue|continue;
block|}
specifier|final
name|Distribution
name|d1
init|=
name|distributions
operator|.
name|get
argument_list|(
name|bitSet
argument_list|)
decl_stmt|;
specifier|final
name|double
name|c2
init|=
name|cardinality
argument_list|(
name|rowCount
argument_list|,
name|columns
operator|.
name|except
argument_list|(
name|bitSet
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|double
name|d
init|=
name|Lattice
operator|.
name|getRowCount
argument_list|(
name|rowCount
argument_list|,
name|d1
operator|.
name|cardinality
argument_list|,
name|c2
argument_list|)
decl_stmt|;
name|c
operator|=
name|Math
operator|.
name|min
argument_list|(
name|c
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ImmutableBitSet
name|bitSet
range|:
name|keyPoset
operator|.
name|getChildren
argument_list|(
name|columns
argument_list|,
literal|true
argument_list|)
control|)
block|{
specifier|final
name|Distribution
name|d1
init|=
name|distributions
operator|.
name|get
argument_list|(
name|bitSet
argument_list|)
decl_stmt|;
name|c
operator|=
name|Math
operator|.
name|min
argument_list|(
name|c
argument_list|,
name|d1
operator|.
name|cardinality
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
specifier|private
name|ImmutableSortedSet
argument_list|<
name|Column
argument_list|>
name|toColumns
parameter_list|(
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ordinals
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|ordinals
argument_list|,
name|columns
operator|::
name|get
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Work space for a particular combination of columns. */
specifier|static
class|class
name|Space
block|{
specifier|private
specifier|final
name|Run
name|run
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|columnOrdinals
decl_stmt|;
specifier|final
name|ImmutableSortedSet
argument_list|<
name|Column
argument_list|>
name|columns
decl_stmt|;
name|boolean
name|unique
decl_stmt|;
specifier|final
name|BitSet
name|dependencies
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|dependents
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|double
name|expectedCardinality
decl_stmt|;
name|Collector
name|collector
decl_stmt|;
comment|/** Assigned by {@link Collector#finish()}. */
name|int
name|nullCount
decl_stmt|;
comment|/** Number of distinct values. Null is counted as a value, if present.      * Assigned by {@link Collector#finish()}. */
name|int
name|cardinality
decl_stmt|;
comment|/** Assigned by {@link Collector#finish()}. */
name|SortedSet
argument_list|<
name|Comparable
argument_list|>
name|valueSet
decl_stmt|;
name|Space
parameter_list|(
name|Run
name|run
parameter_list|,
name|ImmutableBitSet
name|columnOrdinals
parameter_list|,
name|Iterable
argument_list|<
name|Column
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|run
operator|=
name|run
expr_stmt|;
name|this
operator|.
name|columnOrdinals
operator|=
name|columnOrdinals
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|columnOrdinals
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|Space
operator|&&
name|columnOrdinals
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Space
operator|)
name|o
operator|)
operator|.
name|columnOrdinals
argument_list|)
return|;
block|}
comment|/** Returns the distribution created from this space, or null if no      * distribution has been registered yet. */
specifier|public
name|Distribution
name|distribution
parameter_list|()
block|{
return|return
name|run
operator|.
name|distributions
operator|.
name|get
argument_list|(
name|columnOrdinals
argument_list|)
return|;
block|}
name|double
name|surprise
parameter_list|()
block|{
return|return
name|SimpleProfiler
operator|.
name|surprise
argument_list|(
name|expectedCardinality
argument_list|,
name|cardinality
argument_list|)
return|;
block|}
block|}
comment|/** Builds a {@link org.apache.calcite.profile.ProfilerImpl}. */
specifier|public
specifier|static
class|class
name|Builder
block|{
name|int
name|combinationsPerPass
init|=
literal|100
decl_stmt|;
name|Predicate
argument_list|<
name|Pair
argument_list|<
name|Space
argument_list|,
name|Column
argument_list|>
argument_list|>
name|predicate
init|=
name|p
lambda|->
literal|true
decl_stmt|;
specifier|public
name|ProfilerImpl
name|build
parameter_list|()
block|{
return|return
operator|new
name|ProfilerImpl
argument_list|(
name|combinationsPerPass
argument_list|,
literal|200
argument_list|,
name|predicate
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|withPassSize
parameter_list|(
name|int
name|passSize
parameter_list|)
block|{
name|this
operator|.
name|combinationsPerPass
operator|=
name|passSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withMinimumSurprise
parameter_list|(
name|double
name|v
parameter_list|)
block|{
name|predicate
operator|=
name|spaceColumnPair
lambda|->
block|{
specifier|final
name|Space
name|space
init|=
name|spaceColumnPair
operator|.
name|left
decl_stmt|;
return|return
literal|false
return|;
block|}
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/** Collects values of a column or columns. */
specifier|abstract
specifier|static
class|class
name|Collector
block|{
specifier|protected
specifier|final
name|Space
name|space
decl_stmt|;
name|Collector
parameter_list|(
name|Space
name|space
parameter_list|)
block|{
name|this
operator|.
name|space
operator|=
name|space
expr_stmt|;
block|}
specifier|abstract
name|void
name|add
parameter_list|(
name|List
argument_list|<
name|Comparable
argument_list|>
name|row
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|finish
parameter_list|()
function_decl|;
comment|/** Creates an initial collector of the appropriate kind. */
specifier|public
specifier|static
name|Collector
name|create
parameter_list|(
name|Space
name|space
parameter_list|,
name|int
name|sketchThreshold
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|columnOrdinalList
init|=
name|space
operator|.
name|columnOrdinals
operator|.
name|asList
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnOrdinalList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|SingletonCollector
argument_list|(
name|space
argument_list|,
name|columnOrdinalList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sketchThreshold
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CompositeCollector
argument_list|(
name|space
argument_list|,
operator|(
name|int
index|[]
operator|)
name|Primitive
operator|.
name|INT
operator|.
name|toArray
argument_list|(
name|columnOrdinalList
argument_list|)
argument_list|,
name|sketchThreshold
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Collector that collects values of a single column. */
specifier|static
class|class
name|SingletonCollector
extends|extends
name|Collector
block|{
specifier|final
name|SortedSet
argument_list|<
name|Comparable
argument_list|>
name|values
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnOrdinal
decl_stmt|;
specifier|final
name|int
name|sketchThreshold
decl_stmt|;
name|int
name|nullCount
init|=
literal|0
decl_stmt|;
name|SingletonCollector
parameter_list|(
name|Space
name|space
parameter_list|,
name|int
name|columnOrdinal
parameter_list|,
name|int
name|sketchThreshold
parameter_list|)
block|{
name|super
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnOrdinal
operator|=
name|columnOrdinal
expr_stmt|;
name|this
operator|.
name|sketchThreshold
operator|=
name|sketchThreshold
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|List
argument_list|<
name|Comparable
argument_list|>
name|row
parameter_list|)
block|{
specifier|final
name|Comparable
name|v
init|=
name|row
operator|.
name|get
argument_list|(
name|columnOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
name|nullCount
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|==
name|sketchThreshold
condition|)
block|{
comment|// Too many values. Switch to a sketch collector.
specifier|final
name|HllSingletonCollector
name|collector
init|=
operator|new
name|HllSingletonCollector
argument_list|(
name|space
argument_list|,
name|columnOrdinal
argument_list|)
decl_stmt|;
for|for
control|(
name|Comparable
name|value
range|:
name|values
control|)
block|{
name|collector
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|space
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|finish
parameter_list|()
block|{
name|space
operator|.
name|nullCount
operator|=
name|nullCount
expr_stmt|;
name|space
operator|.
name|cardinality
operator|=
name|values
operator|.
name|size
argument_list|()
operator|+
operator|(
name|nullCount
operator|>
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|space
operator|.
name|valueSet
operator|=
name|values
operator|.
name|size
argument_list|()
operator|<
literal|20
condition|?
name|values
else|:
literal|null
expr_stmt|;
block|}
block|}
comment|/** Collector that collects two or more column values in a tree set. */
specifier|static
class|class
name|CompositeCollector
extends|extends
name|Collector
block|{
specifier|protected
specifier|static
specifier|final
name|ImmutableBitSet
name|OF
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|13
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|FlatLists
operator|.
name|ComparableList
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|columnOrdinals
decl_stmt|;
specifier|final
name|Comparable
index|[]
name|columnValues
decl_stmt|;
name|int
name|nullCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|sketchThreshold
decl_stmt|;
name|CompositeCollector
parameter_list|(
name|Space
name|space
parameter_list|,
name|int
index|[]
name|columnOrdinals
parameter_list|,
name|int
name|sketchThreshold
parameter_list|)
block|{
name|super
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnOrdinals
operator|=
name|columnOrdinals
expr_stmt|;
name|this
operator|.
name|columnValues
operator|=
operator|new
name|Comparable
index|[
name|columnOrdinals
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|sketchThreshold
operator|=
name|sketchThreshold
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|List
argument_list|<
name|Comparable
argument_list|>
name|row
parameter_list|)
block|{
if|if
condition|(
name|space
operator|.
name|columnOrdinals
operator|.
name|equals
argument_list|(
name|OF
argument_list|)
condition|)
block|{
name|Util
operator|.
name|discard
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|nullCountThisRow
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|length
init|=
name|columnOrdinals
operator|.
name|length
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Comparable
name|value
init|=
name|row
operator|.
name|get
argument_list|(
name|columnOrdinals
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
if|if
condition|(
name|nullCountThisRow
operator|++
operator|==
literal|0
condition|)
block|{
name|nullCount
operator|++
expr_stmt|;
block|}
block|}
name|columnValues
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
comment|//noinspection unchecked
if|if
condition|(
operator|(
operator|(
name|Set
operator|)
name|values
operator|)
operator|.
name|add
argument_list|(
name|FlatLists
operator|.
name|copyOf
argument_list|(
name|columnValues
argument_list|)
argument_list|)
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|==
name|sketchThreshold
condition|)
block|{
comment|// Too many values. Switch to a sketch collector.
specifier|final
name|HllCompositeCollector
name|collector
init|=
operator|new
name|HllCompositeCollector
argument_list|(
name|space
argument_list|,
name|columnOrdinals
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Comparable
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|columnOrdinals
index|[
name|columnOrdinals
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FlatLists
operator|.
name|ComparableList
name|value
range|:
name|this
operator|.
name|values
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Comparable
name|c
init|=
operator|(
name|Comparable
operator|)
name|value
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
name|columnOrdinals
index|[
name|i
index|]
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|collector
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|space
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finish
parameter_list|()
block|{
comment|// number of input rows (not distinct values)
comment|// that were null or partially null
name|space
operator|.
name|nullCount
operator|=
name|nullCount
expr_stmt|;
name|space
operator|.
name|cardinality
operator|=
name|values
operator|.
name|size
argument_list|()
operator|+
operator|(
name|nullCount
operator|>
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|space
operator|.
name|valueSet
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** Collector that collects two or more column values into a HyperLogLog    * sketch. */
specifier|abstract
specifier|static
class|class
name|HllCollector
extends|extends
name|Collector
block|{
specifier|final
name|HllSketch
name|sketch
decl_stmt|;
name|int
name|nullCount
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|NULL_BITS
init|=
block|{
literal|0x9f77d57e93167a16L
block|}
decl_stmt|;
name|HllCollector
parameter_list|(
name|Space
name|space
parameter_list|)
block|{
name|super
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|this
operator|.
name|sketch
operator|=
name|HllSketch
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|add
parameter_list|(
name|Comparable
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
name|sketch
operator|.
name|update
argument_list|(
name|NULL_BITS
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|sketch
operator|.
name|update
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|sketch
operator|.
name|update
argument_list|(
operator|(
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|sketch
operator|.
name|update
argument_list|(
operator|(
name|Float
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|sketch
operator|.
name|update
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|sketch
operator|.
name|update
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sketch
operator|.
name|update
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finish
parameter_list|()
block|{
name|space
operator|.
name|nullCount
operator|=
name|nullCount
expr_stmt|;
name|space
operator|.
name|cardinality
operator|=
operator|(
name|int
operator|)
name|sketch
operator|.
name|getEstimate
argument_list|()
expr_stmt|;
name|space
operator|.
name|valueSet
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** Collector that collects one column value into a HyperLogLog sketch. */
specifier|static
class|class
name|HllSingletonCollector
extends|extends
name|HllCollector
block|{
specifier|final
name|int
name|columnOrdinal
decl_stmt|;
name|HllSingletonCollector
parameter_list|(
name|Space
name|space
parameter_list|,
name|int
name|columnOrdinal
parameter_list|)
block|{
name|super
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnOrdinal
operator|=
name|columnOrdinal
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|List
argument_list|<
name|Comparable
argument_list|>
name|row
parameter_list|)
block|{
specifier|final
name|Comparable
name|value
init|=
name|row
operator|.
name|get
argument_list|(
name|columnOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
name|nullCount
operator|++
expr_stmt|;
name|sketch
operator|.
name|update
argument_list|(
name|NULL_BITS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Collector that collects two or more column values into a HyperLogLog    * sketch. */
specifier|static
class|class
name|HllCompositeCollector
extends|extends
name|HllCollector
block|{
specifier|private
specifier|final
name|int
index|[]
name|columnOrdinals
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|HllCompositeCollector
parameter_list|(
name|Space
name|space
parameter_list|,
name|int
index|[]
name|columnOrdinals
parameter_list|)
block|{
name|super
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnOrdinals
operator|=
name|columnOrdinals
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|List
argument_list|<
name|Comparable
argument_list|>
name|row
parameter_list|)
block|{
if|if
condition|(
name|space
operator|.
name|columnOrdinals
operator|.
name|equals
argument_list|(
name|OF
argument_list|)
condition|)
block|{
name|Util
operator|.
name|discard
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|nullCountThisRow
init|=
literal|0
decl_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|columnOrdinal
range|:
name|columnOrdinals
control|)
block|{
specifier|final
name|Comparable
name|value
init|=
name|row
operator|.
name|get
argument_list|(
name|columnOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
if|if
condition|(
name|nullCountThisRow
operator|++
operator|==
literal|0
condition|)
block|{
name|nullCount
operator|++
expr_stmt|;
block|}
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|.
name|put
argument_list|(
operator|(
operator|(
name|String
operator|)
name|value
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|.
name|putDouble
argument_list|(
operator|(
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
operator|.
name|putFloat
argument_list|(
operator|(
name|Float
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
operator|.
name|putLong
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
operator|.
name|putInt
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|buf
operator|.
name|put
argument_list|(
operator|(
name|Boolean
operator|)
name|value
condition|?
operator|(
name|byte
operator|)
literal|6
else|:
operator|(
name|byte
operator|)
literal|7
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
operator|.
name|put
argument_list|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sketch
operator|.
name|update
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|position
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A priority queue of the last N surprise values. Accepts a new value if    * the queue is not yet full, or if its value is greater than the median value    * over the last N. */
specifier|static
class|class
name|SurpriseQueue
block|{
specifier|private
specifier|final
name|int
name|warmUpCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|Deque
argument_list|<
name|Double
argument_list|>
name|deque
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|PriorityQueue
argument_list|<
name|Double
argument_list|>
name|priorityQueue
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
literal|11
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|SurpriseQueue
parameter_list|(
name|int
name|warmUpCount
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|warmUpCount
operator|=
name|warmUpCount
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|warmUpCount
operator|>
literal|3
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"min: "
operator|+
name|priorityQueue
operator|.
name|peek
argument_list|()
operator|+
literal|", contents: "
operator|+
name|deque
operator|.
name|toString
argument_list|()
return|;
block|}
name|boolean
name|isValid
parameter_list|()
block|{
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|DEBUG
operator|.
name|value
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|deque
operator|.
name|size
argument_list|()
operator|==
name|priorityQueue
operator|.
name|size
argument_list|()
assert|;
if|if
condition|(
name|count
operator|>
name|size
condition|)
block|{
assert|assert
name|deque
operator|.
name|size
argument_list|()
operator|==
name|size
assert|;
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|offer
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|boolean
name|b
decl_stmt|;
if|if
condition|(
name|count
operator|++
operator|<
name|warmUpCount
operator|||
name|d
operator|>
name|priorityQueue
operator|.
name|peek
argument_list|()
condition|)
block|{
if|if
condition|(
name|priorityQueue
operator|.
name|size
argument_list|()
operator|>=
name|size
condition|)
block|{
name|priorityQueue
operator|.
name|remove
argument_list|(
name|deque
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|priorityQueue
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|deque
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|b
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|DEBUG
operator|.
name|value
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"offer "
operator|+
name|d
operator|+
literal|" min "
operator|+
name|priorityQueue
operator|.
name|peek
argument_list|()
operator|+
literal|" accepted "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ProfilerImpl.java
end_comment

end_unit

