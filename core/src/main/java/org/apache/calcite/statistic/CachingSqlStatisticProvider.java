begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|statistic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|SqlStatisticProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link SqlStatisticProvider} that reads and writes a  * cache.  */
end_comment

begin_class
specifier|public
class|class
name|CachingSqlStatisticProvider
implements|implements
name|SqlStatisticProvider
block|{
specifier|private
specifier|final
name|SqlStatisticProvider
name|provider
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|List
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|CachingSqlStatisticProvider
parameter_list|(
name|SqlStatisticProvider
name|provider
parameter_list|,
name|Cache
argument_list|<
name|List
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
specifier|public
name|double
name|tableCardinality
parameter_list|(
name|RelOptTable
name|table
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ImmutableList
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"tableCardinality"
argument_list|,
name|table
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|Double
operator|)
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
name|provider
operator|.
name|tableCardinality
argument_list|(
name|table
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isForeignKey
parameter_list|(
name|RelOptTable
name|fromTable
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|fromColumns
parameter_list|,
name|RelOptTable
name|toTable
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|toColumns
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ImmutableList
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"isForeignKey"
argument_list|,
name|fromTable
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|fromColumns
argument_list|)
argument_list|,
name|toTable
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|toColumns
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
name|provider
operator|.
name|isForeignKey
argument_list|(
name|fromTable
argument_list|,
name|fromColumns
argument_list|,
name|toTable
argument_list|,
name|toColumns
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columns
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ImmutableList
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"isKey"
argument_list|,
name|table
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|columns
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
name|provider
operator|.
name|isKey
argument_list|(
name|table
argument_list|,
name|columns
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End CachingSqlStatisticProvider.java
end_comment

end_unit

