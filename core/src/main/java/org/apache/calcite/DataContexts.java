begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/** Utilities for {@link DataContext}. */
end_comment

begin_class
specifier|public
class|class
name|DataContexts
block|{
specifier|private
name|DataContexts
parameter_list|()
block|{
block|}
comment|/** Instance of {@link DataContext} that has no variables. */
specifier|public
specifier|static
specifier|final
name|DataContext
name|EMPTY
init|=
operator|new
name|EmptyDataContext
argument_list|()
decl_stmt|;
comment|/** Returns an instance of {@link DataContext} with the given map. */
specifier|public
specifier|static
name|DataContext
name|of
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|MapDataContext
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/** Returns an instance of {@link DataContext} with the given function. */
specifier|public
specifier|static
name|DataContext
name|of
argument_list|(
name|Function
operator|<
name|String
argument_list|,
operator|?
expr|extends @
name|Nullable
name|Object
operator|>
name|fn
argument_list|)
block|{
return|return
operator|new
name|FunctionDataContext
argument_list|(
name|fn
argument_list|)
return|;
block|}
comment|/** Returns an instance of {@link DataContext} with the given connection    * and root schema but no variables. */
specifier|public
specifier|static
name|DataContext
name|of
parameter_list|(
name|CalciteConnection
name|connection
parameter_list|,
annotation|@
name|Nullable
name|SchemaPlus
name|rootSchema
parameter_list|)
block|{
return|return
operator|new
name|DataContextImpl
argument_list|(
name|connection
argument_list|,
name|rootSchema
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/** Implementation of {@link DataContext} that has no variables.    *    *<p>It is {@link Serializable} for Spark's benefit. */
specifier|private
specifier|static
class|class
name|EmptyDataContext
implements|implements
name|DataContext
implements|,
name|Serializable
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|SchemaPlus
name|getRootSchema
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|JavaTypeFactory
name|getTypeFactory
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|QueryProvider
name|getQueryProvider
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Implementation of {@link DataContext} backed by a Map.    *    *<p>Keys and values in the map must not be null. Rather than storing a null    * value for a key, remove the key from the map; the effect will be the    * same. */
specifier|private
specifier|static
class|class
name|MapDataContext
extends|extends
name|EmptyDataContext
block|{
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
decl_stmt|;
name|MapDataContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link DataContext} backed by a Function. */
specifier|private
specifier|static
class|class
name|FunctionDataContext
extends|extends
name|EmptyDataContext
block|{
specifier|private
name|final
name|Function
operator|<
name|String
operator|,
operator|?
expr|extends @
name|Nullable
name|Object
operator|>
name|fn
expr_stmt|;
name|FunctionDataContext
argument_list|(
name|Function
operator|<
name|String
argument_list|,
operator|?
expr|extends @
name|Nullable
name|Object
operator|>
name|fn
argument_list|)
block|{
name|this
operator|.
name|fn
operator|=
name|requireNonNull
argument_list|(
name|fn
argument_list|,
literal|"fn"
argument_list|)
block|;     }
expr|@
name|Override
specifier|public
expr|@
name|Nullable
name|Object
name|get
argument_list|(
name|String
name|name
argument_list|)
block|{
return|return
name|fn
operator|.
name|apply
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link DataContext} backed by a Map. */
specifier|private
specifier|static
class|class
name|DataContextImpl
extends|extends
name|MapDataContext
block|{
specifier|private
name|CalciteConnection
name|connection
decl_stmt|;
specifier|private
annotation|@
name|Nullable
name|SchemaPlus
name|rootSchema
decl_stmt|;
name|DataContextImpl
parameter_list|(
name|CalciteConnection
name|connection
parameter_list|,
annotation|@
name|Nullable
name|SchemaPlus
name|rootSchema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|requireNonNull
argument_list|(
name|connection
argument_list|,
literal|"connection"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootSchema
operator|=
name|requireNonNull
argument_list|(
name|rootSchema
argument_list|,
literal|"rootSchema"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JavaTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|connection
operator|.
name|getTypeFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|SchemaPlus
name|getRootSchema
parameter_list|()
block|{
return|return
name|rootSchema
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryProvider
name|getQueryProvider
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
block|}
block|}
end_class

end_unit

