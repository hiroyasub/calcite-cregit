begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Helper that combines the sorting process and accumulating process against the  * aggregate execution, used with {@link LazyAggregateLambdaFactory}.  *  * @param<TAccumulate> Type of the accumulator  * @param<TSource>     Type of the enumerable input source  * @param<TSortKey>    Type of the sort key  */
end_comment

begin_class
specifier|public
class|class
name|SourceSorter
parameter_list|<
name|TAccumulate
parameter_list|,
name|TSource
parameter_list|,
name|TSortKey
parameter_list|>
implements|implements
name|LazyAggregateLambdaFactory
operator|.
name|LazyAccumulator
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|>
block|{
specifier|private
specifier|final
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
name|accumulatorAdder
decl_stmt|;
specifier|private
specifier|final
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TSortKey
argument_list|>
name|keySelector
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|TSortKey
argument_list|>
name|comparator
decl_stmt|;
specifier|public
name|SourceSorter
parameter_list|(
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
name|accumulatorAdder
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TSortKey
argument_list|>
name|keySelector
parameter_list|,
name|Comparator
argument_list|<
name|TSortKey
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|accumulatorAdder
operator|=
name|accumulatorAdder
expr_stmt|;
name|this
operator|.
name|keySelector
operator|=
name|keySelector
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accumulate
parameter_list|(
name|Iterable
argument_list|<
name|TSource
argument_list|>
name|sourceIterable
parameter_list|,
name|TAccumulate
name|accumulator
parameter_list|)
block|{
name|sortAndAccumulate
argument_list|(
name|sourceIterable
argument_list|,
name|accumulator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortAndAccumulate
parameter_list|(
name|Iterable
argument_list|<
name|TSource
argument_list|>
name|sourceIterable
parameter_list|,
name|TAccumulate
name|accumulator
parameter_list|)
block|{
name|List
argument_list|<
name|TSource
argument_list|>
name|sorted
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|sourceIterable
argument_list|)
operator|.
name|orderBy
argument_list|(
name|keySelector
argument_list|,
name|comparator
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|TAccumulate
name|accumulator1
init|=
name|accumulator
decl_stmt|;
for|for
control|(
name|TSource
name|source
range|:
name|sorted
control|)
block|{
name|accumulator1
operator|=
name|accumulatorAdder
operator|.
name|apply
argument_list|(
name|accumulator1
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

