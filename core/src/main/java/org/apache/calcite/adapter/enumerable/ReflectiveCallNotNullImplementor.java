begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ConstantUntypedNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|NewExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of  * {@link org.apache.calcite.adapter.enumerable.NotNullImplementor}  * that calls a given {@link java.lang.reflect.Method}.  *  *<p>When method is not static, a new instance of the required class is  * created.  */
end_comment

begin_class
specifier|public
class|class
name|ReflectiveCallNotNullImplementor
implements|implements
name|NotNullImplementor
block|{
specifier|protected
specifier|final
name|Method
name|method
decl_stmt|;
comment|/**    * Constructor of {@link ReflectiveCallNotNullImplementor}    * @param method method that is used to implement the call    */
specifier|public
name|ReflectiveCallNotNullImplementor
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
specifier|public
name|Expression
name|implement
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedOperands
parameter_list|)
block|{
name|translatedOperands
operator|=
name|fromInternal
argument_list|(
name|translatedOperands
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|method
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|method
argument_list|,
name|translatedOperands
argument_list|)
return|;
block|}
else|else
block|{
comment|// The UDF class must have a public zero-args constructor.
comment|// Assume that the validator checked already.
specifier|final
name|NewExpression
name|target
init|=
name|Expressions
operator|.
name|new_
argument_list|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|target
argument_list|,
name|method
argument_list|,
name|translatedOperands
argument_list|)
return|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Expression
argument_list|>
name|fromInternal
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Class
index|[]
name|types
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|fromInternal
argument_list|(
name|expressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|types
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|Expression
name|fromInternal
parameter_list|(
name|Expression
name|e
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|targetType
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
name|ConstantUntypedNull
operator|.
name|INSTANCE
condition|)
block|{
return|return
name|e
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getType
argument_list|()
operator|instanceof
name|Class
operator|)
condition|)
block|{
return|return
name|e
return|;
block|}
if|if
condition|(
name|targetType
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
operator|)
name|e
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
if|if
condition|(
name|targetType
operator|==
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"internalToDate"
argument_list|,
name|e
argument_list|)
return|;
block|}
if|if
condition|(
name|targetType
operator|==
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"internalToTime"
argument_list|,
name|e
argument_list|)
return|;
block|}
if|if
condition|(
name|targetType
operator|==
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"internalToTimestamp"
argument_list|,
name|e
argument_list|)
return|;
block|}
return|return
name|e
return|;
block|}
block|}
end_class

begin_comment
comment|// End ReflectiveCallNotNullImplementor.java
end_comment

end_unit

