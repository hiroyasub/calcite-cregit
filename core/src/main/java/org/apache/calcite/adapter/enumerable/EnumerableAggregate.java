begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|impl
operator|.
name|AggResultContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Implementation of {@link org.apache.calcite.rel.core.Aggregate} in  * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|EnumerableAggregate
extends|extends
name|EnumerableAggregateBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"distinct aggregation not supported"
argument_list|)
throw|;
block|}
name|AggImplementor
name|implementor2
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"aggregation "
operator|+
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|EnumerableAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|boolean
name|indicator
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
name|checkIndicator
argument_list|(
name|indicator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableAggregate
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|EnumerableAggregate
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|preferCustom
argument_list|()
argument_list|)
decl_stmt|;
comment|// final Enumerable<Employee> child =<<child adapter>>;
comment|// Function1<Employee, Integer> keySelector =
comment|//     new Function1<Employee, Integer>() {
comment|//         public Integer apply(Employee a0) {
comment|//             return a0.deptno;
comment|//         }
comment|//     };
comment|// Function1<Employee, Object[]> accumulatorInitializer =
comment|//     new Function1<Employee, Object[]>() {
comment|//         public Object[] apply(Employee a0) {
comment|//             return new Object[] {0, 0};
comment|//         }
comment|//     };
comment|// Function2<Object[], Employee, Object[]> accumulatorAdder =
comment|//     new Function2<Object[], Employee, Object[]>() {
comment|//         public Object[] apply(Object[] a1, Employee a0) {
comment|//              a1[0] = ((Integer) a1[0]) + 1;
comment|//              a1[1] = ((Integer) a1[1]) + a0.salary;
comment|//             return a1;
comment|//         }
comment|//     };
comment|// Function2<Integer, Object[], Object[]> resultSelector =
comment|//     new Function2<Integer, Object[], Object[]>() {
comment|//         public Object[] apply(Integer a0, Object[] a1) {
comment|//             return new Object[] { a0, a1[0], a1[1] };
comment|//         }
comment|//     };
comment|// return childEnumerable
comment|//     .groupBy(
comment|//        keySelector, accumulatorInitializer, accumulatorAdder,
comment|//        resultSelector);
comment|//
comment|// or, if key has 0 columns,
comment|//
comment|// return childEnumerable
comment|//     .aggregate(
comment|//       accumulatorInitializer.apply(),
comment|//       accumulatorAdder,
comment|//       resultSelector);
comment|//
comment|// with a slightly different resultSelector; or if there are no aggregate
comment|// functions
comment|//
comment|// final Enumerable<Employee> child =<<child adapter>>;
comment|// Function1<Employee, Integer> keySelector =
comment|//     new Function1<Employee, Integer>() {
comment|//         public Integer apply(Employee a0) {
comment|//             return a0.deptno;
comment|//         }
comment|//     };
comment|// EqualityComparer<Employee> equalityComparer =
comment|//     new EqualityComparer<Employee>() {
comment|//         boolean equal(Employee a0, Employee a1) {
comment|//             return a0.deptno;
comment|//         }
comment|//     };
comment|// return child
comment|//     .distinct(equalityComparer);
specifier|final
name|PhysType
name|inputPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"a0"
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|keyPhysType
init|=
name|inputPhysType
operator|.
name|project
argument_list|(
name|groupSet
operator|.
name|asList
argument_list|()
argument_list|,
name|getGroupType
argument_list|()
operator|!=
name|Group
operator|.
name|SIMPLE
argument_list|,
name|JavaRowFormat
operator|.
name|LIST
argument_list|)
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|getGroupCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggCalls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|AggregateCall
argument_list|>
name|call
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|)
control|)
block|{
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|AggImpState
argument_list|(
name|call
operator|.
name|i
argument_list|,
name|call
operator|.
name|e
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Function0<Object[]> accumulatorInitializer =
comment|//     new Function0<Object[]>() {
comment|//         public Object[] apply() {
comment|//             return new Object[] {0, 0};
comment|//         }
comment|//     };
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|initExpressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|initBlock
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|aggStateTypes
init|=
name|createAggStateTypes
argument_list|(
name|initExpressions
argument_list|,
name|initBlock
argument_list|,
name|aggs
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|accPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|typeFactory
operator|.
name|createSyntheticType
argument_list|(
name|aggStateTypes
argument_list|)
argument_list|)
decl_stmt|;
name|declareParentAccumulator
argument_list|(
name|initExpressions
argument_list|,
name|initBlock
argument_list|,
name|accPhysType
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|accumulatorInitializer
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"accumulatorInitializer"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function0
operator|.
name|class
argument_list|,
name|initBlock
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Function2<Object[], Employee, Object[]> accumulatorAdder =
comment|//     new Function2<Object[], Employee, Object[]>() {
comment|//         public Object[] apply(Object[] acc, Employee in) {
comment|//              acc[0] = ((Integer) acc[0]) + 1;
comment|//              acc[1] = ((Integer) acc[1]) + in.salary;
comment|//             return acc;
comment|//         }
comment|//     };
specifier|final
name|ParameterExpression
name|inParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|acc_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"acc"
argument_list|)
decl_stmt|;
name|createAccumulatorAdders
argument_list|(
name|inParameter
argument_list|,
name|aggs
argument_list|,
name|accPhysType
argument_list|,
name|acc_
argument_list|,
name|inputPhysType
argument_list|,
name|builder
argument_list|,
name|implementor
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|lambdaFactory
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|AggregateLambdaFactory
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"lambdaFactory"
argument_list|)
argument_list|)
decl_stmt|;
name|implementLambdaFactory
argument_list|(
name|builder
argument_list|,
name|inputPhysType
argument_list|,
name|aggs
argument_list|,
name|accumulatorInitializer
argument_list|,
name|hasOrderedCall
argument_list|(
name|aggs
argument_list|)
argument_list|,
name|lambdaFactory
argument_list|)
expr_stmt|;
comment|// Function2<Integer, Object[], Object[]> resultSelector =
comment|//     new Function2<Integer, Object[], Object[]>() {
comment|//         public Object[] apply(Integer key, Object[] acc) {
comment|//             return new Object[] { key, acc[0], acc[1] };
comment|//         }
comment|//     };
specifier|final
name|BlockBuilder
name|resultBlock
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|results
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|key_
decl_stmt|;
if|if
condition|(
name|groupCount
operator|==
literal|0
condition|)
block|{
name|key_
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Type
name|keyType
init|=
name|keyPhysType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
name|key_
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|keyType
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|groupCount
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Expression
name|ref
init|=
name|keyPhysType
operator|.
name|fieldReference
argument_list|(
name|key_
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|getGroupType
argument_list|()
operator|==
name|Group
operator|.
name|SIMPLE
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|keyPhysType
operator|.
name|fieldReference
argument_list|(
name|key_
argument_list|,
name|groupCount
operator|+
name|j
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|,
name|Expressions
operator|.
name|box
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|agg
operator|.
name|implementor
operator|.
name|implementResult
argument_list|(
name|agg
operator|.
name|context
argument_list|,
operator|new
name|AggResultContextImpl
argument_list|(
name|resultBlock
argument_list|,
name|agg
operator|.
name|call
argument_list|,
name|agg
operator|.
name|state
argument_list|,
name|key_
argument_list|,
name|keyPhysType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultBlock
operator|.
name|add
argument_list|(
name|physType
operator|.
name|record
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getGroupType
argument_list|()
operator|!=
name|Group
operator|.
name|SIMPLE
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|set
range|:
name|groupSets
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|inputPhysType
operator|.
name|generateSelector
argument_list|(
name|parameter
argument_list|,
name|groupSet
operator|.
name|asList
argument_list|()
argument_list|,
name|set
operator|.
name|asList
argument_list|()
argument_list|,
name|keyPhysType
operator|.
name|getFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Expression
name|keySelectors_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"keySelectors"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|ARRAYS_AS_LIST
operator|.
name|method
argument_list|,
name|list
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|resultSelector
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|resultBlock
operator|.
name|toBlock
argument_list|()
argument_list|,
name|key_
argument_list|,
name|acc_
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|GROUP_BY_MULTIPLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|childExp
argument_list|,
name|keySelectors_
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_INITIALIZER
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_ADDER
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR
operator|.
name|method
argument_list|,
name|resultSelector
argument_list|)
argument_list|)
operator|.
name|appendIfNotNull
argument_list|(
name|keyPhysType
operator|.
name|comparer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|groupCount
operator|==
literal|0
condition|)
block|{
specifier|final
name|Expression
name|resultSelector
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function1
operator|.
name|class
argument_list|,
name|resultBlock
operator|.
name|toBlock
argument_list|()
argument_list|,
name|acc_
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|SINGLETON_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltInMethod
operator|.
name|AGGREGATE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_INITIALIZER
operator|.
name|method
argument_list|)
argument_list|,
name|BuiltInMethod
operator|.
name|FUNCTION0_APPLY
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_ADDER
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_SINGLE_GROUP_RESULT_SELECTOR
operator|.
name|method
argument_list|,
name|resultSelector
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|aggCalls
operator|.
name|isEmpty
argument_list|()
operator|&&
name|groupSet
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|inputPhysType
operator|.
name|convertTo
argument_list|(
name|childExp
argument_list|,
name|physType
operator|.
name|getFormat
argument_list|()
argument_list|)
argument_list|,
name|BuiltInMethod
operator|.
name|DISTINCT
operator|.
name|method
argument_list|,
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|()
operator|.
name|appendIfNotNull
argument_list|(
name|physType
operator|.
name|comparer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Expression
name|keySelector_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"keySelector"
argument_list|,
name|inputPhysType
operator|.
name|generateSelector
argument_list|(
name|parameter
argument_list|,
name|groupSet
operator|.
name|asList
argument_list|()
argument_list|,
name|keyPhysType
operator|.
name|getFormat
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|resultSelector_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|resultBlock
operator|.
name|toBlock
argument_list|()
argument_list|,
name|key_
argument_list|,
name|acc_
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltInMethod
operator|.
name|GROUP_BY2
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|keySelector_
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_INITIALIZER
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_ADDER
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR
operator|.
name|method
argument_list|,
name|resultSelector_
argument_list|)
argument_list|)
operator|.
name|appendIfNotNull
argument_list|(
name|keyPhysType
operator|.
name|comparer
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

