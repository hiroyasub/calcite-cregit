begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ConstantUntypedNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|FunctionExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|MethodCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|MethodDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|UnaryExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SortedMultiMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Utilities for generating programs in the Enumerable (functional)  * style.  */
end_comment

begin_class
specifier|public
class|class
name|EnumUtils
block|{
specifier|private
name|EnumUtils
parameter_list|()
block|{
block|}
specifier|static
specifier|final
name|boolean
name|BRIDGE_METHODS
init|=
literal|true
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|NO_PARAMS
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|NO_EXPRS
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|LEFT_RIGHT
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"left"
argument_list|,
literal|"right"
argument_list|)
decl_stmt|;
comment|/** Declares a method that overrides another method. */
specifier|public
specifier|static
name|MethodDeclaration
name|overridingMethodDecl
parameter_list|(
name|Method
name|method
parameter_list|,
name|Iterable
argument_list|<
name|ParameterExpression
argument_list|>
name|parameters
parameter_list|,
name|BlockStatement
name|body
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|ABSTRACT
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|parameters
argument_list|,
name|body
argument_list|)
return|;
block|}
specifier|static
name|Type
name|javaClass
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
specifier|final
name|Type
name|clazz
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|instanceof
name|Class
condition|?
name|clazz
else|:
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|static
name|List
argument_list|<
name|Type
argument_list|>
name|fieldTypes
parameter_list|(
specifier|final
name|JavaTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|RelDataType
argument_list|>
name|inputTypes
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Type
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Type
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|EnumUtils
operator|.
name|javaClass
argument_list|(
name|typeFactory
argument_list|,
name|inputTypes
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|inputTypes
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|static
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldRowTypes
parameter_list|(
specifier|final
name|RelDataType
name|inputRowType
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|extraInputs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputFields
init|=
name|inputRowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelDataType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|arg
init|=
name|argList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|arg
operator|<
name|inputFields
operator|.
name|size
argument_list|()
condition|?
name|inputFields
operator|.
name|get
argument_list|(
name|arg
argument_list|)
operator|.
name|getType
argument_list|()
else|:
name|requireNonNull
argument_list|(
name|extraInputs
argument_list|,
literal|"extraInputs"
argument_list|)
operator|.
name|get
argument_list|(
name|arg
operator|-
name|inputFields
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|argList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|static
name|Expression
name|joinSelector
parameter_list|(
name|JoinRelType
name|joinType
parameter_list|,
name|PhysType
name|physType
parameter_list|,
name|List
argument_list|<
name|PhysType
argument_list|>
name|inputPhysTypes
parameter_list|)
block|{
comment|// A parameter for each input.
specifier|final
name|List
argument_list|<
name|ParameterExpression
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Generate all fields.
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|outputFieldCount
init|=
name|physType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|PhysType
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|inputPhysTypes
argument_list|)
control|)
block|{
specifier|final
name|PhysType
name|inputPhysType
init|=
name|ord
operator|.
name|e
operator|.
name|makeNullable
argument_list|(
name|joinType
operator|.
name|generatesNullsOn
argument_list|(
name|ord
operator|.
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// If input item is just a primitive, we do not generate specialized
comment|// primitive apply override since it won't be called anyway
comment|// Function<T> always operates on boxed arguments
specifier|final
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Primitive
operator|.
name|box
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|)
argument_list|,
name|EnumUtils
operator|.
name|LEFT_RIGHT
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
if|if
condition|(
name|expressions
operator|.
name|size
argument_list|()
operator|==
name|outputFieldCount
condition|)
block|{
comment|// For instance, if semi-join needs to return just the left inputs
break|break;
block|}
specifier|final
name|int
name|fieldCount
init|=
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|expression
init|=
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|parameter
argument_list|,
name|i
argument_list|,
name|physType
operator|.
name|getJavaFieldType
argument_list|(
name|expressions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinType
operator|.
name|generatesNullsOn
argument_list|(
name|ord
operator|.
name|i
argument_list|)
condition|)
block|{
name|expression
operator|=
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|parameter
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
name|expressions
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|physType
operator|.
name|record
argument_list|(
name|expressions
argument_list|)
argument_list|,
name|parameters
argument_list|)
return|;
block|}
comment|/**    * In Calcite, {@code java.sql.Date} and {@code java.sql.Time} are    * stored as {@code Integer} type, {@code java.sql.Timestamp} is    * stored as {@code Long} type.    */
specifier|static
name|Expression
name|toInternal
parameter_list|(
name|Expression
name|operand
parameter_list|,
annotation|@
name|Nullable
name|Type
name|targetType
parameter_list|)
block|{
return|return
name|toInternal
argument_list|(
name|operand
argument_list|,
name|operand
operator|.
name|getType
argument_list|()
argument_list|,
name|targetType
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Expression
name|toInternal
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Type
name|fromType
parameter_list|,
annotation|@
name|Nullable
name|Type
name|targetType
parameter_list|)
block|{
if|if
condition|(
name|fromType
operator|==
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|targetType
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|DATE_TO_INT
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
if|else if
condition|(
name|targetType
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|DATE_TO_INT_OPTIONAL
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|fromType
operator|==
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|targetType
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_TO_INT
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
if|else if
condition|(
name|targetType
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_TO_INT_OPTIONAL
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|fromType
operator|==
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|targetType
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_TO_LONG
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
if|else if
condition|(
name|targetType
operator|==
name|Long
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_TO_LONG_OPTIONAL
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
return|return
name|operand
return|;
block|}
comment|/** Converts from internal representation to JDBC representation used by    * arguments of user-defined functions. For example, converts date values from    * {@code int} to {@link java.sql.Date}. */
specifier|private
specifier|static
name|Expression
name|fromInternal
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Type
name|targetType
parameter_list|)
block|{
return|return
name|fromInternal
argument_list|(
name|operand
argument_list|,
name|operand
operator|.
name|getType
argument_list|()
argument_list|,
name|targetType
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Expression
name|fromInternal
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Type
name|fromType
parameter_list|,
name|Type
name|targetType
parameter_list|)
block|{
if|if
condition|(
name|operand
operator|==
name|ConstantUntypedNull
operator|.
name|INSTANCE
condition|)
block|{
return|return
name|operand
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|operand
operator|.
name|getType
argument_list|()
operator|instanceof
name|Class
operator|)
condition|)
block|{
return|return
name|operand
return|;
block|}
if|if
condition|(
name|Types
operator|.
name|isAssignableFrom
argument_list|(
name|targetType
argument_list|,
name|fromType
argument_list|)
condition|)
block|{
return|return
name|operand
return|;
block|}
if|if
condition|(
name|targetType
operator|==
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
condition|)
block|{
comment|// E.g. from "int" or "Integer" to "java.sql.Date",
comment|// generate "SqlFunctions.internalToDate".
if|if
condition|(
name|isA
argument_list|(
name|fromType
argument_list|,
name|Primitive
operator|.
name|INT
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|INTERNAL_TO_DATE
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|targetType
operator|==
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
condition|)
block|{
comment|// E.g. from "int" or "Integer" to "java.sql.Time",
comment|// generate "SqlFunctions.internalToTime".
if|if
condition|(
name|isA
argument_list|(
name|fromType
argument_list|,
name|Primitive
operator|.
name|INT
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|INTERNAL_TO_TIME
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|targetType
operator|==
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
condition|)
block|{
comment|// E.g. from "long" or "Long" to "java.sql.Timestamp",
comment|// generate "SqlFunctions.internalToTimestamp".
if|if
condition|(
name|isA
argument_list|(
name|fromType
argument_list|,
name|Primitive
operator|.
name|LONG
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|INTERNAL_TO_TIMESTAMP
operator|.
name|method
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|Primitive
operator|.
name|is
argument_list|(
name|operand
operator|.
name|type
argument_list|)
operator|&&
name|Primitive
operator|.
name|isBox
argument_list|(
name|targetType
argument_list|)
condition|)
block|{
comment|// E.g. operand is "int", target is "Long", generate "(long) operand".
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|Primitive
operator|.
name|unbox
argument_list|(
name|targetType
argument_list|)
argument_list|)
return|;
block|}
return|return
name|operand
return|;
block|}
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|fromInternal
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|targetTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetTypes
operator|.
name|length
operator|==
name|expressions
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|fromInternal
argument_list|(
name|expressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|targetTypes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
if|if
condition|(
operator|!
name|targetTypes
index|[
name|j
index|]
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|type
operator|=
name|targetTypes
index|[
name|j
index|]
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|targetTypes
index|[
name|j
index|]
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|fromInternal
argument_list|(
name|expressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|static
name|Type
name|fromInternal
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
operator|||
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
condition|)
block|{
return|return
name|int
operator|.
name|class
return|;
block|}
if|if
condition|(
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
condition|)
block|{
return|return
name|long
operator|.
name|class
return|;
block|}
return|return
name|type
return|;
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|Type
name|toInternal
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
return|return
name|toInternal
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
annotation|@
name|Nullable
name|Type
name|toInternal
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|boolean
name|forceNotNull
parameter_list|)
block|{
switch|switch
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
case|case
name|TIME
case|:
return|return
name|type
operator|.
name|isNullable
argument_list|()
operator|&&
operator|!
name|forceNotNull
condition|?
name|Integer
operator|.
name|class
else|:
name|int
operator|.
name|class
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|type
operator|.
name|isNullable
argument_list|()
operator|&&
operator|!
name|forceNotNull
condition|?
name|Long
operator|.
name|class
else|:
name|long
operator|.
name|class
return|;
default|default:
return|return
literal|null
return|;
comment|// we don't care; use the default storage type
block|}
block|}
specifier|static
name|List
argument_list|<
annotation|@
name|Nullable
name|Type
argument_list|>
name|internalTypes
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|operandList
parameter_list|)
block|{
return|return
name|Util
operator|.
name|transform
argument_list|(
name|operandList
argument_list|,
name|node
lambda|->
name|toInternal
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert {@code operand} to target type {@code toType}.    *    * @param operand The expression to convert    * @param toType  Target type    * @return A new expression with type {@code toType} or original if there    * is no need to convert    */
specifier|public
specifier|static
name|Expression
name|convert
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Type
name|toType
parameter_list|)
block|{
specifier|final
name|Type
name|fromType
init|=
name|operand
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|convert
argument_list|(
name|operand
argument_list|,
name|fromType
argument_list|,
name|toType
argument_list|)
return|;
block|}
comment|/**    * Convert {@code operand} to target type {@code toType}.    *    * @param operand  The expression to convert    * @param fromType Field type    * @param toType   Target type    * @return A new expression with type {@code toType} or original if there    * is no need to convert    */
specifier|public
specifier|static
name|Expression
name|convert
parameter_list|(
name|Expression
name|operand
parameter_list|,
name|Type
name|fromType
parameter_list|,
name|Type
name|toType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Types
operator|.
name|needTypeCast
argument_list|(
name|fromType
argument_list|,
name|toType
argument_list|)
condition|)
block|{
return|return
name|operand
return|;
block|}
comment|// E.g. from "Short" to "int".
comment|// Generate "x.intValue()".
specifier|final
name|Primitive
name|toPrimitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|toType
argument_list|)
decl_stmt|;
specifier|final
name|Primitive
name|toBox
init|=
name|Primitive
operator|.
name|ofBox
argument_list|(
name|toType
argument_list|)
decl_stmt|;
specifier|final
name|Primitive
name|fromBox
init|=
name|Primitive
operator|.
name|ofBox
argument_list|(
name|fromType
argument_list|)
decl_stmt|;
specifier|final
name|Primitive
name|fromPrimitive
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|fromType
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|fromNumber
init|=
name|fromType
operator|instanceof
name|Class
operator|&&
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
operator|)
name|fromType
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromType
operator|==
name|String
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|toPrimitive
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|toPrimitive
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
comment|// Generate "SqlFunctions.toShort(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"to"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toPrimitive
operator|.
name|getPrimitiveName
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|)
return|;
default|default:
comment|// Generate "Short.parseShort(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|toPrimitive
operator|.
name|getBoxClass
argument_list|()
argument_list|,
literal|"parse"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toPrimitive
operator|.
name|getPrimitiveName
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|toBox
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|toBox
condition|)
block|{
case|case
name|CHAR
case|:
comment|// Generate "SqlFunctions.toCharBoxed(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"to"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toBox
operator|.
name|getPrimitiveName
argument_list|()
argument_list|)
operator|+
literal|"Boxed"
argument_list|,
name|operand
argument_list|)
return|;
default|default:
comment|// Generate "Short.valueOf(x)".
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|toBox
operator|.
name|getBoxClass
argument_list|()
argument_list|,
literal|"valueOf"
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|toPrimitive
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromPrimitive
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "float" to "double"
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|toPrimitive
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|fromNumber
operator|||
name|fromBox
operator|==
name|Primitive
operator|.
name|CHAR
condition|)
block|{
comment|// Generate "x.shortValue()".
return|return
name|Expressions
operator|.
name|unbox
argument_list|(
name|operand
argument_list|,
name|toPrimitive
argument_list|)
return|;
block|}
else|else
block|{
comment|// E.g. from "Object" to "short".
comment|// Generate "SqlFunctions.toShort(x)"
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"to"
operator|+
name|SqlFunctions
operator|.
name|initcap
argument_list|(
name|toPrimitive
operator|.
name|getPrimitiveName
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|fromNumber
operator|&&
name|toBox
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "Short" to "Integer"
comment|// Generate "x == null ? null : Integer.valueOf(x.intValue())"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|box
argument_list|(
name|Expressions
operator|.
name|unbox
argument_list|(
name|operand
argument_list|,
name|toBox
argument_list|)
argument_list|,
name|toBox
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|fromPrimitive
operator|!=
literal|null
operator|&&
name|toBox
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "int" to "Long".
comment|// Generate Long.valueOf(x)
comment|// Eliminate primitive casts like Long.valueOf((long) x)
if|if
condition|(
name|operand
operator|instanceof
name|UnaryExpression
condition|)
block|{
name|UnaryExpression
name|una
init|=
operator|(
name|UnaryExpression
operator|)
name|operand
decl_stmt|;
if|if
condition|(
name|una
operator|.
name|nodeType
operator|==
name|ExpressionType
operator|.
name|Convert
operator|&&
name|Primitive
operator|.
name|of
argument_list|(
name|una
operator|.
name|getType
argument_list|()
argument_list|)
operator|==
name|toBox
condition|)
block|{
name|Primitive
name|origin
init|=
name|Primitive
operator|.
name|of
argument_list|(
name|una
operator|.
name|expression
operator|.
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|origin
operator|!=
literal|null
operator|&&
name|toBox
operator|.
name|assignableFrom
argument_list|(
name|origin
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|box
argument_list|(
name|una
operator|.
name|expression
argument_list|,
name|toBox
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|fromType
operator|==
name|toBox
operator|.
name|primitiveClass
condition|)
block|{
return|return
name|Expressions
operator|.
name|box
argument_list|(
name|operand
argument_list|,
name|toBox
argument_list|)
return|;
block|}
comment|// E.g., from "int" to "Byte".
comment|// Convert it first and generate "Byte.valueOf((byte)x)"
comment|// Because there is no method "Byte.valueOf(int)" in Byte
return|return
name|Expressions
operator|.
name|box
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|toBox
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
argument_list|,
name|toBox
argument_list|)
return|;
block|}
comment|// Convert datetime types to internal storage type:
comment|// 1. java.sql.Date -> int or Integer
comment|// 2. java.sql.Time -> int or Integer
comment|// 3. java.sql.Timestamp -> long or Long
if|if
condition|(
name|representAsInternalType
argument_list|(
name|fromType
argument_list|)
condition|)
block|{
specifier|final
name|Expression
name|internalTypedOperand
init|=
name|toInternal
argument_list|(
name|operand
argument_list|,
name|fromType
argument_list|,
name|toType
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|!=
name|internalTypedOperand
condition|)
block|{
return|return
name|internalTypedOperand
return|;
block|}
block|}
comment|// Convert internal storage type to datetime types:
comment|// 1. int or Integer -> java.sql.Date
comment|// 2. int or Integer -> java.sql.Time
comment|// 3. long or Long -> java.sql.Timestamp
if|if
condition|(
name|representAsInternalType
argument_list|(
name|toType
argument_list|)
condition|)
block|{
specifier|final
name|Expression
name|originTypedOperand
init|=
name|fromInternal
argument_list|(
name|operand
argument_list|,
name|fromType
argument_list|,
name|toType
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|!=
name|originTypedOperand
condition|)
block|{
return|return
name|originTypedOperand
return|;
block|}
block|}
if|if
condition|(
name|toType
operator|==
name|BigDecimal
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|fromBox
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "Integer" to "BigDecimal".
comment|// Generate "x == null ? null : new BigDecimal(x.intValue())"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|unbox
argument_list|(
name|operand
argument_list|,
name|fromBox
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|fromPrimitive
operator|!=
literal|null
condition|)
block|{
comment|// E.g. from "int" to "BigDecimal".
comment|// Generate "new BigDecimal(x)"
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|operand
argument_list|)
return|;
block|}
comment|// E.g. from "Object" to "BigDecimal".
comment|// Generate "x == null ? null : SqlFunctions.toBigDecimal(x)"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"toBigDecimal"
argument_list|,
name|operand
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|toType
operator|==
name|String
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|fromPrimitive
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|fromPrimitive
condition|)
block|{
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
comment|// E.g. from "double" to "String"
comment|// Generate "SqlFunctions.toString(x)"
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"toString"
argument_list|,
name|operand
argument_list|)
return|;
default|default:
comment|// E.g. from "int" to "String"
comment|// Generate "Integer.toString(x)"
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|fromPrimitive
operator|.
name|getBoxClass
argument_list|()
argument_list|,
literal|"toString"
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|fromType
operator|==
name|BigDecimal
operator|.
name|class
condition|)
block|{
comment|// E.g. from "BigDecimal" to "String"
comment|// Generate "SqlFunctions.toString(x)"
return|return
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"toString"
argument_list|,
name|operand
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|Expression
name|result
decl_stmt|;
try|try
block|{
comment|// Avoid to generate code like:
comment|// "null.toString()" or "(xxx) null.toString()"
if|if
condition|(
name|operand
operator|instanceof
name|ConstantExpression
condition|)
block|{
name|ConstantExpression
name|ce
init|=
operator|(
name|ConstantExpression
operator|)
name|operand
decl_stmt|;
if|if
condition|(
name|ce
operator|.
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|toType
argument_list|)
return|;
block|}
block|}
comment|// Try to call "toString()" method
comment|// E.g. from "Integer" to "String"
comment|// Generate "x == null ? null : x.toString()"
name|result
operator|=
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|equal
argument_list|(
name|operand
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|operand
argument_list|,
literal|"toString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// For some special cases, e.g., "BuiltInMethod.LESSER",
comment|// its return type is generic ("Comparable"), which contains
comment|// no "toString()" method. We fall through to "(String)x".
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|toType
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
block|}
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|toType
argument_list|)
return|;
block|}
comment|/** Converts a value to a given class. */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
annotation|@
name|Nullable
name|T
name|evaluate
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
comment|// We need optimization here for constant folding.
comment|// Not all the expressions can be interpreted (e.g. ternary), so
comment|// we rely on optimization capabilities to fold non-interpretable
comment|// expressions.
comment|//noinspection unchecked
name|clazz
operator|=
name|Primitive
operator|.
name|box
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|BlockBuilder
name|bb
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|expr
init|=
name|convert
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
name|o
argument_list|)
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|bb
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|expr
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FunctionExpression
argument_list|<
name|?
argument_list|>
name|convert
init|=
name|Expressions
operator|.
name|lambda
argument_list|(
name|bb
operator|.
name|toBlock
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|convert
operator|.
name|compile
argument_list|()
operator|.
name|dynamicInvoke
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isA
parameter_list|(
name|Type
name|fromType
parameter_list|,
name|Primitive
name|primitive
parameter_list|)
block|{
return|return
name|Primitive
operator|.
name|of
argument_list|(
name|fromType
argument_list|)
operator|==
name|primitive
operator|||
name|Primitive
operator|.
name|ofBox
argument_list|(
name|fromType
argument_list|)
operator|==
name|primitive
return|;
block|}
specifier|private
specifier|static
name|boolean
name|representAsInternalType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
operator|||
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
operator|||
name|type
operator|==
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
return|;
block|}
comment|/**    * In {@link org.apache.calcite.sql.type.SqlTypeAssignmentRule},    * some rules decide whether one type can be assignable to another type.    * Based on these rules, a function can accept arguments with assignable types.    *    *<p>For example, a function with Long type operand can accept Integer as input.    * See {@code org.apache.calcite.sql.SqlUtil#filterRoutinesByParameterType()} for details.    *    *<p>During query execution, some of the assignable types need explicit conversion    * to the target types. i.e., Decimal expression should be converted to Integer    * before it is assigned to the Integer type Lvalue(In Java, Decimal can not be assigned to    * Integer directly).    *    * @param targetTypes Formal operand types declared for the function arguments    * @param arguments Input expressions to the function    * @return Input expressions with probable type conversion    */
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|convertAssignableTypes
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|targetTypes
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetTypes
operator|.
name|length
operator|==
name|arguments
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|convertAssignableType
argument_list|(
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|targetTypes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Expression
name|argument
range|:
name|arguments
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
if|if
condition|(
operator|!
name|targetTypes
index|[
name|j
index|]
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|type
operator|=
name|targetTypes
index|[
name|j
index|]
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|targetTypes
index|[
name|j
index|]
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|convertAssignableType
argument_list|(
name|argument
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**    * Handles decimal type specifically with explicit type conversion.    */
specifier|private
specifier|static
name|Expression
name|convertAssignableType
parameter_list|(
name|Expression
name|argument
parameter_list|,
name|Type
name|targetType
parameter_list|)
block|{
if|if
condition|(
name|targetType
operator|!=
name|BigDecimal
operator|.
name|class
condition|)
block|{
return|return
name|argument
return|;
block|}
return|return
name|convert
argument_list|(
name|argument
argument_list|,
name|targetType
argument_list|)
return|;
block|}
comment|/**    * A more powerful version of    * {@link org.apache.calcite.linq4j.tree.Expressions#call(Type, String, Iterable)}.    * Tries best effort to convert the    * accepted arguments to match parameter type.    *    * @param targetExpression Target expression, or null if method is static    * @param clazz Class against which method is invoked    * @param methodName Name of method    * @param arguments Argument expressions    *    * @return MethodCallExpression that call the given name method    * @throws RuntimeException if no suitable method found    */
specifier|public
specifier|static
name|MethodCallExpression
name|call
parameter_list|(
annotation|@
name|Nullable
name|Expression
name|targetExpression
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
name|Class
index|[]
name|argumentTypes
init|=
name|Types
operator|.
name|toClassArray
argument_list|(
name|arguments
argument_list|)
decl_stmt|;
try|try
block|{
name|Method
name|candidate
init|=
name|clazz
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|argumentTypes
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|targetExpression
argument_list|,
name|candidate
argument_list|,
name|arguments
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|varArgs
init|=
name|method
operator|.
name|isVarArgs
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|Types
operator|.
name|allAssignable
argument_list|(
name|varArgs
argument_list|,
name|parameterTypes
argument_list|,
name|argumentTypes
argument_list|)
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|targetExpression
argument_list|,
name|method
argument_list|,
name|arguments
argument_list|)
return|;
block|}
comment|// fall through
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|typeMatchedArguments
init|=
name|matchMethodParameterTypes
argument_list|(
name|varArgs
argument_list|,
name|parameterTypes
argument_list|,
name|arguments
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeMatchedArguments
operator|!=
literal|null
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|targetExpression
argument_list|,
name|method
argument_list|,
name|typeMatchedArguments
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while resolving method '"
operator|+
name|methodName
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|argumentTypes
argument_list|)
operator|+
literal|"' in class "
operator|+
name|clazz
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|List
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|matchMethodParameterTypes
parameter_list|(
name|boolean
name|varArgs
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
if|if
condition|(
operator|(
name|varArgs
operator|&&
name|arguments
operator|.
name|size
argument_list|()
operator|<
name|parameterTypes
operator|.
name|length
operator|-
literal|1
operator|)
operator|||
operator|(
operator|!
name|varArgs
operator|&&
name|arguments
operator|.
name|size
argument_list|()
operator|!=
name|parameterTypes
operator|.
name|length
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|typeMatchedArguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
operator|!
name|varArgs
operator|||
name|i
operator|<
name|parameterTypes
operator|.
name|length
operator|-
literal|1
condition|?
name|parameterTypes
index|[
name|i
index|]
else|:
name|Object
operator|.
name|class
decl_stmt|;
specifier|final
name|Expression
name|typeMatchedArgument
init|=
name|matchMethodParameterType
argument_list|(
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|parameterType
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeMatchedArgument
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|typeMatchedArguments
operator|.
name|add
argument_list|(
name|typeMatchedArgument
argument_list|)
expr_stmt|;
block|}
return|return
name|typeMatchedArguments
return|;
block|}
comment|/**    * Matches an argument expression to method parameter type with best effort.    *    * @param argument Argument Expression    * @param parameter Parameter type    * @return Converted argument expression that matches the parameter type.    *         Returns null if it is impossible to match.    */
specifier|private
specifier|static
annotation|@
name|Nullable
name|Expression
name|matchMethodParameterType
parameter_list|(
name|Expression
name|argument
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameter
parameter_list|)
block|{
name|Type
name|argumentType
init|=
name|argument
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Types
operator|.
name|isAssignableFrom
argument_list|(
name|parameter
argument_list|,
name|argumentType
argument_list|)
condition|)
block|{
return|return
name|argument
return|;
block|}
comment|// Object.class is not assignable from primitive types,
comment|// but the method with Object parameters can accept primitive types.
comment|// E.g., "array(Object... args)" in SqlFunctions
if|if
condition|(
name|parameter
operator|==
name|Object
operator|.
name|class
operator|&&
name|Primitive
operator|.
name|of
argument_list|(
name|argumentType
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|argument
return|;
block|}
comment|// Convert argument with Object.class type to parameter explicitly
if|if
condition|(
name|argumentType
operator|==
name|Object
operator|.
name|class
operator|&&
name|Primitive
operator|.
name|of
argument_list|(
name|argumentType
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|convert
argument_list|(
name|argument
argument_list|,
name|parameter
argument_list|)
return|;
block|}
comment|// assignable types that can be accepted with explicit conversion
if|if
condition|(
name|parameter
operator|==
name|BigDecimal
operator|.
name|class
operator|&&
name|Primitive
operator|.
name|ofBoxOr
argument_list|(
name|argumentType
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|convert
argument_list|(
name|argument
argument_list|,
name|parameter
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Transforms a JoinRelType to Linq4j JoinType. **/
specifier|static
name|JoinType
name|toLinq4jJoinType
parameter_list|(
name|JoinRelType
name|joinRelType
parameter_list|)
block|{
switch|switch
condition|(
name|joinRelType
condition|)
block|{
case|case
name|INNER
case|:
return|return
name|JoinType
operator|.
name|INNER
return|;
case|case
name|LEFT
case|:
return|return
name|JoinType
operator|.
name|LEFT
return|;
case|case
name|RIGHT
case|:
return|return
name|JoinType
operator|.
name|RIGHT
return|;
case|case
name|FULL
case|:
return|return
name|JoinType
operator|.
name|FULL
return|;
case|case
name|SEMI
case|:
return|return
name|JoinType
operator|.
name|SEMI
return|;
case|case
name|ANTI
case|:
return|return
name|JoinType
operator|.
name|ANTI
return|;
default|default:
break|break;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to convert "
operator|+
name|joinRelType
operator|+
literal|" to Linq4j JoinType"
argument_list|)
throw|;
block|}
comment|/** Returns a predicate expression based on a join condition. **/
specifier|static
name|Expression
name|generatePredicate
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|PhysType
name|leftPhysType
parameter_list|,
name|PhysType
name|rightPhysType
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|left_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|leftPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"left"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|right_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|rightPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"right"
argument_list|)
decl_stmt|;
specifier|final
name|RexProgramBuilder
name|program
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|left
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
operator|.
name|addAll
argument_list|(
name|right
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|program
operator|.
name|addCondition
argument_list|(
name|condition
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|RexToLixTranslator
operator|.
name|translateCondition
argument_list|(
name|program
operator|.
name|getProgram
argument_list|()
argument_list|,
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|builder
argument_list|,
operator|new
name|RexToLixTranslator
operator|.
name|InputGetterImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|left_
argument_list|,
name|leftPhysType
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|right_
argument_list|,
name|rightPhysType
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|implementor
operator|.
name|allCorrelateVariables
argument_list|,
name|implementor
operator|.
name|getConformance
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Expressions
operator|.
name|lambda
argument_list|(
name|Predicate2
operator|.
name|class
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|,
name|left_
argument_list|,
name|right_
argument_list|)
return|;
block|}
comment|/**    * Generates a window selector which appends attribute of the window based on    * the parameters.    *    * Note that it only works for batch scenario. E.g. all data is known and there is no late data.    */
specifier|static
name|Expression
name|tumblingWindowSelector
parameter_list|(
name|PhysType
name|inputPhysType
parameter_list|,
name|PhysType
name|outputPhysType
parameter_list|,
name|Expression
name|wmColExpr
parameter_list|,
name|Expression
name|windowSizeExpr
parameter_list|,
name|Expression
name|offsetExpr
parameter_list|)
block|{
comment|// Generate all fields.
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If input item is just a primitive, we do not generate specialized
comment|// primitive apply override since it won't be called anyway
comment|// Function<T> always operates on boxed arguments
specifier|final
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Primitive
operator|.
name|box
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|)
argument_list|,
literal|"_input"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|expression
init|=
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|parameter
argument_list|,
name|i
argument_list|,
name|outputPhysType
operator|.
name|getJavaFieldType
argument_list|(
name|expressions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Expression
name|wmColExprToLong
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|wmColExpr
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Find the fixed window for a timestamp given a window size and an offset, and return the
comment|// window start.
comment|// wmColExprToLong - (wmColExprToLong + windowSizeMillis - offsetMillis) % windowSizeMillis
name|Expression
name|windowStartExpr
init|=
name|Expressions
operator|.
name|subtract
argument_list|(
name|wmColExprToLong
argument_list|,
name|Expressions
operator|.
name|modulo
argument_list|(
name|Expressions
operator|.
name|add
argument_list|(
name|wmColExprToLong
argument_list|,
name|Expressions
operator|.
name|subtract
argument_list|(
name|windowSizeExpr
argument_list|,
name|offsetExpr
argument_list|)
argument_list|)
argument_list|,
name|windowSizeExpr
argument_list|)
argument_list|)
decl_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|windowStartExpr
argument_list|)
expr_stmt|;
comment|// The window end equals to the window start plus window size.
comment|// windowStartMillis + sizeMillis
name|Expression
name|windowEndExpr
init|=
name|Expressions
operator|.
name|add
argument_list|(
name|windowStartExpr
argument_list|,
name|windowSizeExpr
argument_list|)
decl_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|windowEndExpr
argument_list|)
expr_stmt|;
return|return
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function1
operator|.
name|class
argument_list|,
name|outputPhysType
operator|.
name|record
argument_list|(
name|expressions
argument_list|)
argument_list|,
name|parameter
argument_list|)
return|;
block|}
comment|/**    * Creates enumerable implementation that applies sessionization to elements from the input    * enumerator based on a specified key. Elements are windowed into sessions separated by    * periods with no input for at least the duration specified by gap parameter.    */
specifier|public
specifier|static
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|sessionize
parameter_list|(
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|inputEnumerator
parameter_list|,
name|int
name|indexOfWatermarkedColumn
parameter_list|,
name|int
name|indexOfKeyColumn
parameter_list|,
name|long
name|gap
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|SessionizationEnumerator
argument_list|(
name|inputEnumerator
argument_list|,
name|indexOfWatermarkedColumn
argument_list|,
name|indexOfKeyColumn
argument_list|,
name|gap
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Enumerator that converts rows into sessions separated by gaps. */
specifier|private
specifier|static
class|class
name|SessionizationEnumerator
implements|implements
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|inputEnumerator
decl_stmt|;
specifier|private
specifier|final
name|int
name|indexOfWatermarkedColumn
decl_stmt|;
specifier|private
specifier|final
name|int
name|indexOfKeyColumn
decl_stmt|;
specifier|private
specifier|final
name|long
name|gap
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|list
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
comment|/**      * Note that it only works for batch scenario. E.g. all data is known and there is no      * late data.      *      * @param inputEnumerator the enumerator to provide an array of objects as input      * @param indexOfWatermarkedColumn the index of timestamp column upon which a watermark is built      * @param indexOfKeyColumn the index of column that acts as grouping key      * @param gap gap parameter      */
name|SessionizationEnumerator
parameter_list|(
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|inputEnumerator
parameter_list|,
name|int
name|indexOfWatermarkedColumn
parameter_list|,
name|int
name|indexOfKeyColumn
parameter_list|,
name|long
name|gap
parameter_list|)
block|{
name|this
operator|.
name|inputEnumerator
operator|=
name|inputEnumerator
expr_stmt|;
name|this
operator|.
name|indexOfWatermarkedColumn
operator|=
name|indexOfWatermarkedColumn
expr_stmt|;
name|this
operator|.
name|indexOfKeyColumn
operator|=
name|indexOfKeyColumn
expr_stmt|;
name|this
operator|.
name|gap
operator|=
name|gap
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|current
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialize
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|list
operator|.
name|removeFirst
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
name|initialized
condition|?
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
else|:
name|inputEnumerator
operator|.
name|moveNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inputEnumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inputEnumerator
operator|.
name|close
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// initialize() will be called when inputEnumerator.moveNext() is true,
comment|// thus firstly should take the current element.
name|elements
operator|.
name|add
argument_list|(
name|inputEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
comment|// sessionization needs to see all data.
while|while
condition|(
name|inputEnumerator
operator|.
name|moveNext
argument_list|()
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|inputEnumerator
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
annotation|@
name|Nullable
name|Object
argument_list|,
name|SortedMultiMap
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|,
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|>
name|sessionKeyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
annotation|@
name|Nullable
name|Object
index|[]
name|element
range|:
name|elements
control|)
block|{
name|SortedMultiMap
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|,
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|session
init|=
name|sessionKeyMap
operator|.
name|computeIfAbsent
argument_list|(
name|element
index|[
name|indexOfKeyColumn
index|]
argument_list|,
name|k
lambda|->
operator|new
name|SortedMultiMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|watermark
init|=
name|requireNonNull
argument_list|(
name|element
index|[
name|indexOfWatermarkedColumn
index|]
argument_list|,
literal|"element[indexOfWatermarkedColumn]"
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|initWindow
init|=
name|computeInitWindow
argument_list|(
name|SqlFunctions
operator|.
name|toLong
argument_list|(
name|watermark
argument_list|)
argument_list|,
name|gap
argument_list|)
decl_stmt|;
name|session
operator|.
name|putMulti
argument_list|(
name|initWindow
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
comment|// merge per key session windows if there is any overlap between windows.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
annotation|@
name|Nullable
name|Object
argument_list|,
name|SortedMultiMap
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|,
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|>
name|perKeyEntry
range|:
name|sessionKeyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|,
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|>
name|finalWindowElementsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|currentWindow
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|tempElementList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|,
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|>
name|sessionEntry
range|:
name|perKeyEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// check the next window can be merged.
if|if
condition|(
name|currentWindow
operator|==
literal|null
operator|||
operator|!
name|isOverlapped
argument_list|(
name|currentWindow
argument_list|,
name|sessionEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// cannot merge window as there is no overlap
if|if
condition|(
name|currentWindow
operator|!=
literal|null
condition|)
block|{
name|finalWindowElementsMap
operator|.
name|put
argument_list|(
name|currentWindow
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tempElementList
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentWindow
operator|=
name|sessionEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|tempElementList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tempElementList
operator|.
name|addAll
argument_list|(
name|sessionEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// merge windows.
name|currentWindow
operator|=
name|mergeWindows
argument_list|(
name|currentWindow
argument_list|,
name|sessionEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// merge elements in windows.
name|tempElementList
operator|.
name|addAll
argument_list|(
name|sessionEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|tempElementList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requireNonNull
argument_list|(
name|currentWindow
argument_list|,
literal|"currentWindow is null"
argument_list|)
expr_stmt|;
name|finalWindowElementsMap
operator|.
name|put
argument_list|(
name|currentWindow
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tempElementList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// construct final results from finalWindowElementsMap.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|,
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|>
name|finalWindowElementsEntry
range|:
name|finalWindowElementsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
annotation|@
name|Nullable
name|Object
index|[]
name|element
range|:
name|finalWindowElementsEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
annotation|@
name|Nullable
name|Object
index|[]
name|curWithWindow
init|=
operator|new
name|Object
index|[
name|element
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|element
argument_list|,
literal|0
argument_list|,
name|curWithWindow
argument_list|,
literal|0
argument_list|,
name|element
operator|.
name|length
argument_list|)
expr_stmt|;
name|curWithWindow
index|[
name|element
operator|.
name|length
index|]
operator|=
name|finalWindowElementsEntry
operator|.
name|getKey
argument_list|()
operator|.
name|left
expr_stmt|;
name|curWithWindow
index|[
name|element
operator|.
name|length
operator|+
literal|1
index|]
operator|=
name|finalWindowElementsEntry
operator|.
name|getKey
argument_list|()
operator|.
name|right
expr_stmt|;
name|list
operator|.
name|offer
argument_list|(
name|curWithWindow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isOverlapped
parameter_list|(
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|a
parameter_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|b
parameter_list|)
block|{
return|return
operator|!
operator|(
name|b
operator|.
name|left
operator|>=
name|a
operator|.
name|right
operator|)
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|mergeWindows
parameter_list|(
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|a
parameter_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|b
parameter_list|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|a
operator|.
name|left
operator|<=
name|b
operator|.
name|left
condition|?
name|a
operator|.
name|left
else|:
name|b
operator|.
name|left
argument_list|,
name|a
operator|.
name|right
operator|>=
name|b
operator|.
name|right
condition|?
name|a
operator|.
name|right
else|:
name|b
operator|.
name|right
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|computeInitWindow
parameter_list|(
name|long
name|ts
parameter_list|,
name|long
name|gap
parameter_list|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|ts
argument_list|,
name|ts
operator|+
name|gap
argument_list|)
return|;
block|}
block|}
comment|/**    * Create enumerable implementation that applies hopping on each element from the input    * enumerator and produces at least one element for each input element.    */
specifier|public
specifier|static
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|hopping
parameter_list|(
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|inputEnumerator
parameter_list|,
name|int
name|indexOfWatermarkedColumn
parameter_list|,
name|long
name|emitFrequency
parameter_list|,
name|long
name|windowSize
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|HopEnumerator
argument_list|(
name|inputEnumerator
argument_list|,
name|indexOfWatermarkedColumn
argument_list|,
name|emitFrequency
argument_list|,
name|windowSize
argument_list|,
name|offset
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Enumerator that computes HOP. */
specifier|private
specifier|static
class|class
name|HopEnumerator
implements|implements
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|inputEnumerator
decl_stmt|;
specifier|private
specifier|final
name|int
name|indexOfWatermarkedColumn
decl_stmt|;
specifier|private
specifier|final
name|long
name|emitFrequency
decl_stmt|;
specifier|private
specifier|final
name|long
name|windowSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|list
decl_stmt|;
comment|/**      * Note that it only works for batch scenario. E.g. all data is known and there is no late data.      *      * @param inputEnumerator the enumerator to provide an array of objects as input      * @param indexOfWatermarkedColumn the index of timestamp column upon which a watermark is built      * @param slide sliding size      * @param windowSize window size      * @param offset indicates how much windows should off      */
name|HopEnumerator
parameter_list|(
name|Enumerator
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|inputEnumerator
parameter_list|,
name|int
name|indexOfWatermarkedColumn
parameter_list|,
name|long
name|slide
parameter_list|,
name|long
name|windowSize
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|inputEnumerator
operator|=
name|inputEnumerator
expr_stmt|;
name|this
operator|.
name|indexOfWatermarkedColumn
operator|=
name|indexOfWatermarkedColumn
expr_stmt|;
name|this
operator|.
name|emitFrequency
operator|=
name|slide
expr_stmt|;
name|this
operator|.
name|windowSize
operator|=
name|windowSize
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Object
index|[]
name|current
parameter_list|()
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|takeOne
argument_list|()
return|;
block|}
else|else
block|{
annotation|@
name|Nullable
name|Object
index|[]
name|current
init|=
name|inputEnumerator
operator|.
name|current
argument_list|()
decl_stmt|;
name|Object
name|watermark
init|=
name|requireNonNull
argument_list|(
name|current
index|[
name|indexOfWatermarkedColumn
index|]
argument_list|,
literal|"element[indexOfWatermarkedColumn]"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|windows
init|=
name|hopWindows
argument_list|(
name|SqlFunctions
operator|.
name|toLong
argument_list|(
name|watermark
argument_list|)
argument_list|,
name|emitFrequency
argument_list|,
name|windowSize
argument_list|,
name|offset
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|window
range|:
name|windows
control|)
block|{
annotation|@
name|Nullable
name|Object
index|[]
name|curWithWindow
init|=
operator|new
name|Object
index|[
name|current
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|current
argument_list|,
literal|0
argument_list|,
name|curWithWindow
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|length
argument_list|)
expr_stmt|;
name|curWithWindow
index|[
name|current
operator|.
name|length
index|]
operator|=
name|window
operator|.
name|left
expr_stmt|;
name|curWithWindow
index|[
name|current
operator|.
name|length
operator|+
literal|1
index|]
operator|=
name|window
operator|.
name|right
expr_stmt|;
name|list
operator|.
name|offer
argument_list|(
name|curWithWindow
argument_list|)
expr_stmt|;
block|}
return|return
name|takeOne
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|inputEnumerator
operator|.
name|moveNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|inputEnumerator
operator|.
name|reset
argument_list|()
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
block|}
specifier|private
annotation|@
name|Nullable
name|Object
index|[]
name|takeOne
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|list
operator|.
name|pollFirst
argument_list|()
argument_list|,
literal|"list.pollFirst()"
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|hopWindows
parameter_list|(
name|long
name|tsMillis
parameter_list|,
name|long
name|periodMillis
parameter_list|,
name|long
name|sizeMillis
parameter_list|,
name|long
name|offsetMillis
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|sizeMillis
operator|/
name|periodMillis
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastStart
init|=
name|tsMillis
operator|-
operator|(
operator|(
name|tsMillis
operator|+
name|periodMillis
operator|-
name|offsetMillis
operator|)
operator|%
name|periodMillis
operator|)
decl_stmt|;
for|for
control|(
name|long
name|start
init|=
name|lastStart
init|;
name|start
operator|>
name|tsMillis
operator|-
name|sizeMillis
condition|;
name|start
operator|-=
name|periodMillis
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|sizeMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Apply tumbling per row from the enumerable input.    */
specifier|public
specifier|static
parameter_list|<
name|TSource
parameter_list|,
name|TResult
parameter_list|>
name|Enumerable
argument_list|<
name|TResult
argument_list|>
name|tumbling
parameter_list|(
name|Enumerable
argument_list|<
name|TSource
argument_list|>
name|inputEnumerable
parameter_list|,
name|Function1
argument_list|<
name|TSource
argument_list|,
name|TResult
argument_list|>
name|outSelector
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|TResult
argument_list|>
argument_list|()
block|{
comment|// Applies tumbling on each element from the input enumerator and produces
comment|// exactly one element for each input element.
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|TResult
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|TResult
argument_list|>
argument_list|()
block|{
specifier|final
name|Enumerator
argument_list|<
name|TSource
argument_list|>
name|inputs
init|=
name|inputEnumerable
operator|.
name|enumerator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TResult
name|current
parameter_list|()
block|{
return|return
name|outSelector
operator|.
name|apply
argument_list|(
name|inputs
operator|.
name|current
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
return|return
name|inputs
operator|.
name|moveNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|inputs
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|inputs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|Expression
name|generateCollatorExpression
parameter_list|(
annotation|@
name|Nullable
name|SqlCollation
name|collation
parameter_list|)
block|{
if|if
condition|(
name|collation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collator
name|collator
init|=
name|collation
operator|.
name|getCollator
argument_list|()
decl_stmt|;
if|if
condition|(
name|collator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Utilities.generateCollator(
comment|//      new Locale(
comment|//          collation.getLocale().getLanguage(),
comment|//          collation.getLocale().getCountry(),
comment|//          collation.getLocale().getVariant()),
comment|//      collation.getCollator().getStrength());
specifier|final
name|Locale
name|locale
init|=
name|collation
operator|.
name|getLocale
argument_list|()
decl_stmt|;
specifier|final
name|int
name|strength
init|=
name|collator
operator|.
name|getStrength
argument_list|()
decl_stmt|;
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|Utilities
operator|.
name|class
argument_list|,
literal|"generateCollator"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|Locale
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|locale
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|locale
operator|.
name|getCountry
argument_list|()
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|locale
operator|.
name|getVariant
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|strength
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

