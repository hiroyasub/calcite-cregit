begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Spool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableSpool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ModifiableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link TableSpool} in  * {@link EnumerableConvention enumerable calling convention}  * that writes into a {@link ModifiableTable} (which must exist in the current schema).  *  *<p>NOTE: The current API is experimental and subject to change without notice.</p>  */
end_comment

begin_class
annotation|@
name|Experimental
specifier|public
class|class
name|EnumerableTableSpool
extends|extends
name|TableSpool
implements|implements
name|EnumerableRel
block|{
specifier|private
name|EnumerableTableSpool
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|Type
name|readType
parameter_list|,
name|Type
name|writeType
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|readType
argument_list|,
name|writeType
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an EnumerableTableSpool. */
specifier|public
specifier|static
name|EnumerableTableSpool
name|create
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|Type
name|readType
parameter_list|,
name|Type
name|writeType
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|RelOptCluster
name|cluster
init|=
name|input
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|cluster
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
operator|.
name|replaceIfs
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|,
parameter_list|()
lambda|->
name|mq
operator|.
name|collations
argument_list|(
name|input
argument_list|)
argument_list|)
operator|.
name|replaceIf
argument_list|(
name|RelDistributionTraitDef
operator|.
name|INSTANCE
argument_list|,
parameter_list|()
lambda|->
name|mq
operator|.
name|distribution
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumerableTableSpool
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|readType
argument_list|,
name|writeType
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
comment|// TODO for the moment only LAZY read& write is supported
if|if
condition|(
name|readType
operator|!=
name|Type
operator|.
name|LAZY
operator|||
name|writeType
operator|!=
name|Type
operator|.
name|LAZY
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"EnumerableTableSpool supports for the moment only LAZY read and LAZY write"
argument_list|)
throw|;
block|}
comment|//  ModifiableTable t = (ModifiableTable) root.getRootSchema().getTable(tableName);
comment|//  return lazyCollectionSpool(t.getModifiableCollection(),<inputExp>);
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
name|RelNode
name|input
init|=
name|getInput
argument_list|()
decl_stmt|;
name|Result
name|inputResult
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|input
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|tableExp
init|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|implementor
operator|.
name|getRootExpression
argument_list|()
argument_list|,
name|BuiltInMethod
operator|.
name|DATA_CONTEXT_GET_ROOT_SCHEMA
operator|.
name|method
argument_list|)
argument_list|,
name|BuiltInMethod
operator|.
name|SCHEMA_GET_TABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|tableName
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|collectionExp
init|=
name|Expressions
operator|.
name|call
argument_list|(
name|tableExp
argument_list|,
name|BuiltInMethod
operator|.
name|MODIFIABLE_TABLE_GET_MODIFIABLE_COLLECTION
operator|.
name|method
argument_list|)
decl_stmt|;
name|Expression
name|inputExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"input"
argument_list|,
name|inputResult
operator|.
name|block
argument_list|)
decl_stmt|;
name|Expression
name|spoolExp
init|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|LAZY_COLLECTION_SPOOL
operator|.
name|method
argument_list|,
name|collectionExp
argument_list|,
name|inputExp
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|spoolExp
argument_list|)
expr_stmt|;
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|prefer
argument_list|(
name|inputResult
operator|.
name|format
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Spool
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|Type
name|readType
parameter_list|,
name|Type
name|writeType
parameter_list|)
block|{
return|return
operator|new
name|EnumerableTableSpool
argument_list|(
name|input
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|readType
argument_list|,
name|writeType
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End EnumerableTableSpool.java
end_comment

end_unit

