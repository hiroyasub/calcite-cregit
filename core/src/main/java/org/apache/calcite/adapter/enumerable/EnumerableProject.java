begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Implementation of {@link org.apache.calcite.rel.core.Project} in  * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|EnumerableProject
extends|extends
name|Project
implements|implements
name|EnumerableRel
block|{
comment|/**    * Creates an EnumerableProject.    *    *<p>Use {@link #create} unless you know what you're doing.    *    * @param cluster  Cluster this relational expression belongs to    * @param traitSet Traits of this relational expression    * @param input    Input relational expression    * @param projects List of expressions for the input columns    * @param rowType  Output row type    */
specifier|public
name|EnumerableProject
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|EnumerableProject
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an EnumerableProject, specifying row type rather than field    * names. */
specifier|public
specifier|static
name|EnumerableProject
name|create
parameter_list|(
specifier|final
name|RelNode
name|input
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|input
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|cluster
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|cluster
operator|.
name|traitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
operator|.
name|replaceIfs
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|,
parameter_list|()
lambda|->
name|RelMdCollation
operator|.
name|project
argument_list|(
name|mq
argument_list|,
name|input
argument_list|,
name|projects
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnumerableProject
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
return|;
block|}
specifier|public
name|EnumerableProject
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
return|return
operator|new
name|EnumerableProject
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
comment|// EnumerableCalcRel is always better
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|passThroughTraits
parameter_list|(
name|RelTraitSet
name|required
parameter_list|)
block|{
name|RelCollation
name|collation
init|=
name|required
operator|.
name|getCollation
argument_list|()
decl_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
operator|||
name|collation
operator|==
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|map
init|=
name|RelOptUtil
operator|.
name|permutationIgnoreCast
argument_list|(
name|getProjects
argument_list|()
argument_list|,
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|rc
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isCollationOnTrivialExpr
argument_list|(
name|map
argument_list|,
name|rc
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|RelCollation
name|newCollation
init|=
name|collation
operator|.
name|apply
argument_list|(
name|map
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|traitSet
operator|.
name|replace
argument_list|(
name|collation
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|traitSet
operator|.
name|replace
argument_list|(
name|newCollation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|deriveTraits
parameter_list|(
specifier|final
name|RelTraitSet
name|childTraits
parameter_list|,
specifier|final
name|int
name|childId
parameter_list|)
block|{
name|RelCollation
name|collation
init|=
name|childTraits
operator|.
name|getCollation
argument_list|()
decl_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
operator|||
name|collation
operator|==
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|maxField
init|=
name|Math
operator|.
name|max
argument_list|(
name|getProjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|FUNCTION
argument_list|,
name|maxField
argument_list|,
name|maxField
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|node
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
name|mapping
operator|.
name|set
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|node
operator|.
name|e
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|node
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|e
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
condition|)
block|{
specifier|final
name|RexNode
name|operand
init|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|.
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|RexInputRef
condition|)
block|{
name|mapping
operator|.
name|set
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|operand
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|node
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collationFieldsToDerive
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|rc
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
name|isCollationOnTrivialExpr
argument_list|(
name|mapping
argument_list|,
name|rc
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|collationFieldsToDerive
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|collationFieldsToDerive
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|RelCollation
name|newCollation
init|=
name|RelCollations
operator|.
name|of
argument_list|(
name|collationFieldsToDerive
argument_list|)
operator|.
name|apply
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|traitSet
operator|.
name|replace
argument_list|(
name|newCollation
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|traitSet
operator|.
name|replace
argument_list|(
name|collation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Determine whether there is mapping between project input and output fields.    * Bail out if sort relies on non-trivial expressions.    */
specifier|private
name|boolean
name|isCollationOnTrivialExpr
parameter_list|(
name|Mappings
operator|.
name|TargetMapping
name|map
parameter_list|,
name|RelFieldCollation
name|fc
parameter_list|,
name|boolean
name|passdown
parameter_list|)
block|{
name|int
name|target
init|=
name|map
operator|.
name|getTargetOpt
argument_list|(
name|fc
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RexNode
name|node
decl_stmt|;
if|if
condition|(
name|passdown
condition|)
block|{
name|node
operator|=
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|fc
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
condition|)
block|{
comment|// Check whether it is a monotonic preserving cast
specifier|final
name|RexCall
name|cast
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
name|RelFieldCollation
name|newFc
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|RexUtil
operator|.
name|apply
argument_list|(
name|map
argument_list|,
name|fc
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexCallBinding
name|binding
init|=
name|RexCallBinding
operator|.
name|create
argument_list|(
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|cast
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
name|newFc
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cast
operator|.
name|getOperator
argument_list|()
operator|.
name|getMonotonicity
argument_list|(
name|binding
argument_list|)
operator|==
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

