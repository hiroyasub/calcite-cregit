begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link AggregateLambdaFactory} that applies a sequence of  * accumulator adders to input source.  *  * @param<TSource> Type of the enumerable input source  * @param<TAccumulate> Type of the accumulator  * @param<TResult> Type of the enumerable output result  * @param<TKey> Type of the group-by key  */
end_comment

begin_class
specifier|public
class|class
name|BasicAggregateLambdaFactory
parameter_list|<
name|TSource
parameter_list|,
name|TAccumulate
parameter_list|,
name|TResult
parameter_list|,
name|TKey
parameter_list|>
implements|implements
name|AggregateLambdaFactory
argument_list|<
name|TSource
argument_list|,
name|TAccumulate
argument_list|,
name|TAccumulate
argument_list|,
name|TResult
argument_list|,
name|TKey
argument_list|>
block|{
specifier|private
specifier|final
name|Function0
argument_list|<
name|TAccumulate
argument_list|>
name|accumulatorInitializer
decl_stmt|;
specifier|private
specifier|final
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
name|accumulatorAdderDecorator
decl_stmt|;
specifier|public
name|BasicAggregateLambdaFactory
parameter_list|(
name|Function0
argument_list|<
name|TAccumulate
argument_list|>
name|accumulatorInitializer
parameter_list|,
name|List
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|accumulatorAdders
parameter_list|)
block|{
name|this
operator|.
name|accumulatorInitializer
operator|=
name|accumulatorInitializer
expr_stmt|;
name|this
operator|.
name|accumulatorAdderDecorator
operator|=
operator|new
name|AccumulatorAdderSeq
argument_list|(
name|accumulatorAdders
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Function0
argument_list|<
name|TAccumulate
argument_list|>
name|accumulatorInitializer
parameter_list|()
block|{
return|return
name|accumulatorInitializer
return|;
block|}
annotation|@
name|Override
specifier|public
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
name|accumulatorAdder
parameter_list|()
block|{
return|return
name|accumulatorAdderDecorator
return|;
block|}
annotation|@
name|Override
specifier|public
name|Function1
argument_list|<
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
name|singleGroupResultSelector
parameter_list|(
name|Function1
argument_list|<
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
name|resultSelector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Function2
argument_list|<
name|TKey
argument_list|,
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|(
name|Function2
argument_list|<
name|TKey
argument_list|,
name|TAccumulate
argument_list|,
name|TResult
argument_list|>
name|resultSelector
parameter_list|)
block|{
return|return
name|resultSelector
return|;
block|}
comment|/**    * Decorator class of a sequence of accumulator adder functions.    */
specifier|private
class|class
name|AccumulatorAdderSeq
implements|implements
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|accumulatorAdders
decl_stmt|;
name|AccumulatorAdderSeq
parameter_list|(
name|List
argument_list|<
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
argument_list|>
name|accumulatorAdders
parameter_list|)
block|{
name|this
operator|.
name|accumulatorAdders
operator|=
name|accumulatorAdders
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TAccumulate
name|apply
parameter_list|(
name|TAccumulate
name|accumulator
parameter_list|,
name|TSource
name|source
parameter_list|)
block|{
name|TAccumulate
name|result
init|=
name|accumulator
decl_stmt|;
for|for
control|(
name|Function2
argument_list|<
name|TAccumulate
argument_list|,
name|TSource
argument_list|,
name|TAccumulate
argument_list|>
name|accumulatorAdder
range|:
name|accumulatorAdders
control|)
block|{
name|result
operator|=
name|accumulatorAdder
operator|.
name|apply
argument_list|(
name|accumulator
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End BasicAggregateLambdaFactory.java
end_comment

end_unit

