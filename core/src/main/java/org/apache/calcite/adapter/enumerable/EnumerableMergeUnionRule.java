begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalSort} on top of a  * {@link org.apache.calcite.rel.logical.LogicalUnion} into a {@link EnumerableMergeUnion}.  *  * @see EnumerableRules#ENUMERABLE_MERGE_UNION_RULE  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|EnumerableMergeUnionRule
extends|extends
name|RelRule
argument_list|<
name|EnumerableMergeUnionRule
operator|.
name|Config
argument_list|>
block|{
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT_CONFIG
init|=
name|ImmutableEnumerableMergeUnionRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"EnumerableMergeUnionRule"
argument_list|)
operator|.
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|LogicalSort
operator|.
name|class
argument_list|)
operator|.
name|oneInput
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|LogicalUnion
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|EnumerableMergeUnionRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|EnumerableMergeUnionRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|public
name|EnumerableMergeUnionRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelCollation
name|collation
init|=
name|sort
operator|.
name|getCollation
argument_list|()
decl_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
operator|||
name|collation
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Union
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|union
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelCollation
name|collation
init|=
name|sort
operator|.
name|getCollation
argument_list|()
decl_stmt|;
specifier|final
name|Union
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|unionInputsSize
init|=
name|union
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Push down sort limit, if possible.
name|RexNode
name|inputFetch
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|.
name|offset
operator|==
literal|null
condition|)
block|{
name|inputFetch
operator|=
name|sort
operator|.
name|fetch
expr_stmt|;
block|}
if|else if
condition|(
name|sort
operator|.
name|fetch
operator|instanceof
name|RexLiteral
operator|&&
name|sort
operator|.
name|offset
operator|instanceof
name|RexLiteral
condition|)
block|{
name|inputFetch
operator|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|literal
argument_list|(
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
operator|+
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|unionInputsSize
argument_list|)
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|union
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelNode
name|newInput
init|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|input
argument_list|,
name|collation
argument_list|,
literal|null
argument_list|,
name|inputFetch
argument_list|)
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|newInput
argument_list|,
name|newInput
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RelNode
name|result
init|=
name|EnumerableMergeUnion
operator|.
name|create
argument_list|(
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|union
operator|.
name|all
argument_list|)
decl_stmt|;
comment|// If Sort contained a LIMIT / OFFSET, then put it back as an EnumerableLimit.
comment|// The output of the MergeUnion is already sorted, so we do not need a sort anymore.
if|if
condition|(
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|||
name|sort
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|EnumerableLimit
operator|.
name|create
argument_list|(
name|result
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

