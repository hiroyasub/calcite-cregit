begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ModifiableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Implementation of {@link org.apache.calcite.rel.core.TableModify} in  * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|EnumerableTableModify
extends|extends
name|TableModify
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableTableModify
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Prepare
operator|.
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|updateColumnList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|sourceExpressionList
parameter_list|,
name|boolean
name|flattened
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|table
argument_list|,
name|catalogReader
argument_list|,
name|child
argument_list|,
name|operation
argument_list|,
name|updateColumnList
argument_list|,
name|sourceExpressionList
argument_list|,
name|flattened
argument_list|)
expr_stmt|;
assert|assert
name|child
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableTableModify
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|getCatalogReader
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|getOperation
argument_list|()
argument_list|,
name|getUpdateColumnList
argument_list|()
argument_list|,
name|getSourceExpressionList
argument_list|()
argument_list|,
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
operator|(
name|EnumerableRel
operator|)
name|getInput
argument_list|()
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|collectionParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Collection
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"collection"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|expression
init|=
name|table
operator|.
name|getExpression
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|expression
operator|!=
literal|null
assert|;
comment|// TODO: user error in validator
assert|assert
name|ModifiableTable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|Types
operator|.
name|toClass
argument_list|(
name|expression
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|:
name|expression
operator|.
name|getType
argument_list|()
assert|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|collectionParameter
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|expression
argument_list|,
name|BuiltInMethod
operator|.
name|MODIFIABLE_TABLE_GET_MODIFIABLE_COLLECTION
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|countParameter
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"count"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|collectionParameter
argument_list|,
literal|"size"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Expression
name|convertedChildExp
decl_stmt|;
if|if
condition|(
operator|!
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|equals
argument_list|(
name|getRowType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
name|JavaTypeFactory
operator|)
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|table
operator|.
name|getRowType
argument_list|()
argument_list|,
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|expressionList
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|PhysType
name|childPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
specifier|final
name|ParameterExpression
name|o_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|childPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"o"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|childPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|expressionList
operator|.
name|add
argument_list|(
name|childPhysType
operator|.
name|fieldReference
argument_list|(
name|o_
argument_list|,
name|i
argument_list|,
name|physType
operator|.
name|getJavaFieldType
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|convertedChildExp
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"convertedChild"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltInMethod
operator|.
name|SELECT
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|physType
operator|.
name|record
argument_list|(
name|expressionList
argument_list|)
argument_list|,
name|o_
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertedChildExp
operator|=
name|childExp
expr_stmt|;
block|}
specifier|final
name|Method
name|method
decl_stmt|;
switch|switch
condition|(
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|INSERT
case|:
name|method
operator|=
name|BuiltInMethod
operator|.
name|INTO
operator|.
name|method
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|method
operator|=
name|BuiltInMethod
operator|.
name|REMOVE_ALL
operator|.
name|method
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|getOperation
argument_list|()
argument_list|)
throw|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|convertedChildExp
argument_list|,
name|method
argument_list|,
name|collectionParameter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|updatedCountParameter
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"updatedCount"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|collectionParameter
argument_list|,
literal|"size"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|SINGLETON_ENUMERABLE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|condition
argument_list|(
name|Expressions
operator|.
name|greaterThanOrEqual
argument_list|(
name|updatedCountParameter
argument_list|,
name|countParameter
argument_list|)
argument_list|,
name|Expressions
operator|.
name|subtract
argument_list|(
name|updatedCountParameter
argument_list|,
name|countParameter
argument_list|)
argument_list|,
name|Expressions
operator|.
name|subtract
argument_list|(
name|countParameter
argument_list|,
name|updatedCountParameter
argument_list|)
argument_list|)
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|implementor
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|==
name|Prefer
operator|.
name|ARRAY
condition|?
name|JavaRowFormat
operator|.
name|ARRAY
else|:
name|JavaRowFormat
operator|.
name|SCALAR
argument_list|)
decl_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End EnumerableTableModify.java
end_comment

end_unit

