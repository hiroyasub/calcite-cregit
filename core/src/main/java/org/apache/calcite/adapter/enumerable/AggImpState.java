begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents internal state when implementing aggregate functions.  */
end_comment

begin_class
specifier|public
class|class
name|AggImpState
block|{
specifier|public
specifier|final
name|int
name|aggIdx
decl_stmt|;
specifier|public
specifier|final
name|AggregateCall
name|call
decl_stmt|;
specifier|public
specifier|final
name|AggImplementor
name|implementor
decl_stmt|;
specifier|public
name|AggContext
name|context
decl_stmt|;
specifier|public
name|Expression
name|result
decl_stmt|;
specifier|public
name|List
argument_list|<
name|Expression
argument_list|>
name|state
decl_stmt|;
specifier|public
name|AggImpState
parameter_list|(
name|int
name|aggIdx
parameter_list|,
name|AggregateCall
name|call
parameter_list|,
name|boolean
name|windowContext
parameter_list|)
block|{
name|this
operator|.
name|aggIdx
operator|=
name|aggIdx
expr_stmt|;
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
name|this
operator|.
name|implementor
operator|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|call
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|windowContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|implementor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to get aggregate implementation for aggregate "
operator|+
name|call
operator|.
name|getAggregation
argument_list|()
operator|+
operator|(
name|windowContext
condition|?
literal|" in window context"
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AggImpState.java
end_comment

end_unit

