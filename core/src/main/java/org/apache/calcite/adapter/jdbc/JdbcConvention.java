begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|FilterSetOpTransposeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|ProjectRemoveRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_comment
comment|/**  * Calling convention for relational operations that occur in a JDBC  * database.  *  *<p>The convention is a slight misnomer. The operations occur in whatever  * data-flow architecture the database uses internally. Nevertheless, the result  * pops out in JDBC.</p>  *  *<p>This is the only convention, thus far, that is not a singleton. Each  * instance contains a JDBC schema (and therefore a data source). If Calcite is  * working with two different databases, it would even make sense to convert  * from "JDBC#A" convention to "JDBC#B", even though we don't do it currently.  * (That would involve asking database B to open a database link to database  * A.)</p>  *  *<p>As a result, converter rules from and to this convention need to be  * instantiated, at the start of planning, for each JDBC database in play.</p>  */
end_comment

begin_class
specifier|public
class|class
name|JdbcConvention
extends|extends
name|Convention
operator|.
name|Impl
block|{
comment|/** Cost of a JDBC node versus implementing an equivalent node in a "typical"    * calling convention. */
specifier|public
specifier|static
specifier|final
name|double
name|COST_MULTIPLIER
init|=
literal|0.8d
decl_stmt|;
specifier|public
specifier|final
name|SqlDialect
name|dialect
decl_stmt|;
specifier|public
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|public
name|JdbcConvention
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
literal|"JDBC."
operator|+
name|name
argument_list|,
name|JdbcRel
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|dialect
operator|=
name|dialect
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
specifier|public
specifier|static
name|JdbcConvention
name|of
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|JdbcConvention
argument_list|(
name|dialect
argument_list|,
name|expression
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
for|for
control|(
name|RelOptRule
name|rule
range|:
name|JdbcRules
operator|.
name|rules
argument_list|(
name|this
argument_list|)
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
name|planner
operator|.
name|addRule
argument_list|(
name|FilterSetOpTransposeRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|ProjectRemoveRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

