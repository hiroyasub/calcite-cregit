begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|CatchBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexDynamicParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLocalRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPatternFieldRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexRangeRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexSubQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexTableInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|FunctionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWindowTableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ControlFlowException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CaseFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibraryOperators
operator|.
name|TRANSLATE3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|CASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|CHAR_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|OCTET_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|PREV
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|SEARCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|SUBSTRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|UPPER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Translates {@link org.apache.calcite.rex.RexNode REX expressions} to  * {@link Expression linq4j expressions}.  */
end_comment

begin_class
specifier|public
class|class
name|RexToLixTranslator
implements|implements
name|RexVisitor
argument_list|<
name|RexToLixTranslator
operator|.
name|Result
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Method
argument_list|,
name|SqlOperator
argument_list|>
name|JAVA_TO_SQL_METHOD_MAP
init|=
name|ImmutableMap
operator|.
expr|<
name|Method
decl_stmt|,
name|SqlOperator
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|findMethod
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"toUpperCase"
argument_list|)
argument_list|,
name|UPPER
argument_list|)
decl|.
name|put
argument_list|(
name|BuiltInMethod
operator|.
name|SUBSTRING
operator|.
name|method
argument_list|,
name|SUBSTRING
argument_list|)
decl|.
name|put
argument_list|(
name|BuiltInMethod
operator|.
name|OCTET_LENGTH
operator|.
name|method
argument_list|,
name|OCTET_LENGTH
argument_list|)
decl|.
name|put
argument_list|(
name|BuiltInMethod
operator|.
name|CHAR_LENGTH
operator|.
name|method
argument_list|,
name|CHAR_LENGTH
argument_list|)
decl|.
name|put
argument_list|(
name|BuiltInMethod
operator|.
name|TRANSLATE3
operator|.
name|method
argument_list|,
name|TRANSLATE3
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|RexProgram
name|program
decl_stmt|;
specifier|final
name|SqlConformance
name|conformance
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|root
decl_stmt|;
name|final
name|RexToLixTranslator
operator|.
expr|@
name|Nullable
name|InputGetter
name|inputGetter
expr_stmt|;
specifier|private
specifier|final
name|BlockBuilder
name|list
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|BlockBuilder
name|staticList
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|Function1
argument_list|<
name|String
argument_list|,
name|InputGetter
argument_list|>
name|correlates
decl_stmt|;
comment|/**    * Map from RexLiteral's variable name to its literal, which is often a    * ({@link org.apache.calcite.linq4j.tree.ConstantExpression}))    * It is used in the some {@code RexCall}'s implementors, such as    * {@code ExtractImplementor}.    *    * @see #getLiteral    * @see #getLiteralValue    */
specifier|private
specifier|final
name|Map
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|literalMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** For {@code RexCall}, keep the list of its operand's {@code Result}.    * It is useful when creating a {@code CallImplementor}. */
specifier|private
specifier|final
name|Map
argument_list|<
name|RexCall
argument_list|,
name|List
argument_list|<
name|Result
argument_list|>
argument_list|>
name|callOperandResultMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Map from RexNode under specific storage type to its Result, to avoid    * generating duplicate code. For {@code RexInputRef}, {@code RexDynamicParam}    * and {@code RexFieldAccess}. */
specifier|private
specifier|final
name|Map
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
annotation|@
name|Nullable
name|Type
argument_list|>
argument_list|,
name|Result
argument_list|>
name|rexWithStorageTypeResultMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Map from RexNode to its Result, to avoid generating duplicate code.    * For {@code RexLiteral} and {@code RexCall}. */
specifier|private
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Result
argument_list|>
name|rexResultMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
annotation|@
name|Nullable
name|Type
name|currentStorageType
decl_stmt|;
specifier|private
specifier|static
name|Method
name|findMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
modifier|...
name|parameterTypes
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RexToLixTranslator
parameter_list|(
annotation|@
name|Nullable
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|Expression
name|root
parameter_list|,
annotation|@
name|Nullable
name|InputGetter
name|inputGetter
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
annotation|@
name|Nullable
name|BlockBuilder
name|staticList
parameter_list|,
name|RexBuilder
name|builder
parameter_list|,
name|SqlConformance
name|conformance
parameter_list|,
annotation|@
name|Nullable
name|Function1
argument_list|<
name|String
argument_list|,
name|InputGetter
argument_list|>
name|correlates
parameter_list|)
block|{
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
comment|// may be null
name|this
operator|.
name|typeFactory
operator|=
name|requireNonNull
argument_list|(
name|typeFactory
argument_list|,
literal|"typeFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conformance
operator|=
name|requireNonNull
argument_list|(
name|conformance
argument_list|,
literal|"conformance"
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|requireNonNull
argument_list|(
name|root
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputGetter
operator|=
name|inputGetter
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|requireNonNull
argument_list|(
name|list
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|this
operator|.
name|staticList
operator|=
name|staticList
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|requireNonNull
argument_list|(
name|builder
argument_list|,
literal|"builder"
argument_list|)
expr_stmt|;
name|this
operator|.
name|correlates
operator|=
name|correlates
expr_stmt|;
comment|// may be null
block|}
comment|/**    * Translates a {@link RexProgram} to a sequence of expressions and    * declarations.    *    * @param program Program to be translated    * @param typeFactory Type factory    * @param conformance SQL conformance    * @param list List of statements, populated with declarations    * @param staticList List of member declarations    * @param outputPhysType Output type, or null    * @param root Root expression    * @param inputGetter Generates expressions for inputs    * @param correlates Provider of references to the values of correlated    *                   variables    * @return Sequence of expressions, optional condition    */
specifier|public
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|translateProjects
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|SqlConformance
name|conformance
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
annotation|@
name|Nullable
name|BlockBuilder
name|staticList
parameter_list|,
annotation|@
name|Nullable
name|PhysType
name|outputPhysType
parameter_list|,
name|Expression
name|root
parameter_list|,
name|InputGetter
name|inputGetter
parameter_list|,
annotation|@
name|Nullable
name|Function1
argument_list|<
name|String
argument_list|,
name|InputGetter
argument_list|>
name|correlates
parameter_list|)
block|{
name|List
argument_list|<
name|Type
argument_list|>
name|storageTypes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outputPhysType
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|outputPhysType
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|storageTypes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowType
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|storageTypes
operator|.
name|add
argument_list|(
name|outputPhysType
operator|.
name|getJavaFieldType
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|root
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|,
name|staticList
argument_list|,
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
argument_list|,
name|conformance
argument_list|,
literal|null
argument_list|)
operator|.
name|setCorrelates
argument_list|(
name|correlates
argument_list|)
operator|.
name|translateList
argument_list|(
name|program
operator|.
name|getProjectList
argument_list|()
argument_list|,
name|storageTypes
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|List
argument_list|<
name|Expression
argument_list|>
name|translateProjects
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|SqlConformance
name|conformance
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
annotation|@
name|Nullable
name|PhysType
name|outputPhysType
parameter_list|,
name|Expression
name|root
parameter_list|,
name|InputGetter
name|inputGetter
parameter_list|,
annotation|@
name|Nullable
name|Function1
argument_list|<
name|String
argument_list|,
name|InputGetter
argument_list|>
name|correlates
parameter_list|)
block|{
return|return
name|translateProjects
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|conformance
argument_list|,
name|list
argument_list|,
literal|null
argument_list|,
name|outputPhysType
argument_list|,
name|root
argument_list|,
name|inputGetter
argument_list|,
name|correlates
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Expression
name|translateTableFunction
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|SqlConformance
name|conformance
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
name|Expression
name|root
parameter_list|,
name|RexCall
name|rexCall
parameter_list|,
name|Expression
name|inputEnumerable
parameter_list|,
name|PhysType
name|inputPhysType
parameter_list|,
name|PhysType
name|outputPhysType
parameter_list|)
block|{
return|return
operator|new
name|RexToLixTranslator
argument_list|(
literal|null
argument_list|,
name|typeFactory
argument_list|,
name|root
argument_list|,
literal|null
argument_list|,
name|list
argument_list|,
literal|null
argument_list|,
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
argument_list|,
name|conformance
argument_list|,
literal|null
argument_list|)
operator|.
name|translateTableFunction
argument_list|(
name|rexCall
argument_list|,
name|inputEnumerable
argument_list|,
name|inputPhysType
argument_list|,
name|outputPhysType
argument_list|)
return|;
block|}
comment|/** Creates a translator for translating aggregate functions. */
specifier|public
specifier|static
name|RexToLixTranslator
name|forAggregation
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
annotation|@
name|Nullable
name|InputGetter
name|inputGetter
parameter_list|,
name|SqlConformance
name|conformance
parameter_list|)
block|{
specifier|final
name|ParameterExpression
name|root
init|=
name|DataContext
operator|.
name|ROOT
decl_stmt|;
return|return
operator|new
name|RexToLixTranslator
argument_list|(
literal|null
argument_list|,
name|typeFactory
argument_list|,
name|root
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|,
literal|null
argument_list|,
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
argument_list|,
name|conformance
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
specifier|final
name|RexImpTable
operator|.
name|NullAs
name|nullAs
init|=
name|RexImpTable
operator|.
name|NullAs
operator|.
name|of
argument_list|(
name|isNullable
argument_list|(
name|expr
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|translate
argument_list|(
name|expr
argument_list|,
name|nullAs
argument_list|)
return|;
block|}
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|translate
argument_list|(
name|expr
argument_list|,
name|nullAs
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|,
annotation|@
name|Nullable
name|Type
name|storageType
parameter_list|)
block|{
specifier|final
name|RexImpTable
operator|.
name|NullAs
name|nullAs
init|=
name|RexImpTable
operator|.
name|NullAs
operator|.
name|of
argument_list|(
name|isNullable
argument_list|(
name|expr
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|translate
argument_list|(
name|expr
argument_list|,
name|nullAs
argument_list|,
name|storageType
argument_list|)
return|;
block|}
name|Expression
name|translate
parameter_list|(
name|RexNode
name|expr
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|,
annotation|@
name|Nullable
name|Type
name|storageType
parameter_list|)
block|{
name|currentStorageType
operator|=
name|storageType
expr_stmt|;
specifier|final
name|Result
name|result
init|=
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|translated
init|=
name|requireNonNull
argument_list|(
name|EnumUtils
operator|.
name|toInternal
argument_list|(
name|result
operator|.
name|valueVariable
argument_list|,
name|storageType
argument_list|)
argument_list|)
decl_stmt|;
comment|// When we asked for not null input that would be stored as box, avoid unboxing
if|if
condition|(
name|RexImpTable
operator|.
name|NullAs
operator|.
name|NOT_POSSIBLE
operator|==
name|nullAs
operator|&&
name|translated
operator|.
name|type
operator|.
name|equals
argument_list|(
name|storageType
argument_list|)
condition|)
block|{
return|return
name|translated
return|;
block|}
return|return
name|nullAs
operator|.
name|handle
argument_list|(
name|translated
argument_list|)
return|;
block|}
name|Expression
name|translateCast
parameter_list|(
name|RelDataType
name|sourceType
parameter_list|,
name|RelDataType
name|targetType
parameter_list|,
name|Expression
name|operand
parameter_list|)
block|{
name|Expression
name|convert
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|ANY
case|:
name|convert
operator|=
name|operand
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|convert
operator|=
name|translateCastToDate
argument_list|(
name|sourceType
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|convert
operator|=
name|translateCastToTime
argument_list|(
name|sourceType
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|STRING_TO_TIME_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_STRING_TO_TIME_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_TIME_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_STRING_TO_TIMESTAMP_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_TIMESTAMP_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIME_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|STRING_TO_TIMESTAMP
operator|.
name|method
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|convert
operator|=
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|convert
operator|=
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|CURRENT_DATE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE_TO_TIMESTAMP
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_DATE_TO_STRING
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|CURRENT_DATE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIMESTAMP
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|STRING_TO_TIMESTAMP_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_STRING_TO_TIMESTAMP_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_TIMESTAMP_TO_STRING
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_STRING_TO_TIMESTAMP_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_TIMESTAMP_TO_STRING
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|multiply
argument_list|(
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|CURRENT_DATE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|operand
argument_list|,
name|long
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE_TO_TIMESTAMP_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_DATE_TO_STRING
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|CURRENT_DATE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_STRING_TO_TIMESTAMP_WITH_LOCAL_TIME_ZONE
operator|.
name|method
argument_list|,
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_TIMESTAMP_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|BOOLEAN
case|:
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|STRING_TO_BOOLEAN
operator|.
name|method
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
specifier|final
name|SqlIntervalQualifier
name|interval
init|=
name|sourceType
operator|.
name|getIntervalQualifier
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_DATE_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_TIME_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|UNIX_TIMESTAMP_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|INTERVAL_YEAR_MONTH_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|requireNonNull
argument_list|(
name|interval
argument_list|,
literal|"interval"
argument_list|)
operator|.
name|timeUnitRange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|INTERVAL_DAY_TIME_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|requireNonNull
argument_list|(
name|interval
argument_list|,
literal|"interval"
argument_list|)
operator|.
name|timeUnitRange
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|interval
operator|.
name|getFractionalSecondPrecision
argument_list|(
name|typeFactory
operator|.
name|getTypeSystem
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|BOOLEAN_TO_STRING
operator|.
name|method
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|convert
operator|==
literal|null
condition|)
block|{
name|convert
operator|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|operand
argument_list|,
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|targetType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Going from anything to CHAR(n) or VARCHAR(n), make sure value is no
comment|// longer than n.
name|boolean
name|pad
init|=
literal|false
decl_stmt|;
name|boolean
name|truncate
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|BINARY
case|:
name|pad
operator|=
literal|true
expr_stmt|;
comment|// fall through
case|case
name|VARCHAR
case|:
case|case
name|VARBINARY
case|:
specifier|final
name|int
name|targetPrecision
init|=
name|targetType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetPrecision
operator|>=
literal|0
condition|)
block|{
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|BINARY
case|:
case|case
name|VARBINARY
case|:
comment|// If this is a widening cast, no need to truncate.
specifier|final
name|int
name|sourcePrecision
init|=
name|sourceType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|comparePrecision
argument_list|(
name|sourcePrecision
argument_list|,
name|targetPrecision
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|truncate
operator|=
literal|false
expr_stmt|;
block|}
comment|// If this is a widening cast, no need to pad.
if|if
condition|(
name|SqlTypeUtil
operator|.
name|comparePrecision
argument_list|(
name|sourcePrecision
argument_list|,
name|targetPrecision
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|pad
operator|=
literal|false
expr_stmt|;
block|}
comment|// fall through
default|default:
if|if
condition|(
name|truncate
operator|||
name|pad
condition|)
block|{
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|pad
condition|?
name|BuiltInMethod
operator|.
name|TRUNCATE_OR_PAD
operator|.
name|method
else|:
name|BuiltInMethod
operator|.
name|TRUNCATE
operator|.
name|method
argument_list|,
name|convert
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|targetPrecision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
name|int
name|targetScale
init|=
name|targetType
operator|.
name|getScale
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetScale
operator|==
name|RelDataType
operator|.
name|SCALE_NOT_SPECIFIED
condition|)
block|{
name|targetScale
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|targetScale
operator|<
name|sourceType
operator|.
name|getScale
argument_list|()
condition|)
block|{
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|ROUND_LONG
operator|.
name|method
argument_list|,
name|convert
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
literal|3
operator|-
name|targetScale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
switch|switch
condition|(
name|requireNonNull
argument_list|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|"null SqlTypeFamily for "
operator|+
name|sourceType
operator|+
literal|", SqlTypeName "
operator|+
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|NUMERIC
case|:
name|final
name|BigDecimal
name|multiplier
operator|=
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getEndUnit
argument_list|()
operator|.
name|multiplier
block|;
name|final
name|BigDecimal
name|divider
operator|=
name|BigDecimal
operator|.
name|ONE
block|;
name|convert
operator|=
name|RexImpTable
operator|.
name|multiplyDivide
argument_list|(
name|convert
argument_list|,
name|multiplier
argument_list|,
name|divider
argument_list|)
block|;
break|break;
default|default:
break|break;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|scaleIntervalToNumber
argument_list|(
name|sourceType
argument_list|,
name|targetType
argument_list|,
name|convert
argument_list|)
return|;
block|}
end_class

begin_function
specifier|private
annotation|@
name|Nullable
name|Expression
name|translateCastToTime
parameter_list|(
name|RelDataType
name|sourceType
parameter_list|,
name|Expression
name|operand
parameter_list|)
block|{
name|Expression
name|convert
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|STRING_TO_TIME
operator|.
name|method
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE_TO_TIME
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|convert
operator|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|FLOOR_MOD
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_TIME
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|convert
return|;
block|}
end_function

begin_function
specifier|private
annotation|@
name|Nullable
name|Expression
name|translateCastToDate
parameter_list|(
name|RelDataType
name|sourceType
parameter_list|,
name|Expression
name|operand
parameter_list|)
block|{
name|Expression
name|convert
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|convert
operator|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|STRING_TO_DATE
operator|.
name|method
argument_list|,
name|operand
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|convert
operator|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|FLOOR_DIV
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
argument_list|)
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
name|convert
operator|=
name|RexImpTable
operator|.
name|optimize2
argument_list|(
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE_TO_DATE
operator|.
name|method
argument_list|,
name|operand
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|TIME_ZONE
operator|.
name|method
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|convert
return|;
block|}
end_function

begin_comment
comment|/**    * Handle checked Exceptions declared in Method. In such case,    * method call should be wrapped in a try...catch block.    * "    *      final Type method_call;    *      try {    *        method_call = callExpr    *      } catch (Exception e) {    *        throw new RuntimeException(e);    *      }    * "    */
end_comment

begin_function
name|Expression
name|handleMethodCheckedExceptions
parameter_list|(
name|Expression
name|callExpr
parameter_list|)
block|{
comment|// Try statement
name|ParameterExpression
name|methodCall
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|callExpr
operator|.
name|getType
argument_list|()
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"method_call"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|methodCall
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Statement
name|st
init|=
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|methodCall
argument_list|,
name|callExpr
argument_list|)
argument_list|)
decl_stmt|;
comment|// Catch Block, wrap checked exception in unchecked exception
name|ParameterExpression
name|e
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|Exception
operator|.
name|class
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|Expression
name|uncheckedException
init|=
name|Expressions
operator|.
name|new_
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|CatchBlock
name|cb
init|=
name|Expressions
operator|.
name|catch_
argument_list|(
name|e
argument_list|,
name|Expressions
operator|.
name|throw_
argument_list|(
name|uncheckedException
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|tryCatch
argument_list|(
name|st
argument_list|,
name|cb
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|methodCall
return|;
block|}
end_function

begin_comment
comment|/** Dereferences an expression if it is a    * {@link org.apache.calcite.rex.RexLocalRef}. */
end_comment

begin_function
specifier|public
name|RexNode
name|deref
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|RexLocalRef
condition|)
block|{
name|RexLocalRef
name|ref
init|=
operator|(
name|RexLocalRef
operator|)
name|expr
decl_stmt|;
specifier|final
name|RexNode
name|e2
init|=
name|requireNonNull
argument_list|(
name|program
argument_list|,
literal|"program"
argument_list|)
operator|.
name|getExprList
argument_list|()
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|ref
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|e2
operator|.
name|getType
argument_list|()
argument_list|)
assert|;
return|return
name|e2
return|;
block|}
else|else
block|{
return|return
name|expr
return|;
block|}
block|}
end_function

begin_comment
comment|/** Translates a literal.    *    * @throws ControlFlowException if literal is null but {@code nullAs} is    * {@link org.apache.calcite.adapter.enumerable.RexImpTable.NullAs#NOT_POSSIBLE}.    */
end_comment

begin_function
specifier|public
specifier|static
name|Expression
name|translateLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|.
name|isNull
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|TRUE
case|:
case|case
name|IS_NULL
case|:
return|return
name|RexImpTable
operator|.
name|TRUE_EXPR
return|;
case|case
name|FALSE
case|:
case|case
name|IS_NOT_NULL
case|:
return|return
name|RexImpTable
operator|.
name|FALSE_EXPR
return|;
case|case
name|NOT_POSSIBLE
case|:
throw|throw
operator|new
name|ControlFlowException
argument_list|()
throw|;
case|case
name|NULL
case|:
default|default:
return|return
name|RexImpTable
operator|.
name|NULL_EXPR
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|nullAs
condition|)
block|{
case|case
name|IS_NOT_NULL
case|:
return|return
name|RexImpTable
operator|.
name|TRUE_EXPR
return|;
case|case
name|IS_NULL
case|:
return|return
name|RexImpTable
operator|.
name|FALSE_EXPR
return|;
default|default:
break|break;
block|}
block|}
name|Type
name|javaClass
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value2
decl_stmt|;
switch|switch
condition|(
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|DECIMAL
case|:
specifier|final
name|BigDecimal
name|bd
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaClass
operator|==
name|float
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
name|bd
argument_list|,
name|javaClass
argument_list|)
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|double
operator|.
name|class
condition|)
block|{
return|return
name|Expressions
operator|.
name|constant
argument_list|(
name|bd
argument_list|,
name|javaClass
argument_list|)
return|;
block|}
assert|assert
name|javaClass
operator|==
name|BigDecimal
operator|.
name|class
assert|;
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|requireNonNull
argument_list|(
name|bd
argument_list|,
parameter_list|()
lambda|->
literal|"value for "
operator|+
name|literal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
name|value2
operator|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|=
name|int
operator|.
name|class
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
name|value2
operator|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|=
name|long
operator|.
name|class
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|value2
operator|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
case|case
name|VARBINARY
case|:
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|ByteString
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
return|;
case|case
name|GEOMETRY
case|:
specifier|final
name|Geometry
name|geom
init|=
name|requireNonNull
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Geometry
operator|.
name|class
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"getValueAs(Geometries.Geom) for "
operator|+
name|literal
argument_list|)
decl_stmt|;
specifier|final
name|String
name|wkt
init|=
name|SpatialTypeFunctions
operator|.
name|ST_AsWKT
argument_list|(
name|geom
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|BuiltInMethod
operator|.
name|ST_GEOM_FROM_TEXT
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|wkt
argument_list|)
argument_list|)
return|;
case|case
name|SYMBOL
case|:
name|value2
operator|=
name|requireNonNull
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Enum
operator|.
name|class
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"getValueAs(Enum.class) for "
operator|+
name|literal
argument_list|)
expr_stmt|;
name|javaClass
operator|=
name|value2
operator|.
name|getClass
argument_list|()
expr_stmt|;
break|break;
default|default:
specifier|final
name|Primitive
name|primitive
init|=
name|Primitive
operator|.
name|ofBoxOr
argument_list|(
name|javaClass
argument_list|)
decl_stmt|;
specifier|final
name|Comparable
name|value
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitive
operator|!=
literal|null
operator|&&
name|value
operator|instanceof
name|Number
condition|)
block|{
name|value2
operator|=
name|primitive
operator|.
name|number
argument_list|(
operator|(
name|Number
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value2
operator|=
name|value
expr_stmt|;
block|}
block|}
return|return
name|Expressions
operator|.
name|constant
argument_list|(
name|value2
argument_list|,
name|javaClass
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|Expression
argument_list|>
name|translateList
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
parameter_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
parameter_list|)
block|{
return|return
name|translateList
argument_list|(
name|operandList
argument_list|,
name|nullAs
argument_list|,
name|EnumUtils
operator|.
name|internalTypes
argument_list|(
name|operandList
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|public
name|List
argument_list|<
name|Expression
argument_list|>
name|translateList
argument_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
argument_list|,
name|RexImpTable
operator|.
name|NullAs
name|nullAs
argument_list|,
name|List
operator|<
condition|?
then|extends @
name|Nullable
name|Type
operator|>
name|storageTypes
argument_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
operator|<
name|RexNode
operator|,
operator|?
expr|extends @
name|Nullable
name|Type
operator|>
name|e
operator|:
name|Pair
operator|.
name|zip
argument_list|(
name|operandList
argument_list|,
name|storageTypes
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|translate
argument_list|(
name|e
operator|.
name|left
argument_list|,
name|nullAs
argument_list|,
name|e
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_decl_stmt

begin_comment
comment|/**    * Translates the list of {@code RexNode}, using the default output types.    * This might be suboptimal in terms of additional box-unbox when you use    * the translation later.    * If you know the java class that will be used to store the results, use    * {@link org.apache.calcite.adapter.enumerable.RexToLixTranslator#translateList(java.util.List, java.util.List)}    * version.    *    * @param operandList list of RexNodes to translate    *    * @return translated expressions    */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|Expression
argument_list|>
name|translateList
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|operandList
parameter_list|)
block|{
return|return
name|translateList
argument_list|(
name|operandList
argument_list|,
name|EnumUtils
operator|.
name|internalTypes
argument_list|(
name|operandList
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Translates the list of {@code RexNode}, while optimizing for output    * storage.    * For instance, if the result of translation is going to be stored in    * {@code Object[]}, and the input is {@code Object[]} as well,    * then translator will avoid casting, boxing, etc.    *    * @param operandList list of RexNodes to translate    * @param storageTypes hints of the java classes that will be used    *                     to store translation results. Use null to use    *                     default storage type    *    * @return translated expressions    */
end_comment

begin_decl_stmt
specifier|public
name|List
argument_list|<
name|Expression
argument_list|>
name|translateList
argument_list|(
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|operandList
argument_list|,
annotation|@
name|Nullable
name|List
operator|<
condition|?
then|extends @
name|Nullable
name|Type
operator|>
name|storageTypes
argument_list|)
block|{
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|operandList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|rex
init|=
name|operandList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Type
name|desiredType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|storageTypes
operator|!=
literal|null
condition|)
block|{
name|desiredType
operator|=
name|storageTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Expression
name|translate
init|=
name|translate
argument_list|(
name|rex
argument_list|,
name|desiredType
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|translate
argument_list|)
expr_stmt|;
comment|// desiredType is still a hint, thus we might get any kind of output
comment|// (boxed or not) when hint was provided.
comment|// It is favourable to get the type matching desired type
if|if
condition|(
name|desiredType
operator|==
literal|null
operator|&&
operator|!
name|isNullable
argument_list|(
name|rex
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|Primitive
operator|.
name|isBox
argument_list|(
name|translate
operator|.
name|getType
argument_list|()
argument_list|)
operator|:
literal|"Not-null boxed primitive should come back as primitive: "
operator|+
name|rex
operator|+
literal|", "
operator|+
name|translate
operator|.
name|getType
argument_list|()
assert|;
block|}
block|}
return|return
name|list
return|;
block|}
end_decl_stmt

begin_function
specifier|private
name|Expression
name|translateTableFunction
parameter_list|(
name|RexCall
name|rexCall
parameter_list|,
name|Expression
name|inputEnumerable
parameter_list|,
name|PhysType
name|inputPhysType
parameter_list|,
name|PhysType
name|outputPhysType
parameter_list|)
block|{
assert|assert
name|rexCall
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlWindowTableFunction
assert|;
name|TableFunctionCallImplementor
name|implementor
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
operator|(
name|SqlWindowTableFunction
operator|)
name|rexCall
operator|.
name|getOperator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor
operator|==
literal|null
condition|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"implementor of "
operator|+
name|rexCall
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|,
name|inputEnumerable
argument_list|,
name|rexCall
argument_list|,
name|inputPhysType
argument_list|,
name|outputPhysType
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Expression
name|translateCondition
parameter_list|(
name|RexProgram
name|program
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|BlockBuilder
name|list
parameter_list|,
name|InputGetter
name|inputGetter
parameter_list|,
name|Function1
argument_list|<
name|String
argument_list|,
name|InputGetter
argument_list|>
name|correlates
parameter_list|,
name|SqlConformance
name|conformance
parameter_list|)
block|{
name|RexLocalRef
name|condition
init|=
name|program
operator|.
name|getCondition
argument_list|()
decl_stmt|;
if|if
condition|(
name|condition
operator|==
literal|null
condition|)
block|{
return|return
name|RexImpTable
operator|.
name|TRUE_EXPR
return|;
block|}
specifier|final
name|ParameterExpression
name|root
init|=
name|DataContext
operator|.
name|ROOT
decl_stmt|;
name|RexToLixTranslator
name|translator
init|=
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|root
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|,
literal|null
argument_list|,
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
argument_list|,
name|conformance
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|translator
operator|=
name|translator
operator|.
name|setCorrelates
argument_list|(
name|correlates
argument_list|)
expr_stmt|;
return|return
name|translator
operator|.
name|translate
argument_list|(
name|condition
argument_list|,
name|RexImpTable
operator|.
name|NullAs
operator|.
name|FALSE
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns whether an expression is nullable.    * @param e Expression    * @return Whether expression is nullable    */
end_comment

begin_function
specifier|public
name|boolean
name|isNullable
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|RexToLixTranslator
name|setBlock
parameter_list|(
name|BlockBuilder
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
name|this
operator|.
name|list
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|root
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|,
name|staticList
argument_list|,
name|builder
argument_list|,
name|conformance
argument_list|,
name|correlates
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|RexToLixTranslator
name|setCorrelates
parameter_list|(
annotation|@
name|Nullable
name|Function1
argument_list|<
name|String
argument_list|,
name|InputGetter
argument_list|>
name|correlates
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|correlates
operator|==
name|correlates
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RexToLixTranslator
argument_list|(
name|program
argument_list|,
name|typeFactory
argument_list|,
name|root
argument_list|,
name|inputGetter
argument_list|,
name|list
argument_list|,
name|staticList
argument_list|,
name|builder
argument_list|,
name|conformance
argument_list|,
name|correlates
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|Expression
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Expression
name|scaleIntervalToNumber
parameter_list|(
name|RelDataType
name|sourceType
parameter_list|,
name|RelDataType
name|targetType
parameter_list|,
name|Expression
name|operand
parameter_list|)
block|{
switch|switch
condition|(
name|requireNonNull
argument_list|(
name|targetType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|"SqlTypeFamily for "
operator|+
name|targetType
argument_list|)
condition|)
block|{
case|case
name|NUMERIC
case|:
switch|switch
condition|(
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
comment|// Scale to the given field.
specifier|final
name|BigDecimal
name|multiplier
init|=
name|BigDecimal
operator|.
name|ONE
decl_stmt|;
specifier|final
name|BigDecimal
name|divider
init|=
name|sourceType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getEndUnit
argument_list|()
operator|.
name|multiplier
decl_stmt|;
return|return
name|RexImpTable
operator|.
name|multiplyDivide
argument_list|(
name|operand
argument_list|,
name|multiplier
argument_list|,
name|divider
argument_list|)
return|;
default|default:
break|break;
block|}
break|break;
default|default:
break|break;
block|}
end_function

begin_return
return|return
name|operand
return|;
end_return

begin_comment
unit|}
comment|/**    * Visit {@code RexInputRef}. If it has never been visited    * under current storage type before, {@code RexToLixTranslator}    * generally produces three lines of code.    * For example, when visiting a column (named commission) in    * table Employee, the generated code snippet is:    * {@code    *   final Employee current =(Employee) inputEnumerator.current();        final Integer input_value = current.commission;        final boolean input_isNull = input_value == null;    * }    */
end_comment

begin_function
unit|@
name|Override
specifier|public
name|Result
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|RexNode
argument_list|,
annotation|@
name|Nullable
name|Type
argument_list|>
name|key
init|=
name|Pair
operator|.
name|of
argument_list|(
name|inputRef
argument_list|,
name|currentStorageType
argument_list|)
decl_stmt|;
comment|// If the RexInputRef has been visited under current storage type already,
comment|// it is not necessary to visit it again, just return the result.
if|if
condition|(
name|rexWithStorageTypeResultMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|rexWithStorageTypeResultMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|// Generate one line of code to get the input, e.g.,
comment|// "final Employee current =(Employee) inputEnumerator.current();"
specifier|final
name|Expression
name|valueExpression
init|=
name|requireNonNull
argument_list|(
name|inputGetter
argument_list|,
literal|"inputGetter"
argument_list|)
operator|.
name|field
argument_list|(
name|list
argument_list|,
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|,
name|currentStorageType
argument_list|)
decl_stmt|;
comment|// Generate one line of code for the value of RexInputRef, e.g.,
comment|// "final Integer input_value = current.commission;"
specifier|final
name|ParameterExpression
name|valueVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|valueExpression
operator|.
name|getType
argument_list|()
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"input_value"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|valueVariable
argument_list|,
name|valueExpression
argument_list|)
argument_list|)
expr_stmt|;
comment|// Generate one line of code to check whether RexInputRef is null, e.g.,
comment|// "final boolean input_isNull = input_value == null;"
specifier|final
name|Expression
name|isNullExpression
init|=
name|checkNull
argument_list|(
name|valueVariable
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|isNullVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"input_isNull"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|isNullVariable
argument_list|,
name|isNullExpression
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
name|isNullVariable
argument_list|,
name|valueVariable
argument_list|)
decl_stmt|;
comment|// Cache<RexInputRef, currentStorageType>'s result
comment|// Note: EnumerableMatch's PrevInputGetter changes index each time,
comment|// it is not right to reuse the result under such case.
if|if
condition|(
operator|!
operator|(
name|inputGetter
operator|instanceof
name|EnumerableMatch
operator|.
name|PrevInputGetter
operator|)
condition|)
block|{
name|rexWithStorageTypeResultMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Result
argument_list|(
name|isNullVariable
argument_list|,
name|valueVariable
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
block|{
return|return
name|deref
argument_list|(
name|localRef
argument_list|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Visit {@code RexLiteral}. If it has never been visited before,    * {@code RexToLixTranslator} will generate two lines of code. For example,    * when visiting a primitive int (10), the generated code snippet is:    * {@code    *   final int literal_value = 10;    *   final boolean literal_isNull = false;    * }    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
comment|// If the RexLiteral has been visited already, just return the result
if|if
condition|(
name|rexResultMap
operator|.
name|containsKey
argument_list|(
name|literal
argument_list|)
condition|)
block|{
return|return
name|rexResultMap
operator|.
name|get
argument_list|(
name|literal
argument_list|)
return|;
block|}
comment|// Generate one line of code for the value of RexLiteral, e.g.,
comment|// "final int literal_value = 10;"
specifier|final
name|Expression
name|valueExpression
init|=
name|literal
operator|.
name|isNull
argument_list|()
comment|// Note: even for null literal, we can't loss its type information
condition|?
name|getTypedNullLiteral
argument_list|(
name|literal
argument_list|)
else|:
name|translateLiteral
argument_list|(
name|literal
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|,
name|typeFactory
argument_list|,
name|RexImpTable
operator|.
name|NullAs
operator|.
name|NOT_POSSIBLE
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|valueVariable
decl_stmt|;
specifier|final
name|Expression
name|literalValue
init|=
name|appendConstant
argument_list|(
literal|"literal_value"
argument_list|,
name|valueExpression
argument_list|)
decl_stmt|;
if|if
condition|(
name|literalValue
operator|instanceof
name|ParameterExpression
condition|)
block|{
name|valueVariable
operator|=
operator|(
name|ParameterExpression
operator|)
name|literalValue
expr_stmt|;
block|}
else|else
block|{
name|valueVariable
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|valueExpression
operator|.
name|getType
argument_list|()
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"literal_value"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|valueVariable
argument_list|,
name|valueExpression
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Generate one line of code to check whether RexLiteral is null, e.g.,
comment|// "final boolean literal_isNull = false;"
specifier|final
name|Expression
name|isNullExpression
init|=
name|literal
operator|.
name|isNull
argument_list|()
condition|?
name|RexImpTable
operator|.
name|TRUE_EXPR
else|:
name|RexImpTable
operator|.
name|FALSE_EXPR
decl_stmt|;
specifier|final
name|ParameterExpression
name|isNullVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"literal_isNull"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|isNullVariable
argument_list|,
name|isNullExpression
argument_list|)
argument_list|)
expr_stmt|;
comment|// Maintain the map from valueVariable (ParameterExpression) to real Expression
name|literalMap
operator|.
name|put
argument_list|(
name|valueVariable
argument_list|,
name|valueExpression
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
name|isNullVariable
argument_list|,
name|valueVariable
argument_list|)
decl_stmt|;
comment|// Cache RexLiteral's result
name|rexResultMap
operator|.
name|put
argument_list|(
name|literal
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * Returns an {@code Expression} for null literal without losing its type    * information.    */
end_comment

begin_function
specifier|private
name|ConstantExpression
name|getTypedNullLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
assert|assert
name|literal
operator|.
name|isNull
argument_list|()
assert|;
name|Type
name|javaClass
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
name|javaClass
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
name|javaClass
operator|=
name|Long
operator|.
name|class
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|javaClass
operator|==
literal|null
operator|||
name|javaClass
operator|==
name|Void
operator|.
name|class
condition|?
name|RexImpTable
operator|.
name|NULL_EXPR
else|:
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|,
name|javaClass
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Visit {@code RexCall}. For most {@code SqlOperator}s, we can get the implementor    * from {@code RexImpTable}. Several operators (e.g., CaseWhen) with special semantics    * need to be implemented separately.    */
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|rexResultMap
operator|.
name|containsKey
argument_list|(
name|call
argument_list|)
condition|)
block|{
return|return
name|rexResultMap
operator|.
name|get
argument_list|(
name|call
argument_list|)
return|;
block|}
specifier|final
name|SqlOperator
name|operator
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|PREV
condition|)
block|{
return|return
name|implementPrev
argument_list|(
name|call
argument_list|)
return|;
block|}
if|if
condition|(
name|operator
operator|==
name|CASE
condition|)
block|{
return|return
name|implementCaseWhen
argument_list|(
name|call
argument_list|)
return|;
block|}
if|if
condition|(
name|operator
operator|==
name|SEARCH
condition|)
block|{
return|return
name|RexUtil
operator|.
name|expandSearch
argument_list|(
name|builder
argument_list|,
name|program
argument_list|,
name|call
argument_list|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|final
name|RexImpTable
operator|.
name|RexCallImplementor
name|implementor
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|operator
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate call "
operator|+
name|call
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
annotation|@
name|Nullable
name|Type
argument_list|>
name|storageTypes
init|=
name|EnumUtils
operator|.
name|internalTypes
argument_list|(
name|operandList
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|operandResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Result
name|operandResult
init|=
name|implementCallOperand
argument_list|(
name|operandList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|storageTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|operandResults
operator|.
name|add
argument_list|(
name|operandResult
argument_list|)
expr_stmt|;
block|}
name|callOperandResultMap
operator|.
name|put
argument_list|(
name|call
argument_list|,
name|operandResults
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|,
name|call
argument_list|,
name|operandResults
argument_list|)
decl_stmt|;
name|rexResultMap
operator|.
name|put
argument_list|(
name|call
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Result
name|implementCallOperand
parameter_list|(
specifier|final
name|RexNode
name|operand
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|Type
name|storageType
parameter_list|,
specifier|final
name|RexToLixTranslator
name|translator
parameter_list|)
block|{
specifier|final
name|Type
name|originalStorageType
init|=
name|translator
operator|.
name|currentStorageType
decl_stmt|;
name|translator
operator|.
name|currentStorageType
operator|=
name|storageType
expr_stmt|;
name|Result
name|operandResult
init|=
name|operand
operator|.
name|accept
argument_list|(
name|translator
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageType
operator|!=
literal|null
condition|)
block|{
name|operandResult
operator|=
name|translator
operator|.
name|toInnerStorageType
argument_list|(
name|operandResult
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
block|}
name|translator
operator|.
name|currentStorageType
operator|=
name|originalStorageType
expr_stmt|;
return|return
name|operandResult
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Expression
name|implementCallOperand2
parameter_list|(
specifier|final
name|RexNode
name|operand
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|Type
name|storageType
parameter_list|,
specifier|final
name|RexToLixTranslator
name|translator
parameter_list|)
block|{
specifier|final
name|Type
name|originalStorageType
init|=
name|translator
operator|.
name|currentStorageType
decl_stmt|;
name|translator
operator|.
name|currentStorageType
operator|=
name|storageType
expr_stmt|;
specifier|final
name|Expression
name|result
init|=
name|translator
operator|.
name|translate
argument_list|(
name|operand
argument_list|)
decl_stmt|;
name|translator
operator|.
name|currentStorageType
operator|=
name|originalStorageType
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * For {@code PREV} operator, the offset of {@code inputGetter}    * should be set first.    */
end_comment

begin_function
specifier|private
name|Result
name|implementPrev
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|RexNode
name|node
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|offset
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|offs
init|=
name|Expressions
operator|.
name|multiply
argument_list|(
name|translate
argument_list|(
name|offset
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|requireNonNull
argument_list|(
operator|(
name|EnumerableMatch
operator|.
name|PrevInputGetter
operator|)
name|inputGetter
argument_list|,
literal|"inputGetter"
argument_list|)
operator|.
name|setOffset
argument_list|(
name|offs
argument_list|)
expr_stmt|;
return|return
name|node
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * The CASE operator is SQLâs way of handling if/then logic.    * Different with other {@code RexCall}s, it is not safe to    * implement its operands first.    * For example: {@code    *   select case when s=0 then false    *          else 100/s> 0 end    *   from (values (1),(0)) ax(s);    * }    */
end_comment

begin_function
specifier|private
name|Result
name|implementCaseWhen
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|Type
name|returnType
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|valueVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|returnType
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"case_when_value"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|valueVariable
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|implementRecursively
argument_list|(
name|this
argument_list|,
name|operandList
argument_list|,
name|valueVariable
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|isNullExpression
init|=
name|checkNull
argument_list|(
name|valueVariable
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|isNullVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"case_when_isNull"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|isNullVariable
argument_list|,
name|isNullExpression
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
name|isNullVariable
argument_list|,
name|valueVariable
argument_list|)
decl_stmt|;
name|rexResultMap
operator|.
name|put
argument_list|(
name|call
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * Case statements of the form:    * {@code CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END}.    * When {@code a = true}, returns {@code b};    * when {@code c = true}, returns {@code d};    * else returns {@code e}.    *    *<p>We generate code that looks like:    *    *<blockquote><pre>{@code    *      int case_when_value;    *      ......code for a......    *      if (!a_isNull&& a_value) {    *          ......code for b......    *          case_when_value = res(b_isNull, b_value);    *      } else {    *          ......code for c......    *          if (!c_isNull&& c_value) {    *              ......code for d......    *              case_when_value = res(d_isNull, d_value);    *          } else {    *              ......code for e......    *              case_when_value = res(e_isNull, e_value);    *          }    *      }    * }</pre></blockquote>    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|implementRecursively
parameter_list|(
specifier|final
name|RexToLixTranslator
name|currentTranslator
parameter_list|,
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operandList
parameter_list|,
specifier|final
name|ParameterExpression
name|valueVariable
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
specifier|final
name|BlockBuilder
name|currentBlockBuilder
init|=
name|currentTranslator
operator|.
name|getBlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
annotation|@
name|Nullable
name|Type
argument_list|>
name|storageTypes
init|=
name|EnumUtils
operator|.
name|internalTypes
argument_list|(
name|operandList
argument_list|)
decl_stmt|;
comment|// [ELSE] clause
if|if
condition|(
name|pos
operator|==
name|operandList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|Expression
name|res
init|=
name|implementCallOperand2
argument_list|(
name|operandList
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|storageTypes
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|currentTranslator
argument_list|)
decl_stmt|;
name|currentBlockBuilder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|valueVariable
argument_list|,
name|EnumUtils
operator|.
name|convert
argument_list|(
name|res
argument_list|,
name|valueVariable
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Condition code: !a_isNull&& a_value
specifier|final
name|RexNode
name|testerNode
init|=
name|operandList
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
specifier|final
name|Result
name|testerResult
init|=
name|implementCallOperand
argument_list|(
name|testerNode
argument_list|,
name|storageTypes
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|currentTranslator
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|tester
init|=
name|Expressions
operator|.
name|andAlso
argument_list|(
name|Expressions
operator|.
name|not
argument_list|(
name|testerResult
operator|.
name|isNullVariable
argument_list|)
argument_list|,
name|testerResult
operator|.
name|valueVariable
argument_list|)
decl_stmt|;
comment|// Code for {if} branch
specifier|final
name|RexNode
name|ifTrueNode
init|=
name|operandList
operator|.
name|get
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|ifTrueBlockBuilder
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|,
name|currentBlockBuilder
argument_list|)
decl_stmt|;
specifier|final
name|RexToLixTranslator
name|ifTrueTranslator
init|=
name|currentTranslator
operator|.
name|setBlock
argument_list|(
name|ifTrueBlockBuilder
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|ifTrueRes
init|=
name|implementCallOperand2
argument_list|(
name|ifTrueNode
argument_list|,
name|storageTypes
operator|.
name|get
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|,
name|ifTrueTranslator
argument_list|)
decl_stmt|;
comment|// Assign the value: case_when_value = ifTrueRes
name|ifTrueBlockBuilder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|valueVariable
argument_list|,
name|EnumUtils
operator|.
name|convert
argument_list|(
name|ifTrueRes
argument_list|,
name|valueVariable
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BlockStatement
name|ifTrue
init|=
name|ifTrueBlockBuilder
operator|.
name|toBlock
argument_list|()
decl_stmt|;
comment|// There is no [ELSE] clause
if|if
condition|(
name|pos
operator|+
literal|1
operator|==
name|operandList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|currentBlockBuilder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|tester
argument_list|,
name|ifTrue
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Generate code for {else} branch recursively
specifier|final
name|BlockBuilder
name|ifFalseBlockBuilder
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|,
name|currentBlockBuilder
argument_list|)
decl_stmt|;
specifier|final
name|RexToLixTranslator
name|ifFalseTranslator
init|=
name|currentTranslator
operator|.
name|setBlock
argument_list|(
name|ifFalseBlockBuilder
argument_list|)
decl_stmt|;
name|implementRecursively
argument_list|(
name|ifFalseTranslator
argument_list|,
name|operandList
argument_list|,
name|valueVariable
argument_list|,
name|pos
operator|+
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockStatement
name|ifFalse
init|=
name|ifFalseBlockBuilder
operator|.
name|toBlock
argument_list|()
decl_stmt|;
name|currentBlockBuilder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|tester
argument_list|,
name|ifTrue
argument_list|,
name|ifFalse
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|Result
name|toInnerStorageType
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|Type
name|storageType
parameter_list|)
block|{
specifier|final
name|Expression
name|valueExpression
init|=
name|EnumUtils
operator|.
name|toInternal
argument_list|(
name|result
operator|.
name|valueVariable
argument_list|,
name|storageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueExpression
operator|.
name|equals
argument_list|(
name|result
operator|.
name|valueVariable
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
specifier|final
name|ParameterExpression
name|valueVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|valueExpression
operator|.
name|getType
argument_list|()
argument_list|,
name|list
operator|.
name|newName
argument_list|(
name|result
operator|.
name|valueVariable
operator|.
name|name
operator|+
literal|"_inner_type"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|valueVariable
argument_list|,
name|valueExpression
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|isNullVariable
init|=
name|result
operator|.
name|isNullVariable
decl_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|isNullVariable
argument_list|,
name|valueVariable
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitDynamicParam
parameter_list|(
name|RexDynamicParam
name|dynamicParam
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|RexNode
argument_list|,
annotation|@
name|Nullable
name|Type
argument_list|>
name|key
init|=
name|Pair
operator|.
name|of
argument_list|(
name|dynamicParam
argument_list|,
name|currentStorageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|rexWithStorageTypeResultMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|rexWithStorageTypeResultMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|final
name|Type
name|storageType
init|=
name|currentStorageType
operator|!=
literal|null
condition|?
name|currentStorageType
else|:
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|dynamicParam
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|valueExpression
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|root
argument_list|,
name|BuiltInMethod
operator|.
name|DATA_CONTEXT_GET
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|"?"
operator|+
name|dynamicParam
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|storageType
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|valueVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|valueExpression
operator|.
name|getType
argument_list|()
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"value_dynamic_param"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|valueVariable
argument_list|,
name|valueExpression
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|isNullVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"isNull_dynamic_param"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|isNullVariable
argument_list|,
name|checkNull
argument_list|(
name|valueVariable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
name|isNullVariable
argument_list|,
name|valueVariable
argument_list|)
decl_stmt|;
name|rexWithStorageTypeResultMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|RexNode
argument_list|,
annotation|@
name|Nullable
name|Type
argument_list|>
name|key
init|=
name|Pair
operator|.
name|of
argument_list|(
name|fieldAccess
argument_list|,
name|currentStorageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|rexWithStorageTypeResultMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|rexWithStorageTypeResultMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|final
name|RexNode
name|target
init|=
name|deref
argument_list|(
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|fieldIndex
init|=
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CORREL_VARIABLE
case|:
if|if
condition|(
name|correlates
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot translate "
operator|+
name|fieldAccess
operator|+
literal|" since correlate variables resolver is not defined"
argument_list|)
throw|;
block|}
specifier|final
name|RexToLixTranslator
operator|.
name|InputGetter
name|getter
init|=
name|correlates
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|RexCorrelVariable
operator|)
name|target
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|input
init|=
name|getter
operator|.
name|field
argument_list|(
name|list
argument_list|,
name|fieldIndex
argument_list|,
name|currentStorageType
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|condition
init|=
name|checkNull
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|valueVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|input
operator|.
name|getType
argument_list|()
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"corInp_value"
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|valueVariable
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|isNullVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|list
operator|.
name|newName
argument_list|(
literal|"corInp_isNull"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|isNullExpression
init|=
name|Expressions
operator|.
name|condition
argument_list|(
name|condition
argument_list|,
name|RexImpTable
operator|.
name|TRUE_EXPR
argument_list|,
name|checkNull
argument_list|(
name|valueVariable
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|isNullVariable
argument_list|,
name|isNullExpression
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result1
init|=
operator|new
name|Result
argument_list|(
name|isNullVariable
argument_list|,
name|valueVariable
argument_list|)
decl_stmt|;
name|rexWithStorageTypeResultMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|result1
argument_list|)
expr_stmt|;
return|return
name|result1
return|;
default|default:
name|RexNode
name|rxIndex
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|fieldIndex
argument_list|,
name|typeFactory
operator|.
name|createType
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RexNode
name|rxName
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|fieldName
argument_list|,
name|typeFactory
operator|.
name|createType
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RexCall
name|accessCall
init|=
operator|(
name|RexCall
operator|)
name|builder
operator|.
name|makeCall
argument_list|(
name|fieldAccess
operator|.
name|getType
argument_list|()
argument_list|,
name|SqlStdOperatorTable
operator|.
name|STRUCT_ACCESS
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|target
argument_list|,
name|rxIndex
argument_list|,
name|rxName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Result
name|result2
init|=
name|accessCall
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|rexWithStorageTypeResultMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|result2
argument_list|)
expr_stmt|;
return|return
name|result2
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate expression "
operator|+
name|over
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|correlVariable
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot translate "
operator|+
name|correlVariable
operator|+
literal|". Correlated variables should always be referenced by field access"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitRangeRef
parameter_list|(
name|RexRangeRef
name|rangeRef
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate expression "
operator|+
name|rangeRef
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitSubQuery
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate expression "
operator|+
name|subQuery
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitTableInputRef
parameter_list|(
name|RexTableInputRef
name|fieldRef
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate expression "
operator|+
name|fieldRef
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Result
name|visitPatternFieldRef
parameter_list|(
name|RexPatternFieldRef
name|fieldRef
parameter_list|)
block|{
return|return
name|visitInputRef
argument_list|(
name|fieldRef
argument_list|)
return|;
block|}
end_function

begin_function
name|Expression
name|checkNull
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|Primitive
operator|.
name|flavor
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
operator|==
name|Primitive
operator|.
name|Flavor
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
name|RexImpTable
operator|.
name|FALSE_EXPR
return|;
block|}
return|return
name|Expressions
operator|.
name|equal
argument_list|(
name|expr
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
return|;
block|}
end_function

begin_function
name|Expression
name|checkNotNull
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|Primitive
operator|.
name|flavor
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
operator|==
name|Primitive
operator|.
name|Flavor
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
name|RexImpTable
operator|.
name|TRUE_EXPR
return|;
block|}
return|return
name|Expressions
operator|.
name|notEqual
argument_list|(
name|expr
argument_list|,
name|RexImpTable
operator|.
name|NULL_EXPR
argument_list|)
return|;
block|}
end_function

begin_function
name|BlockBuilder
name|getBlockBuilder
parameter_list|()
block|{
return|return
name|list
return|;
block|}
end_function

begin_function
name|Expression
name|getLiteral
parameter_list|(
name|Expression
name|literalVariable
parameter_list|)
block|{
return|return
name|requireNonNull
argument_list|(
name|literalMap
operator|.
name|get
argument_list|(
name|literalVariable
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"literalMap.get(literalVariable) for "
operator|+
name|literalVariable
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the value of a literal. */
end_comment

begin_function
annotation|@
name|Nullable
name|Object
name|getLiteralValue
parameter_list|(
annotation|@
name|Nullable
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ParameterExpression
condition|)
block|{
specifier|final
name|Expression
name|constantExpr
init|=
name|literalMap
operator|.
name|get
argument_list|(
name|expr
argument_list|)
decl_stmt|;
return|return
name|getLiteralValue
argument_list|(
name|constantExpr
argument_list|)
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|ConstantExpression
condition|)
block|{
return|return
operator|(
operator|(
name|ConstantExpression
operator|)
name|expr
operator|)
operator|.
name|value
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
name|List
argument_list|<
name|Result
argument_list|>
name|getCallOperandResult
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
return|return
name|requireNonNull
argument_list|(
name|callOperandResultMap
operator|.
name|get
argument_list|(
name|call
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"callOperandResultMap.get(call) for "
operator|+
name|call
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns an expression that yields the function object whose method    * we are about to call.    *    *<p>It might be 'new MyFunction()', but it also might be a reference    * to a static field 'F', defined by    * 'static final MyFunction F = new MyFunction()'.    *    *<p>If there is a constructor that takes a {@link FunctionContext}    * argument, we call that, passing in the values of arguments that are    * literals; this allows the function to do some computation at load time.    *    *<p>If the call is "f(1, 2 + 3, 'foo')" and "f" is implemented by method    * "eval(int, int, String)" in "class MyFun", the expression might be    * "new MyFunction(FunctionContexts.of(new Object[] {1, null, "foo"})".    *    * @param method Method that implements the UDF    * @param call Call to the UDF    * @return New expression    */
end_comment

begin_function
name|Expression
name|functionInstance
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
specifier|final
name|RexCallBinding
name|callBinding
init|=
name|RexCallBinding
operator|.
name|create
argument_list|(
name|typeFactory
argument_list|,
name|call
argument_list|,
name|program
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|target
init|=
name|getInstantiationExpression
argument_list|(
name|method
argument_list|,
name|callBinding
argument_list|)
decl_stmt|;
return|return
name|appendConstant
argument_list|(
literal|"f"
argument_list|,
name|target
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Helper for {@link #functionInstance}. */
end_comment

begin_function
specifier|private
name|Expression
name|getInstantiationExpression
parameter_list|(
name|Method
name|method
parameter_list|,
name|RexCallBinding
name|callBinding
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
comment|// If the UDF class has a constructor that takes a Context argument,
comment|// use that.
try|try
block|{
specifier|final
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|declaringClass
operator|.
name|getConstructor
argument_list|(
name|FunctionContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|constantArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//noinspection unchecked
name|Ord
operator|.
name|forEach
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
parameter_list|(
name|parameterType
parameter_list|,
name|i
parameter_list|)
lambda|->
name|constantArgs
operator|.
name|add
argument_list|(
name|callBinding
operator|.
name|isOperandLiteral
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
condition|?
name|appendConstant
argument_list|(
literal|"_arg"
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|callBinding
operator|.
name|getOperandLiteralValue
argument_list|(
name|i
argument_list|,
name|Primitive
operator|.
name|box
argument_list|(
name|parameterType
argument_list|)
argument_list|)
argument_list|)
argument_list|)
else|:
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|context
init|=
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|FUNCTION_CONTEXTS_OF
operator|.
name|method
argument_list|,
name|DataContext
operator|.
name|ROOT
argument_list|,
name|Expressions
operator|.
name|newArrayInit
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|constantArgs
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|constructor
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// The UDF class must have a public zero-args constructor.
comment|// Assume that the validator checked already.
return|return
name|Expressions
operator|.
name|new_
argument_list|(
name|declaringClass
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Stores a constant expression in a variable. */
end_comment

begin_function
specifier|private
name|Expression
name|appendConstant
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|e
parameter_list|)
block|{
if|if
condition|(
name|staticList
operator|!=
literal|null
condition|)
block|{
comment|// If name is "camelCase", upperName is "CAMEL_CASE".
specifier|final
name|String
name|upperName
init|=
name|CaseFormat
operator|.
name|LOWER_CAMEL
operator|.
name|to
argument_list|(
name|CaseFormat
operator|.
name|UPPER_UNDERSCORE
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|staticList
operator|.
name|append
argument_list|(
name|upperName
argument_list|,
name|e
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|list
operator|.
name|append
argument_list|(
name|name
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/** Translates a field of an input to an expression. */
end_comment

begin_interface
specifier|public
interface|interface
name|InputGetter
block|{
name|Expression
name|field
parameter_list|(
name|BlockBuilder
name|list
parameter_list|,
name|int
name|index
parameter_list|,
annotation|@
name|Nullable
name|Type
name|storageType
parameter_list|)
function_decl|;
block|}
end_interface

begin_comment
comment|/** Implementation of {@link InputGetter} that calls    * {@link PhysType#fieldReference}. */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|InputGetterImpl
implements|implements
name|InputGetter
block|{
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Expression
argument_list|,
name|PhysType
argument_list|>
name|inputs
decl_stmt|;
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|InputGetterImpl
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|Expression
argument_list|,
name|PhysType
argument_list|>
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
argument_list|(
name|mapOf
argument_list|(
name|inputs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|InputGetterImpl
parameter_list|(
name|Expression
name|e
parameter_list|,
name|PhysType
name|physType
parameter_list|)
block|{
name|this
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|e
argument_list|,
name|physType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|InputGetterImpl
parameter_list|(
name|Map
argument_list|<
name|Expression
argument_list|,
name|PhysType
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|b
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Pair
operator|.
name|forEach
argument_list|(
name|entries
argument_list|,
name|b
operator|::
name|put
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|field
parameter_list|(
name|BlockBuilder
name|list
parameter_list|,
name|int
name|index
parameter_list|,
annotation|@
name|Nullable
name|Type
name|storageType
parameter_list|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Expression
argument_list|,
name|PhysType
argument_list|>
name|input
range|:
name|inputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|PhysType
name|physType
init|=
name|input
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|physType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|offset
operator|+
name|fieldCount
condition|)
block|{
name|offset
operator|+=
name|fieldCount
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Expression
name|left
init|=
name|list
operator|.
name|append
argument_list|(
literal|"current"
argument_list|,
name|input
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|physType
operator|.
name|fieldReference
argument_list|(
name|left
argument_list|,
name|index
operator|-
name|offset
argument_list|,
name|storageType
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find field #"
operator|+
name|index
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|/** Result of translating a {@code RexNode}. */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|Result
block|{
specifier|final
name|ParameterExpression
name|isNullVariable
decl_stmt|;
specifier|final
name|ParameterExpression
name|valueVariable
decl_stmt|;
specifier|public
name|Result
parameter_list|(
name|ParameterExpression
name|isNullVariable
parameter_list|,
name|ParameterExpression
name|valueVariable
parameter_list|)
block|{
name|this
operator|.
name|isNullVariable
operator|=
name|isNullVariable
expr_stmt|;
name|this
operator|.
name|valueVariable
operator|=
name|valueVariable
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

