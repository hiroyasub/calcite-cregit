begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apiguardian
operator|.
name|api
operator|.
name|API
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Utilities for traits propagation.  */
end_comment

begin_class
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.24"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|INTERNAL
argument_list|)
class|class
name|EnumerableTraitsUtils
block|{
specifier|private
name|EnumerableTraitsUtils
parameter_list|()
block|{
block|}
comment|/**    * Determine whether there is mapping between project input and output fields.    * Bail out if sort relies on non-trivial expressions.    */
specifier|private
specifier|static
name|boolean
name|isCollationOnTrivialExpr
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|Mappings
operator|.
name|TargetMapping
name|map
parameter_list|,
name|RelFieldCollation
name|fc
parameter_list|,
name|boolean
name|passDown
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|fc
operator|.
name|getFieldIndex
argument_list|()
decl_stmt|;
name|int
name|target
init|=
name|map
operator|.
name|getTargetOpt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RexNode
name|node
init|=
name|passDown
condition|?
name|projects
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
name|projects
operator|.
name|get
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
condition|)
block|{
comment|// Check whether it is a monotonic preserving cast
specifier|final
name|RexCall
name|cast
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
name|RelFieldCollation
name|newFieldCollation
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|RexUtil
operator|.
name|apply
argument_list|(
name|map
argument_list|,
name|fc
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexCallBinding
name|binding
init|=
name|RexCallBinding
operator|.
name|create
argument_list|(
name|typeFactory
argument_list|,
name|cast
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
name|newFieldCollation
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cast
operator|.
name|getOperator
argument_list|()
operator|.
name|getMonotonicity
argument_list|(
name|binding
argument_list|)
operator|==
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|static
annotation|@
name|Nullable
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|passThroughTraitsForProject
parameter_list|(
name|RelTraitSet
name|required
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exps
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelTraitSet
name|currentTraits
parameter_list|)
block|{
specifier|final
name|RelCollation
name|collation
init|=
name|required
operator|.
name|getCollation
argument_list|()
decl_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
operator|||
name|collation
operator|==
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|map
init|=
name|RelOptUtil
operator|.
name|permutationIgnoreCast
argument_list|(
name|exps
argument_list|,
name|inputRowType
argument_list|)
decl_stmt|;
if|if
condition|(
name|collation
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|rc
lambda|->
operator|!
name|isCollationOnTrivialExpr
argument_list|(
name|exps
argument_list|,
name|typeFactory
argument_list|,
name|map
argument_list|,
name|rc
argument_list|,
literal|true
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelCollation
name|newCollation
init|=
name|collation
operator|.
name|apply
argument_list|(
name|map
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|currentTraits
operator|.
name|replace
argument_list|(
name|collation
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|currentTraits
operator|.
name|replace
argument_list|(
name|newCollation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
annotation|@
name|Nullable
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|deriveTraitsForProject
parameter_list|(
name|RelTraitSet
name|childTraits
parameter_list|,
name|int
name|childId
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exps
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelTraitSet
name|currentTraits
parameter_list|)
block|{
specifier|final
name|RelCollation
name|collation
init|=
name|childTraits
operator|.
name|getCollation
argument_list|()
decl_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
operator|||
name|collation
operator|==
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|maxField
init|=
name|Math
operator|.
name|max
argument_list|(
name|exps
operator|.
name|size
argument_list|()
argument_list|,
name|inputRowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|FUNCTION
argument_list|,
name|maxField
argument_list|,
name|maxField
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|node
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|exps
argument_list|)
control|)
block|{
if|if
condition|(
name|node
operator|.
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
name|mapping
operator|.
name|set
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|node
operator|.
name|e
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|node
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|e
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
condition|)
block|{
specifier|final
name|RexNode
name|operand
init|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|.
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|RexInputRef
condition|)
block|{
name|mapping
operator|.
name|set
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|operand
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|node
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collationFieldsToDerive
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|rc
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
name|isCollationOnTrivialExpr
argument_list|(
name|exps
argument_list|,
name|typeFactory
argument_list|,
name|mapping
argument_list|,
name|rc
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|collationFieldsToDerive
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|collationFieldsToDerive
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|RelCollation
name|newCollation
init|=
name|RelCollations
operator|.
name|of
argument_list|(
name|collationFieldsToDerive
argument_list|)
operator|.
name|apply
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|currentTraits
operator|.
name|replace
argument_list|(
name|newCollation
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|currentTraits
operator|.
name|replace
argument_list|(
name|collation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * This function can be reused when a Join's traits pass-down shall only    * pass through collation to left input.    *    * @param required required trait set for the join    * @param joinType the join type    * @param leftInputFieldCount number of field count of left join input    * @param joinTraitSet trait set of the join    */
specifier|static
annotation|@
name|Nullable
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|passThroughTraitsForJoin
parameter_list|(
name|RelTraitSet
name|required
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|int
name|leftInputFieldCount
parameter_list|,
name|RelTraitSet
name|joinTraitSet
parameter_list|)
block|{
name|RelCollation
name|collation
init|=
name|required
operator|.
name|getCollation
argument_list|()
decl_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
operator|||
name|collation
operator|==
name|RelCollations
operator|.
name|EMPTY
operator|||
name|joinType
operator|==
name|JoinRelType
operator|.
name|FULL
operator|||
name|joinType
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|RelFieldCollation
name|fc
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
comment|// If field collation belongs to right input: cannot push down collation.
if|if
condition|(
name|fc
operator|.
name|getFieldIndex
argument_list|()
operator|>=
name|leftInputFieldCount
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|RelTraitSet
name|passthroughTraitSet
init|=
name|joinTraitSet
operator|.
name|replace
argument_list|(
name|collation
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|passthroughTraitSet
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|passthroughTraitSet
argument_list|,
name|passthroughTraitSet
operator|.
name|replace
argument_list|(
name|RelCollations
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * This function can be reused when a Join's traits derivation shall only    * derive collation from left input.    *    * @param childTraits trait set of the child    * @param childId id of the child (0 is left join input)    * @param joinType the join type    * @param joinTraitSet trait set of the join    * @param rightTraitSet trait set of the right join input    */
specifier|static
annotation|@
name|Nullable
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|deriveTraitsForJoin
parameter_list|(
name|RelTraitSet
name|childTraits
parameter_list|,
name|int
name|childId
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|RelTraitSet
name|joinTraitSet
parameter_list|,
name|RelTraitSet
name|rightTraitSet
parameter_list|)
block|{
comment|// should only derive traits (limited to collation for now) from left join input.
assert|assert
name|childId
operator|==
literal|0
assert|;
name|RelCollation
name|collation
init|=
name|childTraits
operator|.
name|getCollation
argument_list|()
decl_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
operator|||
name|collation
operator|==
name|RelCollations
operator|.
name|EMPTY
operator|||
name|joinType
operator|==
name|JoinRelType
operator|.
name|FULL
operator|||
name|joinType
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RelTraitSet
name|derivedTraits
init|=
name|joinTraitSet
operator|.
name|replace
argument_list|(
name|collation
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|derivedTraits
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|derivedTraits
argument_list|,
name|rightTraitSet
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

