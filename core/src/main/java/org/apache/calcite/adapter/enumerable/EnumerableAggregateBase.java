begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|impl
operator|.
name|AggAddContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|impl
operator|.
name|AggResultContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|RelHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Base class for EnumerableAggregate and EnumerableSortedAggregate. */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|EnumerableAggregateBase
extends|extends
name|Aggregate
block|{
specifier|protected
name|EnumerableAggregateBase
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|hints
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|boolean
name|hasOrderedCall
parameter_list|(
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
parameter_list|)
block|{
for|for
control|(
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
if|if
condition|(
operator|!
name|agg
operator|.
name|call
operator|.
name|collation
operator|.
name|equals
argument_list|(
name|RelCollations
operator|.
name|EMPTY
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|declareParentAccumulator
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|initExpressions
parameter_list|,
name|BlockBuilder
name|initBlock
parameter_list|,
name|PhysType
name|accPhysType
parameter_list|)
block|{
if|if
condition|(
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
operator|instanceof
name|JavaTypeFactoryImpl
operator|.
name|SyntheticRecordType
condition|)
block|{
comment|// We have to initialize the SyntheticRecordType instance this way, to
comment|// avoid using a class constructor with too many parameters.
specifier|final
name|JavaTypeFactoryImpl
operator|.
name|SyntheticRecordType
name|synType
init|=
operator|(
name|JavaTypeFactoryImpl
operator|.
name|SyntheticRecordType
operator|)
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|record0_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"record0"
argument_list|)
decl_stmt|;
name|initBlock
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|record0_
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|initBlock
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|record0_
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Types
operator|.
name|RecordField
argument_list|>
name|fieldList
init|=
name|synType
operator|.
name|getRecordFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initExpressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|right
init|=
name|initExpressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|initBlock
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|record0_
argument_list|,
name|fieldList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|right
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|initBlock
operator|.
name|add
argument_list|(
name|record0_
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initBlock
operator|.
name|add
argument_list|(
name|accPhysType
operator|.
name|record
argument_list|(
name|initExpressions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Implements the {@link AggregateLambdaFactory}.    *    *<p>Behavior depends upon ordering:    *<ul>    *    *<li>{@code hasOrderedCall == true} means there is at least one aggregate    * call including sort spec. We use {@link LazyAggregateLambdaFactory}    * implementation to implement sorted aggregates for that.    *    *<li>{@code hasOrderedCall == false} indicates to use    * {@link BasicAggregateLambdaFactory} to implement a non-sort    * aggregate.    *    *</ul>    */
specifier|protected
name|void
name|implementLambdaFactory
parameter_list|(
name|BlockBuilder
name|builder
parameter_list|,
name|PhysType
name|inputPhysType
parameter_list|,
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
parameter_list|,
name|Expression
name|accumulatorInitializer
parameter_list|,
name|boolean
name|hasOrderedCall
parameter_list|,
name|ParameterExpression
name|lambdaFactory
parameter_list|)
block|{
if|if
condition|(
name|hasOrderedCall
condition|)
block|{
name|ParameterExpression
name|pe
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"lazyAccumulators"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|pe
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|LinkedList
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
if|if
condition|(
name|agg
operator|.
name|call
operator|.
name|collation
operator|.
name|equals
argument_list|(
name|RelCollations
operator|.
name|EMPTY
argument_list|)
condition|)
block|{
comment|// if the call does not require ordering, fallback to
comment|// use a non-sorted lazy accumulator.
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|pe
argument_list|,
name|BuiltInMethod
operator|.
name|COLLECTION_ADD
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|BuiltInMethod
operator|.
name|BASIC_LAZY_ACCUMULATOR
operator|.
name|constructor
argument_list|,
name|agg
operator|.
name|accumulatorAdder
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|pair
init|=
name|inputPhysType
operator|.
name|generateCollationKey
argument_list|(
name|agg
operator|.
name|call
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|pe
argument_list|,
name|BuiltInMethod
operator|.
name|COLLECTION_ADD
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|BuiltInMethod
operator|.
name|SOURCE_SORTER
operator|.
name|constructor
argument_list|,
name|agg
operator|.
name|accumulatorAdder
argument_list|,
name|pair
operator|.
name|left
argument_list|,
name|pair
operator|.
name|right
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|lambdaFactory
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|BuiltInMethod
operator|.
name|LAZY_AGGREGATE_LAMBDA_FACTORY
operator|.
name|constructor
argument_list|,
name|accumulatorInitializer
argument_list|,
name|pe
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// when hasOrderedCall == false
name|ParameterExpression
name|pe
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"accumulatorAdders"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|pe
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|LinkedList
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|pe
argument_list|,
name|BuiltInMethod
operator|.
name|COLLECTION_ADD
operator|.
name|method
argument_list|,
name|agg
operator|.
name|accumulatorAdder
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|lambdaFactory
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|BuiltInMethod
operator|.
name|BASIC_AGGREGATE_LAMBDA_FACTORY
operator|.
name|constructor
argument_list|,
name|accumulatorInitializer
argument_list|,
name|pe
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** An implementation of {@link AggContext}. */
specifier|protected
class|class
name|AggContextImpl
implements|implements
name|AggContext
block|{
specifier|private
specifier|final
name|AggImpState
name|agg
decl_stmt|;
specifier|private
specifier|final
name|JavaTypeFactory
name|typeFactory
decl_stmt|;
name|AggContextImpl
parameter_list|(
name|AggImpState
name|agg
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|this
operator|.
name|agg
operator|=
name|agg
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SqlAggFunction
name|aggregation
parameter_list|()
block|{
return|return
name|agg
operator|.
name|call
operator|.
name|getAggregation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|returnRelType
parameter_list|()
block|{
return|return
name|agg
operator|.
name|call
operator|.
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|returnType
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|javaClass
argument_list|(
name|typeFactory
argument_list|,
name|returnRelType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|RelDataType
argument_list|>
name|parameterRelTypes
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|fieldRowTypes
argument_list|(
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|null
argument_list|,
name|agg
operator|.
name|call
operator|.
name|getArgList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Type
argument_list|>
name|parameterTypes
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|fieldTypes
argument_list|(
name|typeFactory
argument_list|,
name|parameterRelTypes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|()
block|{
return|return
name|groupSets
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|keyOrdinals
parameter_list|()
block|{
return|return
name|groupSet
operator|.
name|asList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|RelDataType
argument_list|>
name|keyRelTypes
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|fieldRowTypes
argument_list|(
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|null
argument_list|,
name|groupSet
operator|.
name|asList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Type
argument_list|>
name|keyTypes
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|fieldTypes
argument_list|(
name|typeFactory
argument_list|,
name|keyRelTypes
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|createAccumulatorAdders
parameter_list|(
specifier|final
name|ParameterExpression
name|inParameter
parameter_list|,
specifier|final
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
parameter_list|,
specifier|final
name|PhysType
name|accPhysType
parameter_list|,
specifier|final
name|ParameterExpression
name|accExpr
parameter_list|,
specifier|final
name|PhysType
name|inputPhysType
parameter_list|,
specifier|final
name|BlockBuilder
name|builder
parameter_list|,
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|stateOffset
init|=
literal|0
init|;
name|i
operator|<
name|aggs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BlockBuilder
name|builder2
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|AggImpState
name|agg
init|=
name|aggs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|stateSize
init|=
name|agg
operator|.
name|state
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|accumulator
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|stateSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stateSize
condition|;
name|j
operator|++
control|)
block|{
name|accumulator
operator|.
name|add
argument_list|(
name|accPhysType
operator|.
name|fieldReference
argument_list|(
name|accExpr
argument_list|,
name|j
operator|+
name|stateOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|agg
operator|.
name|state
operator|=
name|accumulator
expr_stmt|;
name|stateOffset
operator|+=
name|stateSize
expr_stmt|;
name|AggAddContext
name|addContext
init|=
operator|new
name|AggAddContextImpl
argument_list|(
name|builder2
argument_list|,
name|accumulator
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexArguments
parameter_list|()
block|{
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputTypes
init|=
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|agg
operator|.
name|call
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|args
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of
argument_list|(
name|index
argument_list|,
name|inputTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|args
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|rexFilterArgument
parameter_list|()
block|{
return|return
name|agg
operator|.
name|call
operator|.
name|filterArg
operator|<
literal|0
condition|?
literal|null
else|:
name|RexInputRef
operator|.
name|of
argument_list|(
name|agg
operator|.
name|call
operator|.
name|filterArg
argument_list|,
name|inputPhysType
operator|.
name|getRowType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexToLixTranslator
name|rowTranslator
parameter_list|()
block|{
return|return
name|RexToLixTranslator
operator|.
name|forAggregation
argument_list|(
name|typeFactory
argument_list|,
name|currentBlock
argument_list|()
argument_list|,
operator|new
name|RexToLixTranslator
operator|.
name|InputGetterImpl
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|inParameter
argument_list|,
name|inputPhysType
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|implementor
operator|.
name|getConformance
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|agg
operator|.
name|implementor
operator|.
name|implementAdd
argument_list|(
name|agg
operator|.
name|context
argument_list|,
name|addContext
argument_list|)
expr_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|accExpr
argument_list|)
expr_stmt|;
name|agg
operator|.
name|accumulatorAdder
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"accumulatorAdder"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|builder2
operator|.
name|toBlock
argument_list|()
argument_list|,
name|accExpr
argument_list|,
name|inParameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Type
argument_list|>
name|createAggStateTypes
parameter_list|(
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|initExpressions
parameter_list|,
specifier|final
name|BlockBuilder
name|initBlock
parameter_list|,
specifier|final
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|aggStateTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|agg
operator|.
name|context
operator|=
operator|new
name|AggContextImpl
argument_list|(
name|agg
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|state
init|=
name|agg
operator|.
name|implementor
operator|.
name|getStateType
argument_list|(
name|agg
operator|.
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|agg
operator|.
name|state
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|aggStateTypes
operator|.
name|addAll
argument_list|(
name|state
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|decls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|state
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|state
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|aggName
init|=
literal|"a"
operator|+
name|agg
operator|.
name|aggIdx
decl_stmt|;
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|DEBUG
operator|.
name|value
argument_list|()
condition|)
block|{
name|aggName
operator|=
name|Util
operator|.
name|toJavaId
argument_list|(
name|agg
operator|.
name|call
operator|.
name|getAggregation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|substring
argument_list|(
literal|"ID$0$"
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|aggName
expr_stmt|;
block|}
name|Type
name|type
init|=
name|state
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ParameterExpression
name|pe
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|type
argument_list|,
name|initBlock
operator|.
name|newName
argument_list|(
name|aggName
operator|+
literal|"s"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|initBlock
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|pe
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|decls
operator|.
name|add
argument_list|(
name|pe
argument_list|)
expr_stmt|;
block|}
name|agg
operator|.
name|state
operator|=
name|decls
expr_stmt|;
name|initExpressions
operator|.
name|addAll
argument_list|(
name|decls
argument_list|)
expr_stmt|;
name|agg
operator|.
name|implementor
operator|.
name|implementReset
argument_list|(
name|agg
operator|.
name|context
argument_list|,
operator|new
name|AggResultContextImpl
argument_list|(
name|initBlock
argument_list|,
name|agg
operator|.
name|call
argument_list|,
name|decls
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aggStateTypes
return|;
block|}
block|}
end_class

end_unit

