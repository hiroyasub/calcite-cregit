begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTrait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Calc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Intersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Minus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rel2sql
operator|.
name|SqlImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexMultisetUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ModifiableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Rules and relational operators for  * {@link JdbcConvention}  * calling convention.  */
end_comment

begin_class
specifier|public
class|class
name|JdbcRules
block|{
specifier|private
name|JdbcRules
parameter_list|()
block|{
block|}
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|rules
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
return|return
name|rules
argument_list|(
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|rules
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|JdbcToEnumerableConverterRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcJoinRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcCalcRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcProjectRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcFilterRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcAggregateRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcSortRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcUnionRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcIntersectRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcMinusRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcTableModificationRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|,
operator|new
name|JdbcValuesRule
argument_list|(
name|out
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|)
return|;
block|}
comment|/** Abstract base class for rule that converts to JDBC. */
specifier|abstract
specifier|static
class|class
name|JdbcConverterRule
extends|extends
name|ConverterRule
block|{
specifier|protected
specifier|final
name|JdbcConvention
name|out
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Deprecated
comment|// to be removed before 2.0
name|JdbcConverterRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|,
name|RelTrait
name|in
parameter_list|,
name|JdbcConvention
name|out
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
parameter_list|<
name|R
extends|extends
name|RelNode
parameter_list|>
name|JdbcConverterRule
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|R
argument_list|>
name|predicate
parameter_list|,
name|RelTrait
name|in
parameter_list|,
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|,
name|predicate
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"Guava"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Deprecated
comment|// to be removed before 2.0
argument_list|<
name|R
extends|extends
name|RelNode
argument_list|>
name|JdbcConverterRule
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
argument_list|<
name|?
super|super
name|R
argument_list|>
name|predicate
parameter_list|,
name|RelTrait
name|in
parameter_list|,
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
operator|(
name|Predicate
argument_list|<
name|R
argument_list|>
operator|)
name|predicate
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Rule that converts a join to JDBC. */
specifier|public
specifier|static
class|class
name|JdbcJoinRule
extends|extends
name|JdbcConverterRule
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcJoinRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a JdbcJoinRule. */
specifier|public
name|JdbcJoinRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Join
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcJoinRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|SemiJoin
condition|)
block|{
comment|// It's not possible to convert semi-joins. They have fewer columns
comment|// than regular joins.
return|return
literal|null
return|;
block|}
return|return
name|convert
argument_list|(
operator|(
name|Join
operator|)
name|rel
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Converts a {@code Join} into a {@code JdbcJoin}.      *      * @param join Join operator to convert      * @param convertInputTraits Whether to convert input to {@code join}'s      *                            JDBC convention      * @return A new JdbcJoin      */
specifier|public
name|RelNode
name|convert
parameter_list|(
name|Join
name|join
parameter_list|,
name|boolean
name|convertInputTraits
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
name|convertInputTraits
operator|&&
name|input
operator|.
name|getConvention
argument_list|()
operator|!=
name|getOutTrait
argument_list|()
condition|)
block|{
name|input
operator|=
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newInputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|convertInputTraits
operator|&&
operator|!
name|canJoinOnCondition
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|JdbcJoin
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|join
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesSet
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Returns whether a condition is supported by {@link JdbcJoin}.      *      *<p>Corresponds to the capabilities of      * {@link SqlImplementor#convertConditionToSqlNode}.      *      * @param node Condition      * @return Whether condition is supported      */
specifier|private
name|boolean
name|canJoinOnCondition
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
if|if
condition|(
operator|!
name|canJoinOnCondition
argument_list|(
name|operand
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|EQUALS
case|:
case|case
name|IS_NOT_DISTINCT_FROM
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|)
operator|&&
operator|(
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// fall through
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/** Join operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcJoin
extends|extends
name|Join
implements|implements
name|JdbcRel
block|{
comment|/** Creates a JdbcJoin. */
specifier|public
name|JdbcJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|variablesSet
argument_list|,
name|joinType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|protected
name|JdbcJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|CorrelationId
operator|.
name|setOf
argument_list|(
name|variablesStopped
argument_list|)
argument_list|,
name|joinType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JdbcJoin
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|JdbcJoin
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|variablesSet
argument_list|,
name|joinType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
comment|// We always "build" the
name|double
name|rowCount
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeCost
argument_list|(
name|rowCount
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|estimateRowCount
parameter_list|(
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|double
name|leftRowCount
init|=
name|left
operator|.
name|estimateRowCount
argument_list|(
name|mq
argument_list|)
decl_stmt|;
specifier|final
name|double
name|rightRowCount
init|=
name|right
operator|.
name|estimateRowCount
argument_list|(
name|mq
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|leftRowCount
argument_list|,
name|rightRowCount
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.core.Calc} to an    * {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcCalc}.    */
specifier|private
specifier|static
class|class
name|JdbcCalcRule
extends|extends
name|JdbcConverterRule
block|{
comment|/** Creates a JdbcCalcRule. */
specifier|private
name|JdbcCalcRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Calc
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcCalcRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Calc
name|calc
init|=
operator|(
name|Calc
operator|)
name|rel
decl_stmt|;
comment|// If there's a multiset, let FarragoMultisetSplitter work on it
comment|// first.
if|if
condition|(
name|RexMultisetUtil
operator|.
name|containsMultiset
argument_list|(
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|JdbcCalc
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|,
name|convert
argument_list|(
name|calc
operator|.
name|getInput
argument_list|()
argument_list|,
name|calc
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|,
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Calc operator implemented in JDBC convention.    *    * @see org.apache.calcite.rel.core.Calc */
specifier|public
specifier|static
class|class
name|JdbcCalc
extends|extends
name|SingleRel
implements|implements
name|JdbcRel
block|{
specifier|private
specifier|final
name|RexProgram
name|program
decl_stmt|;
specifier|public
name|JdbcCalc
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexProgram
name|program
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|program
operator|.
name|getOutputRowType
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcCalc
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexProgram
name|program
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|program
operator|.
name|explainCalc
argument_list|(
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|estimateRowCount
parameter_list|(
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|RelMdUtil
operator|.
name|estimateFilteredRows
argument_list|(
name|getInput
argument_list|()
argument_list|,
name|program
argument_list|,
name|mq
argument_list|)
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|double
name|dRows
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|double
name|dCpu
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|getInput
argument_list|()
argument_list|)
operator|*
name|program
operator|.
name|getExprCount
argument_list|()
decl_stmt|;
name|double
name|dIo
init|=
literal|0
decl_stmt|;
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeCost
argument_list|(
name|dRows
argument_list|,
name|dCpu
argument_list|,
name|dIo
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|JdbcCalc
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|program
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.core.Project} to    * an {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcProject}.    */
specifier|public
specifier|static
class|class
name|JdbcProjectRule
extends|extends
name|JdbcConverterRule
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcProjectRule
parameter_list|(
specifier|final
name|JdbcConvention
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a JdbcProjectRule. */
specifier|public
name|JdbcProjectRule
parameter_list|(
specifier|final
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Project
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|Project
argument_list|>
operator|)
name|project
lambda|->
operator|(
name|out
operator|.
name|dialect
operator|.
name|supportsWindowFunctions
argument_list|()
operator|||
operator|!
name|RexOver
operator|.
name|containsOver
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|)
operator|&&
operator|!
name|userDefinedFunctionInProject
argument_list|(
name|project
argument_list|)
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcProjectRule"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|userDefinedFunctionInProject
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|CheckingUserDefinedFunctionVisitor
name|visitor
init|=
operator|new
name|CheckingUserDefinedFunctionVisitor
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|project
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|node
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
if|if
condition|(
name|visitor
operator|.
name|containsUserDefinedFunction
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|JdbcProject
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|,
name|convert
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Project} in    * {@link JdbcConvention jdbc calling convention}. */
specifier|public
specifier|static
class|class
name|JdbcProject
extends|extends
name|Project
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcProject
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcProject
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JdbcProject
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
return|return
operator|new
name|JdbcProject
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
name|JdbcConvention
operator|.
name|COST_MULTIPLIER
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.core.Filter} to    * an {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcFilter}.    */
specifier|public
specifier|static
class|class
name|JdbcFilterRule
extends|extends
name|JdbcConverterRule
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcFilterRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a JdbcFilterRule. */
specifier|public
name|JdbcFilterRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|Filter
argument_list|>
operator|)
name|r
lambda|->
operator|!
name|userDefinedFunctionInFilter
argument_list|(
name|r
argument_list|)
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcFilterRule"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|userDefinedFunctionInFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|CheckingUserDefinedFunctionVisitor
name|visitor
init|=
operator|new
name|CheckingUserDefinedFunctionVisitor
argument_list|()
decl_stmt|;
name|filter
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|containsUserDefinedFunction
argument_list|()
return|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|JdbcFilter
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|,
name|convert
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|,
name|filter
operator|.
name|getInput
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Filter} in    * {@link JdbcConvention jdbc calling convention}. */
specifier|public
specifier|static
class|class
name|JdbcFilter
extends|extends
name|Filter
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcFilter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
block|}
specifier|public
name|JdbcFilter
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
operator|new
name|JdbcFilter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.core.Aggregate}    * to a {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcAggregate}.    */
specifier|public
specifier|static
class|class
name|JdbcAggregateRule
extends|extends
name|JdbcConverterRule
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcAggregateRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a JdbcAggregateRule. */
specifier|public
name|JdbcAggregateRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcAggregateRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Aggregate
name|agg
init|=
operator|(
name|Aggregate
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|agg
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// GROUPING SETS not supported; see
comment|// [CALCITE-734] Push GROUPING SETS to underlying SQL via JDBC adapter
return|return
literal|null
return|;
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|agg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|JdbcAggregate
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|agg
operator|.
name|getInput
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
name|agg
operator|.
name|indicator
argument_list|,
name|agg
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|agg
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|agg
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/** Returns whether this JDBC data source can implement a given aggregate    * function. */
specifier|private
specifier|static
name|boolean
name|canImplement
parameter_list|(
name|SqlAggFunction
name|aggregation
parameter_list|,
name|SqlDialect
name|sqlDialect
parameter_list|)
block|{
return|return
name|sqlDialect
operator|.
name|supportsAggregateFunction
argument_list|(
name|aggregation
operator|.
name|getKind
argument_list|()
argument_list|)
return|;
block|}
comment|/** Aggregate operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcAggregate
extends|extends
name|Aggregate
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|boolean
name|indicator
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|indicator
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
assert|assert
name|this
operator|.
name|groupSets
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|:
literal|"Grouping sets not supported"
assert|;
assert|assert
operator|!
name|this
operator|.
name|indicator
assert|;
specifier|final
name|SqlDialect
name|dialect
init|=
operator|(
operator|(
name|JdbcConvention
operator|)
name|getConvention
argument_list|()
operator|)
operator|.
name|dialect
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
operator|!
name|canImplement
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|dialect
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"cannot implement aggregate function "
operator|+
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|JdbcAggregate
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|boolean
name|indicator
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|JdbcAggregate
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|indicator
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.core.Sort} to an    * {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcSort}.    */
specifier|public
specifier|static
class|class
name|JdbcSortRule
extends|extends
name|JdbcConverterRule
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcSortRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a JdbcSortRule. */
specifier|public
name|JdbcSortRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcSortRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
return|return
name|convert
argument_list|(
operator|(
name|Sort
operator|)
name|rel
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Converts a {@code Sort} into a {@code JdbcSort}.      *      * @param sort Sort operator to convert      * @param convertInputTraits Whether to convert input to {@code sort}'s      *                            JDBC convention      * @return A new JdbcSort      */
specifier|public
name|RelNode
name|convert
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|boolean
name|convertInputTraits
parameter_list|)
block|{
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|sort
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|input
decl_stmt|;
if|if
condition|(
name|convertInputTraits
condition|)
block|{
name|input
operator|=
name|convert
argument_list|(
name|sort
operator|.
name|getInput
argument_list|()
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
name|sort
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|JdbcSort
argument_list|(
name|sort
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
return|;
block|}
block|}
comment|/** Sort operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcSort
extends|extends
name|Sort
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcSort
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|input
operator|.
name|getConvention
argument_list|()
assert|;
block|}
annotation|@
name|Override
specifier|public
name|JdbcSort
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|newInput
parameter_list|,
name|RelCollation
name|newCollation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
return|return
operator|new
name|JdbcSort
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|newInput
argument_list|,
name|newCollation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert an {@link org.apache.calcite.rel.core.Union} to a    * {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcUnion}.    */
specifier|public
specifier|static
class|class
name|JdbcUnionRule
extends|extends
name|JdbcConverterRule
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JdbcUnionRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a JdbcUnionRule. */
specifier|public
name|JdbcUnionRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Union
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcUnionRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Union
name|union
init|=
operator|(
name|Union
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|union
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcUnion
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|union
operator|.
name|getInputs
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
name|union
operator|.
name|all
argument_list|)
return|;
block|}
block|}
comment|/** Union operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcUnion
extends|extends
name|Union
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcUnion
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JdbcUnion
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|JdbcUnion
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|.1
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.core.Intersect}    * to a {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcIntersect}.    */
specifier|public
specifier|static
class|class
name|JdbcIntersectRule
extends|extends
name|JdbcConverterRule
block|{
comment|/** Creates a JdbcIntersectRule. */
specifier|private
name|JdbcIntersectRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Intersect
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcIntersectRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Intersect
name|intersect
init|=
operator|(
name|Intersect
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|intersect
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|// INTERSECT ALL not implemented
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|intersect
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcIntersect
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|intersect
operator|.
name|getInputs
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|/** Intersect operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcIntersect
extends|extends
name|Intersect
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcIntersect
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
block|}
specifier|public
name|JdbcIntersect
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|JdbcIntersect
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.core.Minus} to a    * {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcMinus}.    */
specifier|public
specifier|static
class|class
name|JdbcMinusRule
extends|extends
name|JdbcConverterRule
block|{
comment|/** Creates a JdbcMinusRule. */
specifier|private
name|JdbcMinusRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Minus
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcMinusRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Minus
name|minus
init|=
operator|(
name|Minus
operator|)
name|rel
decl_stmt|;
if|if
condition|(
name|minus
operator|.
name|all
condition|)
block|{
return|return
literal|null
return|;
comment|// EXCEPT ALL not implemented
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcMinus
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|minus
operator|.
name|getInputs
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|/** Minus operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcMinus
extends|extends
name|Minus
implements|implements
name|JdbcRel
block|{
specifier|public
name|JdbcMinus
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|all
assert|;
block|}
specifier|public
name|JdbcMinus
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|JdbcMinus
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/** Rule that converts a table-modification to JDBC. */
specifier|public
specifier|static
class|class
name|JdbcTableModificationRule
extends|extends
name|JdbcConverterRule
block|{
comment|/** Creates a JdbcTableModificationRule. */
specifier|private
name|JdbcTableModificationRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|TableModify
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcTableModificationRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|TableModify
name|modify
init|=
operator|(
name|TableModify
operator|)
name|rel
decl_stmt|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|modify
operator|.
name|getTable
argument_list|()
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|modify
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|JdbcTableModify
argument_list|(
name|modify
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|modify
operator|.
name|getTable
argument_list|()
argument_list|,
name|modify
operator|.
name|getCatalogReader
argument_list|()
argument_list|,
name|convert
argument_list|(
name|modify
operator|.
name|getInput
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|modify
operator|.
name|getOperation
argument_list|()
argument_list|,
name|modify
operator|.
name|getUpdateColumnList
argument_list|()
argument_list|,
name|modify
operator|.
name|getSourceExpressionList
argument_list|()
argument_list|,
name|modify
operator|.
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Table-modification operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcTableModify
extends|extends
name|TableModify
implements|implements
name|JdbcRel
block|{
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
specifier|public
name|JdbcTableModify
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|Prepare
operator|.
name|CatalogReader
name|catalogReader
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|updateColumnList
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|sourceExpressionList
parameter_list|,
name|boolean
name|flattened
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|catalogReader
argument_list|,
name|input
argument_list|,
name|operation
argument_list|,
name|updateColumnList
argument_list|,
name|sourceExpressionList
argument_list|,
name|flattened
argument_list|)
expr_stmt|;
assert|assert
name|input
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|JdbcConvention
assert|;
specifier|final
name|ModifiableTable
name|modifiableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ModifiableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiableTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
name|this
operator|.
name|expression
operator|=
name|table
operator|.
name|getExpression
argument_list|(
name|Queryable
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
comment|// TODO: user error in validator
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|.1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|JdbcTableModify
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|getCatalogReader
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|getOperation
argument_list|()
argument_list|,
name|getUpdateColumnList
argument_list|()
argument_list|,
name|getSourceExpressionList
argument_list|()
argument_list|,
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/** Rule that converts a values operator to JDBC. */
specifier|public
specifier|static
class|class
name|JdbcValuesRule
extends|extends
name|JdbcConverterRule
block|{
comment|/** Creates a JdbcValuesRule. */
specifier|private
name|JdbcValuesRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|Values
operator|.
name|class
argument_list|,
operator|(
name|Predicate
argument_list|<
name|RelNode
argument_list|>
operator|)
name|r
lambda|->
literal|true
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|out
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"JdbcValuesRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|Values
name|values
init|=
operator|(
name|Values
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|JdbcValues
argument_list|(
name|values
operator|.
name|getCluster
argument_list|()
argument_list|,
name|values
operator|.
name|getRowType
argument_list|()
argument_list|,
name|values
operator|.
name|getTuples
argument_list|()
argument_list|,
name|values
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Values operator implemented in JDBC convention. */
specifier|public
specifier|static
class|class
name|JdbcValues
extends|extends
name|Values
implements|implements
name|JdbcRel
block|{
name|JdbcValues
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|ImmutableList
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
operator|new
name|JdbcValues
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
return|;
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
name|implementor
operator|.
name|implement
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Visitor for checking whether part of projection is a user defined function or not    */
specifier|private
specifier|static
class|class
name|CheckingUserDefinedFunctionVisitor
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|boolean
name|containsUsedDefinedFunction
init|=
literal|false
decl_stmt|;
name|CheckingUserDefinedFunctionVisitor
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsUserDefinedFunction
parameter_list|()
block|{
return|return
name|containsUsedDefinedFunction
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|SqlOperator
name|operator
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|operator
operator|instanceof
name|SqlFunction
operator|&&
operator|(
operator|(
name|SqlFunction
operator|)
name|operator
operator|)
operator|.
name|getFunctionType
argument_list|()
operator|.
name|isUserDefined
argument_list|()
condition|)
block|{
name|containsUsedDefinedFunction
operator||=
literal|true
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JdbcRules.java
end_comment

end_unit

