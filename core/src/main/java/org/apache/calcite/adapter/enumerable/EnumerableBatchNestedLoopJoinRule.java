begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Rule to convert a {@link LogicalJoin} to an {@link EnumerableBatchNestedLoopJoin}.  * You may provide a custom config to convert other nodes that extend {@link Join}.  *  * @see EnumerableRules#ENUMERABLE_BATCH_NESTED_LOOP_JOIN_RULE  */
end_comment

begin_class
specifier|public
class|class
name|EnumerableBatchNestedLoopJoinRule
extends|extends
name|RelRule
argument_list|<
name|EnumerableBatchNestedLoopJoinRule
operator|.
name|Config
argument_list|>
block|{
comment|/** Creates an EnumerableBatchNestedLoopJoinRule. */
specifier|protected
name|EnumerableBatchNestedLoopJoinRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|protected
name|EnumerableBatchNestedLoopJoinRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|clazz
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|clazz
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withBatchSize
argument_list|(
name|batchSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|EnumerableBatchNestedLoopJoinRule
parameter_list|(
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|EnumerableBatchNestedLoopJoinRule
parameter_list|(
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withBatchSize
argument_list|(
name|batchSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JoinRelType
name|joinType
init|=
name|join
operator|.
name|getJoinType
argument_list|()
decl_stmt|;
return|return
name|joinType
operator|==
name|JoinRelType
operator|.
name|INNER
operator|||
name|joinType
operator|==
name|JoinRelType
operator|.
name|LEFT
operator|||
name|joinType
operator|==
name|JoinRelType
operator|.
name|ANTI
operator|||
name|joinType
operator|==
name|JoinRelType
operator|.
name|SEMI
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|leftFieldCount
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|join
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|correlationIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|corrVarList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|batchSize
init|=
name|config
operator|.
name|batchSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|CorrelationId
name|correlationId
init|=
name|cluster
operator|.
name|createCorrel
argument_list|()
decl_stmt|;
name|correlationIds
operator|.
name|add
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
name|corrVarList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCorrel
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|correlationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|corrVar0
init|=
name|corrVarList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|requiredColumns
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Generate first condition
specifier|final
name|RexNode
name|condition
init|=
name|join
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|input
parameter_list|)
block|{
name|int
name|field
init|=
name|input
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|>=
name|leftFieldCount
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
operator|.
name|getType
argument_list|()
argument_list|,
name|input
operator|.
name|getIndex
argument_list|()
operator|-
name|leftFieldCount
argument_list|)
return|;
block|}
name|requiredColumns
operator|.
name|set
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|corrVar0
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conditionList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
comment|// Add batchSize-1 other conditions
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|corrIndex
init|=
name|i
decl_stmt|;
specifier|final
name|RexNode
name|condition2
init|=
name|condition
operator|.
name|accept
argument_list|(
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|variable
parameter_list|)
block|{
return|return
name|variable
operator|.
name|equals
argument_list|(
name|corrVar0
argument_list|)
condition|?
name|corrVarList
operator|.
name|get
argument_list|(
name|corrIndex
argument_list|)
else|:
name|variable
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
name|condition2
argument_list|)
expr_stmt|;
block|}
comment|// Push a filter with batchSize disjunctions
name|relBuilder
operator|.
name|push
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|relBuilder
operator|.
name|or
argument_list|(
name|conditionList
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|right
init|=
name|relBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|EnumerableBatchNestedLoopJoin
operator|.
name|create
argument_list|(
name|convert
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|convert
argument_list|(
name|right
argument_list|,
name|right
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|requiredColumns
operator|.
name|build
argument_list|()
argument_list|,
name|correlationIds
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|EMPTY
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|LogicalJoin
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"EnumerableBatchNestedLoopJoinRule"
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|EnumerableBatchNestedLoopJoinRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|EnumerableBatchNestedLoopJoinRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Batch size.      *      *<p>Warning: if the batch size is around or bigger than 1000 there      * can be an error because the generated code exceeds the size limit. */
annotation|@
name|ImmutableBeans
operator|.
name|Property
annotation|@
name|ImmutableBeans
operator|.
name|IntDefault
argument_list|(
literal|100
argument_list|)
name|int
name|batchSize
parameter_list|()
function_decl|;
comment|/** Sets {@link #batchSize()}. */
name|Config
name|withBatchSize
parameter_list|(
name|int
name|batchSize
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

