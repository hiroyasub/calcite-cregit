begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|impl
operator|.
name|WinAggAddContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|impl
operator|.
name|WinAggResetContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|impl
operator|.
name|WinAggResultContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BinaryExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|DeclarationStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|CalcitePrepareImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexWindowBound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SortedMultiMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/** Implementation of {@link org.apache.calcite.rel.core.Window} in  * {@link org.apache.calcite.adapter.enumerable.EnumerableConvention enumerable calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|EnumerableWindow
extends|extends
name|Window
implements|implements
name|EnumerableRel
block|{
comment|/** Creates an EnumerableWindowRel. */
name|EnumerableWindow
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|List
argument_list|<
name|RexLiteral
argument_list|>
name|constants
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|Group
argument_list|>
name|groups
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|child
argument_list|,
name|constants
argument_list|,
name|rowType
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|EnumerableWindow
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|constants
argument_list|,
name|rowType
argument_list|,
name|groups
argument_list|)
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
name|EnumerableConvention
operator|.
name|COST_MULTIPLIER
argument_list|)
return|;
block|}
comment|/** Implementation of {@link RexToLixTranslator.InputGetter}    * suitable for generating implementations of windowed aggregate    * functions. */
specifier|private
specifier|static
class|class
name|WindowRelInputGetter
implements|implements
name|RexToLixTranslator
operator|.
name|InputGetter
block|{
specifier|private
specifier|final
name|Expression
name|row
decl_stmt|;
specifier|private
specifier|final
name|PhysType
name|rowPhysType
decl_stmt|;
specifier|private
specifier|final
name|int
name|actualInputFieldCount
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|constants
decl_stmt|;
specifier|private
name|WindowRelInputGetter
parameter_list|(
name|Expression
name|row
parameter_list|,
name|PhysType
name|rowPhysType
parameter_list|,
name|int
name|actualInputFieldCount
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|constants
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|rowPhysType
operator|=
name|rowPhysType
expr_stmt|;
name|this
operator|.
name|actualInputFieldCount
operator|=
name|actualInputFieldCount
expr_stmt|;
name|this
operator|.
name|constants
operator|=
name|constants
expr_stmt|;
block|}
specifier|public
name|Expression
name|field
parameter_list|(
name|BlockBuilder
name|list
parameter_list|,
name|int
name|index
parameter_list|,
name|Type
name|storageType
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
name|actualInputFieldCount
condition|)
block|{
name|Expression
name|current
init|=
name|list
operator|.
name|append
argument_list|(
literal|"current"
argument_list|,
name|row
argument_list|)
decl_stmt|;
return|return
name|rowPhysType
operator|.
name|fieldReference
argument_list|(
name|current
argument_list|,
name|index
argument_list|,
name|storageType
argument_list|)
return|;
block|}
return|return
name|constants
operator|.
name|get
argument_list|(
name|index
operator|-
name|actualInputFieldCount
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|sampleOfTheGeneratedWindowedAggregate
parameter_list|()
block|{
comment|// Here's overview of the generated code
comment|// For each list of rows that have the same partitioning key, evaluate
comment|// all of the windowed aggregate functions.
comment|// builder
name|Iterator
argument_list|<
name|Integer
index|[]
argument_list|>
name|iterator
init|=
literal|null
decl_stmt|;
comment|// builder3
name|Integer
index|[]
name|rows
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|prevStart
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|prevEnd
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// builder4
name|Integer
name|row
init|=
name|rows
index|[
name|i
index|]
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
literal|100
decl_stmt|;
if|if
condition|(
name|start
operator|!=
name|prevStart
operator|||
name|end
operator|!=
name|prevEnd
condition|)
block|{
comment|// builder5
name|int
name|actualStart
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|start
operator|!=
name|prevStart
operator|||
name|end
operator|<
name|prevEnd
condition|)
block|{
comment|// builder6
comment|// recompute
name|actualStart
operator|=
name|start
expr_stmt|;
comment|// implementReset
block|}
else|else
block|{
comment|// must be start == prevStart&& end> prevEnd
name|actualStart
operator|=
name|prevEnd
operator|+
literal|1
expr_stmt|;
block|}
name|prevStart
operator|=
name|start
expr_stmt|;
name|prevEnd
operator|=
name|end
expr_stmt|;
if|if
condition|(
name|start
operator|!=
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|actualStart
init|;
name|j
operator|<=
name|end
condition|;
name|j
operator|++
control|)
block|{
comment|// builder7
comment|// implementAdd
block|}
block|}
comment|// implementResult
comment|// list.add(new Xxx(row.deptno, row.empid, sum, count));
block|}
block|}
comment|// multiMap.clear(); // allows gc
comment|// source = Linq4j.asEnumerable(list);
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|source_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"source"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedConstants
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|(
name|constants
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RexLiteral
name|constant
range|:
name|constants
control|)
block|{
name|translatedConstants
operator|.
name|add
argument_list|(
name|RexToLixTranslator
operator|.
name|translateLiteral
argument_list|(
name|constant
argument_list|,
name|constant
operator|.
name|getType
argument_list|()
argument_list|,
name|typeFactory
argument_list|,
name|RexImpTable
operator|.
name|NullAs
operator|.
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PhysType
name|inputPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
specifier|final
name|int
name|w
init|=
name|implementor
operator|.
name|windowCount
operator|++
decl_stmt|;
name|ParameterExpression
name|prevStart
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"prevStart"
operator|+
name|w
argument_list|)
argument_list|)
decl_stmt|;
name|ParameterExpression
name|prevEnd
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"prevEnd"
operator|+
name|w
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|prevStart
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|prevEnd
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|windowIdx
init|=
literal|0
init|;
name|windowIdx
operator|<
name|groups
operator|.
name|size
argument_list|()
condition|;
name|windowIdx
operator|++
control|)
block|{
name|Group
name|group
init|=
name|groups
operator|.
name|get
argument_list|(
name|windowIdx
argument_list|)
decl_stmt|;
comment|// Comparator:
comment|// final Comparator<JdbcTest.Employee> comparator =
comment|//    new Comparator<JdbcTest.Employee>() {
comment|//      public int compare(JdbcTest.Employee o1,
comment|//          JdbcTest.Employee o2) {
comment|//        return Integer.compare(o1.empid, o2.empid);
comment|//      }
comment|//    };
specifier|final
name|Expression
name|comparator_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"comparator"
argument_list|,
name|inputPhysType
operator|.
name|generateComparator
argument_list|(
name|group
operator|.
name|collation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|partitionIterator
init|=
name|getPartitionIterator
argument_list|(
name|builder
argument_list|,
name|source_
argument_list|,
name|inputPhysType
argument_list|,
name|group
argument_list|,
name|comparator_
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|collectionExpr
init|=
name|partitionIterator
operator|.
name|left
decl_stmt|;
specifier|final
name|Expression
name|iterator_
init|=
name|partitionIterator
operator|.
name|right
decl_stmt|;
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<
name|AggImpState
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggregateCalls
init|=
name|group
operator|.
name|getAggregateCalls
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|aggIdx
init|=
literal|0
init|;
name|aggIdx
operator|<
name|aggregateCalls
operator|.
name|size
argument_list|()
condition|;
name|aggIdx
operator|++
control|)
block|{
name|AggregateCall
name|call
init|=
name|aggregateCalls
operator|.
name|get
argument_list|(
name|aggIdx
argument_list|)
decl_stmt|;
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|AggImpState
argument_list|(
name|aggIdx
argument_list|,
name|call
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The output from this stage is the input plus the aggregate functions.
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|typeBuilder
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
decl_stmt|;
name|typeBuilder
operator|.
name|addAll
argument_list|(
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|typeBuilder
operator|.
name|add
argument_list|(
name|agg
operator|.
name|call
operator|.
name|name
argument_list|,
name|agg
operator|.
name|call
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|RelDataType
name|outputRowType
init|=
name|typeBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|PhysType
name|outputPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|outputRowType
argument_list|,
name|pref
operator|.
name|prefer
argument_list|(
name|result
operator|.
name|format
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|list_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"list"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|collectionExpr
argument_list|,
name|BuiltInMethod
operator|.
name|COLLECTION_SIZE
operator|.
name|method
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|collationKey
init|=
name|getRowCollationKey
argument_list|(
name|builder
argument_list|,
name|inputPhysType
argument_list|,
name|group
argument_list|,
name|windowIdx
argument_list|)
decl_stmt|;
name|Expression
name|keySelector
init|=
name|collationKey
operator|.
name|left
decl_stmt|;
name|Expression
name|keyComparator
init|=
name|collationKey
operator|.
name|right
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder3
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|rows_
init|=
name|builder3
operator|.
name|append
argument_list|(
literal|"rows"
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|iterator_
argument_list|,
name|BuiltInMethod
operator|.
name|ITERATOR_NEXT
operator|.
name|method
argument_list|)
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|builder3
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|prevStart
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder3
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|prevEnd
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BlockBuilder
name|builder4
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|i_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|builder4
operator|.
name|newName
argument_list|(
literal|"i"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|row_
init|=
name|builder4
operator|.
name|append
argument_list|(
literal|"row"
argument_list|,
name|RexToLixTranslator
operator|.
name|convert
argument_list|(
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|rows_
argument_list|,
name|i_
argument_list|)
argument_list|,
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexToLixTranslator
operator|.
name|InputGetter
name|inputGetter
init|=
operator|new
name|WindowRelInputGetter
argument_list|(
name|row_
argument_list|,
name|inputPhysType
argument_list|,
name|result
operator|.
name|physType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|translatedConstants
argument_list|)
decl_stmt|;
specifier|final
name|RexToLixTranslator
name|translator
init|=
name|RexToLixTranslator
operator|.
name|forAggregation
argument_list|(
name|typeFactory
argument_list|,
name|builder4
argument_list|,
name|inputGetter
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|outputRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|fieldCountWithAggResults
init|=
name|inputPhysType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCountWithAggResults
condition|;
name|i
operator|++
control|)
block|{
name|outputRow
operator|.
name|add
argument_list|(
name|inputPhysType
operator|.
name|fieldReference
argument_list|(
name|row_
argument_list|,
name|i
argument_list|,
name|outputPhysType
operator|.
name|getJavaFieldType
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|declareAndResetState
argument_list|(
name|typeFactory
argument_list|,
name|builder
argument_list|,
name|result
argument_list|,
name|windowIdx
argument_list|,
name|aggs
argument_list|,
name|outputPhysType
argument_list|,
name|outputRow
argument_list|)
expr_stmt|;
comment|// There are assumptions that minX==0. If ever change this, look for
comment|// frameRowCount, bounds checking, etc
specifier|final
name|Expression
name|minX
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|partitionRowCount
init|=
name|builder3
operator|.
name|append
argument_list|(
literal|"partRows"
argument_list|,
name|Expressions
operator|.
name|field
argument_list|(
name|rows_
argument_list|,
literal|"length"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|maxX
init|=
name|builder3
operator|.
name|append
argument_list|(
literal|"maxX"
argument_list|,
name|Expressions
operator|.
name|subtract
argument_list|(
name|partitionRowCount
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|startUnchecked
init|=
name|builder4
operator|.
name|append
argument_list|(
literal|"start"
argument_list|,
name|translateBound
argument_list|(
name|translator
argument_list|,
name|i_
argument_list|,
name|row_
argument_list|,
name|minX
argument_list|,
name|maxX
argument_list|,
name|rows_
argument_list|,
name|group
argument_list|,
literal|true
argument_list|,
name|inputPhysType
argument_list|,
name|comparator_
argument_list|,
name|keySelector
argument_list|,
name|keyComparator
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|endUnchecked
init|=
name|builder4
operator|.
name|append
argument_list|(
literal|"end"
argument_list|,
name|translateBound
argument_list|(
name|translator
argument_list|,
name|i_
argument_list|,
name|row_
argument_list|,
name|minX
argument_list|,
name|maxX
argument_list|,
name|rows_
argument_list|,
name|group
argument_list|,
literal|false
argument_list|,
name|inputPhysType
argument_list|,
name|comparator_
argument_list|,
name|keySelector
argument_list|,
name|keyComparator
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|startX
decl_stmt|;
specifier|final
name|Expression
name|endX
decl_stmt|;
specifier|final
name|Expression
name|hasRows
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|isAlwaysNonEmpty
argument_list|()
condition|)
block|{
name|startX
operator|=
name|startUnchecked
expr_stmt|;
name|endX
operator|=
name|endUnchecked
expr_stmt|;
name|hasRows
operator|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Expression
name|startTmp
init|=
name|group
operator|.
name|lowerBound
operator|.
name|isUnbounded
argument_list|()
operator|||
name|startUnchecked
operator|==
name|i_
condition|?
name|startUnchecked
else|:
name|builder4
operator|.
name|append
argument_list|(
literal|"startTmp"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|BuiltInMethod
operator|.
name|MATH_MAX
operator|.
name|method
argument_list|,
name|startUnchecked
argument_list|,
name|minX
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|endTmp
init|=
name|group
operator|.
name|upperBound
operator|.
name|isUnbounded
argument_list|()
operator|||
name|endUnchecked
operator|==
name|i_
condition|?
name|endUnchecked
else|:
name|builder4
operator|.
name|append
argument_list|(
literal|"endTmp"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|BuiltInMethod
operator|.
name|MATH_MIN
operator|.
name|method
argument_list|,
name|endUnchecked
argument_list|,
name|maxX
argument_list|)
argument_list|)
decl_stmt|;
name|ParameterExpression
name|startPe
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|builder4
operator|.
name|newName
argument_list|(
literal|"startChecked"
argument_list|)
argument_list|)
decl_stmt|;
name|ParameterExpression
name|endPe
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|builder4
operator|.
name|newName
argument_list|(
literal|"endChecked"
argument_list|)
argument_list|)
decl_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|startPe
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
name|Modifier
operator|.
name|FINAL
argument_list|,
name|endPe
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|hasRows
operator|=
name|builder4
operator|.
name|append
argument_list|(
literal|"hasRows"
argument_list|,
name|Expressions
operator|.
name|lessThanOrEqual
argument_list|(
name|startTmp
argument_list|,
name|endTmp
argument_list|)
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|hasRows
argument_list|,
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|startPe
argument_list|,
name|startTmp
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|endPe
argument_list|,
name|endTmp
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|block
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|startPe
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|endPe
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|startX
operator|=
name|startPe
expr_stmt|;
name|endX
operator|=
name|endPe
expr_stmt|;
block|}
specifier|final
name|BlockBuilder
name|builder5
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|,
name|builder4
argument_list|)
decl_stmt|;
name|BinaryExpression
name|rowCountWhenNonEmpty
init|=
name|Expressions
operator|.
name|add
argument_list|(
name|startX
operator|==
name|minX
condition|?
name|endX
else|:
name|Expressions
operator|.
name|subtract
argument_list|(
name|endX
argument_list|,
name|startX
argument_list|)
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|frameRowCount
decl_stmt|;
if|if
condition|(
name|hasRows
operator|.
name|equals
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|)
condition|)
block|{
name|frameRowCount
operator|=
name|builder4
operator|.
name|append
argument_list|(
literal|"totalRows"
argument_list|,
name|rowCountWhenNonEmpty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frameRowCount
operator|=
name|builder4
operator|.
name|append
argument_list|(
literal|"totalRows"
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|hasRows
argument_list|,
name|rowCountWhenNonEmpty
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ParameterExpression
name|actualStart
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|builder5
operator|.
name|newName
argument_list|(
literal|"actualStart"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder6
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|,
name|builder5
argument_list|)
decl_stmt|;
name|builder6
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|actualStart
argument_list|,
name|startX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|agg
operator|.
name|implementor
operator|.
name|implementReset
argument_list|(
name|agg
operator|.
name|context
argument_list|,
operator|new
name|WinAggResetContextImpl
argument_list|(
name|builder6
argument_list|,
name|agg
operator|.
name|state
argument_list|,
name|i_
argument_list|,
name|startX
argument_list|,
name|endX
argument_list|,
name|hasRows
argument_list|,
name|partitionRowCount
argument_list|,
name|frameRowCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Expression
name|lowerBoundCanChange
init|=
name|group
operator|.
name|lowerBound
operator|.
name|isUnbounded
argument_list|()
operator|&&
name|group
operator|.
name|lowerBound
operator|.
name|isPreceding
argument_list|()
condition|?
name|Expressions
operator|.
name|constant
argument_list|(
literal|false
argument_list|)
else|:
name|Expressions
operator|.
name|notEqual
argument_list|(
name|startX
argument_list|,
name|prevStart
argument_list|)
decl_stmt|;
name|Expression
name|needRecomputeWindow
init|=
name|Expressions
operator|.
name|orElse
argument_list|(
name|lowerBoundCanChange
argument_list|,
name|Expressions
operator|.
name|lessThan
argument_list|(
name|endX
argument_list|,
name|prevEnd
argument_list|)
argument_list|)
decl_stmt|;
name|BlockStatement
name|resetWindowState
init|=
name|builder6
operator|.
name|toBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|resetWindowState
operator|.
name|statements
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder5
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|actualStart
argument_list|,
name|Expressions
operator|.
name|condition
argument_list|(
name|needRecomputeWindow
argument_list|,
name|startX
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|prevEnd
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder5
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|actualStart
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|builder5
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThenElse
argument_list|(
name|needRecomputeWindow
argument_list|,
name|resetWindowState
argument_list|,
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|actualStart
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|prevEnd
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lowerBoundCanChange
operator|instanceof
name|BinaryExpression
condition|)
block|{
name|builder5
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|prevStart
argument_list|,
name|startX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder5
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|prevEnd
argument_list|,
name|endX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BlockBuilder
name|builder7
init|=
operator|new
name|BlockBuilder
argument_list|(
literal|true
argument_list|,
name|builder5
argument_list|)
decl_stmt|;
specifier|final
name|DeclarationStatement
name|jDecl
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
literal|"j"
argument_list|,
name|actualStart
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|inputPhysTypeFinal
init|=
name|inputPhysType
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|BlockBuilder
argument_list|,
name|WinAggFrameResultContext
argument_list|>
name|resultContextBuilder
init|=
name|getBlockBuilderWinAggFrameResultContextFunction
argument_list|(
name|typeFactory
argument_list|,
name|result
argument_list|,
name|translatedConstants
argument_list|,
name|comparator_
argument_list|,
name|rows_
argument_list|,
name|i_
argument_list|,
name|startX
argument_list|,
name|endX
argument_list|,
name|minX
argument_list|,
name|maxX
argument_list|,
name|hasRows
argument_list|,
name|frameRowCount
argument_list|,
name|partitionRowCount
argument_list|,
name|jDecl
argument_list|,
name|inputPhysTypeFinal
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|AggImpState
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|rexArguments
init|=
name|agg
lambda|->
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
init|=
name|agg
operator|.
name|call
operator|.
name|getArgList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataType
argument_list|>
name|inputTypes
init|=
name|EnumUtils
operator|.
name|fieldRowTypes
argument_list|(
name|result
operator|.
name|physType
operator|.
name|getRowType
argument_list|()
argument_list|,
name|constants
argument_list|,
name|argList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|(
name|inputTypes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|idx
init|=
name|argList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|idx
argument_list|,
name|inputTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|args
return|;
block|}
decl_stmt|;
name|implementAdd
argument_list|(
name|aggs
argument_list|,
name|builder7
argument_list|,
name|resultContextBuilder
argument_list|,
name|rexArguments
argument_list|,
name|jDecl
argument_list|)
expr_stmt|;
name|BlockStatement
name|forBlock
init|=
name|builder7
operator|.
name|toBlock
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|forBlock
operator|.
name|statements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// For instance, row_number does not use for loop to compute the value
name|Statement
name|forAggLoop
init|=
name|Expressions
operator|.
name|for_
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|jDecl
argument_list|)
argument_list|,
name|Expressions
operator|.
name|lessThanOrEqual
argument_list|(
name|jDecl
operator|.
name|parameter
argument_list|,
name|endX
argument_list|)
argument_list|,
name|Expressions
operator|.
name|preIncrementAssign
argument_list|(
name|jDecl
operator|.
name|parameter
argument_list|)
argument_list|,
name|forBlock
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasRows
operator|.
name|equals
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|)
condition|)
block|{
name|forAggLoop
operator|=
name|Expressions
operator|.
name|ifThen
argument_list|(
name|hasRows
argument_list|,
name|forAggLoop
argument_list|)
expr_stmt|;
block|}
name|builder5
operator|.
name|add
argument_list|(
name|forAggLoop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|implementResult
argument_list|(
name|aggs
argument_list|,
name|builder5
argument_list|,
name|resultContextBuilder
argument_list|,
name|rexArguments
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|builder4
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|ifThen
argument_list|(
name|Expressions
operator|.
name|orElse
argument_list|(
name|lowerBoundCanChange
argument_list|,
name|Expressions
operator|.
name|notEqual
argument_list|(
name|endX
argument_list|,
name|prevEnd
argument_list|)
argument_list|)
argument_list|,
name|builder5
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|implementResult
argument_list|(
name|aggs
argument_list|,
name|builder4
argument_list|,
name|resultContextBuilder
argument_list|,
name|rexArguments
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|list_
argument_list|,
name|BuiltInMethod
operator|.
name|COLLECTION_ADD
operator|.
name|method
argument_list|,
name|outputPhysType
operator|.
name|record
argument_list|(
name|outputRow
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder3
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|for_
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|i_
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|lessThan
argument_list|(
name|i_
argument_list|,
name|Expressions
operator|.
name|field
argument_list|(
name|rows_
argument_list|,
literal|"length"
argument_list|)
argument_list|)
argument_list|,
name|Expressions
operator|.
name|preIncrementAssign
argument_list|(
name|i_
argument_list|)
argument_list|,
name|builder4
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|while_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|iterator_
argument_list|,
name|BuiltInMethod
operator|.
name|ITERATOR_HAS_NEXT
operator|.
name|method
argument_list|)
argument_list|,
name|builder3
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|collectionExpr
argument_list|,
name|BuiltInMethod
operator|.
name|MAP_CLEAR
operator|.
name|method
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We're not assigning to "source". For each group, create a new
comment|// final variable called "source" or "sourceN".
name|source_
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"source"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|BuiltInMethod
operator|.
name|AS_ENUMERABLE
operator|.
name|method
argument_list|,
name|list_
argument_list|)
argument_list|)
expr_stmt|;
name|inputPhysType
operator|=
name|outputPhysType
expr_stmt|;
block|}
comment|//   return Linq4j.asEnumerable(list);
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|source_
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|inputPhysType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Function
argument_list|<
name|BlockBuilder
argument_list|,
name|WinAggFrameResultContext
argument_list|>
name|getBlockBuilderWinAggFrameResultContextFunction
parameter_list|(
specifier|final
name|JavaTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|translatedConstants
parameter_list|,
specifier|final
name|Expression
name|comparator_
parameter_list|,
specifier|final
name|Expression
name|rows_
parameter_list|,
specifier|final
name|ParameterExpression
name|i_
parameter_list|,
specifier|final
name|Expression
name|startX
parameter_list|,
specifier|final
name|Expression
name|endX
parameter_list|,
specifier|final
name|Expression
name|minX
parameter_list|,
specifier|final
name|Expression
name|maxX
parameter_list|,
specifier|final
name|Expression
name|hasRows
parameter_list|,
specifier|final
name|Expression
name|frameRowCount
parameter_list|,
specifier|final
name|Expression
name|partitionRowCount
parameter_list|,
specifier|final
name|DeclarationStatement
name|jDecl
parameter_list|,
specifier|final
name|PhysType
name|inputPhysType
parameter_list|)
block|{
return|return
name|block
lambda|->
operator|new
name|WinAggFrameResultContext
argument_list|()
block|{
specifier|public
name|RexToLixTranslator
name|rowTranslator
argument_list|(
name|Expression
name|rowIndex
argument_list|)
block|{
name|Expression
name|row
operator|=
name|getRow
argument_list|(
name|rowIndex
argument_list|)
return|;
specifier|final
name|RexToLixTranslator
operator|.
name|InputGetter
name|inputGetter
init|=
operator|new
name|WindowRelInputGetter
argument_list|(
name|row
argument_list|,
name|inputPhysType
argument_list|,
name|result
operator|.
name|physType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|translatedConstants
argument_list|)
decl_stmt|;
return|return
name|RexToLixTranslator
operator|.
name|forAggregation
argument_list|(
name|typeFactory
argument_list|,
name|block
argument_list|,
name|inputGetter
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|computeIndex
parameter_list|(
name|Expression
name|offset
parameter_list|,
name|WinAggImplementor
operator|.
name|SeekType
name|seekType
parameter_list|)
block|{
name|Expression
name|index
decl_stmt|;
if|if
condition|(
name|seekType
operator|==
name|WinAggImplementor
operator|.
name|SeekType
operator|.
name|AGG_INDEX
condition|)
block|{
name|index
operator|=
name|jDecl
operator|.
name|parameter
expr_stmt|;
block|}
if|else if
condition|(
name|seekType
operator|==
name|WinAggImplementor
operator|.
name|SeekType
operator|.
name|SET
condition|)
block|{
name|index
operator|=
name|i_
expr_stmt|;
block|}
if|else if
condition|(
name|seekType
operator|==
name|WinAggImplementor
operator|.
name|SeekType
operator|.
name|START
condition|)
block|{
name|index
operator|=
name|startX
expr_stmt|;
block|}
if|else if
condition|(
name|seekType
operator|==
name|WinAggImplementor
operator|.
name|SeekType
operator|.
name|END
condition|)
block|{
name|index
operator|=
name|endX
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"SeekSet "
operator|+
name|seekType
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|offset
argument_list|)
condition|)
block|{
name|index
operator|=
name|block
operator|.
name|append
argument_list|(
literal|"idx"
argument_list|,
name|Expressions
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
name|Expression
name|checkBounds
parameter_list|(
name|Expression
name|rowIndex
parameter_list|,
name|Expression
name|minIndex
parameter_list|,
name|Expression
name|maxIndex
parameter_list|)
block|{
if|if
condition|(
name|rowIndex
operator|==
name|i_
operator|||
name|rowIndex
operator|==
name|startX
operator|||
name|rowIndex
operator|==
name|endX
condition|)
block|{
comment|// No additional bounds check required
return|return
name|hasRows
return|;
block|}
comment|//noinspection UnnecessaryLocalVariable
name|Expression
name|res
init|=
name|block
operator|.
name|append
argument_list|(
literal|"rowInFrame"
argument_list|,
name|Expressions
operator|.
name|foldAnd
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|hasRows
argument_list|,
name|Expressions
operator|.
name|greaterThanOrEqual
argument_list|(
name|rowIndex
argument_list|,
name|minIndex
argument_list|)
argument_list|,
name|Expressions
operator|.
name|lessThanOrEqual
argument_list|(
name|rowIndex
argument_list|,
name|maxIndex
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
specifier|public
name|Expression
name|rowInFrame
parameter_list|(
name|Expression
name|rowIndex
parameter_list|)
block|{
return|return
name|checkBounds
argument_list|(
name|rowIndex
argument_list|,
name|startX
argument_list|,
name|endX
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|rowInPartition
parameter_list|(
name|Expression
name|rowIndex
parameter_list|)
block|{
return|return
name|checkBounds
argument_list|(
name|rowIndex
argument_list|,
name|minX
argument_list|,
name|maxX
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|compareRows
parameter_list|(
name|Expression
name|a
parameter_list|,
name|Expression
name|b
parameter_list|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
name|comparator_
argument_list|,
name|BuiltInMethod
operator|.
name|COMPARATOR_COMPARE
operator|.
name|method
argument_list|,
name|getRow
argument_list|(
name|a
argument_list|)
argument_list|,
name|getRow
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|getRow
parameter_list|(
name|Expression
name|rowIndex
parameter_list|)
block|{
return|return
name|block
operator|.
name|append
argument_list|(
literal|"jRow"
argument_list|,
name|RexToLixTranslator
operator|.
name|convert
argument_list|(
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|rows_
argument_list|,
name|rowIndex
argument_list|)
argument_list|,
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|index
parameter_list|()
block|{
return|return
name|i_
return|;
block|}
specifier|public
name|Expression
name|startIndex
parameter_list|()
block|{
return|return
name|startX
return|;
block|}
specifier|public
name|Expression
name|endIndex
parameter_list|()
block|{
return|return
name|endX
return|;
block|}
specifier|public
name|Expression
name|hasRows
parameter_list|()
block|{
return|return
name|hasRows
return|;
block|}
specifier|public
name|Expression
name|getFrameRowCount
parameter_list|()
block|{
return|return
name|frameRowCount
return|;
block|}
specifier|public
name|Expression
name|getPartitionRowCount
parameter_list|()
block|{
return|return
name|partitionRowCount
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}    private
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|getPartitionIterator
parameter_list|(
name|BlockBuilder
name|builder
parameter_list|,
name|Expression
name|source_
parameter_list|,
name|PhysType
name|inputPhysType
parameter_list|,
name|Group
name|group
parameter_list|,
name|Expression
name|comparator_
parameter_list|)
block|{
comment|// Populate map of lists, one per partition
comment|//   final Map<Integer, List<Employee>> multiMap =
comment|//     new SortedMultiMap<Integer, List<Employee>>();
comment|//    source.foreach(
comment|//      new Function1<Employee, Void>() {
comment|//        public Void apply(Employee v) {
comment|//          final Integer k = v.deptno;
comment|//          multiMap.putMulti(k, v);
comment|//          return null;
comment|//        }
comment|//      });
comment|//   final List<Xxx> list = new ArrayList<Xxx>(multiMap.size());
comment|//   Iterator<Employee[]> iterator = multiMap.arrays(comparator);
comment|//
if|if
condition|(
name|group
operator|.
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If partition key is empty, no need to partition.
comment|//
comment|//   final List<Employee> tempList =
comment|//       source.into(new ArrayList<Employee>());
comment|//   Iterator<Employee[]> iterator =
comment|//       SortedMultiMap.singletonArrayIterator(comparator, tempList);
comment|//   final List<Xxx> list = new ArrayList<Xxx>(tempList.size());
specifier|final
name|Expression
name|tempList_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"tempList"
argument_list|,
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|source_
argument_list|,
name|BuiltInMethod
operator|.
name|INTO
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|List
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|tempList_
argument_list|,
name|builder
operator|.
name|append
argument_list|(
literal|"iterator"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
literal|null
argument_list|,
name|BuiltInMethod
operator|.
name|SORTED_MULTI_MAP_SINGLETON
operator|.
name|method
argument_list|,
name|comparator_
argument_list|,
name|tempList_
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|Expression
name|multiMap_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"multiMap"
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|SortedMultiMap
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder2
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|v_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
name|builder2
operator|.
name|newName
argument_list|(
literal|"v"
argument_list|)
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Type
argument_list|,
name|List
argument_list|<
name|Expression
argument_list|>
argument_list|>
name|selector
init|=
name|inputPhysType
operator|.
name|selector
argument_list|(
name|v_
argument_list|,
name|group
operator|.
name|keys
operator|.
name|asList
argument_list|()
argument_list|,
name|JavaRowFormat
operator|.
name|CUSTOM
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|key_
decl_stmt|;
if|if
condition|(
name|selector
operator|.
name|left
operator|instanceof
name|Types
operator|.
name|RecordType
condition|)
block|{
name|Types
operator|.
name|RecordType
name|keyJavaType
init|=
operator|(
name|Types
operator|.
name|RecordType
operator|)
name|selector
operator|.
name|left
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|initExpressions
init|=
name|selector
operator|.
name|right
decl_stmt|;
name|key_
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|keyJavaType
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|key_
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|key_
argument_list|,
name|Expressions
operator|.
name|new_
argument_list|(
name|keyJavaType
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Types
operator|.
name|RecordField
argument_list|>
name|fieldList
init|=
name|keyJavaType
operator|.
name|getRecordFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initExpressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|right
init|=
name|initExpressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|key_
argument_list|,
name|fieldList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|right
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DeclarationStatement
name|declare
init|=
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
literal|"key"
argument_list|,
name|selector
operator|.
name|right
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|declare
argument_list|)
expr_stmt|;
name|key_
operator|=
name|declare
operator|.
name|parameter
expr_stmt|;
block|}
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|multiMap_
argument_list|,
name|BuiltInMethod
operator|.
name|SORTED_MULTI_MAP_PUT_MULTI
operator|.
name|method
argument_list|,
name|key_
argument_list|,
name|v_
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder2
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|source_
argument_list|,
name|BuiltInMethod
operator|.
name|ENUMERABLE_FOREACH
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|builder2
operator|.
name|toBlock
argument_list|()
argument_list|,
name|v_
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|multiMap_
argument_list|,
name|builder
operator|.
name|append
argument_list|(
literal|"iterator"
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|multiMap_
argument_list|,
name|BuiltInMethod
operator|.
name|SORTED_MULTI_MAP_ARRAYS
operator|.
name|method
argument_list|,
name|comparator_
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|getRowCollationKey
parameter_list|(
name|BlockBuilder
name|builder
parameter_list|,
name|PhysType
name|inputPhysType
parameter_list|,
name|Group
name|group
parameter_list|,
name|int
name|windowIdx
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|group
operator|.
name|isRows
operator|||
operator|(
name|group
operator|.
name|upperBound
operator|.
name|isUnbounded
argument_list|()
operator|&&
name|group
operator|.
name|lowerBound
operator|.
name|isUnbounded
argument_list|()
operator|)
operator|)
condition|)
block|{
name|Pair
argument_list|<
name|Expression
argument_list|,
name|Expression
argument_list|>
name|pair
init|=
name|inputPhysType
operator|.
name|generateCollationKey
argument_list|(
name|group
operator|.
name|collation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
decl_stmt|;
comment|// optimize=false to prevent inlining of object create into for-loops
return|return
name|Pair
operator|.
name|of
argument_list|(
name|builder
operator|.
name|append
argument_list|(
literal|"keySelector"
operator|+
name|windowIdx
argument_list|,
name|pair
operator|.
name|left
argument_list|,
literal|false
argument_list|)
argument_list|,
name|builder
operator|.
name|append
argument_list|(
literal|"keyComparator"
operator|+
name|windowIdx
argument_list|,
name|pair
operator|.
name|right
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Pair
operator|.
name|of
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|declareAndResetState
parameter_list|(
specifier|final
name|JavaTypeFactory
name|typeFactory
parameter_list|,
name|BlockBuilder
name|builder
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|,
name|int
name|windowIdx
parameter_list|,
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
parameter_list|,
name|PhysType
name|outputPhysType
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|outputRow
parameter_list|)
block|{
for|for
control|(
specifier|final
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|agg
operator|.
name|context
operator|=
operator|new
name|WinAggContext
argument_list|()
block|{
specifier|public
name|SqlAggFunction
name|aggregation
parameter_list|()
block|{
return|return
name|agg
operator|.
name|call
operator|.
name|getAggregation
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|returnRelType
parameter_list|()
block|{
return|return
name|agg
operator|.
name|call
operator|.
name|type
return|;
block|}
specifier|public
name|Type
name|returnType
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|javaClass
argument_list|(
name|typeFactory
argument_list|,
name|returnRelType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Type
argument_list|>
name|parameterTypes
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|fieldTypes
argument_list|(
name|typeFactory
argument_list|,
name|parameterRelTypes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|RelDataType
argument_list|>
name|parameterRelTypes
parameter_list|()
block|{
return|return
name|EnumUtils
operator|.
name|fieldRowTypes
argument_list|(
name|result
operator|.
name|physType
operator|.
name|getRowType
argument_list|()
argument_list|,
name|constants
argument_list|,
name|agg
operator|.
name|call
operator|.
name|getArgList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|keyOrdinals
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|RelDataType
argument_list|>
name|keyRelTypes
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Type
argument_list|>
name|keyTypes
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
expr_stmt|;
name|String
name|aggName
init|=
literal|"a"
operator|+
name|agg
operator|.
name|aggIdx
decl_stmt|;
if|if
condition|(
name|CalcitePrepareImpl
operator|.
name|DEBUG
condition|)
block|{
name|aggName
operator|=
name|Util
operator|.
name|toJavaId
argument_list|(
name|agg
operator|.
name|call
operator|.
name|getAggregation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|substring
argument_list|(
literal|"ID$0$"
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|aggName
expr_stmt|;
block|}
name|List
argument_list|<
name|Type
argument_list|>
name|state
init|=
name|agg
operator|.
name|implementor
operator|.
name|getStateType
argument_list|(
name|agg
operator|.
name|context
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|decls
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|(
name|state
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|state
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Type
name|type
init|=
name|state
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ParameterExpression
name|pe
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|type
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
name|aggName
operator|+
literal|"s"
operator|+
name|i
operator|+
literal|"w"
operator|+
name|windowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|pe
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|decls
operator|.
name|add
argument_list|(
name|pe
argument_list|)
expr_stmt|;
block|}
name|agg
operator|.
name|state
operator|=
name|decls
expr_stmt|;
name|Type
name|aggHolderType
init|=
name|agg
operator|.
name|context
operator|.
name|returnType
argument_list|()
decl_stmt|;
name|Type
name|aggStorageType
init|=
name|outputPhysType
operator|.
name|getJavaFieldType
argument_list|(
name|outputRow
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Primitive
operator|.
name|is
argument_list|(
name|aggHolderType
argument_list|)
operator|&&
operator|!
name|Primitive
operator|.
name|is
argument_list|(
name|aggStorageType
argument_list|)
condition|)
block|{
name|aggHolderType
operator|=
name|Primitive
operator|.
name|box
argument_list|(
name|aggHolderType
argument_list|)
expr_stmt|;
block|}
name|ParameterExpression
name|aggRes
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|aggHolderType
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
name|aggName
operator|+
literal|"w"
operator|+
name|windowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|declare
argument_list|(
literal|0
argument_list|,
name|aggRes
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|Primitive
operator|.
name|is
argument_list|(
name|aggRes
operator|.
name|getType
argument_list|()
argument_list|)
condition|?
name|Primitive
operator|.
name|of
argument_list|(
name|aggRes
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|defaultValue
else|:
literal|null
argument_list|,
name|aggRes
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|agg
operator|.
name|result
operator|=
name|aggRes
expr_stmt|;
name|outputRow
operator|.
name|add
argument_list|(
name|aggRes
argument_list|)
expr_stmt|;
name|agg
operator|.
name|implementor
operator|.
name|implementReset
argument_list|(
name|agg
operator|.
name|context
argument_list|,
operator|new
name|WinAggResetContextImpl
argument_list|(
name|builder
argument_list|,
name|agg
operator|.
name|state
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|implementAdd
parameter_list|(
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
parameter_list|,
specifier|final
name|BlockBuilder
name|builder7
parameter_list|,
specifier|final
name|Function
argument_list|<
name|BlockBuilder
argument_list|,
name|WinAggFrameResultContext
argument_list|>
name|frame
parameter_list|,
specifier|final
name|Function
argument_list|<
name|AggImpState
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|rexArguments
parameter_list|,
specifier|final
name|DeclarationStatement
name|jDecl
parameter_list|)
block|{
for|for
control|(
specifier|final
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
specifier|final
name|WinAggAddContext
name|addContext
init|=
operator|new
name|WinAggAddContextImpl
argument_list|(
name|builder7
argument_list|,
name|agg
operator|.
name|state
argument_list|,
name|frame
argument_list|)
block|{
specifier|public
name|Expression
name|currentPosition
parameter_list|()
block|{
return|return
name|jDecl
operator|.
name|parameter
return|;
block|}
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexArguments
parameter_list|()
block|{
return|return
name|rexArguments
operator|.
name|apply
argument_list|(
name|agg
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|rexFilterArgument
parameter_list|()
block|{
return|return
literal|null
return|;
comment|// REVIEW
block|}
block|}
decl_stmt|;
name|agg
operator|.
name|implementor
operator|.
name|implementAdd
argument_list|(
name|agg
operator|.
name|context
argument_list|,
name|addContext
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|boolean
name|implementResult
parameter_list|(
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
parameter_list|,
specifier|final
name|BlockBuilder
name|builder
parameter_list|,
specifier|final
name|Function
argument_list|<
name|BlockBuilder
argument_list|,
name|WinAggFrameResultContext
argument_list|>
name|frame
parameter_list|,
specifier|final
name|Function
argument_list|<
name|AggImpState
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|rexArguments
parameter_list|,
name|boolean
name|cachedBlock
parameter_list|)
block|{
name|boolean
name|nonEmpty
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|boolean
name|needCache
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|agg
operator|.
name|implementor
operator|instanceof
name|WinAggImplementor
condition|)
block|{
name|WinAggImplementor
name|imp
init|=
operator|(
name|WinAggImplementor
operator|)
name|agg
operator|.
name|implementor
decl_stmt|;
name|needCache
operator|=
name|imp
operator|.
name|needCacheWhenFrameIntact
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|needCache
operator|^
name|cachedBlock
condition|)
block|{
comment|// Regular aggregates do not change when the windowing frame keeps
comment|// the same. Ths
continue|continue;
block|}
name|nonEmpty
operator|=
literal|true
expr_stmt|;
name|Expression
name|res
init|=
name|agg
operator|.
name|implementor
operator|.
name|implementResult
argument_list|(
name|agg
operator|.
name|context
argument_list|,
operator|new
name|WinAggResultContextImpl
argument_list|(
name|builder
argument_list|,
name|agg
operator|.
name|state
argument_list|,
name|frame
argument_list|)
block|{
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexArguments
parameter_list|()
block|{
return|return
name|rexArguments
operator|.
name|apply
argument_list|(
name|agg
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Several count(a) and count(b) might share the result
name|Expression
name|aggRes
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"a"
operator|+
name|agg
operator|.
name|aggIdx
operator|+
literal|"res"
argument_list|,
name|RexToLixTranslator
operator|.
name|convert
argument_list|(
name|res
argument_list|,
name|agg
operator|.
name|result
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|agg
operator|.
name|result
argument_list|,
name|aggRes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nonEmpty
return|;
block|}
end_function

begin_function
specifier|private
name|Expression
name|translateBound
parameter_list|(
name|RexToLixTranslator
name|translator
parameter_list|,
name|ParameterExpression
name|i_
parameter_list|,
name|Expression
name|row_
parameter_list|,
name|Expression
name|min_
parameter_list|,
name|Expression
name|max_
parameter_list|,
name|Expression
name|rows_
parameter_list|,
name|Group
name|group
parameter_list|,
name|boolean
name|lower
parameter_list|,
name|PhysType
name|physType
parameter_list|,
name|Expression
name|rowComparator
parameter_list|,
name|Expression
name|keySelector
parameter_list|,
name|Expression
name|keyComparator
parameter_list|)
block|{
name|RexWindowBound
name|bound
init|=
name|lower
condition|?
name|group
operator|.
name|lowerBound
else|:
name|group
operator|.
name|upperBound
decl_stmt|;
if|if
condition|(
name|bound
operator|.
name|isUnbounded
argument_list|()
condition|)
block|{
return|return
name|bound
operator|.
name|isPreceding
argument_list|()
condition|?
name|min_
else|:
name|max_
return|;
block|}
if|if
condition|(
name|group
operator|.
name|isRows
condition|)
block|{
if|if
condition|(
name|bound
operator|.
name|isCurrentRow
argument_list|()
condition|)
block|{
return|return
name|i_
return|;
block|}
name|RexNode
name|node
init|=
name|bound
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|Expression
name|offs
init|=
name|translator
operator|.
name|translate
argument_list|(
name|node
argument_list|)
decl_stmt|;
comment|// Floating offset does not make sense since we refer to array index.
comment|// Nulls do not make sense as well.
name|offs
operator|=
name|RexToLixTranslator
operator|.
name|convert
argument_list|(
name|offs
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|Expression
name|b
init|=
name|i_
decl_stmt|;
if|if
condition|(
name|bound
operator|.
name|isFollowing
argument_list|()
condition|)
block|{
name|b
operator|=
name|Expressions
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|offs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
name|Expressions
operator|.
name|subtract
argument_list|(
name|b
argument_list|,
name|offs
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
name|Expression
name|searchLower
init|=
name|min_
decl_stmt|;
name|Expression
name|searchUpper
init|=
name|max_
decl_stmt|;
if|if
condition|(
name|bound
operator|.
name|isCurrentRow
argument_list|()
condition|)
block|{
if|if
condition|(
name|lower
condition|)
block|{
name|searchUpper
operator|=
name|i_
expr_stmt|;
block|}
else|else
block|{
name|searchLower
operator|=
name|i_
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
init|=
name|group
operator|.
name|collation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
decl_stmt|;
if|if
condition|(
name|bound
operator|.
name|isCurrentRow
argument_list|()
operator|&&
name|fieldCollations
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
name|Expressions
operator|.
name|call
argument_list|(
operator|(
name|lower
condition|?
name|BuiltInMethod
operator|.
name|BINARY_SEARCH5_LOWER
else|:
name|BuiltInMethod
operator|.
name|BINARY_SEARCH5_UPPER
operator|)
operator|.
name|method
argument_list|,
name|rows_
argument_list|,
name|row_
argument_list|,
name|searchLower
argument_list|,
name|searchUpper
argument_list|,
name|keySelector
argument_list|,
name|keyComparator
argument_list|)
return|;
block|}
assert|assert
name|fieldCollations
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|:
literal|"When using range window specification, ORDER BY should have"
operator|+
literal|" exactly one expression."
operator|+
literal|" Actual collation is "
operator|+
name|group
operator|.
name|collation
argument_list|()
assert|;
comment|// isRange
name|int
name|orderKey
init|=
name|fieldCollations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldIndex
argument_list|()
decl_stmt|;
name|RelDataType
name|keyType
init|=
name|physType
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|orderKey
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Type
name|desiredKeyType
init|=
name|translator
operator|.
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|keyType
argument_list|)
decl_stmt|;
if|if
condition|(
name|bound
operator|.
name|getOffset
argument_list|()
operator|==
literal|null
condition|)
block|{
name|desiredKeyType
operator|=
name|Primitive
operator|.
name|box
argument_list|(
name|desiredKeyType
argument_list|)
expr_stmt|;
block|}
name|Expression
name|val
init|=
name|translator
operator|.
name|translate
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|orderKey
argument_list|,
name|keyType
argument_list|)
argument_list|,
name|desiredKeyType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bound
operator|.
name|isCurrentRow
argument_list|()
condition|)
block|{
name|RexNode
name|node
init|=
name|bound
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|Expression
name|offs
init|=
name|translator
operator|.
name|translate
argument_list|(
name|node
argument_list|)
decl_stmt|;
comment|// TODO: support date + interval somehow
if|if
condition|(
name|bound
operator|.
name|isFollowing
argument_list|()
condition|)
block|{
name|val
operator|=
name|Expressions
operator|.
name|add
argument_list|(
name|val
argument_list|,
name|offs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|Expressions
operator|.
name|subtract
argument_list|(
name|val
argument_list|,
name|offs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Expressions
operator|.
name|call
argument_list|(
operator|(
name|lower
condition|?
name|BuiltInMethod
operator|.
name|BINARY_SEARCH6_LOWER
else|:
name|BuiltInMethod
operator|.
name|BINARY_SEARCH6_UPPER
operator|)
operator|.
name|method
argument_list|,
name|rows_
argument_list|,
name|val
argument_list|,
name|searchLower
argument_list|,
name|searchUpper
argument_list|,
name|keySelector
argument_list|,
name|keyComparator
argument_list|)
return|;
block|}
end_function

begin_comment
unit|}
comment|// End EnumerableWindow.java
end_comment

end_unit

