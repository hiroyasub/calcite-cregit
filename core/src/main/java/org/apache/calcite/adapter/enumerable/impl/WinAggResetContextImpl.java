begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|WinAggResetContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link net.hydromatic.optiq.rules.java.WinAggResetContext}.  */
end_comment

begin_class
specifier|public
class|class
name|WinAggResetContextImpl
extends|extends
name|AggResetContextImpl
implements|implements
name|WinAggResetContext
block|{
specifier|private
specifier|final
name|Expression
name|index
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|startIndex
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|endIndex
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|frameRowCount
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|partitionRowCount
decl_stmt|;
specifier|private
specifier|final
name|Expression
name|hasRows
decl_stmt|;
comment|/**    * Creates window aggregate reset context.    * @param block code block that will contain the added initialization    * @param accumulator accumulator variables that store the intermediate    *                    aggregate state    * @param index index of the current row in the partition    * @param startIndex index of the very first row in partition    * @param endIndex index of the very last row in partition    * @param hasRows boolean expression that tells if the partition has rows    * @param frameRowCount number of rows in the current frame    * @param partitionRowCount number of rows in the current partition    */
specifier|public
name|WinAggResetContextImpl
parameter_list|(
name|BlockBuilder
name|block
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|accumulator
parameter_list|,
name|Expression
name|index
parameter_list|,
name|Expression
name|startIndex
parameter_list|,
name|Expression
name|endIndex
parameter_list|,
name|Expression
name|hasRows
parameter_list|,
name|Expression
name|frameRowCount
parameter_list|,
name|Expression
name|partitionRowCount
parameter_list|)
block|{
name|super
argument_list|(
name|block
argument_list|,
name|accumulator
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|startIndex
operator|=
name|startIndex
expr_stmt|;
name|this
operator|.
name|endIndex
operator|=
name|endIndex
expr_stmt|;
name|this
operator|.
name|frameRowCount
operator|=
name|frameRowCount
expr_stmt|;
name|this
operator|.
name|partitionRowCount
operator|=
name|partitionRowCount
expr_stmt|;
name|this
operator|.
name|hasRows
operator|=
name|hasRows
expr_stmt|;
block|}
specifier|public
name|Expression
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|Expression
name|startIndex
parameter_list|()
block|{
return|return
name|startIndex
return|;
block|}
specifier|public
name|Expression
name|endIndex
parameter_list|()
block|{
return|return
name|endIndex
return|;
block|}
specifier|public
name|Expression
name|hasRows
parameter_list|()
block|{
return|return
name|hasRows
return|;
block|}
specifier|public
name|Expression
name|getFrameRowCount
parameter_list|()
block|{
return|return
name|frameRowCount
return|;
block|}
specifier|public
name|Expression
name|getPartitionRowCount
parameter_list|()
block|{
return|return
name|partitionRowCount
return|;
block|}
block|}
end_class

end_unit

