begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Sort based physical implementation of {@link Aggregate} in  * {@link EnumerableConvention enumerable calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|EnumerableSortedAggregate
extends|extends
name|Aggregate
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableSortedAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableSortedAggregate
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
return|return
operator|new
name|EnumerableSortedAggregate
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|passThroughTraits
parameter_list|(
specifier|final
name|RelTraitSet
name|required
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSimple
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RelTraitSet
name|inputTraits
init|=
name|getInput
argument_list|()
operator|.
name|getTraitSet
argument_list|()
decl_stmt|;
name|RelCollation
name|collation
init|=
name|required
operator|.
name|getCollation
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|requiredKeys
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|ordinals
argument_list|(
name|collation
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|groupKeys
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|groupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|source
argument_list|(
name|groupSet
operator|.
name|toList
argument_list|()
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredKeys
operator|.
name|equals
argument_list|(
name|groupKeys
argument_list|)
condition|)
block|{
name|RelCollation
name|inputCollation
init|=
name|RexUtil
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|collation
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|required
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|inputTraits
operator|.
name|replace
argument_list|(
name|inputCollation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|groupKeys
operator|.
name|contains
argument_list|(
name|requiredKeys
argument_list|)
condition|)
block|{
comment|// group by a,b,c order by c,b
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
decl_stmt|;
name|groupKeys
operator|.
name|except
argument_list|(
name|requiredKeys
argument_list|)
operator|.
name|forEach
argument_list|(
name|k
lambda|->
name|list
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RelCollation
name|aggCollation
init|=
name|RelCollations
operator|.
name|of
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|RelCollation
name|inputCollation
init|=
name|RexUtil
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|aggCollation
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|traitSet
operator|.
name|replace
argument_list|(
name|aggCollation
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|inputTraits
operator|.
name|replace
argument_list|(
name|inputCollation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// Group keys doesn't contain all the required keys, e.g.
comment|// group by a,b order by a,b,c
comment|// nothing we can do to propagate traits to child nodes.
return|return
literal|null
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"EnumerableSortedAggregate"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

