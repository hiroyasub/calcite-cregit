begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|impl
operator|.
name|AggResultContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Sort based physical implementation of {@link Aggregate} in  * {@link EnumerableConvention enumerable calling convention}. */
end_comment

begin_class
specifier|public
class|class
name|EnumerableSortedAggregate
extends|extends
name|EnumerableAggregateBase
implements|implements
name|EnumerableRel
block|{
specifier|public
name|EnumerableSortedAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
assert|;
block|}
annotation|@
name|Override
specifier|public
name|EnumerableSortedAggregate
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
return|return
operator|new
name|EnumerableSortedAggregate
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|passThroughTraits
parameter_list|(
specifier|final
name|RelTraitSet
name|required
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSimple
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RelTraitSet
name|inputTraits
init|=
name|getInput
argument_list|()
operator|.
name|getTraitSet
argument_list|()
decl_stmt|;
name|RelCollation
name|collation
init|=
name|required
operator|.
name|getCollation
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|requiredKeys
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|ordinals
argument_list|(
name|collation
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|groupKeys
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|groupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|source
argument_list|(
name|groupSet
operator|.
name|toList
argument_list|()
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredKeys
operator|.
name|equals
argument_list|(
name|groupKeys
argument_list|)
condition|)
block|{
name|RelCollation
name|inputCollation
init|=
name|RexUtil
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|collation
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|required
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|inputTraits
operator|.
name|replace
argument_list|(
name|inputCollation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|groupKeys
operator|.
name|contains
argument_list|(
name|requiredKeys
argument_list|)
condition|)
block|{
comment|// group by a,b,c order by c,b
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
decl_stmt|;
name|groupKeys
operator|.
name|except
argument_list|(
name|requiredKeys
argument_list|)
operator|.
name|forEach
argument_list|(
name|k
lambda|->
name|list
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RelCollation
name|aggCollation
init|=
name|RelCollations
operator|.
name|of
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|RelCollation
name|inputCollation
init|=
name|RexUtil
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|aggCollation
argument_list|)
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|traitSet
operator|.
name|replace
argument_list|(
name|aggCollation
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|inputTraits
operator|.
name|replace
argument_list|(
name|inputCollation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// Group keys doesn't contain all the required keys, e.g.
comment|// group by a,b order by a,b,c
comment|// nothing we can do to propagate traits to child nodes.
return|return
literal|null
return|;
block|}
specifier|public
name|Result
name|implement
parameter_list|(
name|EnumerableRelImplementor
name|implementor
parameter_list|,
name|Prefer
name|pref
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Aggregate
operator|.
name|isSimple
argument_list|(
name|this
argument_list|)
condition|)
block|{
throw|throw
name|Util
operator|.
name|needToImplement
argument_list|(
literal|"EnumerableSortedAggregate"
argument_list|)
throw|;
block|}
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
name|implementor
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|EnumerableRel
name|child
init|=
operator|(
name|EnumerableRel
operator|)
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|implementor
operator|.
name|visitChild
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|child
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|Expression
name|childExp
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"child"
argument_list|,
name|result
operator|.
name|block
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|physType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|pref
operator|.
name|preferCustom
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|inputPhysType
init|=
name|result
operator|.
name|physType
decl_stmt|;
name|ParameterExpression
name|parameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"a0"
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|keyPhysType
init|=
name|inputPhysType
operator|.
name|project
argument_list|(
name|groupSet
operator|.
name|asList
argument_list|()
argument_list|,
name|getGroupType
argument_list|()
operator|!=
name|Group
operator|.
name|SIMPLE
argument_list|,
name|JavaRowFormat
operator|.
name|LIST
argument_list|)
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|getGroupCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggImpState
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggCalls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|AggregateCall
argument_list|>
name|call
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|)
control|)
block|{
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|AggImpState
argument_list|(
name|call
operator|.
name|i
argument_list|,
name|call
operator|.
name|e
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Function0<Object[]> accumulatorInitializer =
comment|//     new Function0<Object[]>() {
comment|//         public Object[] apply() {
comment|//             return new Object[] {0, 0};
comment|//         }
comment|//     };
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|initExpressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|initBlock
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|aggStateTypes
init|=
name|createAggStateTypes
argument_list|(
name|initExpressions
argument_list|,
name|initBlock
argument_list|,
name|aggs
argument_list|,
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|accPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|typeFactory
argument_list|,
name|typeFactory
operator|.
name|createSyntheticType
argument_list|(
name|aggStateTypes
argument_list|)
argument_list|)
decl_stmt|;
name|declareParentAccumulator
argument_list|(
name|initExpressions
argument_list|,
name|initBlock
argument_list|,
name|accPhysType
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|accumulatorInitializer
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"accumulatorInitializer"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function0
operator|.
name|class
argument_list|,
name|initBlock
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Function2<Object[], Employee, Object[]> accumulatorAdder =
comment|//     new Function2<Object[], Employee, Object[]>() {
comment|//         public Object[] apply(Object[] acc, Employee in) {
comment|//              acc[0] = ((Integer) acc[0]) + 1;
comment|//              acc[1] = ((Integer) acc[1]) + in.salary;
comment|//             return acc;
comment|//         }
comment|//     };
specifier|final
name|ParameterExpression
name|inParameter
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|inputPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|acc_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|accPhysType
operator|.
name|getJavaRowType
argument_list|()
argument_list|,
literal|"acc"
argument_list|)
decl_stmt|;
name|createAccumulatorAdders
argument_list|(
name|inParameter
argument_list|,
name|aggs
argument_list|,
name|accPhysType
argument_list|,
name|acc_
argument_list|,
name|inputPhysType
argument_list|,
name|builder
argument_list|,
name|implementor
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
specifier|final
name|ParameterExpression
name|lambdaFactory
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|AggregateLambdaFactory
operator|.
name|class
argument_list|,
name|builder
operator|.
name|newName
argument_list|(
literal|"lambdaFactory"
argument_list|)
argument_list|)
decl_stmt|;
name|implementLambdaFactory
argument_list|(
name|builder
argument_list|,
name|inputPhysType
argument_list|,
name|aggs
argument_list|,
name|accumulatorInitializer
argument_list|,
literal|false
argument_list|,
name|lambdaFactory
argument_list|)
expr_stmt|;
specifier|final
name|BlockBuilder
name|resultBlock
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|results
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|key_
decl_stmt|;
specifier|final
name|Type
name|keyType
init|=
name|keyPhysType
operator|.
name|getJavaRowType
argument_list|()
decl_stmt|;
name|key_
operator|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|keyType
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|groupCount
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Expression
name|ref
init|=
name|keyPhysType
operator|.
name|fieldReference
argument_list|(
name|key_
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|AggImpState
name|agg
range|:
name|aggs
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|agg
operator|.
name|implementor
operator|.
name|implementResult
argument_list|(
name|agg
operator|.
name|context
argument_list|,
operator|new
name|AggResultContextImpl
argument_list|(
name|resultBlock
argument_list|,
name|agg
operator|.
name|call
argument_list|,
name|agg
operator|.
name|state
argument_list|,
name|key_
argument_list|,
name|keyPhysType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultBlock
operator|.
name|add
argument_list|(
name|physType
operator|.
name|record
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|keySelector_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"keySelector"
argument_list|,
name|inputPhysType
operator|.
name|generateSelector
argument_list|(
name|parameter
argument_list|,
name|groupSet
operator|.
name|asList
argument_list|()
argument_list|,
name|keyPhysType
operator|.
name|getFormat
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Generate the appropriate key Comparator. In the case of NULL values
comment|// in group keys, the comparator must be able to support NULL values by giving a
comment|// consistent sort ordering.
specifier|final
name|Expression
name|comparator
init|=
name|keyPhysType
operator|.
name|generateComparator
argument_list|(
name|getTraitSet
argument_list|()
operator|.
name|getCollation
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|resultSelector_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"resultSelector"
argument_list|,
name|Expressions
operator|.
name|lambda
argument_list|(
name|Function2
operator|.
name|class
argument_list|,
name|resultBlock
operator|.
name|toBlock
argument_list|()
argument_list|,
name|key_
argument_list|,
name|acc_
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|childExp
argument_list|,
name|BuiltInMethod
operator|.
name|SORTED_GROUP_BY
operator|.
name|method
argument_list|,
name|Expressions
operator|.
name|list
argument_list|(
name|keySelector_
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_INITIALIZER
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_ADDER
operator|.
name|method
argument_list|)
argument_list|,
name|Expressions
operator|.
name|call
argument_list|(
name|lambdaFactory
argument_list|,
name|BuiltInMethod
operator|.
name|AGG_LAMBDA_FACTORY_ACC_RESULT_SELECTOR
operator|.
name|method
argument_list|,
name|resultSelector_
argument_list|)
argument_list|,
name|comparator
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|implementor
operator|.
name|result
argument_list|(
name|physType
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

