begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectiveVisitor
import|;
end_import

begin_comment
comment|/** Abstract implementation of {@link org.apache.calcite.server.DdlExecutor}. */
end_comment

begin_class
specifier|public
class|class
name|DdlExecutorImpl
implements|implements
name|DdlExecutor
implements|,
name|ReflectiveVisitor
block|{
comment|/** Creates a DdlExecutorImpl.    * Protected only to allow sub-classing;    * use a singleton instance where possible. */
specifier|protected
name|DdlExecutorImpl
parameter_list|()
block|{
block|}
comment|/** Dispatches calls to the appropriate method based on the type of the    * first argument. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"method.invocation.invalid"
block|,
literal|"argument.type.incompatible"
block|}
argument_list|)
specifier|private
specifier|final
name|ReflectUtil
operator|.
name|MethodDispatcher
argument_list|<
name|Void
argument_list|>
name|dispatcher
init|=
name|ReflectUtil
operator|.
name|createMethodDispatcher
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|this
argument_list|,
literal|"execute"
argument_list|,
name|SqlNode
operator|.
name|class
argument_list|,
name|CalcitePrepare
operator|.
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|executeDdl
parameter_list|(
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|,
name|SqlNode
name|node
parameter_list|)
block|{
name|dispatcher
operator|.
name|invoke
argument_list|(
name|node
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/** Template for methods that execute DDL commands.    *    *<p>The base implementation throws {@link UnsupportedOperationException}    * because a {@link SqlNode} is not DDL, but overloaded methods such as    * {@code public void execute(SqlCreateFoo, CalcitePrepare.Context)} are    * called via reflection. */
specifier|public
name|void
name|execute
parameter_list|(
name|SqlNode
name|node
parameter_list|,
name|CalcitePrepare
operator|.
name|Context
name|context
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"DDL not supported: "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

