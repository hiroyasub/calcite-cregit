begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|model
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonSubTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonTypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Schema schema element.  *  * @see JsonRoot Description of schema elements  */
end_comment

begin_class
annotation|@
name|JsonTypeInfo
argument_list|(
name|use
operator|=
name|JsonTypeInfo
operator|.
name|Id
operator|.
name|NAME
argument_list|,
name|property
operator|=
literal|"type"
argument_list|,
name|defaultImpl
operator|=
name|JsonMapSchema
operator|.
name|class
argument_list|)
annotation|@
name|JsonSubTypes
argument_list|(
block|{
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|value
operator|=
name|JsonMapSchema
operator|.
name|class
argument_list|,
name|name
operator|=
literal|"map"
argument_list|)
block|,
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|value
operator|=
name|JsonJdbcSchema
operator|.
name|class
argument_list|,
name|name
operator|=
literal|"jdbc"
argument_list|)
block|,
annotation|@
name|JsonSubTypes
operator|.
name|Type
argument_list|(
name|value
operator|=
name|JsonCustomSchema
operator|.
name|class
argument_list|,
name|name
operator|=
literal|"custom"
argument_list|)
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|JsonSchema
block|{
specifier|public
name|String
name|name
decl_stmt|;
comment|/** SQL-path. May be null, or a list, each element of which is a string or a    * string-list. */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|path
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|JsonMaterialization
argument_list|>
name|materializations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|JsonLattice
argument_list|>
name|lattices
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/** Whether to cache metadata (tables, functions and sub-schemas) generated    * by this schema. Default value is {@code true}.    *    *<p>If {@code false}, Calcite will go back to the schema each time it needs    * metadata, for example, each time it needs a list of tables in order to    * validate a query against the schema.</p>    *    *<p>If {@code true}, Calcite will cache the metadata the first time it reads    * it. This can lead to better performance, especially if name-matching is    * case-insensitive    * (see {@link org.apache.calcite.config.Lex#caseSensitive}).    * However, it also leads to the problem of cache staleness.    * A particular schema implementation can override the    * {@link org.apache.calcite.schema.Schema#contentsHaveChangedSince(long, long)}    * method to tell Calcite when it should consider its cache to be out of    * date.</p>    *    *<p>Tables, functions and sub-schemas explicitly created in a schema are    * not affected by this caching mechanism. They always appear in the schema    * immediately, and are never flushed.</p>    */
specifier|public
name|Boolean
name|cache
decl_stmt|;
specifier|public
specifier|abstract
name|void
name|accept
parameter_list|(
name|ModelHandler
name|handler
parameter_list|)
function_decl|;
specifier|public
name|void
name|visitChildren
parameter_list|(
name|ModelHandler
name|modelHandler
parameter_list|)
block|{
for|for
control|(
name|JsonLattice
name|jsonLattice
range|:
name|lattices
control|)
block|{
name|jsonLattice
operator|.
name|accept
argument_list|(
name|modelHandler
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JsonMaterialization
name|jsonMaterialization
range|:
name|materializations
control|)
block|{
name|jsonMaterialization
operator|.
name|accept
argument_list|(
name|modelHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JsonSchema.java
end_comment

end_unit

