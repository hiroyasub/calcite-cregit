begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|DeriveMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Physical node in a planner that is capable of doing  * physical trait propagation and derivation.  *  *<p>How to use?</p>  *  *<ol>  *<li>Enable top-down optimization by setting  *   {@link org.apache.calcite.plan.volcano.VolcanoPlanner#setTopDownOpt(boolean)}.  *</li>  *  *<li>Let your convention's rel interface extends {@link PhysicalNode},  *   see {@link org.apache.calcite.adapter.enumerable.EnumerableRel} as  *   an example.</li>  *  *<li>Each physical operator overrides any one of the two methods:  *   {@link PhysicalNode#passThrough(RelTraitSet)} or  *   {@link PhysicalNode#passThroughTraits(RelTraitSet)} depending on  *   your needs.</li>  *  *<li>Choose derive mode for each physical operator by overriding  *   {@link PhysicalNode#getDeriveMode()}.</li>  *  *<li>If the derive mode is {@link DeriveMode#OMAKASE}, override  *   method {@link PhysicalNode#derive(List)} in the physical operator,  *   otherwise, override {@link PhysicalNode#derive(RelTraitSet, int)}  *   or {@link PhysicalNode#deriveTraits(RelTraitSet, int)}.</li>  *  *<li>Mark your enforcer operator by overriding {@link RelNode#isEnforcer()},  *   see {@link Sort#isEnforcer()} as an example. This is important,  *   because it can help {@code VolcanoPlanner} avoid unnecessary  *   trait propagation and derivation, therefore improve optimization  *   efficiency.</li>  *  *<li>Implement {@link Convention#enforce(RelNode, RelTraitSet)}  *   in your convention, which generates appropriate physical enforcer.  *   See {@link org.apache.calcite.adapter.enumerable.EnumerableConvention}  *   as example. Simply return {@code null} if you don't want physical  *   trait enforcement.</li>  *</ol>  */
end_comment

begin_interface
specifier|public
interface|interface
name|PhysicalNode
extends|extends
name|RelNode
block|{
comment|/**    * Pass required traitset from parent node to child nodes,    * returns new node after traits is passed down.    */
specifier|default
name|RelNode
name|passThrough
parameter_list|(
name|RelTraitSet
name|required
parameter_list|)
block|{
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|p
init|=
name|passThroughTraits
argument_list|(
name|required
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|size
init|=
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|size
operator|==
name|p
operator|.
name|right
operator|.
name|size
argument_list|()
assert|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|n
init|=
name|RelOptRule
operator|.
name|convert
argument_list|(
name|getInput
argument_list|(
name|i
argument_list|)
argument_list|,
name|p
operator|.
name|right
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
argument_list|(
name|p
operator|.
name|left
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/**    * Pass required traitset from parent node to child nodes,    * returns a pair of traits after traits is passed down.    *    *<p>Pair.left: the new traitset    *<p>Pair.right: the list of required traitsets for child nodes    */
specifier|default
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|passThroughTraits
parameter_list|(
name|RelTraitSet
name|required
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#passThroughTraits() is not implemented."
argument_list|)
throw|;
block|}
comment|/**    * Derive traitset from child node, returns new node after    * traits derivation.    */
specifier|default
name|RelNode
name|derive
parameter_list|(
name|RelTraitSet
name|childTraits
parameter_list|,
name|int
name|childId
parameter_list|)
block|{
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|p
init|=
name|deriveTraits
argument_list|(
name|childTraits
argument_list|,
name|childId
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|size
init|=
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|size
operator|==
name|p
operator|.
name|right
operator|.
name|size
argument_list|()
assert|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|node
init|=
name|getInput
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|node
operator|=
name|RelOptRule
operator|.
name|convert
argument_list|(
name|node
argument_list|,
name|p
operator|.
name|right
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
argument_list|(
name|p
operator|.
name|left
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/**    * Derive traitset from child node, returns a pair of traits after    * traits derivation.    *    *<p>Pair.left: the new traitset    *<p>Pair.right: the list of required traitsets for child nodes    */
specifier|default
name|Pair
argument_list|<
name|RelTraitSet
argument_list|,
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|deriveTraits
parameter_list|(
name|RelTraitSet
name|childTraits
parameter_list|,
name|int
name|childId
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#deriveTraits() is not implemented."
argument_list|)
throw|;
block|}
comment|/**    * Given a list of child traitsets,    * inputTraits.size() == getInput().size(),    * returns node list after traits derivation. This method is called    * ONLY when the derive mode is OMAKASE.    */
specifier|default
name|List
argument_list|<
name|RelNode
argument_list|>
name|derive
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|inputTraits
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#derive() is not implemented."
argument_list|)
throw|;
block|}
comment|/**    * Returns mode of derivation.    */
specifier|default
name|DeriveMode
name|getDeriveMode
parameter_list|()
block|{
return|return
name|DeriveMode
operator|.
name|LEFT_FIRST
return|;
block|}
block|}
end_interface

end_unit

