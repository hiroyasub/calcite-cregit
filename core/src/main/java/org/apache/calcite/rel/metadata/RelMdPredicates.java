begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RexImplicationChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Strong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Intersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Minus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexSimplify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUnknownAs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * Utility to infer Predicates that are applicable above a RelNode.  *  *<p>This is currently used by  * {@link org.apache.calcite.rel.rules.JoinPushTransitivePredicatesRule} to  * infer<em>Predicates</em> that can be inferred from one side of a Join  * to the other.  *  *<p>The PullUp Strategy is sound but not complete. Here are some of the  * limitations:  *<ol>  *  *<li> For Aggregations we only PullUp predicates that only contain  * Grouping Keys. This can be extended to infer predicates on Aggregation  * expressions from  expressions on the aggregated columns. For e.g.  *<pre>  * select a, max(b) from R1 where b&gt; 7  *&rarr; max(b)&gt; 7 or max(b) is null  *</pre>  *  *<li> For Projections we only look at columns that are projected without  * any function applied. So:  *<pre>  * select a from R1 where a&gt; 7  *&rarr; "a&gt; 7" is pulled up from the Projection.  * select a + 1 from R1 where a + 1&gt; 7  *&rarr; "a + 1 gt; 7" is not pulled up  *</pre>  *  *<li> There are several restrictions on Joins:  *<ul>  *<li> We only pullUp inferred predicates for now. Pulling up existing  *   predicates causes an explosion of duplicates. The existing predicates  *   are pushed back down as new predicates. Once we have rules to eliminate  *   duplicate Filter conditions, we should pullUp all predicates.  *  *<li> For Left Outer: we infer new predicates from the left and set them  *   as applicable on the Right side. No predicates are pulledUp.  *  *<li> Right Outer Joins are handled in an analogous manner.  *  *<li> For Full Outer Joins no predicates are pulledUp or inferred.  *</ul>  *</ol>  */
end_comment

begin_class
specifier|public
class|class
name|RelMdPredicates
implements|implements
name|MetadataHandler
argument_list|<
name|BuiltInMetadata
operator|.
name|Predicates
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|BuiltInMethod
operator|.
name|PREDICATES
operator|.
name|method
argument_list|,
operator|new
name|RelMdPredicates
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|EMPTY_LIST
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MetadataDef
argument_list|<
name|BuiltInMetadata
operator|.
name|Predicates
argument_list|>
name|getDef
parameter_list|()
block|{
return|return
name|BuiltInMetadata
operator|.
name|Predicates
operator|.
name|DEF
return|;
block|}
comment|/** Catch-all implementation for    * {@link BuiltInMetadata.Predicates#getPredicates()},    * invoked using reflection.    *    * @see org.apache.calcite.rel.metadata.RelMetadataQuery#getPulledUpPredicates(RelNode)    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|HepRelVertex
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|rel
operator|.
name|getCurrentRel
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a table scan.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|TableScan
name|table
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
comment|/**    * Infers predicates for a project.    *    *<ol>    *<li>create a mapping from input to projection. Map only positions that    * directly reference an input column.    *<li>Expressions that only contain above columns are retained in the    * Project's pullExpressions list.    *<li>For e.g. expression 'a + e = 9' below will not be pulled up because 'e'    * is not in the projection list.    *    *<blockquote><pre>    * inputPullUpExprs:      {a&gt; 7, b + c&lt; 10, a + e = 9}    * projectionExprs:       {a, b, c, e / 2}    * projectionPullupExprs: {a&gt; 7, b + c&lt; 10}    *</pre></blockquote>    *    *</ol>    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Project
name|project
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|RelNode
name|input
init|=
name|project
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|inputInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projectPullUpPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|columnsMappedBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Mapping
name|m
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|expr
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|expr
operator|.
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
name|int
name|sIdx
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|expr
operator|.
name|e
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|sIdx
argument_list|,
name|expr
operator|.
name|i
argument_list|)
expr_stmt|;
name|columnsMappedBuilder
operator|.
name|set
argument_list|(
name|sIdx
argument_list|)
expr_stmt|;
comment|// Project can also generate constants. We need to include them.
block|}
if|else if
condition|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|expr
operator|.
name|e
argument_list|)
condition|)
block|{
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|expr
operator|.
name|e
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|,
name|expr
operator|.
name|e
argument_list|)
decl_stmt|;
specifier|final
name|SqlOperator
name|op
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
operator|||
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
else|:
name|SqlStdOperatorTable
operator|.
name|EQUALS
decl_stmt|;
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Go over childPullUpPredicates. If a predicate only contains columns in
comment|// 'columnsMapped' construct a new predicate based on mapping.
specifier|final
name|ImmutableBitSet
name|columnsMapped
init|=
name|columnsMappedBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|inputInfo
operator|.
name|pulledUpPredicates
control|)
block|{
name|RexNode
name|r2
init|=
name|projectPredicate
argument_list|(
name|rexBuilder
argument_list|,
name|input
argument_list|,
name|r
argument_list|,
name|columnsMapped
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r2
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|r2
operator|=
name|r2
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|m
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|r2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|projectPullUpPredicates
argument_list|)
return|;
block|}
comment|/** Converts a predicate on a particular set of columns into a predicate on    * a subset of those columns, weakening if necessary.    *    *<p>If not possible to simplify, returns {@code true}, which is the weakest    * possible predicate.    *    *<p>Examples:<ol>    *<li>The predicate {@code $7 = $9} on columns [7]    *     becomes {@code $7 is not null}    *<li>The predicate {@code $7 = $9 + $11} on columns [7, 9]    *     becomes {@code $7 is not null or $9 is not null}    *<li>The predicate {@code $7 = $9 and $9 = 5} on columns [7] becomes    *   {@code $7 = 5}    *<li>The predicate    *   {@code $7 = $9 and ($9 = $1 or $9 = $2) and $1> 3 and $2> 10}    *   on columns [7] becomes {@code $7> 3}    *</ol>    *    *<p>We currently only handle examples 1 and 2.    *    * @param rexBuilder Rex builder    * @param input Input relational expression    * @param r Predicate expression    * @param columnsMapped Columns which the final predicate can reference    * @return Predicate expression narrowed to reference only certain columns    */
specifier|private
name|RexNode
name|projectPredicate
parameter_list|(
specifier|final
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|r
parameter_list|,
name|ImmutableBitSet
name|columnsMapped
parameter_list|)
block|{
name|ImmutableBitSet
name|rCols
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnsMapped
operator|.
name|contains
argument_list|(
name|rCols
argument_list|)
condition|)
block|{
comment|// All required columns are present. No need to weaken.
return|return
name|r
return|;
block|}
if|if
condition|(
name|columnsMapped
operator|.
name|intersects
argument_list|(
name|rCols
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
range|:
name|columnsMapped
operator|.
name|intersect
argument_list|(
name|rCols
argument_list|)
control|)
block|{
if|if
condition|(
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
operator|&&
name|Strong
operator|.
name|isNull
argument_list|(
name|r
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
argument_list|,
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|list
argument_list|)
return|;
block|}
block|}
comment|// Cannot weaken to anything non-trivial
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**    * Add the Filter condition to the pulledPredicates list from the input.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|RelNode
name|input
init|=
name|filter
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|inputInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|Util
operator|.
name|first
argument_list|(
name|inputInfo
argument_list|,
name|RelOptPredicateList
operator|.
name|EMPTY
argument_list|)
operator|.
name|union
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|RexUtil
operator|.
name|retainDeterministic
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a {@link org.apache.calcite.rel.core.Join} (including    * {@code SemiJoin}).    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Join
name|join
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RelOptCluster
name|cluster
init|=
name|join
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexExecutor
name|executor
init|=
name|Util
operator|.
name|first
argument_list|(
name|cluster
operator|.
name|getPlanner
argument_list|()
operator|.
name|getExecutor
argument_list|()
argument_list|,
name|RexUtil
operator|.
name|EXECUTOR
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|left
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|right
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|leftInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|left
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|rightInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|JoinConditionBasedPredicateInference
name|joinInference
init|=
operator|new
name|JoinConditionBasedPredicateInference
argument_list|(
name|join
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|leftInfo
operator|.
name|pulledUpPredicates
argument_list|)
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|rightInfo
operator|.
name|pulledUpPredicates
argument_list|)
argument_list|,
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|EMPTY
argument_list|,
name|executor
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|joinInference
operator|.
name|inferPredicates
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for an Aggregate.    *    *<p>Pulls up predicates that only contains references to columns in the    * GroupSet. For e.g.    *    *<blockquote><pre>    * inputPullUpExprs : { a&gt; 7, b + c&lt; 10, a + e = 9}    * groupSet         : { a, b}    * pulledUpExprs    : { a&gt; 7}    *</pre></blockquote>    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Aggregate
name|agg
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|RelNode
name|input
init|=
name|agg
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|agg
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|inputInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|aggPullUpPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|groupKeys
init|=
name|agg
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// "GROUP BY ()" can convert an empty relation to a non-empty relation, so
comment|// it is not valid to pull up predicates. In particular, consider the
comment|// predicate "false": it is valid on all input rows (trivially - there are
comment|// no rows!) but not on the output (there is one row).
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
name|Mapping
name|m
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
range|:
name|groupKeys
control|)
block|{
name|m
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RexNode
name|r
range|:
name|inputInfo
operator|.
name|pulledUpPredicates
control|)
block|{
name|ImmutableBitSet
name|rCols
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupKeys
operator|.
name|contains
argument_list|(
name|rCols
argument_list|)
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|m
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|aggPullUpPredicates
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|aggPullUpPredicates
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a Union.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Union
name|union
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|union
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|RexNode
argument_list|>
name|finalPredicates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|finalResidualPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|input
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|union
operator|.
name|getInputs
argument_list|()
argument_list|)
control|)
block|{
name|RelOptPredicateList
name|info
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
operator|.
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|pulledUpPredicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|predicates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|residualPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|pred
range|:
name|info
operator|.
name|pulledUpPredicates
control|)
block|{
if|if
condition|(
name|input
operator|.
name|i
operator|==
literal|0
condition|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|pred
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|finalPredicates
operator|.
name|contains
argument_list|(
name|pred
argument_list|)
condition|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|pred
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|residualPredicates
operator|.
name|add
argument_list|(
name|pred
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add new residual predicates
name|finalResidualPredicates
operator|.
name|add
argument_list|(
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|residualPredicates
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add those that are not part of the final set to residual
for|for
control|(
name|RexNode
name|e
range|:
name|finalPredicates
control|)
block|{
if|if
condition|(
operator|!
name|predicates
operator|.
name|contains
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// This node was in previous union inputs, but it is not in this one
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|input
operator|.
name|i
condition|;
name|j
operator|++
control|)
block|{
name|finalResidualPredicates
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|finalResidualPredicates
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Final predicates
name|finalPredicates
operator|=
name|predicates
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|predicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|finalPredicates
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|union
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexExecutor
name|executor
init|=
name|Util
operator|.
name|first
argument_list|(
name|cluster
operator|.
name|getPlanner
argument_list|()
operator|.
name|getExecutor
argument_list|()
argument_list|,
name|RexUtil
operator|.
name|EXECUTOR
argument_list|)
decl_stmt|;
name|RexNode
name|disjunctivePredicate
init|=
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|EMPTY
argument_list|,
name|executor
argument_list|)
operator|.
name|simplifyUnknownAs
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|finalResidualPredicates
argument_list|)
argument_list|,
name|RexUnknownAs
operator|.
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|disjunctivePredicate
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|disjunctivePredicate
argument_list|)
expr_stmt|;
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a Intersect.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Intersect
name|intersect
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|intersect
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexExecutor
name|executor
init|=
name|Util
operator|.
name|first
argument_list|(
name|intersect
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getExecutor
argument_list|()
argument_list|,
name|RexUtil
operator|.
name|EXECUTOR
argument_list|)
decl_stmt|;
specifier|final
name|RexImplicationChecker
name|rexImplicationChecker
init|=
operator|new
name|RexImplicationChecker
argument_list|(
name|rexBuilder
argument_list|,
name|executor
argument_list|,
name|intersect
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexNode
argument_list|>
name|finalPredicates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|input
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|intersect
operator|.
name|getInputs
argument_list|()
argument_list|)
control|)
block|{
name|RelOptPredicateList
name|info
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
operator|.
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|pulledUpPredicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|RexNode
name|pred
range|:
name|info
operator|.
name|pulledUpPredicates
control|)
block|{
if|if
condition|(
name|finalPredicates
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|finalPred
lambda|->
name|rexImplicationChecker
operator|.
name|implies
argument_list|(
name|finalPred
argument_list|,
name|pred
argument_list|)
argument_list|)
condition|)
block|{
comment|// There's already a stricter predicate in finalPredicates,
comment|// thus no need to count this one.
continue|continue;
block|}
comment|// Remove looser predicate and add this one into finalPredicates
name|finalPredicates
operator|=
name|finalPredicates
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|finalPred
lambda|->
operator|!
name|rexImplicationChecker
operator|.
name|implies
argument_list|(
name|pred
argument_list|,
name|finalPred
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
name|finalPredicates
operator|.
name|add
argument_list|(
name|pred
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|finalPredicates
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a Minus.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Minus
name|minus
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|minus
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a Sort.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RelNode
name|input
init|=
name|sort
operator|.
name|getInput
argument_list|()
decl_stmt|;
return|return
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a TableModify.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|TableModify
name|tableModify
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|tableModify
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for an Exchange.    */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RelNode
name|input
init|=
name|exchange
operator|.
name|getInput
argument_list|()
decl_stmt|;
return|return
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
return|;
block|}
comment|// CHECKSTYLE: IGNORE 1
comment|/**    * Returns the    * {@link BuiltInMetadata.Predicates#getPredicates()}    * statistic.    * @see RelMetadataQuery#getPulledUpPredicates(RelNode) */
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|RelSubset
name|r
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Bug
operator|.
name|CALCITE_1048_FIXED
condition|)
block|{
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|r
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelOptPredicateList
name|list
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RelNode
name|r2
range|:
name|r
operator|.
name|getRels
argument_list|()
control|)
block|{
name|RelOptPredicateList
name|list2
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|list2
operator|!=
literal|null
condition|)
block|{
name|list
operator|=
name|list
operator|==
literal|null
condition|?
name|list2
else|:
name|list
operator|.
name|union
argument_list|(
name|rexBuilder
argument_list|,
name|list2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Util
operator|.
name|first
argument_list|(
name|list
argument_list|,
name|RelOptPredicateList
operator|.
name|EMPTY
argument_list|)
return|;
block|}
comment|/**    * Utility to infer predicates from one side of the join that apply on the    * other side.    *    *<p>Contract is:<ul>    *    *<li>initialize with a {@link org.apache.calcite.rel.core.Join} and    * optional predicates applicable on its left and right subtrees.    *    *<li>you can    * then ask it for equivalentPredicate(s) given a predicate.    *    *</ul>    *    *<p>So for:    *<ol>    *<li>'<code>R1(x) join R2(y) on x = y</code>' a call for    * equivalentPredicates on '<code>x&gt; 7</code>' will return '    *<code>[y&gt; 7]</code>'    *<li>'<code>R1(x) join R2(y) on x = y join R3(z) on y = z</code>' a call for    * equivalentPredicates on the second join '<code>x&gt; 7</code>' will return    *</ol>    */
specifier|static
class|class
name|JoinConditionBasedPredicateInference
block|{
specifier|final
name|Join
name|joinRel
decl_stmt|;
specifier|final
name|int
name|nSysFields
decl_stmt|;
specifier|final
name|int
name|nFieldsLeft
decl_stmt|;
specifier|final
name|int
name|nFieldsRight
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|leftFieldsBitSet
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|rightFieldsBitSet
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|allFieldsBitSet
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|BitSet
argument_list|>
name|equivalence
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|ImmutableBitSet
argument_list|>
name|exprFields
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|allExprs
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|equalityPredicates
decl_stmt|;
specifier|final
name|RexNode
name|leftChildPredicates
decl_stmt|;
specifier|final
name|RexNode
name|rightChildPredicates
decl_stmt|;
specifier|final
name|RexSimplify
name|simplify
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
name|JoinConditionBasedPredicateInference
parameter_list|(
name|Join
name|joinRel
parameter_list|,
name|RexNode
name|leftPredicates
parameter_list|,
name|RexNode
name|rightPredicates
parameter_list|,
name|RexSimplify
name|simplify
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|joinRel
operator|=
name|joinRel
expr_stmt|;
name|this
operator|.
name|simplify
operator|=
name|simplify
expr_stmt|;
name|nFieldsLeft
operator|=
name|joinRel
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|nFieldsRight
operator|=
name|joinRel
operator|.
name|getRight
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|nSysFields
operator|=
name|joinRel
operator|.
name|getSystemFieldList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|leftFieldsBitSet
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|nSysFields
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|)
expr_stmt|;
name|rightFieldsBitSet
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|)
expr_stmt|;
name|allFieldsBitSet
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|)
expr_stmt|;
name|exprFields
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|allExprs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|leftPredicates
operator|==
literal|null
condition|)
block|{
name|leftChildPredicates
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Mappings
operator|.
name|TargetMapping
name|leftMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
name|nSysFields
argument_list|,
literal|0
argument_list|,
name|nFieldsLeft
argument_list|)
decl_stmt|;
name|leftChildPredicates
operator|=
name|leftPredicates
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|leftMapping
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allExprs
operator|.
name|add
argument_list|(
name|leftChildPredicates
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
control|)
block|{
name|exprFields
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|allExprs
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rightPredicates
operator|==
literal|null
condition|)
block|{
name|rightChildPredicates
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Mappings
operator|.
name|TargetMapping
name|rightMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
literal|0
argument_list|,
name|nFieldsRight
argument_list|)
decl_stmt|;
name|rightChildPredicates
operator|=
name|rightPredicates
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|rightMapping
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allExprs
operator|.
name|add
argument_list|(
name|rightChildPredicates
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rightChildPredicates
argument_list|)
control|)
block|{
name|exprFields
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|allExprs
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|equivalence
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|equalityPredicates
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
condition|;
name|i
operator|++
control|)
block|{
name|equivalence
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|BitSets
operator|.
name|of
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Only process equivalences found in the join conditions. Processing
comment|// Equivalences from the left or right side infer predicates that are
comment|// already present in the Tree below the join.
name|RexBuilder
name|rexBuilder
init|=
name|joinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprs
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|compose
argument_list|(
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|joinRel
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|EquivalenceFinder
name|eF
init|=
operator|new
name|EquivalenceFinder
argument_list|()
decl_stmt|;
name|exprs
operator|.
name|forEach
argument_list|(
name|input
lambda|->
name|input
operator|.
name|accept
argument_list|(
name|eF
argument_list|)
argument_list|)
expr_stmt|;
name|equivalence
operator|=
name|BitSets
operator|.
name|closure
argument_list|(
name|equivalence
argument_list|)
expr_stmt|;
block|}
comment|/**      * The PullUp Strategy is sound but not complete.      *<ol>      *<li>We only pullUp inferred predicates for now. Pulling up existing      * predicates causes an explosion of duplicates. The existing predicates are      * pushed back down as new predicates. Once we have rules to eliminate      * duplicate Filter conditions, we should pullUp all predicates.      *<li>For Left Outer: we infer new predicates from the left and set them as      * applicable on the Right side. No predicates are pulledUp.      *<li>Right Outer Joins are handled in an analogous manner.      *<li>For Full Outer Joins no predicates are pulledUp or inferred.      *</ol>      */
specifier|public
name|RelOptPredicateList
name|inferPredicates
parameter_list|(
name|boolean
name|includeEqualityInference
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|inferredPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|allExprs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|this
operator|.
name|allExprs
argument_list|)
decl_stmt|;
specifier|final
name|JoinRelType
name|joinType
init|=
name|joinRel
operator|.
name|getJoinType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|SEMI
case|:
case|case
name|INNER
case|:
case|case
name|LEFT
case|:
name|infer
argument_list|(
name|leftChildPredicates
argument_list|,
name|allExprs
argument_list|,
name|inferredPredicates
argument_list|,
name|includeEqualityInference
argument_list|,
name|joinType
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|?
name|rightFieldsBitSet
else|:
name|allFieldsBitSet
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|SEMI
case|:
case|case
name|INNER
case|:
case|case
name|RIGHT
case|:
name|infer
argument_list|(
name|rightChildPredicates
argument_list|,
name|allExprs
argument_list|,
name|inferredPredicates
argument_list|,
name|includeEqualityInference
argument_list|,
name|joinType
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|?
name|leftFieldsBitSet
else|:
name|allFieldsBitSet
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|Mappings
operator|.
name|TargetMapping
name|rightMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|,
literal|0
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
name|nFieldsRight
argument_list|)
decl_stmt|;
specifier|final
name|RexPermuteInputsShuttle
name|rightPermute
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|rightMapping
argument_list|,
name|joinRel
argument_list|)
decl_stmt|;
name|Mappings
operator|.
name|TargetMapping
name|leftMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
literal|0
argument_list|,
name|nSysFields
argument_list|,
name|nFieldsLeft
argument_list|)
decl_stmt|;
specifier|final
name|RexPermuteInputsShuttle
name|leftPermute
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|leftMapping
argument_list|,
name|joinRel
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|leftInferredPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|rightInferredPredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|iP
range|:
name|inferredPredicates
control|)
block|{
name|ImmutableBitSet
name|iPBitSet
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|iP
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftFieldsBitSet
operator|.
name|contains
argument_list|(
name|iPBitSet
argument_list|)
condition|)
block|{
name|leftInferredPredicates
operator|.
name|add
argument_list|(
name|iP
operator|.
name|accept
argument_list|(
name|leftPermute
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rightFieldsBitSet
operator|.
name|contains
argument_list|(
name|iPBitSet
argument_list|)
condition|)
block|{
name|rightInferredPredicates
operator|.
name|add
argument_list|(
name|iP
operator|.
name|accept
argument_list|(
name|rightPermute
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|joinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|SEMI
case|:
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicates
decl_stmt|;
name|pulledUpPredicates
operator|=
name|Iterables
operator|.
name|concat
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
argument_list|,
name|leftInferredPredicates
argument_list|)
expr_stmt|;
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|pulledUpPredicates
argument_list|,
name|leftInferredPredicates
argument_list|,
name|rightInferredPredicates
argument_list|)
return|;
case|case
name|INNER
case|:
name|pulledUpPredicates
operator|=
name|Iterables
operator|.
name|concat
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
argument_list|,
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rightChildPredicates
argument_list|)
argument_list|,
name|RexUtil
operator|.
name|retainDeterministic
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|joinRel
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|inferredPredicates
argument_list|)
expr_stmt|;
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|pulledUpPredicates
argument_list|,
name|leftInferredPredicates
argument_list|,
name|rightInferredPredicates
argument_list|)
return|;
case|case
name|LEFT
case|:
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
argument_list|,
name|leftInferredPredicates
argument_list|,
name|rightInferredPredicates
argument_list|)
return|;
case|case
name|RIGHT
case|:
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rightChildPredicates
argument_list|)
argument_list|,
name|inferredPredicates
argument_list|,
name|EMPTY_LIST
argument_list|)
return|;
default|default:
assert|assert
name|inferredPredicates
operator|.
name|size
argument_list|()
operator|==
literal|0
assert|;
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
block|}
specifier|public
name|RexNode
name|left
parameter_list|()
block|{
return|return
name|leftChildPredicates
return|;
block|}
specifier|public
name|RexNode
name|right
parameter_list|()
block|{
return|return
name|rightChildPredicates
return|;
block|}
specifier|private
name|void
name|infer
parameter_list|(
name|RexNode
name|predicates
parameter_list|,
name|Set
argument_list|<
name|RexNode
argument_list|>
name|allExprs
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inferredPredicates
parameter_list|,
name|boolean
name|includeEqualityInference
parameter_list|,
name|ImmutableBitSet
name|inferringFields
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|r
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|predicates
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|includeEqualityInference
operator|&&
name|equalityPredicates
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Mapping
name|m
range|:
name|mappings
argument_list|(
name|r
argument_list|)
control|)
block|{
name|RexNode
name|tr
init|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|m
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Filter predicates can be already simplified, so we should work with
comment|// simplified RexNode versions as well. It also allows prevent of having
comment|// some duplicates in in result pulledUpPredicates
name|RexNode
name|simplifiedTarget
init|=
name|simplify
operator|.
name|simplifyFilterPredicates
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|tr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkTarget
argument_list|(
name|inferringFields
argument_list|,
name|allExprs
argument_list|,
name|tr
argument_list|)
operator|&&
name|checkTarget
argument_list|(
name|inferringFields
argument_list|,
name|allExprs
argument_list|,
name|simplifiedTarget
argument_list|)
condition|)
block|{
name|inferredPredicates
operator|.
name|add
argument_list|(
name|simplifiedTarget
argument_list|)
expr_stmt|;
name|allExprs
operator|.
name|add
argument_list|(
name|simplifiedTarget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Iterable
argument_list|<
name|Mapping
argument_list|>
name|mappings
parameter_list|(
specifier|final
name|RexNode
name|predicate
parameter_list|)
block|{
specifier|final
name|ImmutableBitSet
name|fields
init|=
name|exprFields
operator|.
name|get
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
parameter_list|()
lambda|->
operator|new
name|ExprsItr
argument_list|(
name|fields
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|checkTarget
parameter_list|(
name|ImmutableBitSet
name|inferringFields
parameter_list|,
name|Set
argument_list|<
name|RexNode
argument_list|>
name|allExprs
parameter_list|,
name|RexNode
name|tr
parameter_list|)
block|{
return|return
name|inferringFields
operator|.
name|contains
argument_list|(
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|tr
argument_list|)
argument_list|)
operator|&&
operator|!
name|allExprs
operator|.
name|contains
argument_list|(
name|tr
argument_list|)
operator|&&
operator|!
name|isAlwaysTrue
argument_list|(
name|tr
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
specifier|private
name|void
name|markAsEquivalent
parameter_list|(
name|int
name|p1
parameter_list|,
name|int
name|p2
parameter_list|)
block|{
name|BitSet
name|b
init|=
name|equivalence
operator|.
name|get
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|b
operator|.
name|set
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|b
operator|=
name|equivalence
operator|.
name|get
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|b
operator|.
name|set
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
name|RexNode
name|compose
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|exprs
parameter_list|)
block|{
name|exprs
operator|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|exprs
argument_list|)
operator|.
name|where
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
expr_stmt|;
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|exprs
argument_list|)
return|;
block|}
comment|/**      * Find expressions of the form 'col_x = col_y'.      */
class|class
name|EquivalenceFinder
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|protected
name|EquivalenceFinder
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|int
name|lPos
init|=
name|pos
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rPos
init|=
name|pos
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lPos
operator|!=
operator|-
literal|1
operator|&&
name|rPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|markAsEquivalent
argument_list|(
name|lPos
argument_list|,
name|rPos
argument_list|)
expr_stmt|;
name|equalityPredicates
operator|.
name|add
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Given an expression returns all the possible substitutions.      *      *<p>For example, for an expression 'a + b + c' and the following      * equivalences:<pre>      * a : {a, b}      * b : {a, b}      * c : {c, e}      *</pre>      *      *<p>The following Mappings will be returned:      *<pre>      * {a&rarr; a, b&rarr; a, c&rarr; c}      * {a&rarr; a, b&rarr; a, c&rarr; e}      * {a&rarr; a, b&rarr; b, c&rarr; c}      * {a&rarr; a, b&rarr; b, c&rarr; e}      * {a&rarr; b, b&rarr; a, c&rarr; c}      * {a&rarr; b, b&rarr; a, c&rarr; e}      * {a&rarr; b, b&rarr; b, c&rarr; c}      * {a&rarr; b, b&rarr; b, c&rarr; e}      *</pre>      *      *<p>which imply the following inferences:      *<pre>      * a + a + c      * a + a + e      * a + b + c      * a + b + e      * b + a + c      * b + a + e      * b + b + c      * b + b + e      *</pre>      */
class|class
name|ExprsItr
implements|implements
name|Iterator
argument_list|<
name|Mapping
argument_list|>
block|{
specifier|final
name|int
index|[]
name|columns
decl_stmt|;
specifier|final
name|BitSet
index|[]
name|columnSets
decl_stmt|;
specifier|final
name|int
index|[]
name|iterationIdx
decl_stmt|;
name|Mapping
name|nextMapping
decl_stmt|;
name|boolean
name|firstCall
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"JdkObsolete"
argument_list|)
name|ExprsItr
parameter_list|(
name|ImmutableBitSet
name|fields
parameter_list|)
block|{
name|nextMapping
operator|=
literal|null
expr_stmt|;
name|columns
operator|=
operator|new
name|int
index|[
name|fields
operator|.
name|cardinality
argument_list|()
index|]
expr_stmt|;
name|columnSets
operator|=
operator|new
name|BitSet
index|[
name|fields
operator|.
name|cardinality
argument_list|()
index|]
expr_stmt|;
name|iterationIdx
operator|=
operator|new
name|int
index|[
name|fields
operator|.
name|cardinality
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|i
init|=
name|fields
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|fields
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|,
name|j
operator|++
control|)
block|{
name|columns
index|[
name|j
index|]
operator|=
name|i
expr_stmt|;
name|columnSets
index|[
name|j
index|]
operator|=
name|equivalence
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|iterationIdx
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|firstCall
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|firstCall
condition|)
block|{
name|initializeMapping
argument_list|()
expr_stmt|;
name|firstCall
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|computeNextMapping
argument_list|(
name|iterationIdx
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|nextMapping
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Mapping
name|next
parameter_list|()
block|{
return|return
name|nextMapping
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|void
name|computeNextMapping
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|int
name|t
init|=
name|columnSets
index|[
name|level
index|]
operator|.
name|nextSetBit
argument_list|(
name|iterationIdx
index|[
name|level
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
name|nextMapping
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|int
name|tmp
init|=
name|columnSets
index|[
name|level
index|]
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|nextMapping
operator|.
name|set
argument_list|(
name|columns
index|[
name|level
index|]
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|iterationIdx
index|[
name|level
index|]
operator|=
name|tmp
operator|+
literal|1
expr_stmt|;
name|computeNextMapping
argument_list|(
name|level
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nextMapping
operator|.
name|set
argument_list|(
name|columns
index|[
name|level
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|iterationIdx
index|[
name|level
index|]
operator|=
name|t
operator|+
literal|1
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeMapping
parameter_list|()
block|{
name|nextMapping
operator|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BitSet
name|c
init|=
name|columnSets
index|[
name|i
index|]
decl_stmt|;
name|int
name|t
init|=
name|c
operator|.
name|nextSetBit
argument_list|(
name|iterationIdx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|<
literal|0
condition|)
block|{
name|nextMapping
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|nextMapping
operator|.
name|set
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|iterationIdx
index|[
name|i
index|]
operator|=
name|t
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|pos
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|RexInputRef
condition|)
block|{
return|return
operator|(
operator|(
name|RexInputRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|isAlwaysTrue
parameter_list|(
name|RexNode
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|predicate
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|c
init|=
operator|(
name|RexCall
operator|)
name|predicate
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|int
name|lPos
init|=
name|pos
argument_list|(
name|c
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rPos
init|=
name|pos
argument_list|(
name|c
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|lPos
operator|!=
operator|-
literal|1
operator|&&
name|lPos
operator|==
name|rPos
return|;
block|}
block|}
return|return
name|predicate
operator|.
name|isAlwaysTrue
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

