begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|GeoFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Geometries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|HilbertCurve2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpaceFillingCurve2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esri
operator|.
name|core
operator|.
name|geometry
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Collection of planner rules that convert  * calls to spatial functions into more efficient expressions.  *  *<p>The rules allow Calcite to use spatial indexes. For example the following  * query:  *  *<blockquote>SELECT ...  * FROM Restaurants AS r  * WHERE ST_DWithin(ST_Point(10, 20), ST_Point(r.longitude, r.latitude), 5)  *</blockquote>  *  *<p>is rewritten to  *  *<blockquote>SELECT ...  * FROM Restaurants AS r  * WHERE (r.h BETWEEN 100 AND 150  *        OR r.h BETWEEN 170 AND 185)  * AND ST_DWithin(ST_Point(10, 20), ST_Point(r.longitude, r.latitude), 5)  *</blockquote>  *  *<p>if there is the constraint  *  *<blockquote>CHECK (h = Hilbert(8, r.longitude, r.latitude))</blockquote>  *  *<p>If the {@code Restaurants} table is sorted on {@code h} then the latter  * query can be answered using two limited range-scans, and so is much more  * efficient.  *  *<p>Note that the original predicate  * {@code ST_DWithin(ST_Point(10, 20), ST_Point(r.longitude, r.latitude), 5)}  * is still present, but is evaluated after the approximate predicate has  * eliminated many potential matches.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SpatialRules
block|{
specifier|private
name|SpatialRules
parameter_list|()
block|{
block|}
specifier|private
specifier|static
specifier|final
name|RexUtil
operator|.
name|RexFinder
name|DWITHIN_FINDER
init|=
name|RexUtil
operator|.
name|find
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlKind
operator|.
name|ST_DWITHIN
argument_list|,
name|SqlKind
operator|.
name|ST_CONTAINS
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|RexUtil
operator|.
name|RexFinder
name|HILBERT_FINDER
init|=
name|RexUtil
operator|.
name|find
argument_list|(
name|SqlKind
operator|.
name|HILBERT
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|INSTANCE
init|=
name|FilterHilbertRule
operator|.
name|Config
operator|.
name|DEFAULT
operator|.
name|toRule
argument_list|()
decl_stmt|;
comment|/** Returns a geometry if an expression is constant, null otherwise. */
specifier|private
specifier|static
name|Geometries
operator|.
expr|@
name|Nullable
name|Geom
name|constantGeom
argument_list|(
name|RexNode
name|e
argument_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CAST
case|:
return|return
name|constantGeom
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|LITERAL
case|:
return|return
operator|(
name|Geometries
operator|.
name|Geom
operator|)
operator|(
operator|(
name|RexLiteral
operator|)
name|e
operator|)
operator|.
name|getValue
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
end_class

begin_comment
comment|/** Rule that converts ST_DWithin in a Filter condition into a predicate on    * a Hilbert curve. */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"WeakerAccess"
argument_list|)
specifier|public
specifier|static
class|class
name|FilterHilbertRule
extends|extends
name|RelRule
argument_list|<
name|FilterHilbertRule
operator|.
name|Config
argument_list|>
block|{
specifier|protected
name|FilterHilbertRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjunctions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|conjunctions
argument_list|)
expr_stmt|;
comment|// Match a predicate
comment|//   r.hilbert = hilbert(r.longitude, r.latitude)
comment|// to one of the conjunctions
comment|//   ST_DWithin(ST_Point(x, y), ST_Point(r.longitude, r.latitude), d)
comment|// and if it matches add a new conjunction before it,
comment|//   r.hilbert between h1 and h2
comment|//   or r.hilbert between h3 and h4
comment|// where {[h1, h2], [h3, h4]} are the ranges of the Hilbert curve
comment|// intersecting the square
comment|//   (r.longitude - d, r.latitude - d, r.longitude + d, r.latitude + d)
specifier|final
name|RelOptPredicateList
name|predicates
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
operator|.
name|getAllPredicates
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicates
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
specifier|final
name|RexCall
name|eqCall
init|=
operator|(
name|RexCall
operator|)
name|predicate
decl_stmt|;
if|if
condition|(
name|eqCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
name|eqCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|HILBERT
condition|)
block|{
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|eqCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexCall
name|hilbert
init|=
operator|(
name|RexCall
operator|)
name|eqCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RexUtil
operator|.
name|RexFinder
name|finder
init|=
name|RexUtil
operator|.
name|find
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|finder
operator|.
name|anyContain
argument_list|(
name|conjunctions
argument_list|)
condition|)
block|{
comment|// If the condition already contains "ref", it is probable that
comment|// this rule has already fired once.
continue|continue;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conjunctions
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|replacements
init|=
name|replaceSpatial
argument_list|(
name|conjunctions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|builder
argument_list|,
name|ref
argument_list|,
name|hilbert
argument_list|)
decl_stmt|;
if|if
condition|(
name|replacements
operator|!=
literal|null
condition|)
block|{
name|conjunctions
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|conjunctions
operator|.
name|addAll
argument_list|(
name|i
argument_list|,
name|replacements
argument_list|)
expr_stmt|;
name|i
operator|+=
name|replacements
operator|.
name|size
argument_list|()
expr_stmt|;
operator|++
name|changeCount
expr_stmt|;
block|}
else|else
block|{
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|changeCount
operator|>
literal|0
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|builder
operator|.
name|push
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|conjunctions
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return;
comment|// we found one useful constraint; don't look for more
block|}
block|}
block|}
comment|/** Rewrites a spatial predicate to a predicate on a Hilbert curve.      *      *<p>Returns null if the predicate cannot be rewritten;      * a 1-element list (new) if the predicate can be fully rewritten;      * returns a 2-element list (new, original) if the new predicate allows      * some false positives.      *      * @param conjunction Original predicate      * @param builder Builder      * @param ref Reference to Hilbert column      * @param hilbert Function call that populates Hilbert column      *      * @return List containing rewritten predicate and original, or null      */
specifier|static
annotation|@
name|Nullable
name|List
argument_list|<
name|RexNode
argument_list|>
name|replaceSpatial
parameter_list|(
name|RexNode
name|conjunction
parameter_list|,
name|RelBuilder
name|builder
parameter_list|,
name|RexInputRef
name|ref
parameter_list|,
name|RexCall
name|hilbert
parameter_list|)
block|{
specifier|final
name|RexNode
name|op0
decl_stmt|;
specifier|final
name|RexNode
name|op1
decl_stmt|;
specifier|final
name|Geometries
operator|.
name|Geom
name|g0
decl_stmt|;
switch|switch
condition|(
name|conjunction
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|ST_DWITHIN
case|:
specifier|final
name|RexCall
name|within
init|=
operator|(
name|RexCall
operator|)
name|conjunction
decl_stmt|;
name|op0
operator|=
name|within
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|g0
operator|=
name|constantGeom
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|op1
operator|=
name|within
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Geometries
operator|.
name|Geom
name|g1
init|=
name|constantGeom
argument_list|(
name|op1
argument_list|)
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|isLiteral
argument_list|(
name|within
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
condition|)
block|{
specifier|final
name|Number
name|distance
init|=
name|requireNonNull
argument_list|(
operator|(
name|Number
operator|)
name|value
argument_list|(
name|within
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"distance for "
operator|+
name|within
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|distance
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0D
argument_list|)
condition|)
block|{
case|case
operator|-
literal|1
case|:
comment|// negative distance
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|builder
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
argument_list|)
return|;
case|case
literal|0
case|:
comment|// zero distance
comment|// Change "ST_DWithin(g, p, 0)" to "g = p"
name|conjunction
operator|=
name|builder
operator|.
name|equals
argument_list|(
name|op0
argument_list|,
name|op1
argument_list|)
expr_stmt|;
comment|// fall through
case|case
literal|1
case|:
if|if
condition|(
name|g0
operator|!=
literal|null
operator|&&
name|op1
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ST_POINT
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|op1
operator|)
operator|.
name|operands
operator|.
name|equals
argument_list|(
name|hilbert
operator|.
name|operands
argument_list|)
condition|)
block|{
comment|// Add the new predicate before the existing predicate
comment|// because it is cheaper to execute (albeit less selective).
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|hilbertPredicate
argument_list|(
name|builder
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|ref
argument_list|,
name|g0
argument_list|,
name|distance
argument_list|)
argument_list|,
name|conjunction
argument_list|)
return|;
block|}
if|else if
condition|(
name|g1
operator|!=
literal|null
operator|&&
name|op0
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ST_POINT
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|op0
operator|)
operator|.
name|operands
operator|.
name|equals
argument_list|(
name|hilbert
operator|.
name|operands
argument_list|)
condition|)
block|{
comment|// Add the new predicate before the existing predicate
comment|// because it is cheaper to execute (albeit less selective).
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|hilbertPredicate
argument_list|(
name|builder
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|ref
argument_list|,
name|g1
argument_list|,
name|distance
argument_list|)
argument_list|,
name|conjunction
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// cannot rewrite
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"invalid sign: "
operator|+
name|distance
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
comment|// cannot rewrite
case|case
name|ST_CONTAINS
case|:
specifier|final
name|RexCall
name|contains
init|=
operator|(
name|RexCall
operator|)
name|conjunction
decl_stmt|;
name|op0
operator|=
name|contains
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|g0
operator|=
name|constantGeom
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|op1
operator|=
name|contains
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|g0
operator|!=
literal|null
operator|&&
name|op1
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ST_POINT
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|op1
operator|)
operator|.
name|operands
operator|.
name|equals
argument_list|(
name|hilbert
operator|.
name|operands
argument_list|)
condition|)
block|{
comment|// Add the new predicate before the existing predicate
comment|// because it is cheaper to execute (albeit less selective).
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|hilbertPredicate
argument_list|(
name|builder
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|ref
argument_list|,
name|g0
argument_list|)
argument_list|,
name|conjunction
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// cannot rewrite
default|default:
return|return
literal|null
return|;
comment|// cannot rewrite
block|}
block|}
comment|/** Creates a predicate on the column that contains the index on the Hilbert      * curve.      *      *<p>The predicate is a safe approximation. That is, it may allow some      * points that are not within the distance, but will never disallow a point      * that is within the distance.      *      *<p>Returns FALSE if the distance is negative (the ST_DWithin function      * would always return FALSE) and returns an {@code =} predicate if distance      * is 0. But usually returns a list of ranges,      * {@code ref BETWEEN c1 AND c2 OR ref BETWEEN c3 AND c4}. */
specifier|private
specifier|static
name|RexNode
name|hilbertPredicate
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexInputRef
name|ref
parameter_list|,
name|Geometries
operator|.
name|Geom
name|g
parameter_list|,
name|Number
name|distance
parameter_list|)
block|{
if|if
condition|(
name|distance
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0D
operator|&&
name|Geometries
operator|.
name|type
argument_list|(
name|g
operator|.
name|g
argument_list|()
argument_list|)
operator|==
name|Geometries
operator|.
name|Type
operator|.
name|POINT
condition|)
block|{
specifier|final
name|Point
name|p
init|=
operator|(
name|Point
operator|)
name|g
operator|.
name|g
argument_list|()
decl_stmt|;
specifier|final
name|HilbertCurve2D
name|hilbert
init|=
operator|new
name|HilbertCurve2D
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|long
name|index
init|=
name|hilbert
operator|.
name|toIndex
argument_list|(
name|p
operator|.
name|getX
argument_list|()
argument_list|,
name|p
operator|.
name|getY
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|ref
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|Geometries
operator|.
name|Geom
name|g2
init|=
name|GeoFunctions
operator|.
name|ST_Buffer
argument_list|(
name|g
argument_list|,
name|distance
operator|.
name|doubleValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|hilbertPredicate
argument_list|(
name|rexBuilder
argument_list|,
name|ref
argument_list|,
name|g2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RexNode
name|hilbertPredicate
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexInputRef
name|ref
parameter_list|,
name|Geometries
operator|.
name|Geom
name|g2
parameter_list|)
block|{
specifier|final
name|Geometries
operator|.
name|Geom
name|g3
init|=
name|GeoFunctions
operator|.
name|ST_Envelope
argument_list|(
name|g2
argument_list|)
decl_stmt|;
specifier|final
name|Envelope
name|env
init|=
operator|(
name|Envelope
operator|)
name|g3
operator|.
name|g
argument_list|()
decl_stmt|;
specifier|final
name|HilbertCurve2D
name|hilbert
init|=
operator|new
name|HilbertCurve2D
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SpaceFillingCurve2D
operator|.
name|IndexRange
argument_list|>
name|ranges
init|=
name|hilbert
operator|.
name|toRanges
argument_list|(
name|env
operator|.
name|getXMin
argument_list|()
argument_list|,
name|env
operator|.
name|getYMin
argument_list|()
argument_list|,
name|env
operator|.
name|getXMax
argument_list|()
argument_list|,
name|env
operator|.
name|getYMax
argument_list|()
argument_list|,
operator|new
name|SpaceFillingCurve2D
operator|.
name|RangeComputeHints
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SpaceFillingCurve2D
operator|.
name|IndexRange
name|range
range|:
name|ranges
control|)
block|{
specifier|final
name|BigDecimal
name|lowerBd
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|range
operator|.
name|lower
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BigDecimal
name|upperBd
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|range
operator|.
name|upper
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|,
name|ref
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|lowerBd
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
name|ref
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|upperBd
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|nodes
argument_list|)
return|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|EMPTY
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
operator|.
name|predicate
argument_list|(
name|f
lambda|->
name|DWITHIN_FINDER
operator|.
name|inFilter
argument_list|(
name|f
argument_list|)
operator|&&
operator|!
name|HILBERT_FINDER
operator|.
name|inFilter
argument_list|(
name|f
argument_list|)
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|FilterHilbertRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|FilterHilbertRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

unit|}
end_unit

