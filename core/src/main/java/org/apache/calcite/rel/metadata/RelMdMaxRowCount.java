begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_comment
comment|/**  * RelMdMaxRowCount supplies a default implementation of  * {@link RelMetadataQuery#getMaxRowCount} for the standard logical algebra.  */
end_comment

begin_class
specifier|public
class|class
name|RelMdMaxRowCount
block|{
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|BuiltInMethod
operator|.
name|MAX_ROW_COUNT
operator|.
name|method
argument_list|,
operator|new
name|RelMdMaxRowCount
argument_list|()
argument_list|)
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|Double
name|getMaxRowCount
parameter_list|(
name|Union
name|rel
parameter_list|)
block|{
name|double
name|nRows
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|Double
name|partialRowCount
init|=
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialRowCount
operator|==
literal|null
operator|||
name|partialRowCount
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
name|nRows
operator|+=
name|partialRowCount
expr_stmt|;
block|}
return|return
name|nRows
return|;
block|}
specifier|public
name|Double
name|getMaxRowCount
parameter_list|(
name|Filter
name|rel
parameter_list|)
block|{
return|return
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getMaxRowCount
parameter_list|(
name|Project
name|rel
parameter_list|)
block|{
return|return
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getMaxRowCount
parameter_list|(
name|Sort
name|rel
parameter_list|)
block|{
specifier|final
name|Double
name|rowCount
init|=
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowCount
operator|!=
literal|null
operator|&&
name|rel
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|offset
init|=
name|rel
operator|.
name|offset
operator|==
literal|null
condition|?
literal|0
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|rel
operator|.
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|rel
operator|.
name|fetch
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|offsetLimit
init|=
operator|new
name|Double
argument_list|(
name|offset
operator|+
name|limit
argument_list|)
decl_stmt|;
comment|// offsetLimit is smaller than rowCount of the input operator
comment|// thus, we return the offsetLimit
if|if
condition|(
name|offsetLimit
operator|<
name|rowCount
condition|)
block|{
return|return
name|offsetLimit
return|;
block|}
block|}
return|return
name|rowCount
return|;
block|}
specifier|public
name|Double
name|getMaxRowCount
parameter_list|(
name|Aggregate
name|rel
parameter_list|)
block|{
return|return
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getMaxRowCount
parameter_list|(
name|Join
name|rel
parameter_list|)
block|{
name|Double
name|left
init|=
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|right
init|=
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
operator|||
name|right
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
else|else
block|{
return|return
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|*
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
operator|.
name|getRight
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// Catch-all rule when none of the others apply.
specifier|public
name|Double
name|getMaxRowCount
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelMdMaxRowCount.java
end_comment

end_unit

