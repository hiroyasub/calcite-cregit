begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptMaterialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Planner rule that converts joins of multiple tables into a matching  * materialized view  */
end_comment

begin_class
specifier|public
class|class
name|MaterializedViewJoinRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|MaterializedViewJoinRule
name|INSTANCE_PROJECT
init|=
operator|new
name|MaterializedViewJoinRule
argument_list|(
name|operand
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
literal|"MaterializedViewJoinRule(Project-Project)"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MaterializedViewJoinRule
name|INSTANCE_TABLE_SCAN
init|=
operator|new
name|MaterializedViewJoinRule
argument_list|(
name|operand
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
literal|"MaterializedViewJoinRule(TableScan-TableScan)"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HepProgram
name|multiJoinProgram
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|ProjectRemoveRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|ProjectJoinTransposeRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|JoinToMultiJoinRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|ProjectMultiJoinMergeRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|FilterMultiJoinMergeRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a MaterializedViewJoinRule. */
specifier|protected
name|MaterializedViewJoinRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|relBuilderFactory
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|originalProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Rebuild the tree
specifier|final
name|RelNode
name|leftInput
decl_stmt|;
specifier|final
name|RelNode
name|rightInput
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getRelList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|6
condition|)
block|{
name|leftInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
operator|.
name|copy
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rightInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|4
argument_list|)
operator|.
name|copy
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|4
argument_list|)
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leftInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|rightInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
operator|.
name|copy
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|leftInput
argument_list|,
name|rightInput
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
operator|.
name|copy
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|join
argument_list|)
argument_list|)
decl_stmt|;
comment|// Convert the input expression into a MultiJoin
name|RelOptPlanner
name|planner
init|=
name|call
operator|.
name|getPlanner
argument_list|()
decl_stmt|;
specifier|final
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|multiJoinProgram
argument_list|,
name|planner
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|RelNode
name|best
init|=
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
if|if
condition|(
name|best
operator|instanceof
name|Project
condition|)
block|{
name|best
operator|=
operator|(
operator|(
name|Project
operator|)
name|best
operator|)
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|best
operator|instanceof
name|MultiJoin
operator|)
condition|)
block|{
return|return;
block|}
name|apply
argument_list|(
name|call
argument_list|,
operator|(
name|MultiJoin
operator|)
name|best
argument_list|,
name|originalProject
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|apply
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|MultiJoin
name|join
parameter_list|,
name|Project
name|originalProject
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSupportedJoin
argument_list|(
name|join
argument_list|)
condition|)
block|{
return|return;
block|}
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBitSet
argument_list|>
name|queryFilter
init|=
name|filterConditions
argument_list|(
name|join
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryFilter
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|RelOptTable
argument_list|>
name|queryTables
init|=
name|RelOptUtil
operator|.
name|findAllTables
argument_list|(
name|join
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|queryFields
init|=
name|originalFields
argument_list|(
name|join
argument_list|,
name|queryTables
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryFields
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|RelOptPlanner
name|planner
init|=
name|call
operator|.
name|getPlanner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelOptMaterialization
argument_list|>
name|materializations
init|=
name|planner
operator|instanceof
name|VolcanoPlanner
condition|?
operator|(
operator|(
name|VolcanoPlanner
operator|)
name|planner
operator|)
operator|.
name|getMaterializations
argument_list|()
else|:
name|ImmutableList
operator|.
expr|<
name|RelOptMaterialization
operator|>
name|of
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|materializations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|RelOptMaterialization
argument_list|>
name|applicableMaterializations
init|=
name|VolcanoPlanner
operator|.
name|getApplicableMaterializations
argument_list|(
name|join
argument_list|,
name|materializations
argument_list|)
decl_stmt|;
comment|// Prepare a planner to convert views to MultiJoins
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|multiJoinProgram
argument_list|,
name|planner
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RelOptMaterialization
name|materialization
range|:
name|applicableMaterializations
control|)
block|{
comment|// Skip over single table views
name|RelNode
name|target
init|=
name|materialization
operator|.
name|queryRel
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|TableScan
operator|||
operator|(
name|target
operator|instanceof
name|Project
operator|&&
operator|(
operator|(
name|Project
operator|)
name|target
operator|)
operator|.
name|getInput
argument_list|()
operator|instanceof
name|TableScan
operator|)
condition|)
block|{
continue|continue;
block|}
comment|// Convert the view into a MultiJoin
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|=
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|target
operator|instanceof
name|Project
operator|)
condition|)
block|{
continue|continue;
block|}
name|Project
name|viewProject
init|=
operator|(
name|Project
operator|)
name|target
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|viewProject
operator|.
name|getInput
argument_list|()
operator|instanceof
name|MultiJoin
operator|)
condition|)
block|{
continue|continue;
block|}
name|MultiJoin
name|viewJoin
init|=
operator|(
name|MultiJoin
operator|)
name|viewProject
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSupportedJoin
argument_list|(
name|viewJoin
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|RelOptTable
argument_list|>
name|viewTables
init|=
name|RelOptUtil
operator|.
name|findAllTables
argument_list|(
name|viewJoin
argument_list|)
decl_stmt|;
comment|// Check that the same set of tables are in use
if|if
condition|(
name|queryTables
operator|.
name|size
argument_list|()
operator|!=
name|viewTables
operator|.
name|size
argument_list|()
operator|||
operator|!
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|queryTables
argument_list|)
operator|.
name|containsAll
argument_list|(
name|viewTables
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Extra the conditions and field from the view and ensure
comment|// that they are all supported
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBitSet
argument_list|>
name|viewFilter
init|=
name|filterConditions
argument_list|(
name|viewJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewFilter
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|viewFields
init|=
name|originalFields
argument_list|(
name|viewJoin
argument_list|,
name|viewTables
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewFields
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// If we fail to find one of the fields we are required
comment|// to project, we can't use this view
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
name|materializedViewProjects
argument_list|(
name|queryFields
argument_list|,
name|queryFilter
argument_list|,
name|viewFields
argument_list|,
name|originalProject
argument_list|)
decl_stmt|;
if|if
condition|(
name|projects
operator|.
name|size
argument_list|()
operator|!=
name|originalProject
operator|.
name|getNamedProjects
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
continue|continue;
block|}
specifier|final
name|RelNode
name|newNode
init|=
name|originalProject
operator|.
name|copy
argument_list|(
name|originalProject
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|materialization
operator|.
name|tableRel
argument_list|,
name|projects
argument_list|,
name|originalProject
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Checks that the join consists of either table scans or projects of scans    */
specifier|private
name|boolean
name|isSimpleProjects
parameter_list|(
name|MultiJoin
name|join
parameter_list|)
block|{
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|instanceof
name|TableScan
operator|)
operator|&&
operator|!
operator|(
name|input
operator|instanceof
name|Project
operator|&&
operator|(
operator|(
name|Project
operator|)
name|input
operator|)
operator|.
name|getInput
argument_list|()
operator|instanceof
name|TableScan
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isSupportedJoin
parameter_list|(
name|MultiJoin
name|join
parameter_list|)
block|{
comment|// We only support inner joins without post join filters over simple projects/scans
return|return
operator|!
name|join
operator|.
name|containsOuter
argument_list|()
operator|&&
name|join
operator|.
name|getPostJoinFilter
argument_list|()
operator|==
literal|null
operator|&&
name|isSimpleProjects
argument_list|(
name|join
argument_list|)
return|;
block|}
comment|/**    * Produces a map from fields in a multijoin to references in the    * original tables referenced in the join    */
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|originalFields
parameter_list|(
name|MultiJoin
name|join
parameter_list|,
name|List
argument_list|<
name|RelOptTable
argument_list|>
name|tables
parameter_list|)
block|{
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|projFields
init|=
name|join
operator|.
name|getProjFields
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|tableFields
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|join
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|int
name|fieldNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Either get the project or construct a list projecting all fields
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
decl_stmt|;
if|if
condition|(
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Project
condition|)
block|{
name|projects
operator|=
operator|(
operator|(
name|Project
operator|)
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getProjects
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|TableScan
assert|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
name|projects
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|j
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|projFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|bit
init|=
name|projFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|bit
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// We currently only support rewriting of views with simple field references
if|if
condition|(
operator|!
operator|(
name|projects
operator|.
name|get
argument_list|(
name|bit
argument_list|)
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|tableFields
operator|.
name|put
argument_list|(
name|fieldNum
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|tables
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|RexInputRef
operator|)
name|projects
operator|.
name|get
argument_list|(
name|bit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNum
operator|++
expr_stmt|;
name|bit
operator|=
name|projFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|nextSetBit
argument_list|(
name|bit
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableFields
return|;
block|}
comment|/**    * If the node represents a field reference, get its index    */
specifier|private
name|Integer
name|getFieldIndex
parameter_list|(
name|RexNode
name|operand
parameter_list|)
block|{
if|if
condition|(
name|operand
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|INPUT_REF
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|RexInputRef
operator|)
name|operand
operator|)
operator|.
name|getIndex
argument_list|()
return|;
block|}
if|else if
condition|(
name|operand
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
condition|)
block|{
return|return
name|getFieldIndex
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|operand
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Construct a map of equivalence classes of all columns    * in all tables used as input to the join    */
specifier|private
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBitSet
argument_list|>
name|filterConditions
parameter_list|(
name|MultiJoin
name|join
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBitSet
argument_list|>
name|equiv
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|RexNode
name|filter
init|=
name|RexUtil
operator|.
name|toCnf
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinFilter
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|conjunct
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|filter
argument_list|)
control|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|condition
init|=
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|conjunct
argument_list|)
decl_stmt|;
if|if
condition|(
name|condition
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|condition
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|EQUALS
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|(
operator|(
name|RexCall
operator|)
name|condition
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|Integer
name|index1
init|=
name|getFieldIndex
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|index2
init|=
name|getFieldIndex
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index1
operator|==
literal|null
operator|||
name|index2
operator|==
literal|null
condition|)
block|{
comment|// All operands to a condition must be field references or
comment|// simple casts of field references
return|return
literal|null
return|;
block|}
name|equiv
operator|.
name|put
argument_list|(
name|index1
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We don't handle disjunctions or inequalities
return|return
literal|null
return|;
block|}
block|}
name|equiv
operator|=
name|ImmutableBitSet
operator|.
name|closure
argument_list|(
name|equiv
argument_list|)
expr_stmt|;
return|return
name|equiv
return|;
block|}
comment|/**    * Construct a list of projects we need on top of the materialized view    */
specifier|private
name|List
argument_list|<
name|RexNode
argument_list|>
name|materializedViewProjects
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|queryFields
parameter_list|,
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBitSet
argument_list|>
name|queryFilter
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|viewFields
parameter_list|,
name|Project
name|originalProject
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|viewFieldList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|viewFields
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|queryFieldList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|queryFields
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|RexInputRef
argument_list|>
argument_list|>
name|field
range|:
name|queryFields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|fieldIndex
init|=
name|viewFieldList
operator|.
name|indexOf
argument_list|(
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Check for equivalent fields in the view
name|ImmutableBitSet
name|queryEquiv
init|=
name|queryFilter
operator|.
name|get
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryEquiv
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Integer
name|index
range|:
name|queryEquiv
control|)
block|{
name|fieldIndex
operator|=
name|viewFieldList
operator|.
name|indexOf
argument_list|(
name|queryFieldList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldIndex
operator|!=
operator|-
literal|1
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|fieldIndex
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|RelDataType
name|type
init|=
name|field
operator|.
name|getValue
argument_list|()
operator|.
name|right
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|originalType
init|=
name|originalProject
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|projects
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// if (originalType.equals(type)) {
if|if
condition|(
operator|!
name|SqlTypeUtil
operator|.
name|canCastFrom
argument_list|(
name|originalType
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|projects
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|fieldIndex
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|projects
return|;
block|}
block|}
end_class

begin_comment
comment|// End MaterializedViewJoinRule.java
end_comment

end_unit

