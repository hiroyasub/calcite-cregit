begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Relational expression that iterates over its input and, in addition to  * returning its results, will forward them into other consumers.  *  *<p>NOTE: The current API is experimental and subject to change without  * notice.  */
end_comment

begin_class
annotation|@
name|Experimental
specifier|public
specifier|abstract
class|class
name|Spool
extends|extends
name|SingleRel
block|{
comment|/**    * Enumeration representing spool read / write type.    */
specifier|public
enum|enum
name|Type
block|{
name|EAGER
block|,
name|LAZY
block|}
comment|/**    * How the spool consumes elements from its input.    *    *<ul>    *<li>EAGER: the spool consumes the elements from its input at once at the    *     initial request;    *<li>LAZY: the spool consumes the elements from its input one by one by    *     request.    *</ul>    */
specifier|public
specifier|final
name|Type
name|readType
decl_stmt|;
comment|/**    * How the spool forwards elements to consumers.    *    *<ul>    *<li>EAGER: the spool forwards each element as soon as it returns it;    *<li>LAZY: the spool forwards all elements at once when it is done returning    *     all of them.    *</ul>    */
specifier|public
specifier|final
name|Type
name|writeType
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a Spool. */
specifier|protected
name|Spool
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|Type
name|readType
parameter_list|,
name|Type
name|writeType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|readType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|readType
argument_list|,
literal|"readType"
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|writeType
argument_list|,
literal|"writeType"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
name|copy
argument_list|(
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|readType
argument_list|,
name|writeType
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|Spool
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|Type
name|readType
parameter_list|,
name|Type
name|writeType
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"readType"
argument_list|,
name|readType
argument_list|)
operator|.
name|item
argument_list|(
literal|"writeType"
argument_list|,
name|writeType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

