begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSplittableAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Planner rule that matches an {@link Aggregate} on a {@link Aggregate}  * and the top aggregate's group key is a subset of the lower aggregate's  * group key, and the aggregates are expansions of rollups, then it would  * convert into a single aggregate.  *  *<p>For example, SUM of SUM becomes SUM; SUM of COUNT becomes COUNT;  * MAX of MAX becomes MAX; MIN of MIN becomes MIN. AVG of AVG would not  * match, nor would COUNT of COUNT.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateMergeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|AggregateMergeRule
name|INSTANCE
init|=
operator|new
name|AggregateMergeRule
argument_list|()
decl_stmt|;
specifier|private
name|AggregateMergeRule
parameter_list|()
block|{
name|this
argument_list|(
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|operandJ
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|agg
lambda|->
name|Aggregate
operator|.
name|isSimple
argument_list|(
name|agg
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an AggregateMergeRule. */
specifier|public
name|AggregateMergeRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isAggregateSupported
parameter_list|(
name|AggregateCall
name|aggCall
parameter_list|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
operator|||
name|aggCall
operator|.
name|hasFilter
argument_list|()
operator|||
name|aggCall
operator|.
name|isApproximate
argument_list|()
operator|||
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SqlSplittableAggFunction
name|splitter
init|=
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|unwrap
argument_list|(
name|SqlSplittableAggFunction
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|splitter
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|topAgg
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Aggregate
name|bottomAgg
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|topAgg
operator|.
name|getGroupCount
argument_list|()
operator|>
name|bottomAgg
operator|.
name|getGroupCount
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|ImmutableBitSet
name|bottomGroupSet
init|=
name|bottomAgg
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|bottomGroupSet
operator|.
name|forEach
argument_list|(
name|v
lambda|->
name|map
operator|.
name|put
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
range|:
name|topAgg
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
comment|// top aggregate keys must be subset of lower aggregate keys
specifier|final
name|ImmutableBitSet
name|topGroupSet
init|=
name|topAgg
operator|.
name|getGroupSet
argument_list|()
operator|.
name|permute
argument_list|(
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bottomGroupSet
operator|.
name|contains
argument_list|(
name|topGroupSet
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|hasEmptyGroup
init|=
name|topAgg
operator|.
name|getGroupSets
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|n
lambda|->
name|n
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|finalCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|topCall
range|:
name|topAgg
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAggregateSupported
argument_list|(
name|topCall
argument_list|)
operator|||
name|topCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Make sure top aggregate argument refers to one of the aggregate
name|int
name|bottomIndex
init|=
name|topCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|-
name|bottomGroupSet
operator|.
name|cardinality
argument_list|()
decl_stmt|;
if|if
condition|(
name|bottomIndex
operator|>=
name|bottomAgg
operator|.
name|getAggCallList
argument_list|()
operator|.
name|size
argument_list|()
operator|||
name|bottomIndex
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|AggregateCall
name|bottomCall
init|=
name|bottomAgg
operator|.
name|getAggCallList
argument_list|()
operator|.
name|get
argument_list|(
name|bottomIndex
argument_list|)
decl_stmt|;
comment|// Should not merge if top agg with empty group keys and the lower agg
comment|// function is COUNT, because in case of empty input for lower agg,
comment|// the result is empty, if we merge them, we end up with 1 result with
comment|// 0, which is wrong.
if|if
condition|(
operator|!
name|isAggregateSupported
argument_list|(
name|bottomCall
argument_list|)
operator|||
operator|(
name|bottomCall
operator|.
name|getAggregation
argument_list|()
operator|==
name|SqlStdOperatorTable
operator|.
name|COUNT
operator|&&
name|hasEmptyGroup
operator|)
condition|)
block|{
return|return;
block|}
name|SqlSplittableAggFunction
name|splitter
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bottomCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|unwrap
argument_list|(
name|SqlSplittableAggFunction
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|AggregateCall
name|finalCall
init|=
name|splitter
operator|.
name|merge
argument_list|(
name|topCall
argument_list|,
name|bottomCall
argument_list|)
decl_stmt|;
comment|// fail to merge the aggregate call, bail out
if|if
condition|(
name|finalCall
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|finalCalls
operator|.
name|add
argument_list|(
name|finalCall
argument_list|)
expr_stmt|;
block|}
comment|// re-map grouping sets
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|newGroupingSets
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|topAgg
operator|.
name|getGroupType
argument_list|()
operator|!=
name|Group
operator|.
name|SIMPLE
condition|)
block|{
name|newGroupingSets
operator|=
name|ImmutableBitSet
operator|.
name|ORDERING
operator|.
name|immutableSortedCopy
argument_list|(
name|ImmutableBitSet
operator|.
name|permute
argument_list|(
name|topAgg
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Aggregate
name|finalAgg
init|=
name|topAgg
operator|.
name|copy
argument_list|(
name|topAgg
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|bottomAgg
operator|.
name|getInput
argument_list|()
argument_list|,
name|topAgg
operator|.
name|indicator
argument_list|,
name|topGroupSet
argument_list|,
name|newGroupingSets
argument_list|,
name|finalCalls
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|finalAgg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateMergeRule.java
end_comment

end_unit

