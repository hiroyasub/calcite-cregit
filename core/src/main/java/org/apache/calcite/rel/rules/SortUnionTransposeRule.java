begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes a {@link org.apache.calcite.rel.core.Sort} past a  * {@link org.apache.calcite.rel.core.Union}.  *  */
end_comment

begin_class
specifier|public
class|class
name|SortUnionTransposeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|SortUnionTransposeRule
name|INSTANCE
init|=
operator|new
name|SortUnionTransposeRule
argument_list|()
decl_stmt|;
comment|// ~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SortUnionTransposeRule.    */
specifier|private
name|SortUnionTransposeRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Union
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Union
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// It is not valid to apply the rule if
comment|// Union.all is false;
comment|// or Sort.offset is not null
comment|// or Sort.fetch is null.
if|if
condition|(
operator|!
name|union
operator|.
name|all
operator|||
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|||
name|sort
operator|.
name|fetch
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Thus we use 'ret' as a flag to identify if we have finished pushing the
comment|// sort past a union.
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|union
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|RelMdUtil
operator|.
name|checkInputForCollationAndLimit
argument_list|(
name|input
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
name|Sort
name|branchSort
init|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|input
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|branchSort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|// there is nothing to change
if|if
condition|(
name|ret
condition|)
block|{
return|return;
block|}
comment|// create new union and sort
name|Union
name|unionCopy
init|=
operator|(
name|Union
operator|)
name|union
operator|.
name|copy
argument_list|(
name|union
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|union
operator|.
name|all
argument_list|)
decl_stmt|;
name|Sort
name|result
init|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|unionCopy
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SortUnionTransposeRule.java
end_comment

end_unit

