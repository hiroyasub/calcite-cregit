begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_comment
comment|/**  * Planner rule that matches  * {@link org.apache.calcite.rel.core.Aggregate}s beneath a  * {@link org.apache.calcite.rel.core.Union} and pulls them up, so  * that a single  * {@link org.apache.calcite.rel.core.Aggregate} removes duplicates.  *  *<p>This rule only handles cases where the  * {@link org.apache.calcite.rel.core.Union}s  * still have only two inputs.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateUnionAggregateRule
extends|extends
name|RelOptRule
block|{
comment|/** Instance that matches an {@code Aggregate} as the left input of    * {@code Union}. */
specifier|public
specifier|static
specifier|final
name|AggregateUnionAggregateRule
name|AGG_ON_FIRST_INPUT
init|=
operator|new
name|AggregateUnionAggregateRule
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|LogicalUnion
operator|.
name|class
argument_list|,
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
literal|"AggregateUnionAggregateRule:first-input-agg"
argument_list|)
decl_stmt|;
comment|/** Instance that matches an {@code Aggregate} as the right input of    * {@code Union}. */
specifier|public
specifier|static
specifier|final
name|AggregateUnionAggregateRule
name|AGG_ON_SECOND_INPUT
init|=
operator|new
name|AggregateUnionAggregateRule
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|LogicalUnion
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
literal|"AggregateUnionAggregateRule:second-input-agg"
argument_list|)
decl_stmt|;
comment|/** Instance that matches an {@code Aggregate} as either input of    * {@link Union}.    *    *<p>Because it matches {@link RelNode} for each input of {@code Union}, it    * will create O(N ^ 2) matches, which may cost too much during the popMatch    * phase in VolcanoPlanner. If efficiency is a concern, we recommend that you    * use {@link #AGG_ON_FIRST_INPUT} and {@link #AGG_ON_SECOND_INPUT} instead. */
specifier|public
specifier|static
specifier|final
name|AggregateUnionAggregateRule
name|INSTANCE
init|=
operator|new
name|AggregateUnionAggregateRule
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|LogicalUnion
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
literal|"AggregateUnionAggregateRule"
argument_list|)
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a AggregateUnionAggregateRule.    */
specifier|public
name|AggregateUnionAggregateRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Union
argument_list|>
name|unionClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|firstUnionInputClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|secondUnionInputClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|operandJ
argument_list|(
name|aggregateClass
argument_list|,
literal|null
argument_list|,
name|Aggregate
operator|::
name|isSimple
argument_list|,
name|operand
argument_list|(
name|unionClass
argument_list|,
name|operand
argument_list|(
name|firstUnionInputClass
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|secondUnionInputClass
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateUnionAggregateRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|RelFactories
operator|.
name|AggregateFactory
name|aggregateFactory
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Union
argument_list|>
name|unionClass
parameter_list|,
name|RelFactories
operator|.
name|SetOpFactory
name|setOpFactory
parameter_list|)
block|{
name|this
argument_list|(
name|aggregateClass
argument_list|,
name|unionClass
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|RelBuilder
operator|.
name|proto
argument_list|(
name|aggregateFactory
argument_list|,
name|setOpFactory
argument_list|)
argument_list|,
literal|"AggregateUnionAggregateRule"
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Returns an input with the same row type with the input Aggregate,    * create a Project node if needed.    */
specifier|private
name|RelNode
name|getInputWithSameRowType
parameter_list|(
name|Aggregate
name|bottomAggRel
parameter_list|)
block|{
if|if
condition|(
name|RelOptUtil
operator|.
name|areRowTypesEqual
argument_list|(
name|bottomAggRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|bottomAggRel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
name|bottomAggRel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|RelOptUtil
operator|.
name|createProject
argument_list|(
name|bottomAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|bottomAggRel
operator|.
name|getGroupSet
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|topAggRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Union
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// If distincts haven't been removed yet, defer invoking this rule
if|if
condition|(
operator|!
name|union
operator|.
name|all
condition|)
block|{
return|return;
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Aggregate
name|bottomAggRel
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
operator|instanceof
name|Aggregate
condition|)
block|{
comment|// Aggregate is the second input
name|bottomAggRel
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|push
argument_list|(
name|getInputWithSameRowType
argument_list|(
name|bottomAggRel
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|Aggregate
condition|)
block|{
comment|// Aggregate is the first input
name|bottomAggRel
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|getInputWithSameRowType
argument_list|(
name|bottomAggRel
argument_list|)
argument_list|)
operator|.
name|push
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
comment|// Only pull up aggregates if they are there just to remove distincts
if|if
condition|(
operator|!
name|topAggRel
operator|.
name|getAggCallList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|bottomAggRel
operator|.
name|getAggCallList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|relBuilder
operator|.
name|union
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|rename
argument_list|(
name|union
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|topAggRel
operator|.
name|getGroupSet
argument_list|()
argument_list|)
argument_list|,
name|topAggRel
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateUnionAggregateRule.java
end_comment

end_unit

