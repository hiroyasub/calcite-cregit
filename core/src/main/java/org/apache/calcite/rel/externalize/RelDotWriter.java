begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|externalize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Utility to dump a rel node plan in dot format.  */
end_comment

begin_class
specifier|public
class|class
name|RelDotWriter
extends|extends
name|RelWriterImpl
block|{
comment|//~ Instance fields --------------------------------------------------------
comment|/**    * Adjacent list of the plan graph.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
argument_list|>
name|outArcTable
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|RelNode
argument_list|,
name|String
argument_list|>
name|nodeLabels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Multimap
argument_list|<
name|RelNode
argument_list|,
name|String
argument_list|>
name|nodeStyles
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WriteOption
name|option
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|RelDotWriter
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|,
name|boolean
name|withIdPrefix
parameter_list|)
block|{
name|this
argument_list|(
name|pw
argument_list|,
name|detailLevel
argument_list|,
name|withIdPrefix
argument_list|,
name|WriteOption
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelDotWriter
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|,
name|boolean
name|withIdPrefix
parameter_list|,
name|WriteOption
name|option
parameter_list|)
block|{
name|super
argument_list|(
name|pw
argument_list|,
name|detailLevel
argument_list|,
name|withIdPrefix
argument_list|)
expr_stmt|;
name|this
operator|.
name|option
operator|=
name|option
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|protected
name|void
name|explain_
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
comment|// get inputs
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|getInputs
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|outArcTable
operator|.
name|put
argument_list|(
name|rel
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
comment|// generate node label
name|String
name|label
init|=
name|getRelNodeLabel
argument_list|(
name|rel
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|nodeLabels
operator|.
name|put
argument_list|(
name|rel
argument_list|,
name|label
argument_list|)
expr_stmt|;
if|if
condition|(
name|highlightNode
argument_list|(
name|rel
argument_list|)
condition|)
block|{
name|nodeStyles
operator|.
name|put
argument_list|(
name|rel
argument_list|,
literal|"bold"
argument_list|)
expr_stmt|;
block|}
name|explainInputs
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getRelNodeLabel
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|withIdPrefix
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|rel
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|rel
operator|.
name|getRelTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailLevel
operator|!=
name|SqlExplainLevel
operator|.
name|NO_ATTRIBUTES
condition|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|.
name|right
operator|instanceof
name|RelNode
condition|)
block|{
continue|continue;
block|}
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|left
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|value
operator|.
name|right
argument_list|)
expr_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|detailLevel
condition|)
block|{
case|case
name|ALL_ATTRIBUTES
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"rowcount = "
argument_list|)
operator|.
name|append
argument_list|(
name|mq
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" cumulative cost = "
argument_list|)
operator|.
name|append
argument_list|(
name|mq
operator|.
name|getCumulativeCost
argument_list|(
name|rel
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
switch|switch
condition|(
name|detailLevel
condition|)
block|{
case|case
name|NON_COST_ATTRIBUTES
case|:
case|case
name|ALL_ATTRIBUTES
case|:
if|if
condition|(
operator|!
name|withIdPrefix
condition|)
block|{
comment|// If we didn't print the rel id at the start of the line, print
comment|// it at the end.
name|sb
operator|.
name|append
argument_list|(
literal|"id = "
argument_list|)
operator|.
name|append
argument_list|(
name|rel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
name|labels
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// format labels separately and then concat them
name|int
name|leftSpace
init|=
name|option
operator|.
name|maxNodeLabelLength
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newlabels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|labels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|option
operator|.
name|maxNodeLabelLength
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|leftSpace
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|labels
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// this is not the last label, but we have to stop here
name|newlabels
operator|.
name|add
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|String
name|formatted
init|=
name|formatNodeLabel
argument_list|(
name|labels
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|option
operator|.
name|maxNodeLabelLength
argument_list|()
argument_list|)
decl_stmt|;
name|newlabels
operator|.
name|add
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
name|leftSpace
operator|-=
name|formatted
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
literal|"\""
operator|+
name|String
operator|.
name|join
argument_list|(
literal|"\\n"
argument_list|,
name|newlabels
argument_list|)
operator|+
literal|"\""
return|;
block|}
specifier|private
name|List
argument_list|<
name|RelNode
argument_list|>
name|getInputs
parameter_list|(
name|RelNode
name|parent
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getInputs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|child
lambda|->
block|{
if|if
condition|(
name|child
operator|instanceof
name|HepRelVertex
condition|)
block|{
return|return
operator|(
operator|(
name|HepRelVertex
operator|)
name|child
operator|)
operator|.
name|getCurrentRel
argument_list|()
return|;
block|}
if|else if
condition|(
name|child
operator|instanceof
name|RelSubset
condition|)
block|{
name|RelSubset
name|subset
init|=
operator|(
name|RelSubset
operator|)
name|child
decl_stmt|;
return|return
name|Util
operator|.
name|first
argument_list|(
name|subset
operator|.
name|getBest
argument_list|()
argument_list|,
name|subset
operator|.
name|getOriginal
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|child
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|explainInputs
parameter_list|(
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
for|for
control|(
name|RelNode
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|nodeLabels
operator|.
name|containsKey
argument_list|(
name|input
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|input
operator|.
name|explain
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|done
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
name|int
name|numOfVisitedNodes
init|=
name|nodeLabels
operator|.
name|size
argument_list|()
decl_stmt|;
name|super
operator|.
name|done
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|numOfVisitedNodes
operator|==
literal|0
condition|)
block|{
comment|// When we enter this method call, no node
comment|// has been visited. So the current node must be the root of the plan.
comment|// Now we are exiting the method, all nodes in the plan
comment|// have been visited, so it is time to dump the plan.
name|pw
operator|.
name|println
argument_list|(
literal|"digraph {"
argument_list|)
expr_stmt|;
comment|// print nodes with styles
for|for
control|(
name|RelNode
name|rel
range|:
name|nodeStyles
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|style
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeStyles
operator|.
name|get
argument_list|(
name|rel
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|nodeLabels
operator|.
name|get
argument_list|(
name|rel
argument_list|)
operator|+
literal|" [style=\""
operator|+
name|style
operator|+
literal|"\"]"
argument_list|)
expr_stmt|;
block|}
comment|// ordinary arcs
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
argument_list|>
name|entry
range|:
name|outArcTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RelNode
name|src
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|srcDesc
init|=
name|nodeLabels
operator|.
name|get
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|dst
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// label is the ordinal of the arc
comment|// arc direction from child to parent, to reflect the direction of data flow
name|pw
operator|.
name|println
argument_list|(
name|nodeLabels
operator|.
name|get
argument_list|(
name|dst
argument_list|)
operator|+
literal|" -> "
operator|+
name|srcDesc
operator|+
literal|" [label=\""
operator|+
name|i
operator|+
literal|"\"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Format the label into multiple lines according to the options.    * @param label the original label.    * @param limit the maximal length of the formatted label.    *              -1 means no limit.    * @return the formatted label.    */
specifier|private
name|String
name|formatNodeLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|label
operator|=
name|label
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// escape quotes in the label.
name|label
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
expr_stmt|;
name|boolean
name|trimmed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
operator|-
literal|1
operator|&&
name|label
operator|.
name|length
argument_list|()
operator|>
name|limit
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|trimmed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|.
name|maxNodeLabelPerLine
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no need to split into multiple lines.
return|return
name|label
operator|+
operator|(
name|trimmed
condition|?
literal|"..."
else|:
literal|""
operator|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|descParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|label
operator|.
name|length
argument_list|()
condition|;
name|idx
operator|+=
name|option
operator|.
name|maxNodeLabelPerLine
argument_list|()
control|)
block|{
name|int
name|endIdx
init|=
name|idx
operator|+
name|option
operator|.
name|maxNodeLabelPerLine
argument_list|()
operator|>
name|label
operator|.
name|length
argument_list|()
condition|?
name|label
operator|.
name|length
argument_list|()
else|:
name|idx
operator|+
name|option
operator|.
name|maxNodeLabelPerLine
argument_list|()
decl_stmt|;
name|descParts
operator|.
name|add
argument_list|(
name|label
operator|.
name|substring
argument_list|(
name|idx
argument_list|,
name|endIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|String
operator|.
name|join
argument_list|(
literal|"\\n"
argument_list|,
name|descParts
argument_list|)
operator|+
operator|(
name|trimmed
condition|?
literal|"..."
else|:
literal|""
operator|)
return|;
block|}
name|boolean
name|highlightNode
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|option
operator|.
name|nodePredicate
argument_list|()
operator|!=
literal|null
operator|&&
name|option
operator|.
name|nodePredicate
argument_list|()
operator|.
name|test
argument_list|(
name|node
argument_list|)
return|;
block|}
comment|/**    * Options for displaying the rel node plan in dot format.    */
specifier|public
interface|interface
name|WriteOption
block|{
comment|/** Default configuration. */
name|WriteOption
name|DEFAULT
init|=
name|ImmutableBeans
operator|.
name|create
argument_list|(
name|WriteOption
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The max length of node labels.      * If the label is too long, the visual display would be messy.      * -1 means no limit to the label length.      */
annotation|@
name|ImmutableBeans
operator|.
name|Property
annotation|@
name|ImmutableBeans
operator|.
name|IntDefault
argument_list|(
literal|100
argument_list|)
name|int
name|maxNodeLabelLength
parameter_list|()
function_decl|;
comment|/**      * The max length of node label in a line.      * -1 means no limitation.      */
annotation|@
name|ImmutableBeans
operator|.
name|Property
annotation|@
name|ImmutableBeans
operator|.
name|IntDefault
argument_list|(
literal|20
argument_list|)
name|int
name|maxNodeLabelPerLine
parameter_list|()
function_decl|;
comment|/**      * Predicate for nodes that need to be highlighted.      */
annotation|@
name|ImmutableBeans
operator|.
name|Property
name|Predicate
argument_list|<
name|RelNode
argument_list|>
name|nodePredicate
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

