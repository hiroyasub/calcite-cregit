begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelShuttleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Correlate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Push Project under Correlate to apply on Correlate's left and right child  */
end_comment

begin_class
specifier|public
class|class
name|ProjectCorrelateTransposeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|ProjectCorrelateTransposeRule
name|INSTANCE
init|=
operator|new
name|ProjectCorrelateTransposeRule
argument_list|(
name|expr
lambda|->
literal|true
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**    * preserveExprCondition to define the condition for a expression not to be pushed    */
specifier|private
specifier|final
name|PushProjector
operator|.
name|ExprCondition
name|preserveExprCondition
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|ProjectCorrelateTransposeRule
parameter_list|(
name|PushProjector
operator|.
name|ExprCondition
name|preserveExprCondition
parameter_list|,
name|RelBuilderFactory
name|relFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Correlate
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|relFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|preserveExprCondition
operator|=
name|preserveExprCondition
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Project
name|origProj
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Correlate
name|corr
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// locate all fields referenced in the projection
comment|// determine which inputs are referenced in the projection;
comment|// if all fields are being referenced and there are no
comment|// special expressions, no point in proceeding any further
name|PushProjector
name|pushProject
init|=
operator|new
name|PushProjector
argument_list|(
name|origProj
argument_list|,
name|call
operator|.
name|builder
argument_list|()
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|,
name|corr
argument_list|,
name|preserveExprCondition
argument_list|,
name|call
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pushProject
operator|.
name|locateAllRefs
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// create left and right projections, projecting only those
comment|// fields referenced on each side
name|RelNode
name|leftProjRel
init|=
name|pushProject
operator|.
name|createProjectRefsAndExprs
argument_list|(
name|corr
operator|.
name|getLeft
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RelNode
name|rightProjRel
init|=
name|pushProject
operator|.
name|createProjectRefsAndExprs
argument_list|(
name|corr
operator|.
name|getRight
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|requiredColsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// adjust requiredColumns that reference the projected columns
name|int
index|[]
name|adjustments
init|=
name|pushProject
operator|.
name|getAdjustments
argument_list|()
decl_stmt|;
name|BitSet
name|updatedBits
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|col
range|:
name|corr
operator|.
name|getRequiredColumns
argument_list|()
control|)
block|{
name|int
name|newCol
init|=
name|col
operator|+
name|adjustments
index|[
name|col
index|]
decl_stmt|;
name|updatedBits
operator|.
name|set
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
name|requiredColsMap
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|newCol
argument_list|)
expr_stmt|;
block|}
name|RexBuilder
name|rexBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|CorrelationId
name|correlationId
init|=
name|corr
operator|.
name|getCluster
argument_list|()
operator|.
name|createCorrel
argument_list|()
decl_stmt|;
name|RexCorrelVariable
name|rexCorrel
init|=
operator|(
name|RexCorrelVariable
operator|)
name|rexBuilder
operator|.
name|makeCorrel
argument_list|(
name|leftProjRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|correlationId
argument_list|)
decl_stmt|;
comment|// updates RexCorrelVariable and sets actual RelDataType for RexFieldAccess
name|rightProjRel
operator|=
name|rightProjRel
operator|.
name|accept
argument_list|(
operator|new
name|RelNodesExprsHandler
argument_list|(
operator|new
name|RexFieldAccessReplacer
argument_list|(
name|corr
operator|.
name|getCorrelationId
argument_list|()
argument_list|,
name|rexCorrel
argument_list|,
name|rexBuilder
argument_list|,
name|requiredColsMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a new correlate with the projected children
name|Correlate
name|newCorrRel
init|=
name|corr
operator|.
name|copy
argument_list|(
name|corr
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|leftProjRel
argument_list|,
name|rightProjRel
argument_list|,
name|correlationId
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|BitSets
operator|.
name|toIter
argument_list|(
name|updatedBits
argument_list|)
argument_list|)
argument_list|,
name|corr
operator|.
name|getJoinType
argument_list|()
argument_list|)
decl_stmt|;
comment|// put the original project on top of the correlate, converting it to
comment|// reference the modified projection list
name|RelNode
name|topProject
init|=
name|pushProject
operator|.
name|createNewProject
argument_list|(
name|newCorrRel
argument_list|,
name|adjustments
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|topProject
argument_list|)
expr_stmt|;
block|}
comment|/**    * Visitor for RexNodes which replaces {@link RexCorrelVariable} with specified.    */
specifier|public
specifier|static
class|class
name|RexFieldAccessReplacer
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|CorrelationId
name|rexCorrelVariableToReplace
decl_stmt|;
specifier|private
specifier|final
name|RexCorrelVariable
name|rexCorrelVariable
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|requiredColsMap
decl_stmt|;
specifier|public
name|RexFieldAccessReplacer
parameter_list|(
name|CorrelationId
name|rexCorrelVariableToReplace
parameter_list|,
name|RexCorrelVariable
name|rexCorrelVariable
parameter_list|,
name|RexBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|requiredColsMap
parameter_list|)
block|{
name|this
operator|.
name|rexCorrelVariableToReplace
operator|=
name|rexCorrelVariableToReplace
expr_stmt|;
name|this
operator|.
name|rexCorrelVariable
operator|=
name|rexCorrelVariable
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|requiredColsMap
operator|=
name|requiredColsMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|variable
parameter_list|)
block|{
if|if
condition|(
name|variable
operator|.
name|id
operator|.
name|equals
argument_list|(
name|rexCorrelVariableToReplace
argument_list|)
condition|)
block|{
return|return
name|rexCorrelVariable
return|;
block|}
return|return
name|variable
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
name|RexNode
name|refExpr
init|=
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// creates new RexFieldAccess instance for the case when referenceExpr was replaced.
comment|// Otherwise calls super method.
if|if
condition|(
name|refExpr
operator|==
name|rexCorrelVariable
condition|)
block|{
return|return
name|builder
operator|.
name|makeFieldAccess
argument_list|(
name|refExpr
argument_list|,
name|requiredColsMap
operator|.
name|get
argument_list|(
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|visitFieldAccess
argument_list|(
name|fieldAccess
argument_list|)
return|;
block|}
block|}
comment|/**    * Visitor for RelNodes which applies specified {@link RexShuttle} visitor    * for every node in the tree.    */
specifier|public
specifier|static
class|class
name|RelNodesExprsHandler
extends|extends
name|RelShuttleImpl
block|{
specifier|private
specifier|final
name|RexShuttle
name|rexVisitor
decl_stmt|;
specifier|public
name|RelNodesExprsHandler
parameter_list|(
name|RexShuttle
name|rexVisitor
parameter_list|)
block|{
name|this
operator|.
name|rexVisitor
operator|=
name|rexVisitor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RelNode
name|visitChild
parameter_list|(
name|RelNode
name|parent
parameter_list|,
name|int
name|i
parameter_list|,
name|RelNode
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|HepRelVertex
condition|)
block|{
name|child
operator|=
operator|(
operator|(
name|HepRelVertex
operator|)
name|child
operator|)
operator|.
name|getCurrentRel
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|instanceof
name|RelSubset
condition|)
block|{
name|RelSubset
name|subset
init|=
operator|(
name|RelSubset
operator|)
name|child
decl_stmt|;
name|child
operator|=
name|Util
operator|.
name|first
argument_list|(
name|subset
operator|.
name|getBest
argument_list|()
argument_list|,
name|subset
operator|.
name|getOriginal
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visitChild
argument_list|(
name|parent
argument_list|,
name|i
argument_list|,
name|child
argument_list|)
operator|.
name|accept
argument_list|(
name|rexVisitor
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ProjectCorrelateTransposeRule.java
end_comment

end_unit

