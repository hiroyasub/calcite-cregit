begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Mutable equivalent of {@link org.apache.calcite.rel.core.Sort}. */
end_comment

begin_class
specifier|public
class|class
name|MutableSort
extends|extends
name|MutableSingleRel
block|{
specifier|public
specifier|final
name|RelCollation
name|collation
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|RexNode
name|offset
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|RexNode
name|fetch
decl_stmt|;
specifier|private
name|MutableSort
parameter_list|(
name|MutableRel
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|offset
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|fetch
parameter_list|)
block|{
name|super
argument_list|(
name|MutableRelType
operator|.
name|SORT
argument_list|,
name|input
operator|.
name|rowType
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|collation
operator|=
name|collation
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|fetch
operator|=
name|fetch
expr_stmt|;
block|}
comment|/**    * Creates a MutableSort.    *    * @param input     Input relational expression    * @param collation Array of sort specifications    * @param offset    Expression for number of rows to discard before returning    *                  first row    * @param fetch     Expression for number of rows to fetch    */
specifier|public
specifier|static
name|MutableSort
name|of
parameter_list|(
name|MutableRel
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|offset
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|fetch
parameter_list|)
block|{
return|return
operator|new
name|MutableSort
argument_list|(
name|input
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|MutableSort
operator|&&
name|collation
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|MutableSort
operator|)
name|obj
operator|)
operator|.
name|collation
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|offset
argument_list|,
operator|(
operator|(
name|MutableSort
operator|)
name|obj
operator|)
operator|.
name|offset
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fetch
argument_list|,
operator|(
operator|(
name|MutableSort
operator|)
name|obj
operator|)
operator|.
name|fetch
argument_list|)
operator|&&
name|input
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|MutableSort
operator|)
name|obj
operator|)
operator|.
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|input
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|digest
parameter_list|(
name|StringBuilder
name|buf
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"Sort(collation: "
argument_list|)
operator|.
name|append
argument_list|(
name|collation
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", offset: "
argument_list|)
operator|.
name|append
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetch
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", fetch: "
argument_list|)
operator|.
name|append
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MutableRel
name|clone
parameter_list|()
block|{
return|return
name|MutableSort
operator|.
name|of
argument_list|(
name|input
operator|.
name|clone
argument_list|()
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
block|}
end_class

end_unit

