begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlPostfixOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Rule that converts CASE-style filtered aggregates into true filtered  * aggregates.  *  *<p>For example,  *  *<blockquote>  *<code>SELECT SUM(CASE WHEN gender = 'F' THEN salary END)<br>  *   FROM Emp</code>  *</blockquote>  *  *<p>becomes  *  *<blockquote>  *<code>SELECT SUM(salary) FILTER (WHERE gender = 'F')<br>  *   FROM Emp</code>  *</blockquote>  *  * @see CoreRules#AGGREGATE_CASE_TO_FILTER  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|AggregateCaseToFilterRule
extends|extends
name|RelRule
argument_list|<
name|AggregateCaseToFilterRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
comment|/** Creates an AggregateCaseToFilterRule. */
specifier|protected
name|AggregateCaseToFilterRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|protected
name|AggregateCaseToFilterRule
parameter_list|(
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|withDescription
argument_list|(
name|description
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
specifier|final
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggregateCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
specifier|final
name|int
name|singleArg
init|=
name|soleArgument
argument_list|(
name|aggregateCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleArg
operator|>=
literal|0
operator|&&
name|isThreeArgCase
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|singleArg
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggregateCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
name|AggregateCall
name|newCall
init|=
name|transform
argument_list|(
name|aggregateCall
argument_list|,
name|project
argument_list|,
name|newProjects
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCall
operator|==
literal|null
condition|)
block|{
name|newCalls
operator|.
name|add
argument_list|(
name|aggregateCall
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCalls
operator|.
name|add
argument_list|(
name|newCall
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newCalls
operator|.
name|equals
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|)
operator|.
name|project
argument_list|(
name|newProjects
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
operator|.
name|GroupKey
name|groupKey
init|=
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|groupKey
argument_list|,
name|newCalls
argument_list|)
operator|.
name|convert
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|prune
argument_list|(
name|aggregate
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|AggregateCall
name|transform
parameter_list|(
name|AggregateCall
name|aggregateCall
parameter_list|,
name|Project
name|project
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
parameter_list|)
block|{
specifier|final
name|int
name|singleArg
init|=
name|soleArgument
argument_list|(
name|aggregateCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleArg
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RexNode
name|rexNode
init|=
name|project
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|singleArg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isThreeArgCase
argument_list|(
name|rexNode
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RelOptCluster
name|cluster
init|=
name|project
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexCall
name|caseCall
init|=
operator|(
name|RexCall
operator|)
name|rexNode
decl_stmt|;
comment|// If one arg is null and the other is not, reverse them and set "flip",
comment|// which negates the filter.
specifier|final
name|boolean
name|flip
init|=
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|caseCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
operator|!
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|caseCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|arg1
init|=
name|caseCall
operator|.
name|operands
operator|.
name|get
argument_list|(
name|flip
condition|?
literal|2
else|:
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|arg2
init|=
name|caseCall
operator|.
name|operands
operator|.
name|get
argument_list|(
name|flip
condition|?
literal|1
else|:
literal|2
argument_list|)
decl_stmt|;
comment|// Operand 1: Filter
specifier|final
name|SqlPostfixOperator
name|op
init|=
name|flip
condition|?
name|SqlStdOperatorTable
operator|.
name|IS_NOT_TRUE
else|:
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
decl_stmt|;
specifier|final
name|RexNode
name|filterFromCase
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|,
name|caseCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Combine the CASE filter with an honest-to-goodness SQL FILTER, if the
comment|// latter is present.
specifier|final
name|RexNode
name|filter
decl_stmt|;
if|if
condition|(
name|aggregateCall
operator|.
name|filterArg
operator|>=
literal|0
condition|)
block|{
name|filter
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|aggregateCall
operator|.
name|filterArg
argument_list|)
argument_list|,
name|filterFromCase
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|filterFromCase
expr_stmt|;
block|}
specifier|final
name|SqlKind
name|kind
init|=
name|aggregateCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregateCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
comment|// Just one style supported:
comment|//   COUNT(DISTINCT CASE WHEN x = 'foo' THEN y END)
comment|// =>
comment|//   COUNT(DISTINCT y) FILTER(WHERE x = 'foo')
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|COUNT
operator|&&
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|arg2
argument_list|)
condition|)
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
name|newProjects
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newProjects
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|newProjects
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|aggregateCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggregateCall
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// Four styles supported:
comment|//
comment|// A1: AGG(CASE WHEN x = 'foo' THEN cnt END)
comment|//   => operands (x = 'foo', cnt, null)
comment|// A2: SUM(CASE WHEN x = 'foo' THEN cnt ELSE 0 END)
comment|//   => operands (x = 'foo', cnt, 0); must be SUM
comment|// B: SUM(CASE WHEN x = 'foo' THEN 1 ELSE 0 END)
comment|//   => operands (x = 'foo', 1, 0); must be SUM
comment|// C: COUNT(CASE WHEN x = 'foo' THEN 'dummy' END)
comment|//   => operands (x = 'foo', 'dummy', null)
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|COUNT
comment|// Case C
operator|&&
name|arg1
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
operator|&&
operator|!
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|arg1
argument_list|)
operator|&&
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|arg2
argument_list|)
condition|)
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|newProjects
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|aggregateCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggregateCall
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|SUM
comment|// Case B
operator|&&
name|isIntLiteral
argument_list|(
name|arg1
argument_list|,
name|BigDecimal
operator|.
name|ONE
argument_list|)
operator|&&
name|isIntLiteral
argument_list|(
name|arg2
argument_list|,
name|BigDecimal
operator|.
name|ZERO
argument_list|)
condition|)
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|dataType
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|newProjects
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|dataType
argument_list|,
name|aggregateCall
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
operator|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|arg2
argument_list|)
comment|// Case A1
operator|&&
name|aggregateCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|allowsFilter
argument_list|()
operator|)
operator|||
operator|(
name|kind
operator|==
name|SqlKind
operator|.
name|SUM
comment|// Case A2
operator|&&
name|isIntLiteral
argument_list|(
name|arg2
argument_list|,
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|)
condition|)
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
name|newProjects
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggregateCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newProjects
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|newProjects
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|aggregateCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggregateCall
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Returns the argument, if an aggregate call has a single argument,    * otherwise -1. */
specifier|private
specifier|static
name|int
name|soleArgument
parameter_list|(
name|AggregateCall
name|aggregateCall
parameter_list|)
block|{
return|return
name|aggregateCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|aggregateCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isThreeArgCase
parameter_list|(
specifier|final
name|RexNode
name|rexNode
parameter_list|)
block|{
return|return
name|rexNode
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CASE
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|3
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isIntLiteral
parameter_list|(
name|RexNode
name|rexNode
parameter_list|,
name|BigDecimal
name|value
parameter_list|)
block|{
return|return
name|rexNode
operator|instanceof
name|RexLiteral
operator|&&
name|SqlTypeName
operator|.
name|INT_TYPES
operator|.
name|contains
argument_list|(
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
operator|&&
name|value
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|rexNode
operator|)
operator|.
name|getValueAs
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|ImmutableAggregateCaseToFilterRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|)
operator|.
name|oneInput
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|AggregateCaseToFilterRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|AggregateCaseToFilterRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

