begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes  * {@link org.apache.calcite.rel.core.SemiJoin}s down in a tree past  * a {@link org.apache.calcite.rel.core.Filter}.  *  *<p>The intention is to trigger other rules that will convert  * {@code SemiJoin}s.  *  *<p>SemiJoin(LogicalFilter(X), Y)&rarr; LogicalFilter(SemiJoin(X, Y))  *  * @see SemiJoinProjectTransposeRule  */
end_comment

begin_class
specifier|public
class|class
name|SemiJoinFilterTransposeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|SemiJoinFilterTransposeRule
name|INSTANCE
init|=
operator|new
name|SemiJoinFilterTransposeRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SemiJoinFilterTransposeRule.    */
specifier|private
name|SemiJoinFilterTransposeRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|SemiJoin
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|LogicalFilter
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|SemiJoin
name|semiJoin
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LogicalFilter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RelNode
name|newSemiJoin
init|=
name|SemiJoin
operator|.
name|create
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|,
name|semiJoin
operator|.
name|getRight
argument_list|()
argument_list|,
name|semiJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|semiJoin
operator|.
name|getLeftKeys
argument_list|()
argument_list|,
name|semiJoin
operator|.
name|getRightKeys
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelFactories
operator|.
name|FilterFactory
name|factory
init|=
name|RelFactories
operator|.
name|DEFAULT_FILTER_FACTORY
decl_stmt|;
name|RelNode
name|newFilter
init|=
name|factory
operator|.
name|createFilter
argument_list|(
name|newSemiJoin
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SemiJoinFilterTransposeRule.java
end_comment

end_unit

