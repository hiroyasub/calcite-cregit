begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Base class for the RelMetadataQuery that uses the metadata handler class  * generated by the Janino.  *  *<p>To add a new implementation to this interface, follow  * these steps:  *  *<ol>  *<li>Extends {@link RelMetadataQuery} (name it MyRelMetadataQuery for example)  * to reuse the Calcite builtin metadata query interfaces. In this class, define all the  * extended Handlers for your metadata and implement the metadata query interfaces.  *<li>Write your customized provider class<code>RelMdXyz</code>. Follow  * the pattern from an existing class such as {@link RelMdColumnOrigins},  * overloading on all of the logical relational expressions to which the query  * applies.  *<li>Add a {@code SOURCE} static member to each of your provider class, similar to  * {@link RelMdColumnOrigins#SOURCE}.  *<li>Extends {@link DefaultRelMetadataProvider} (name it MyRelMetadataProvider for example)  * and supplement the "SOURCE"s into the builtin list  * (This is not required, use {@link ChainedRelMetadataProvider} to chain your customized  * "SOURCE"s with default ones also works).  *<li>Set {@code MyRelMetadataProvider} into the cluster instance.  *<li>Use  * {@link org.apache.calcite.plan.RelOptCluster#setMetadataQuery(Supplier)}  * to set the metadata query {@link Supplier} into the cluster instance. This {@link Supplier}  * should return a<strong>fresh new</strong> instance.  *<li>Use the cluster instance to create  * {@link org.apache.calcite.sql2rel.SqlToRelConverter}.</li>  *<li>Query your metadata within {@link org.apache.calcite.plan.RelOptRuleCall} with the  * interfaces you defined in {@code MyRelMetadataQuery}.  *</ol>  */
end_comment

begin_class
specifier|public
class|class
name|RelMetadataQueryBase
block|{
comment|//~ Instance fields --------------------------------------------------------
comment|/** Set of active metadata queries, and cache of previous results. */
specifier|public
specifier|final
name|Table
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|JaninoRelMetadataProvider
name|metadataProvider
decl_stmt|;
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|JaninoRelMetadataProvider
argument_list|>
name|THREAD_PROVIDERS
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|RelMetadataQueryBase
parameter_list|(
name|JaninoRelMetadataProvider
name|metadataProvider
parameter_list|)
block|{
name|this
operator|.
name|metadataProvider
operator|=
name|metadataProvider
expr_stmt|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|H
parameter_list|>
name|H
name|initialHandler
parameter_list|(
name|Class
argument_list|<
name|H
argument_list|>
name|handlerClass
parameter_list|)
block|{
return|return
name|handlerClass
operator|.
name|cast
argument_list|(
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|RelMetadataQuery
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|handlerClass
block|}
argument_list|,
parameter_list|(
name|proxy
parameter_list|,
name|method
parameter_list|,
name|args
parameter_list|)
lambda|->
block|{
specifier|final
name|RelNode
name|r
init|=
operator|(
name|RelNode
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
throw|throw
operator|new
name|JaninoRelMetadataProvider
operator|.
name|NoHandler
argument_list|(
name|r
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Re-generates the handler for a given kind of metadata, adding support for    * {@code class_} if it is not already present. */
specifier|protected
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|,
name|H
extends|extends
name|MetadataHandler
argument_list|<
name|M
argument_list|>
parameter_list|>
name|H
name|revise
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|class_
parameter_list|,
name|MetadataDef
argument_list|<
name|M
argument_list|>
name|def
parameter_list|)
block|{
return|return
name|metadataProvider
operator|.
name|revise
argument_list|(
name|class_
argument_list|,
name|def
argument_list|)
return|;
block|}
comment|/**    * Removes cached metadata values for specified RelNode.    *    * @param rel RelNode whose cached metadata should be removed    */
specifier|public
name|void
name|clearCache
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|map
operator|.
name|row
argument_list|(
name|rel
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End RelMetadataQueryBase.java
end_comment

end_unit

