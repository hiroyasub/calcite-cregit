begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
package|;
end_package

begin_comment
comment|/**  * A collection of hint predicates.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HintPredicates
block|{
comment|/** A hint predicate that indicates a hint can only be used to    * the whole query(no specific nodes). */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|SET_VAR
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|SET_VAR
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Join} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|JOIN
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|JOIN
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.TableScan} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|TABLE_SCAN
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|TABLE_SCAN
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Project} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|PROJECT
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|PROJECT
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Aggregate} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|AGGREGATE
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|AGGREGATE
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Calc} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|CALC
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|CALC
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Correlate} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|CORRELATE
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|CORRELATE
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Filter} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|FILTER
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|FILTER
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.SetOp} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|SETOP
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|SETOP
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Sort} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|SORT
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|SORT
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Values} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|VALUES
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|VALUES
argument_list|)
decl_stmt|;
comment|/** A hint predicate that indicates a hint can only be used to    * {@link org.apache.calcite.rel.core.Window} nodes. */
specifier|public
specifier|static
specifier|final
name|HintPredicate
name|WINDOW
init|=
operator|new
name|NodeTypeHintPredicate
argument_list|(
name|NodeTypeHintPredicate
operator|.
name|NodeType
operator|.
name|WINDOW
argument_list|)
decl_stmt|;
comment|/**    * Returns a composed hint predicate that represents a short-circuiting logical    * AND of an array of hint predicates {@code hintPredicates}.  When evaluating the composed    * predicate, if a predicate is {@code false}, then all the left    * predicates are not evaluated.    *    *<p>The predicates are evaluated in sequence.    */
specifier|public
specifier|static
name|HintPredicate
name|and
parameter_list|(
name|HintPredicate
modifier|...
name|hintPredicates
parameter_list|)
block|{
return|return
operator|new
name|CompositeHintPredicate
argument_list|(
name|CompositeHintPredicate
operator|.
name|Composition
operator|.
name|AND
argument_list|,
name|hintPredicates
argument_list|)
return|;
block|}
comment|/**    * Returns a composed hint predicate that represents a short-circuiting logical    * OR of an array of hint predicates {@code hintPredicates}.  When evaluating the composed    * predicate, if a predicate is {@code true}, then all the left    * predicates are not evaluated.    *    *<p>The predicates are evaluated in sequence.    */
specifier|public
specifier|static
name|HintPredicate
name|or
parameter_list|(
name|HintPredicate
modifier|...
name|hintPredicates
parameter_list|)
block|{
return|return
operator|new
name|CompositeHintPredicate
argument_list|(
name|CompositeHintPredicate
operator|.
name|Composition
operator|.
name|OR
argument_list|,
name|hintPredicates
argument_list|)
return|;
block|}
block|}
end_class

end_unit

