begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalMatch
import|;
end_import

begin_comment
comment|/**  * Planner rule that converts a  * {@link LogicalMatch} to the result  * of calling {@link LogicalMatch#copy}.  */
end_comment

begin_class
specifier|public
class|class
name|MatchRule
extends|extends
name|RelOptRule
implements|implements
name|TransformationRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|MatchRule
name|INSTANCE
init|=
operator|new
name|MatchRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|MatchRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|LogicalMatch
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|LogicalMatch
name|oldRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|match
init|=
name|LogicalMatch
operator|.
name|create
argument_list|(
name|oldRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getPattern
argument_list|()
argument_list|,
name|oldRel
operator|.
name|isStrictStart
argument_list|()
argument_list|,
name|oldRel
operator|.
name|isStrictEnd
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getPatternDefinitions
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getMeasures
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getAfter
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getSubsets
argument_list|()
argument_list|,
name|oldRel
operator|.
name|isAllRows
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getOrderKeys
argument_list|()
argument_list|,
name|oldRel
operator|.
name|getInterval
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

