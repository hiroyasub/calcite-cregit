begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes  * a {@link org.apache.calcite.rel.logical.LogicalProject}  * past a {@link org.apache.calcite.rel.logical.LogicalWindow}.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectWindowTransposeRule
extends|extends
name|RelOptRule
block|{
comment|/** The default instance of    * {@link org.apache.calcite.rel.rules.ProjectWindowTransposeRule}. */
specifier|public
specifier|static
specifier|final
name|ProjectWindowTransposeRule
name|INSTANCE
init|=
operator|new
name|ProjectWindowTransposeRule
argument_list|()
decl_stmt|;
specifier|private
name|ProjectWindowTransposeRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|LogicalWindow
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|LogicalProject
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LogicalWindow
name|window
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|window
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|rowTypeWindowInput
init|=
name|window
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|windowInputColumn
init|=
name|rowTypeWindowInput
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Record the window input columns which are actually referred
comment|// either in the LogicalProject above LogicalWindow or LogicalWindow itself
specifier|final
name|ImmutableBitSet
name|beReferred
init|=
name|findReference
argument_list|(
name|project
argument_list|,
name|window
argument_list|)
decl_stmt|;
comment|// If all the the window input columns are referred,
comment|// it is impossible to trim anyone of them out
if|if
condition|(
name|beReferred
operator|.
name|cardinality
argument_list|()
operator|==
name|windowInputColumn
condition|)
block|{
return|return;
block|}
comment|// Put a DrillProjectRel below LogicalWindow
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|builder
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Keep only the fields which are referred
for|for
control|(
name|int
name|index
range|:
name|BitSets
operator|.
name|toIter
argument_list|(
name|beReferred
argument_list|)
control|)
block|{
specifier|final
name|RelDataTypeField
name|relDataTypeField
init|=
name|rowTypeWindowInput
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|exps
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|index
argument_list|,
name|relDataTypeField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|relDataTypeField
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LogicalProject
name|projectBelowWindow
init|=
operator|new
name|LogicalProject
argument_list|(
name|cluster
argument_list|,
name|window
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|window
operator|.
name|getInput
argument_list|()
argument_list|,
name|exps
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a new LogicalWindow with necessary inputs only
specifier|final
name|List
argument_list|<
name|Window
operator|.
name|Group
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// As the un-referred columns are trimmed by the LogicalProject,
comment|// the indices specified in LogicalWindow would need to be adjusted
specifier|final
name|RexShuttle
name|indexAdjustment
init|=
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|inputRef
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newIndex
init|=
name|beReferred
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|cardinality
argument_list|()
decl_stmt|;
return|return
operator|new
name|RexInputRef
argument_list|(
name|newIndex
argument_list|,
name|inputRef
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
specifier|final
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|clonedOperands
init|=
name|visitList
argument_list|(
name|call
operator|.
name|operands
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|instanceof
name|Window
operator|.
name|RexWinAggCall
condition|)
block|{
return|return
operator|new
name|Window
operator|.
name|RexWinAggCall
argument_list|(
operator|(
name|SqlAggFunction
operator|)
name|call
operator|.
name|getOperator
argument_list|()
argument_list|,
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|clonedOperands
argument_list|,
operator|(
operator|(
name|Window
operator|.
name|RexWinAggCall
operator|)
name|call
operator|)
operator|.
name|ordinal
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|call
return|;
block|}
block|}
block|}
decl_stmt|;
name|int
name|aggCallIndex
init|=
name|windowInputColumn
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|outputBuilder
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|outputBuilder
operator|.
name|addAll
argument_list|(
name|projectBelowWindow
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Window
operator|.
name|Group
name|group
range|:
name|window
operator|.
name|groups
control|)
block|{
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|keys
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|orderKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Window
operator|.
name|RexWinAggCall
argument_list|>
name|aggCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Adjust keys
for|for
control|(
name|int
name|index
range|:
name|group
operator|.
name|keys
control|)
block|{
name|keys
operator|.
name|set
argument_list|(
name|beReferred
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Adjust orderKeys
for|for
control|(
name|RelFieldCollation
name|relFieldCollation
range|:
name|group
operator|.
name|orderKeys
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
specifier|final
name|int
name|index
init|=
name|relFieldCollation
operator|.
name|getFieldIndex
argument_list|()
decl_stmt|;
name|orderKeys
operator|.
name|add
argument_list|(
name|relFieldCollation
operator|.
name|copy
argument_list|(
name|beReferred
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|cardinality
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Adjust Window Functions
for|for
control|(
name|Window
operator|.
name|RexWinAggCall
name|rexWinAggCall
range|:
name|group
operator|.
name|aggCalls
control|)
block|{
name|aggCalls
operator|.
name|add
argument_list|(
operator|(
name|Window
operator|.
name|RexWinAggCall
operator|)
name|rexWinAggCall
operator|.
name|accept
argument_list|(
name|indexAdjustment
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelDataTypeField
name|relDataTypeField
init|=
name|window
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|aggCallIndex
argument_list|)
decl_stmt|;
name|outputBuilder
operator|.
name|add
argument_list|(
name|relDataTypeField
argument_list|)
expr_stmt|;
operator|++
name|aggCallIndex
expr_stmt|;
block|}
name|groups
operator|.
name|add
argument_list|(
operator|new
name|Window
operator|.
name|Group
argument_list|(
name|keys
operator|.
name|build
argument_list|()
argument_list|,
name|group
operator|.
name|isRows
argument_list|,
name|group
operator|.
name|lowerBound
argument_list|,
name|group
operator|.
name|upperBound
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
name|orderKeys
argument_list|)
argument_list|,
name|aggCalls
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LogicalWindow
name|newLogicalWindow
init|=
name|LogicalWindow
operator|.
name|create
argument_list|(
name|window
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|projectBelowWindow
argument_list|,
name|window
operator|.
name|constants
argument_list|,
name|outputBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|groups
argument_list|)
decl_stmt|;
comment|// Modify the top LogicalProject
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|topProjExps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexShuttle
name|topProjAdjustment
init|=
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|inputRef
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newIndex
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|windowInputColumn
condition|)
block|{
name|newIndex
operator|=
name|beReferred
operator|.
name|cardinality
argument_list|()
operator|+
operator|(
name|index
operator|-
name|windowInputColumn
operator|)
expr_stmt|;
block|}
else|else
block|{
name|newIndex
operator|=
name|beReferred
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|cardinality
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|RexInputRef
argument_list|(
name|newIndex
argument_list|,
name|inputRef
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|RexNode
name|rexNode
range|:
name|project
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|topProjExps
operator|.
name|add
argument_list|(
name|rexNode
operator|.
name|accept
argument_list|(
name|topProjAdjustment
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LogicalProject
name|newTopProj
init|=
name|project
operator|.
name|copy
argument_list|(
name|newLogicalWindow
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newLogicalWindow
argument_list|,
name|topProjExps
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ProjectRemoveRule
operator|.
name|isTrivial
argument_list|(
name|newTopProj
argument_list|)
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|newLogicalWindow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|newTopProj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ImmutableBitSet
name|findReference
parameter_list|(
specifier|final
name|LogicalProject
name|project
parameter_list|,
specifier|final
name|LogicalWindow
name|window
parameter_list|)
block|{
specifier|final
name|int
name|windowInputColumn
init|=
name|window
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|beReferred
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RexShuttle
name|referenceFinder
init|=
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|inputRef
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|windowInputColumn
condition|)
block|{
name|beReferred
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|inputRef
return|;
block|}
block|}
decl_stmt|;
comment|// Reference in LogicalProject
for|for
control|(
name|RexNode
name|rexNode
range|:
name|project
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|rexNode
operator|.
name|accept
argument_list|(
name|referenceFinder
argument_list|)
expr_stmt|;
block|}
comment|// Reference in LogicalWindow
for|for
control|(
name|Window
operator|.
name|Group
name|group
range|:
name|window
operator|.
name|groups
control|)
block|{
comment|// Reference in Partition-By
for|for
control|(
name|int
name|index
range|:
name|group
operator|.
name|keys
control|)
block|{
if|if
condition|(
name|index
operator|<
name|windowInputColumn
condition|)
block|{
name|beReferred
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Reference in Order-By
for|for
control|(
name|RelFieldCollation
name|relFieldCollation
range|:
name|group
operator|.
name|orderKeys
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
name|relFieldCollation
operator|.
name|getFieldIndex
argument_list|()
operator|<
name|windowInputColumn
condition|)
block|{
name|beReferred
operator|.
name|set
argument_list|(
name|relFieldCollation
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Reference in Window Functions
for|for
control|(
name|Window
operator|.
name|RexWinAggCall
name|rexWinAggCall
range|:
name|group
operator|.
name|aggCalls
control|)
block|{
name|rexWinAggCall
operator|.
name|accept
argument_list|(
name|referenceFinder
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|beReferred
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End ProjectWindowTransposeRule.java
end_comment

end_unit

