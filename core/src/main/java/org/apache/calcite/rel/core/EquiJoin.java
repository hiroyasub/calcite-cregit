begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Base class for any join whose condition is based on column equality.  *  *<p>For most of the cases, {@link JoinInfo#isEqui()} can already decide  * if the join condition is based on column equality.  *  *<p>{@code EquiJoin} is an abstract class for inheritance of Calcite enumerable  * joins and join implementation of other system. You should inherit the {@code EquiJoin}  * if your join implementation does not support non-equi join conditions. Calcite would  * eliminate some optimize logic for {@code EquiJoin} in some planning rules.  * e.g. {@link org.apache.calcite.rel.rules.FilterJoinRule} would not push non-equi  * join conditions of the above filter into the join underneath if it is an {@code EquiJoin}.  *  * @deprecated This class is no longer needed; if you are writing a sub-class of  * Join that only accepts equi conditions, it is sufficient that it extends  * {@link Join}. It will be evident that it is an equi-join when its  * {@link JoinInfo#nonEquiConditions} is an empty list.  */
end_comment

begin_class
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|abstract
class|class
name|EquiJoin
extends|extends
name|Join
block|{
specifier|public
specifier|final
name|ImmutableIntList
name|leftKeys
decl_stmt|;
specifier|public
specifier|final
name|ImmutableIntList
name|rightKeys
decl_stmt|;
comment|/** Creates an EquiJoin. */
specifier|protected
name|EquiJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|variablesSet
argument_list|,
name|joinType
argument_list|)
expr_stmt|;
name|this
operator|.
name|leftKeys
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|joinInfo
operator|.
name|leftKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|rightKeys
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|joinInfo
operator|.
name|rightKeys
argument_list|)
expr_stmt|;
assert|assert
name|joinInfo
operator|.
name|isEqui
argument_list|()
operator|:
literal|"Create EquiJoin with non-equi join condition."
assert|;
block|}
comment|/** Creates an EquiJoin. */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|protected
name|EquiJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|ImmutableIntList
name|leftKeys
parameter_list|,
name|ImmutableIntList
name|rightKeys
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|variablesSet
argument_list|,
name|joinType
argument_list|)
expr_stmt|;
name|this
operator|.
name|leftKeys
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|leftKeys
argument_list|,
literal|"leftKeys"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rightKeys
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rightKeys
argument_list|,
literal|"rightKeys"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|protected
name|EquiJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|ImmutableIntList
name|leftKeys
parameter_list|,
name|ImmutableIntList
name|rightKeys
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|)
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|,
name|CorrelationId
operator|.
name|setOf
argument_list|(
name|variablesStopped
argument_list|)
argument_list|,
name|joinType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ImmutableIntList
name|getLeftKeys
parameter_list|()
block|{
return|return
name|leftKeys
return|;
block|}
specifier|public
name|ImmutableIntList
name|getRightKeys
parameter_list|()
block|{
return|return
name|rightKeys
return|;
block|}
block|}
end_class

end_unit

