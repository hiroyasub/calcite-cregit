begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_comment
comment|/**  * Planner rule that removes  * a {@link org.apache.calcite.rel.core.Sort} if its input is already sorted.  *  *<p>Requires {@link RelCollationTraitDef}.  */
end_comment

begin_class
specifier|public
class|class
name|SortRemoveRule
extends|extends
name|RelOptRule
implements|implements
name|TransformationRule
block|{
comment|/** @deprecated Use {@link CoreRules#SORT_REMOVE}. */
annotation|@
name|Deprecated
comment|// to be removed before 1.25
specifier|public
specifier|static
specifier|final
name|SortRemoveRule
name|INSTANCE
init|=
name|CoreRules
operator|.
name|SORT_REMOVE
decl_stmt|;
comment|/**    * Creates a SortRemoveRule.    *    * @param relBuilderFactory Builder for relational expressions    */
specifier|public
name|SortRemoveRule
parameter_list|(
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"SortRemoveRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
if|if
condition|(
operator|!
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|getRelTraitDefs
argument_list|()
operator|.
name|contains
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
condition|)
block|{
comment|// Collation is not an active trait.
return|return;
block|}
specifier|final
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|||
name|sort
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
comment|// Don't remove sort if would also remove OFFSET or LIMIT.
return|return;
block|}
comment|// Express the "sortedness" requirement in terms of a collation trait and
comment|// we can get rid of the sort. This allows us to use rels that just happen
comment|// to be sorted but get the same effect.
specifier|final
name|RelCollation
name|collation
init|=
name|sort
operator|.
name|getCollation
argument_list|()
decl_stmt|;
assert|assert
name|collation
operator|==
name|sort
operator|.
name|getTraitSet
argument_list|()
operator|.
name|getTrait
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
assert|;
specifier|final
name|RelTraitSet
name|traits
init|=
name|sort
operator|.
name|getInput
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|collation
argument_list|)
operator|.
name|replace
argument_list|(
name|sort
operator|.
name|getConvention
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|convert
argument_list|(
name|sort
operator|.
name|getInput
argument_list|()
argument_list|,
name|traits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

