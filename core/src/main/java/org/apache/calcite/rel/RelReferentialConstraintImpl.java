begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** RelOptReferentialConstraint base implementation. */
end_comment

begin_class
specifier|public
class|class
name|RelReferentialConstraintImpl
implements|implements
name|RelReferentialConstraint
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|sourceQualifiedName
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|targetQualifiedName
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|IntPair
argument_list|>
name|columnPairs
decl_stmt|;
specifier|private
name|RelReferentialConstraintImpl
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sourceQualifiedName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|targetQualifiedName
parameter_list|,
name|List
argument_list|<
name|IntPair
argument_list|>
name|columnPairs
parameter_list|)
block|{
name|this
operator|.
name|sourceQualifiedName
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|sourceQualifiedName
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetQualifiedName
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|targetQualifiedName
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnPairs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|columnPairs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSourceQualifiedName
parameter_list|()
block|{
return|return
name|sourceQualifiedName
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTargetQualifiedName
parameter_list|()
block|{
return|return
name|targetQualifiedName
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|IntPair
argument_list|>
name|getColumnPairs
parameter_list|()
block|{
return|return
name|columnPairs
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumColumns
parameter_list|()
block|{
return|return
name|columnPairs
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|RelReferentialConstraintImpl
name|of
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sourceQualifiedName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|targetQualifiedName
parameter_list|,
name|List
argument_list|<
name|IntPair
argument_list|>
name|columnPairs
parameter_list|)
block|{
return|return
operator|new
name|RelReferentialConstraintImpl
argument_list|(
name|sourceQualifiedName
argument_list|,
name|targetQualifiedName
argument_list|,
name|columnPairs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{ "
operator|+
name|sourceQualifiedName
operator|+
literal|", "
operator|+
name|targetQualifiedName
operator|+
literal|", "
operator|+
name|columnPairs
operator|+
literal|" }"
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelReferentialConstraintImpl.java
end_comment

end_unit

