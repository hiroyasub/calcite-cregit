begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes an  * {@link org.apache.calcite.rel.core.Aggregate}  * past a {@link org.apache.calcite.rel.core.Join}.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateJoinTransposeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|AggregateJoinTransposeRule
name|INSTANCE
init|=
operator|new
name|AggregateJoinTransposeRule
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|RelFactories
operator|.
name|DEFAULT_AGGREGATE_FACTORY
argument_list|,
name|LogicalJoin
operator|.
name|class
argument_list|,
name|RelFactories
operator|.
name|DEFAULT_JOIN_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RelFactories
operator|.
name|AggregateFactory
name|aggregateFactory
decl_stmt|;
specifier|private
specifier|final
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
decl_stmt|;
comment|/** Creates an AggregateJoinTransposeRule. */
specifier|public
name|AggregateJoinTransposeRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|RelFactories
operator|.
name|AggregateFactory
name|aggregateFactory
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|joinClass
parameter_list|,
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|aggregateClass
argument_list|,
literal|null
argument_list|,
name|Aggregate
operator|.
name|IS_SIMPLE
argument_list|,
name|operand
argument_list|(
name|joinClass
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregateFactory
operator|=
name|aggregateFactory
expr_stmt|;
name|this
operator|.
name|joinFactory
operator|=
name|joinFactory
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// If aggregate functions are present, we bail out
if|if
condition|(
operator|!
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// If it is not an inner join, we do not push the
comment|// aggregate operator
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
return|return;
block|}
comment|// Do the columns used by the join appear in the output of the aggregate?
specifier|final
name|ImmutableBitSet
name|aggregateColumns
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|joinColumns
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|allColumnsInAggregate
init|=
name|aggregateColumns
operator|.
name|contains
argument_list|(
name|joinColumns
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allColumnsInAggregate
condition|)
block|{
return|return;
block|}
comment|// Split join condition
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rightKeys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RexNode
name|nonEquiConj
init|=
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
decl_stmt|;
comment|// If it contains non-equi join conditions, we bail out
if|if
condition|(
operator|!
name|nonEquiConj
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Create new aggregate operators below join
specifier|final
name|ImmutableBitSet
name|leftKeysBitSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|leftKeys
argument_list|)
decl_stmt|;
name|RelNode
name|newLeftInput
init|=
name|aggregateFactory
operator|.
name|createAggregate
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
literal|false
argument_list|,
name|leftKeysBitSet
argument_list|,
literal|null
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|rightKeysBitSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|rightKeys
argument_list|)
decl_stmt|;
name|RelNode
name|newRightInput
init|=
name|aggregateFactory
operator|.
name|createAggregate
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
literal|false
argument_list|,
name|rightKeysBitSet
argument_list|,
literal|null
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Update condition
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|target
argument_list|(
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|apply
parameter_list|(
name|Integer
name|a0
parameter_list|)
block|{
return|return
name|aggregateColumns
operator|.
name|indexOf
argument_list|(
name|a0
argument_list|)
return|;
block|}
block|}
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|aggregateColumns
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|newCondition
init|=
name|RexUtil
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create new join
name|RelNode
name|newJoin
init|=
name|joinFactory
operator|.
name|createJoin
argument_list|(
name|newLeftInput
argument_list|,
name|newRightInput
argument_list|,
name|newCondition
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesStopped
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newJoin
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateJoinTransposeRule.java
end_comment

end_unit

