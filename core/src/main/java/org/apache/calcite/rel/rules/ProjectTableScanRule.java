begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Bindables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Planner rule that converts a {@link Project}  * on a {@link org.apache.calcite.rel.core.TableScan}  * of a {@link org.apache.calcite.schema.ProjectableFilterableTable}  * to a {@link org.apache.calcite.interpreter.Bindables.BindableTableScan}.  *  *<p>The {@link #INTERPRETER} variant allows an intervening  * {@link org.apache.calcite.adapter.enumerable.EnumerableInterpreter}.  *  * @see FilterTableScanRule  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ProjectTableScanRule
extends|extends
name|RelOptRule
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Guava"
argument_list|)
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
argument_list|<
name|TableScan
argument_list|>
name|PREDICATE
init|=
name|ProjectTableScanRule
operator|::
name|test
decl_stmt|;
comment|/** Rule that matches Project on TableScan. */
specifier|public
specifier|static
specifier|final
name|ProjectTableScanRule
name|INSTANCE
init|=
operator|new
name|ProjectTableScanRule
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operandJ
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|ProjectTableScanRule
operator|::
name|test
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
literal|"ProjectScanRule"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|apply
argument_list|(
name|call
argument_list|,
name|project
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** Rule that matches Project on EnumerableInterpreter on TableScan. */
specifier|public
specifier|static
specifier|final
name|ProjectTableScanRule
name|INTERPRETER
init|=
operator|new
name|ProjectTableScanRule
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|EnumerableInterpreter
operator|.
name|class
argument_list|,
name|operandJ
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|ProjectTableScanRule
operator|::
name|test
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
literal|"ProjectScanRule:interpreter"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|TableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|apply
argument_list|(
name|call
argument_list|,
name|project
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a ProjectTableScanRule. */
specifier|public
name|ProjectTableScanRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|relBuilderFactory
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
specifier|static
name|boolean
name|test
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
comment|// We can only push projects into a ProjectableFilterableTable.
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|protected
name|void
name|apply
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|Project
name|project
parameter_list|,
name|TableScan
name|scan
parameter_list|)
block|{
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
assert|assert
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
assert|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|selectedColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
name|visitor
init|=
operator|new
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|true
argument_list|)
block|{
specifier|public
name|Void
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
if|if
condition|(
operator|!
name|selectedColumns
operator|.
name|contains
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
condition|)
block|{
name|selectedColumns
operator|.
name|add
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|visitor
operator|.
name|visitEach
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|filtersPushDown
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|projectsPushDown
decl_stmt|;
if|if
condition|(
name|scan
operator|instanceof
name|Bindables
operator|.
name|BindableTableScan
condition|)
block|{
specifier|final
name|Bindables
operator|.
name|BindableTableScan
name|bindableScan
init|=
operator|(
name|Bindables
operator|.
name|BindableTableScan
operator|)
name|scan
decl_stmt|;
name|filtersPushDown
operator|=
name|bindableScan
operator|.
name|filters
expr_stmt|;
name|projectsPushDown
operator|=
name|selectedColumns
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|col
lambda|->
name|bindableScan
operator|.
name|projects
operator|.
name|get
argument_list|(
name|col
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filtersPushDown
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|projectsPushDown
operator|=
name|selectedColumns
expr_stmt|;
block|}
name|Bindables
operator|.
name|BindableTableScan
name|newScan
init|=
name|Bindables
operator|.
name|BindableTableScan
operator|.
name|create
argument_list|(
name|scan
operator|.
name|getCluster
argument_list|()
argument_list|,
name|scan
operator|.
name|getTable
argument_list|()
argument_list|,
name|filtersPushDown
argument_list|,
name|projectsPushDown
argument_list|)
decl_stmt|;
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|target
argument_list|(
name|selectedColumns
argument_list|,
name|scan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjectRexNodes
init|=
name|RexUtil
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|isIdentity
argument_list|(
name|newProjectRexNodes
argument_list|,
name|newScan
operator|.
name|getRowType
argument_list|()
argument_list|)
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|newScan
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|newScan
argument_list|)
operator|.
name|project
argument_list|(
name|newProjectRexNodes
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

