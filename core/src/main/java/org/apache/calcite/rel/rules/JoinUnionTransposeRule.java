begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SetOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes a  * {@link org.apache.calcite.rel.core.Join}  * past a non-distinct {@link org.apache.calcite.rel.core.Union}.  *  * @see CoreRules#JOIN_LEFT_UNION_TRANSPOSE  * @see CoreRules#JOIN_RIGHT_UNION_TRANSPOSE  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|JoinUnionTransposeRule
extends|extends
name|RelRule
argument_list|<
name|JoinUnionTransposeRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
comment|/** Creates a JoinUnionTransposeRule. */
specifier|protected
name|JoinUnionTransposeRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JoinUnionTransposeRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|LEFT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|withDescription
argument_list|(
name|description
argument_list|)
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|exactly
argument_list|(
name|operand
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Union
name|unionRel
decl_stmt|;
name|RelNode
name|otherInput
decl_stmt|;
name|boolean
name|unionOnLeft
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Union
condition|)
block|{
name|unionRel
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|otherInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|unionOnLeft
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|otherInput
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|unionRel
operator|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|unionOnLeft
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unionRel
operator|.
name|all
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|join
operator|.
name|getVariablesSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// The UNION ALL cannot be on the null generating side
comment|// of an outer join (otherwise we might generate incorrect
comment|// rows for the other side for join keys which lack a match
comment|// in one or both branches of the union)
if|if
condition|(
name|unionOnLeft
condition|)
block|{
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnLeft
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnRight
argument_list|()
operator|||
operator|!
name|join
operator|.
name|getJoinType
argument_list|()
operator|.
name|projectsRight
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|List
argument_list|<
name|RelNode
argument_list|>
name|newUnionInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|unionRel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|RelNode
name|joinLeft
decl_stmt|;
name|RelNode
name|joinRight
decl_stmt|;
if|if
condition|(
name|unionOnLeft
condition|)
block|{
name|joinLeft
operator|=
name|input
expr_stmt|;
name|joinRight
operator|=
name|otherInput
expr_stmt|;
block|}
else|else
block|{
name|joinLeft
operator|=
name|otherInput
expr_stmt|;
name|joinRight
operator|=
name|input
expr_stmt|;
block|}
name|newUnionInputs
operator|.
name|add
argument_list|(
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|joinLeft
argument_list|,
name|joinRight
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SetOp
name|newUnionRel
init|=
name|unionRel
operator|.
name|copy
argument_list|(
name|unionRel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newUnionInputs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newUnionRel
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|LEFT
init|=
name|ImmutableJoinUnionTransposeRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"JoinUnionTransposeRule(Union-Other)"
argument_list|)
operator|.
name|withOperandFor
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|Union
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Config
name|RIGHT
init|=
name|ImmutableJoinUnionTransposeRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"JoinUnionTransposeRule(Other-Union)"
argument_list|)
operator|.
name|withOperandFor
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|Union
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|JoinUnionTransposeRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|JoinUnionTransposeRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Defines an operand tree for the given classes. */
specifier|default
name|Config
name|withOperandFor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|joinClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Union
argument_list|>
name|unionClass
parameter_list|,
name|boolean
name|left
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|leftClass
init|=
name|left
condition|?
name|unionClass
else|:
name|RelNode
operator|.
name|class
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|rightClass
init|=
name|left
condition|?
name|RelNode
operator|.
name|class
else|:
name|unionClass
decl_stmt|;
return|return
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|joinClass
argument_list|)
operator|.
name|inputs
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|leftClass
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|,
name|b2
lambda|->
name|b2
operator|.
name|operand
argument_list|(
name|rightClass
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

