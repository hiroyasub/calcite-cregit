begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
operator|.
name|none
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
operator|.
name|operand
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
operator|.
name|some
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
operator|.
name|unordered
import|;
end_import

begin_comment
comment|/**  * Collection of rules which remove sections of a query plan known never to  * produce any rows.  *  *<p>Conventionally, the way to represent an empty relational expression is  * with a {@link Values} that has no tuples.  *  * @see LogicalValues#createEmpty  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PruneEmptyRules
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * Rule that removes empty children of a    * {@link org.apache.calcite.rel.logical.LogicalUnion}.    *    *<p>Examples:    *    *<ul>    *<li>Union(Rel, Empty, Rel2) becomes Union(Rel, Rel2)    *<li>Union(Rel, Empty, Empty) becomes Rel    *<li>Union(Empty, Empty) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|UNION_INSTANCE
init|=
operator|new
name|RelOptRule
argument_list|(
name|operand
argument_list|(
name|LogicalUnion
operator|.
name|class
argument_list|,
name|unordered
argument_list|(
name|operand
argument_list|(
name|Values
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|Values
operator|.
name|IS_EMPTY
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"Union"
argument_list|)
block|{
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LogicalUnion
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|childRels
init|=
name|call
operator|.
name|getChildRels
argument_list|(
name|union
argument_list|)
decl_stmt|;
assert|assert
name|childRels
operator|!=
literal|null
assert|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newChildRels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|childRel
range|:
name|childRels
control|)
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|childRel
argument_list|)
condition|)
block|{
name|newChildRels
operator|.
name|add
argument_list|(
name|childRel
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|newChildRels
operator|.
name|size
argument_list|()
operator|<
name|childRels
operator|.
name|size
argument_list|()
operator|:
literal|"planner promised us at least one Empty child"
assert|;
name|RelNode
name|newRel
decl_stmt|;
switch|switch
condition|(
name|newChildRels
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|newRel
operator|=
name|empty
argument_list|(
name|union
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|newRel
operator|=
name|RelOptUtil
operator|.
name|createCastRel
argument_list|(
name|newChildRels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|union
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|newRel
operator|=
name|LogicalUnion
operator|.
name|create
argument_list|(
name|newChildRels
argument_list|,
name|union
operator|.
name|all
argument_list|)
expr_stmt|;
break|break;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|instanceof
name|Values
operator|&&
operator|(
operator|(
name|Values
operator|)
name|node
operator|)
operator|.
name|getTuples
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Rule that converts a {@link org.apache.calcite.rel.logical.LogicalProject}    * to empty if its child is empty.    *    *<p>Examples:    *    *<ul>    *<li>Project(Empty) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|PROJECT_INSTANCE
init|=
operator|new
name|RemoveEmptySingleRule
argument_list|(
name|Project
operator|.
name|class
argument_list|,
literal|"PruneEmptyProject"
argument_list|)
decl_stmt|;
comment|/**    * Rule that converts a {@link org.apache.calcite.rel.logical.LogicalFilter}    * to empty if its child is empty.    *    *<p>Examples:    *    *<ul>    *<li>Filter(Empty) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|FILTER_INSTANCE
init|=
operator|new
name|RemoveEmptySingleRule
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
literal|"PruneEmptyFilter"
argument_list|)
decl_stmt|;
comment|/**    * Rule that converts a {@link org.apache.calcite.rel.core.Sort}    * to empty if its child is empty.    *    *<p>Examples:    *    *<ul>    *<li>Sort(Empty) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|SORT_INSTANCE
init|=
operator|new
name|RemoveEmptySingleRule
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
literal|"PruneEmptySort"
argument_list|)
decl_stmt|;
comment|/**    * Rule that converts a {@link org.apache.calcite.rel.core.Sort}    * to empty if it has {@code LIMIT 0}.    *    *<p>Examples:    *    *<ul>    *<li>Sort(Empty) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|SORT_FETCH_ZERO_INSTANCE
init|=
operator|new
name|RelOptRule
argument_list|(
name|operand
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
literal|"PruneSortLimit0"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|fetch
operator|!=
literal|null
operator|&&
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
operator|==
literal|0
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|empty
argument_list|(
name|sort
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|/**    * Rule that converts an {@link org.apache.calcite.rel.core.Aggregate}    * to empty if its child is empty.    *    *<p>Examples:    *    *<ul>    *<li>Aggregate(Empty) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|AGGREGATE_INSTANCE
init|=
operator|new
name|RemoveEmptySingleRule
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
literal|"PruneEmptyAggregate"
argument_list|)
decl_stmt|;
comment|/**    * Rule that converts a {@link org.apache.calcite.rel.core.Join}    * to empty if its left child is empty.    *    *<p>Examples:    *    *<ul>    *<li>Join(Empty, Scan(Dept), INNER) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|JOIN_LEFT_INSTANCE
init|=
operator|new
name|RelOptRule
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|Values
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|Values
operator|.
name|IS_EMPTY
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"PruneEmptyJoin(left)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnLeft
argument_list|()
condition|)
block|{
comment|// "select * from emp right join dept" is not necessarily empty if
comment|// emp is empty
return|return;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|empty
argument_list|(
name|join
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Rule that converts a {@link org.apache.calcite.rel.core.Join}    * to empty if its right child is empty.    *    *<p>Examples:    *    *<ul>    *<li>Join(Scan(Emp), Empty, INNER) becomes Empty    *</ul>    */
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|JOIN_RIGHT_INSTANCE
init|=
operator|new
name|RelOptRule
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|Values
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|Values
operator|.
name|IS_EMPTY
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"PruneEmptyJoin(right)"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnRight
argument_list|()
condition|)
block|{
comment|// "select * from emp left join dept" is not necessarily empty if
comment|// dept is empty
return|return;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|empty
argument_list|(
name|join
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** Creates a {@link org.apache.calcite.rel.core.Values} to replace    * {@code node}. */
specifier|private
specifier|static
name|Values
name|empty
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|LogicalValues
operator|.
name|createEmpty
argument_list|(
name|node
operator|.
name|getCluster
argument_list|()
argument_list|,
name|node
operator|.
name|getRowType
argument_list|()
argument_list|)
return|;
block|}
comment|/** Planner rule that converts a single-rel (e.g. project, sort, aggregate or    * filter) on top of the empty relational expression into empty. */
specifier|private
specifier|static
class|class
name|RemoveEmptySingleRule
extends|extends
name|RelOptRule
block|{
specifier|public
name|RemoveEmptySingleRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SingleRel
argument_list|>
name|clazz
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|operand
argument_list|(
name|Values
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|Values
operator|.
name|IS_EMPTY
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|SingleRel
name|single
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|empty
argument_list|(
name|single
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End PruneEmptyRules.java
end_comment

end_unit

