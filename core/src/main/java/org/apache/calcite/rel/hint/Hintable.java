begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * {@link Hintable} is a kind of {@link RelNode} that can attach {@link RelHint}s.  *  *<p>This interface is experimental, {@link RelNode}s that implement it  * have a constructor parameter named "hints" used to construct relational expression  * with given hints.  *  *<p>Current design is not that elegant and mature, because we have to  * copy the hints whenever these relational expressions are copied or used to  * derive new relational expressions.  * Even though we have implemented the mechanism to propagate the hints, for large queries,  * there would be many cases where the hints are not copied to the right RelNode,  * and the effort/memory is wasted if we are copying the hint to a RelNode  * but the hint is not used.  */
end_comment

begin_interface
annotation|@
name|Experimental
specifier|public
interface|interface
name|Hintable
block|{
comment|/**    * Attaches list of hints to this relational expression.    *    *<p>This method is only for internal use during sql-to-rel conversion.    *    *<p>Sub-class should return a new copy of the relational expression.    *    *<p>The default implementation merges the given hints with existing ones,    * put them in one list and eliminate the duplicates; then    * returns a new copy of this relational expression with the merged hints.    *    * @param hintList The hints to attach to this relational expression    * @return Relational expression with the hints {@code hintList} attached    */
specifier|default
name|RelNode
name|attachHints
parameter_list|(
name|List
argument_list|<
name|RelHint
argument_list|>
name|hintList
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hintList
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|RelHint
argument_list|>
name|hints
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|getHints
argument_list|()
argument_list|)
decl_stmt|;
name|hints
operator|.
name|addAll
argument_list|(
name|hintList
argument_list|)
expr_stmt|;
return|return
name|withHints
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hints
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a new relational expression with the specified hints {@code hintList}.    *    *<p>This method should be overridden by every logical node that supports hint.    * It is only for internal use during decorrelation.    *    *<p>Sub-class should return a new copy of the relational expression.    *    *<p>The default implementation returns the relational expression directly    * only because not every kind of relational expression supports hints.    *    * @return Relational expression with set up hints    */
specifier|default
name|RelNode
name|withHints
parameter_list|(
name|List
argument_list|<
name|RelHint
argument_list|>
name|hintList
parameter_list|)
block|{
return|return
operator|(
name|RelNode
operator|)
name|this
return|;
block|}
comment|/**    * Returns the hints of this relational expressions as an immutable list.    */
name|ImmutableList
argument_list|<
name|RelHint
argument_list|>
name|getHints
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

