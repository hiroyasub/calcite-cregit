begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SortExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSortExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Planner rule that removes keys from  * a {@link Exchange} if those keys are known to be constant.  *  *<p>For example,  *<code>SELECT key,value FROM (SELECT 1 AS key, value FROM src) r DISTRIBUTE  * BY key</code> can be reduced to  *<code>SELECT 1 AS key, value FROM src</code>.</p>  *  */
end_comment

begin_class
specifier|public
class|class
name|ExchangeRemoveConstantKeysRule
extends|extends
name|RelOptRule
block|{
comment|/**    * Singleton rule that removes constants inside a    * {@link LogicalExchange}.    */
specifier|public
specifier|static
specifier|final
name|ExchangeRemoveConstantKeysRule
name|EXCHANGE_INSTANCE
init|=
operator|new
name|ExchangeRemoveConstantKeysRule
argument_list|(
name|LogicalExchange
operator|.
name|class
argument_list|,
literal|"ExchangeRemoveConstantKeysRule"
argument_list|)
decl_stmt|;
comment|/**    * Singleton rule that removes constants inside a    * {@link LogicalSortExchange}.    */
specifier|public
specifier|static
specifier|final
name|ExchangeRemoveConstantKeysRule
name|SORT_EXCHANGE_INSTANCE
init|=
operator|new
name|SortExchangeRemoveConstantKeysRule
argument_list|(
name|LogicalSortExchange
operator|.
name|class
argument_list|,
literal|"SortExchangeRemoveConstantKeysRule"
argument_list|)
decl_stmt|;
specifier|private
name|ExchangeRemoveConstantKeysRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
comment|/** Removes constant in distribution keys. */
specifier|protected
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|simplifyDistributionKeys
parameter_list|(
name|RelDistribution
name|distribution
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|constants
parameter_list|)
block|{
return|return
name|distribution
operator|.
name|getKeys
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|key
lambda|->
operator|!
name|constants
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getDistribution
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RelDistribution
operator|.
name|Type
operator|.
name|HASH_DISTRIBUTED
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|exchange
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|predicates
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicates
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|constants
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|predicates
operator|.
name|constantMap
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|key
lambda|->
block|{
if|if
condition|(
name|key
operator|instanceof
name|RexInputRef
condition|)
block|{
name|constants
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|key
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|constants
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionKeys
init|=
name|simplifyDistributionKeys
argument_list|(
name|exchange
operator|.
name|getDistribution
argument_list|()
argument_list|,
name|constants
argument_list|)
decl_stmt|;
if|if
condition|(
name|distributionKeys
operator|.
name|size
argument_list|()
operator|!=
name|exchange
operator|.
name|getDistribution
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|exchange
operator|.
name|getInput
argument_list|()
argument_list|)
operator|.
name|exchange
argument_list|(
name|distributionKeys
operator|.
name|isEmpty
argument_list|()
condition|?
name|RelDistributions
operator|.
name|SINGLETON
else|:
name|RelDistributions
operator|.
name|hash
argument_list|(
name|distributionKeys
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|setImportance
argument_list|(
name|exchange
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rule that reduces constants inside a {@link SortExchange}.    */
specifier|public
specifier|static
class|class
name|SortExchangeRemoveConstantKeysRule
extends|extends
name|ExchangeRemoveConstantKeysRule
block|{
specifier|private
name|SortExchangeRemoveConstantKeysRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|SortExchange
name|sortExchange
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|sortExchange
operator|.
name|getDistribution
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RelDistribution
operator|.
name|Type
operator|.
name|HASH_DISTRIBUTED
operator|||
operator|!
name|sortExchange
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|SortExchange
name|sortExchange
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|sortExchange
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|predicates
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicates
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|constants
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|predicates
operator|.
name|constantMap
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|key
lambda|->
block|{
if|if
condition|(
name|key
operator|instanceof
name|RexInputRef
condition|)
block|{
name|constants
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|key
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|constants
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|distributionSimplified
init|=
literal|false
decl_stmt|;
name|boolean
name|hashDistribution
init|=
name|sortExchange
operator|.
name|getDistribution
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RelDistribution
operator|.
name|Type
operator|.
name|HASH_DISTRIBUTED
decl_stmt|;
if|if
condition|(
name|hashDistribution
condition|)
block|{
name|distributionKeys
operator|=
name|simplifyDistributionKeys
argument_list|(
name|sortExchange
operator|.
name|getDistribution
argument_list|()
argument_list|,
name|constants
argument_list|)
expr_stmt|;
name|distributionSimplified
operator|=
name|distributionKeys
operator|.
name|size
argument_list|()
operator|!=
name|sortExchange
operator|.
name|getDistribution
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
init|=
name|sortExchange
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|fc
lambda|->
operator|!
name|constants
operator|.
name|contains
argument_list|(
name|fc
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|collationSimplified
init|=
name|fieldCollations
operator|.
name|size
argument_list|()
operator|!=
name|sortExchange
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionSimplified
operator|||
name|collationSimplified
condition|)
block|{
name|RelDistribution
name|distribution
init|=
name|distributionSimplified
condition|?
operator|(
name|distributionKeys
operator|.
name|isEmpty
argument_list|()
condition|?
name|RelDistributions
operator|.
name|SINGLETON
else|:
name|RelDistributions
operator|.
name|hash
argument_list|(
name|distributionKeys
argument_list|)
operator|)
else|:
name|sortExchange
operator|.
name|getDistribution
argument_list|()
decl_stmt|;
name|RelCollation
name|collation
init|=
name|collationSimplified
condition|?
name|RelCollations
operator|.
name|of
argument_list|(
name|fieldCollations
argument_list|)
else|:
name|sortExchange
operator|.
name|getCollation
argument_list|()
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|sortExchange
operator|.
name|getInput
argument_list|()
argument_list|)
operator|.
name|sortExchange
argument_list|(
name|distribution
argument_list|,
name|collation
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|setImportance
argument_list|(
name|sortExchange
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

