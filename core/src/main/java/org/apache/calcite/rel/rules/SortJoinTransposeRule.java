begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes a {@link org.apache.calcite.rel.core.Sort} past a  * {@link org.apache.calcite.rel.core.Join}. At the moment, we only consider  * left/right outer joins.  * However, an extesion for full outer joins for this rule could be envision.  * Special attention should be paid to null values for correctness issues.  */
end_comment

begin_class
specifier|public
class|class
name|SortJoinTransposeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|SortJoinTransposeRule
name|INSTANCE
init|=
operator|new
name|SortJoinTransposeRule
argument_list|(
name|LogicalSort
operator|.
name|class
argument_list|,
name|LogicalJoin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a SortJoinTransposeRule. */
specifier|public
name|SortJoinTransposeRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Sort
argument_list|>
name|sortClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|joinClass
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|sortClass
argument_list|,
name|operand
argument_list|(
name|joinClass
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// 1) If join is not a left or right outer, we bail out
comment|// 2) If sort does not consist only of a limit operation,
comment|// or any sort column is not part of the input where the
comment|// sort is pushed, we bail out
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|)
block|{
if|if
condition|(
name|sort
operator|.
name|getCollation
argument_list|()
operator|!=
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
for|for
control|(
name|RelFieldCollation
name|relFieldCollation
range|:
name|sort
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
name|relFieldCollation
operator|.
name|getFieldIndex
argument_list|()
operator|>=
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|)
block|{
if|if
condition|(
name|sort
operator|.
name|getCollation
argument_list|()
operator|!=
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
for|for
control|(
name|RelFieldCollation
name|relFieldCollation
range|:
name|sort
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
name|relFieldCollation
operator|.
name|getFieldIndex
argument_list|()
operator|<
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// We create a new sort operator on the corresponding input
specifier|final
name|RelNode
name|newLeftInput
decl_stmt|;
specifier|final
name|RelNode
name|newRightInput
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|)
block|{
comment|// If the input is already sorted and we are not reducing the number of tuples,
comment|// we bail out
if|if
condition|(
name|checkInputForCollationAndLimit
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
condition|)
block|{
return|return;
block|}
name|newLeftInput
operator|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
expr_stmt|;
name|newRightInput
operator|=
name|join
operator|.
name|getRight
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|RelCollation
name|rightCollation
init|=
name|RelCollations
operator|.
name|shift
argument_list|(
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
operator|-
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
comment|// If the input is already sorted and we are not reducing the number of tuples,
comment|// we bail out
if|if
condition|(
name|checkInputForCollationAndLimit
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|rightCollation
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
condition|)
block|{
return|return;
block|}
name|newLeftInput
operator|=
name|join
operator|.
name|getLeft
argument_list|()
expr_stmt|;
name|newRightInput
operator|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|rightCollation
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
expr_stmt|;
block|}
comment|// We copy the join and the top sort operator
specifier|final
name|RelNode
name|joinCopy
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|newLeftInput
argument_list|,
name|newRightInput
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|sortCopy
init|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|joinCopy
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|sortCopy
argument_list|)
expr_stmt|;
block|}
comment|/* Checks if an input is already sorted and has less rows than    * the sum of offset and limit */
specifier|private
name|boolean
name|checkInputForCollationAndLimit
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
comment|// Check if the input is already sorted
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|inputCollation
init|=
name|RelMetadataQuery
operator|.
name|collations
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|alreadySorted
init|=
name|RelCollations
operator|.
name|equal
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|collation
argument_list|)
argument_list|,
name|inputCollation
argument_list|)
decl_stmt|;
comment|// Check if we are not reducing the number of tuples
name|boolean
name|alreadySmaller
init|=
literal|true
decl_stmt|;
specifier|final
name|Double
name|rowCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowCount
operator|!=
literal|null
operator|&&
name|fetch
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|offsetVal
init|=
name|offset
operator|==
literal|null
condition|?
literal|0
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|fetch
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|offsetLimit
init|=
operator|new
name|Double
argument_list|(
name|offsetVal
operator|+
name|limit
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsetLimit
operator|<
name|rowCount
condition|)
block|{
name|alreadySmaller
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|alreadySorted
operator|&&
name|alreadySmaller
return|;
block|}
block|}
end_class

end_unit

