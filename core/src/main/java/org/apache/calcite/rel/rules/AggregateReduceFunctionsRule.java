begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|CompositeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Planner rule that reduces aggregate functions in  * {@link org.apache.calcite.rel.core.Aggregate}s to simpler forms.  *  *<p>Rewrites:  *<ul>  *  *<li>AVG(x)&rarr; SUM(x) / COUNT(x)  *  *<li>STDDEV_POP(x)&rarr; SQRT(  *     (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))  *    / COUNT(x))  *  *<li>STDDEV_SAMP(x)&rarr; SQRT(  *     (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))  *     / CASE COUNT(x) WHEN 1 THEN NULL ELSE COUNT(x) - 1 END)  *  *<li>VAR_POP(x)&rarr; (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))  *     / COUNT(x)  *  *<li>VAR_SAMP(x)&rarr; (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))  *        / CASE COUNT(x) WHEN 1 THEN NULL ELSE COUNT(x) - 1 END  *  *<li>COVAR_POP(x, y)&rarr; (SUM(x * y) - SUM(x, y) * SUM(y, x)  *     / REGR_COUNT(x, y)) / REGR_COUNT(x, y)  *  *<li>COVAR_SAMP(x, y)&rarr; (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y))  *     / CASE REGR_COUNT(x, y) WHEN 1 THEN NULL ELSE REGR_COUNT(x, y) - 1 END  *  *<li>REGR_SXX(x, y)&rarr; REGR_COUNT(x, y) * VAR_POP(y)  *  *<li>REGR_SYY(x, y)&rarr; REGR_COUNT(x, y) * VAR_POP(x)  *  *</ul>  *  *<p>Since many of these rewrites introduce multiple occurrences of simpler  * forms like {@code COUNT(x)}, the rule gathers common sub-expressions as it  * goes.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateReduceFunctionsRule
extends|extends
name|RelOptRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/** The singleton. */
specifier|public
specifier|static
specifier|final
name|AggregateReduceFunctionsRule
name|INSTANCE
init|=
operator|new
name|AggregateReduceFunctionsRule
argument_list|(
name|operand
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|SqlKind
argument_list|>
name|functionsToReduce
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates an AggregateReduceFunctionsRule to reduce all functions    * handled by this rule    * @param operand operand to determine if rule can be applied    * @param relBuilderFactory builder for relational expressions    */
specifier|public
name|AggregateReduceFunctionsRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|functionsToReduce
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|SqlKind
operator|.
name|class
argument_list|)
expr_stmt|;
name|addDefaultSetOfFunctionsToReduce
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates an AggregateReduceFunctionsRule with client    * provided information on which specific functions will    * be reduced by this rule    * @param aggregateClass aggregate class    * @param relBuilderFactory builder for relational expressions    * @param functionsToReduce client provided information    *                          on which specific functions    *                          will be reduced by this rule    */
specifier|public
name|AggregateReduceFunctionsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|EnumSet
argument_list|<
name|SqlKind
argument_list|>
name|functionsToReduce
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|aggregateClass
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|functionsToReduce
argument_list|,
literal|"Expecting a valid handle for AggregateFunctionsToReduce"
argument_list|)
expr_stmt|;
name|this
operator|.
name|functionsToReduce
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|SqlKind
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|SqlKind
name|function
range|:
name|functionsToReduce
control|)
block|{
if|if
condition|(
name|SqlKind
operator|.
name|AVG_AGG_FUNCTIONS
operator|.
name|contains
argument_list|(
name|function
argument_list|)
operator|||
name|SqlKind
operator|.
name|COVAR_AVG_AGG_FUNCTIONS
operator|.
name|contains
argument_list|(
name|function
argument_list|)
operator|||
name|function
operator|==
name|SqlKind
operator|.
name|SUM
condition|)
block|{
name|this
operator|.
name|functionsToReduce
operator|.
name|add
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AggregateReduceFunctionsRule doesn't support function: "
operator|+
name|function
operator|.
name|sql
argument_list|)
throw|;
block|}
block|}
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|private
name|void
name|addDefaultSetOfFunctionsToReduce
parameter_list|()
block|{
name|functionsToReduce
operator|.
name|addAll
argument_list|(
name|SqlKind
operator|.
name|AVG_AGG_FUNCTIONS
argument_list|)
expr_stmt|;
name|functionsToReduce
operator|.
name|addAll
argument_list|(
name|SqlKind
operator|.
name|COVAR_AVG_AGG_FUNCTIONS
argument_list|)
expr_stmt|;
name|functionsToReduce
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|SUM
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|matches
argument_list|(
name|call
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Aggregate
name|oldAggRel
init|=
operator|(
name|Aggregate
operator|)
name|call
operator|.
name|rels
index|[
literal|0
index|]
decl_stmt|;
return|return
name|containsAvgStddevVarCall
argument_list|(
name|oldAggRel
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|ruleCall
parameter_list|)
block|{
name|Aggregate
name|oldAggRel
init|=
operator|(
name|Aggregate
operator|)
name|ruleCall
operator|.
name|rels
index|[
literal|0
index|]
decl_stmt|;
name|reduceAggs
argument_list|(
name|ruleCall
argument_list|,
name|oldAggRel
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns whether any of the aggregates are calls to AVG, STDDEV_*, VAR_*.    *    * @param aggCallList List of aggregate calls    */
specifier|private
name|boolean
name|containsAvgStddevVarCall
parameter_list|(
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
parameter_list|)
block|{
for|for
control|(
name|AggregateCall
name|call
range|:
name|aggCallList
control|)
block|{
if|if
condition|(
name|isReducible
argument_list|(
name|call
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether the aggregate call is a reducible function    */
specifier|private
name|boolean
name|isReducible
parameter_list|(
specifier|final
name|SqlKind
name|kind
parameter_list|)
block|{
return|return
name|functionsToReduce
operator|.
name|contains
argument_list|(
name|kind
argument_list|)
return|;
block|}
comment|/**    * Reduces calls to functions AVG, SUM, STDDEV_POP, STDDEV_SAMP, VAR_POP,    * VAR_SAMP, COVAR_POP, COVAR_SAMP, REGR_SXX, REGR_SYY if the function is    * present in {@link AggregateReduceFunctionsRule#functionsToReduce}    *    *<p>It handles newly generated common subexpressions since this was done    * at the sql2rel stage.    */
specifier|private
name|void
name|reduceAggs
parameter_list|(
name|RelOptRuleCall
name|ruleCall
parameter_list|,
name|Aggregate
name|oldAggRel
parameter_list|)
block|{
name|RexBuilder
name|rexBuilder
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|oldCalls
init|=
name|oldAggRel
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|indicatorCount
init|=
name|oldAggRel
operator|.
name|getIndicatorCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// pass through group key (+ indicators if present)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupCount
operator|+
name|indicatorCount
condition|;
operator|++
name|i
control|)
block|{
name|projList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|getFieldType
argument_list|(
name|oldAggRel
argument_list|,
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// List of input expressions. If a particular aggregate needs more, it
comment|// will add an expression to the end, and we will create an extra
comment|// project.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|ruleCall
operator|.
name|builder
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputExprs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|relBuilder
operator|.
name|fields
argument_list|()
argument_list|)
decl_stmt|;
comment|// create new agg function calls and rest of project list together
for|for
control|(
name|AggregateCall
name|oldCall
range|:
name|oldCalls
control|)
block|{
name|projList
operator|.
name|add
argument_list|(
name|reduceAgg
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|extraArgCount
init|=
name|inputExprs
operator|.
name|size
argument_list|()
operator|-
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|extraArgCount
operator|>
literal|0
condition|)
block|{
name|relBuilder
operator|.
name|project
argument_list|(
name|inputExprs
argument_list|,
name|CompositeList
operator|.
name|of
argument_list|(
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|extraArgCount
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newAggregateRel
argument_list|(
name|relBuilder
argument_list|,
name|oldAggRel
argument_list|,
name|newCalls
argument_list|)
expr_stmt|;
name|newCalcRel
argument_list|(
name|relBuilder
argument_list|,
name|oldAggRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|projList
argument_list|)
expr_stmt|;
name|ruleCall
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RexNode
name|reduceAgg
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputExprs
parameter_list|)
block|{
specifier|final
name|SqlKind
name|kind
init|=
name|oldCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|isReducible
argument_list|(
name|kind
argument_list|)
condition|)
block|{
specifier|final
name|Integer
name|y
decl_stmt|;
specifier|final
name|Integer
name|x
decl_stmt|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|SUM
case|:
comment|// replace original SUM(x) with
comment|// case COUNT(x) when 0 then null else SUM0(x) end
return|return
name|reduceSum
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|)
return|;
case|case
name|AVG
case|:
comment|// replace original AVG(x) with SUM(x) / COUNT(x)
return|return
name|reduceAvg
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
return|;
case|case
name|COVAR_POP
case|:
comment|// replace original COVAR_POP(x, y) with
comment|//     (SUM(x * y) - SUM(y) * SUM(y) / COUNT(x))
comment|//     / COUNT(x))
return|return
name|reduceCovariance
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
literal|true
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
return|;
case|case
name|COVAR_SAMP
case|:
comment|// replace original COVAR_SAMP(x, y) with
comment|//   SQRT(
comment|//     (SUM(x * y) - SUM(x) * SUM(y) / COUNT(x))
comment|//     / CASE COUNT(x) WHEN 1 THEN NULL ELSE COUNT(x) - 1 END)
return|return
name|reduceCovariance
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
literal|false
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
return|;
case|case
name|REGR_SXX
case|:
comment|// replace original REGR_SXX(x, y) with
comment|// REGR_COUNT(x, y) * VAR_POP(y)
assert|assert
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|:
name|oldCall
operator|.
name|getArgList
argument_list|()
assert|;
name|x
operator|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|y
operator|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//noinspection SuspiciousNameCombination
return|return
name|reduceRegrSzz
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|,
name|y
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
return|;
case|case
name|REGR_SYY
case|:
comment|// replace original REGR_SYY(x, y) with
comment|// REGR_COUNT(x, y) * VAR_POP(x)
assert|assert
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|:
name|oldCall
operator|.
name|getArgList
argument_list|()
assert|;
name|x
operator|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|y
operator|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//noinspection SuspiciousNameCombination
return|return
name|reduceRegrSzz
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|,
name|x
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
return|;
case|case
name|STDDEV_POP
case|:
comment|// replace original STDDEV_POP(x) with
comment|//   SQRT(
comment|//     (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))
comment|//     / COUNT(x))
return|return
name|reduceStddev
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
return|;
case|case
name|STDDEV_SAMP
case|:
comment|// replace original STDDEV_POP(x) with
comment|//   SQRT(
comment|//     (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))
comment|//     / CASE COUNT(x) WHEN 1 THEN NULL ELSE COUNT(x) - 1 END)
return|return
name|reduceStddev
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
return|;
case|case
name|VAR_POP
case|:
comment|// replace original VAR_POP(x) with
comment|//     (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))
comment|//     / COUNT(x)
return|return
name|reduceStddev
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
return|;
case|case
name|VAR_SAMP
case|:
comment|// replace original VAR_POP(x) with
comment|//     (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x))
comment|//     / CASE COUNT(x) WHEN 1 THEN NULL ELSE COUNT(x) - 1 END
return|return
name|reduceStddev
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|inputExprs
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|unexpected
argument_list|(
name|kind
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// anything else:  preserve original call
name|RexBuilder
name|rexBuilder
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nGroups
init|=
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataType
argument_list|>
name|oldArgTypes
init|=
name|SqlTypeUtil
operator|.
name|projectTypes
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|oldCall
operator|.
name|getArgList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|oldCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|oldArgTypes
argument_list|)
return|;
block|}
block|}
specifier|private
name|AggregateCall
name|createAggregateCallWithBinding
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|SqlAggFunction
name|aggFunction
parameter_list|,
name|RelDataType
name|operandType
parameter_list|,
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|int
name|argOrdinal
parameter_list|,
name|int
name|filter
parameter_list|)
block|{
specifier|final
name|Aggregate
operator|.
name|AggCallBinding
name|binding
init|=
operator|new
name|Aggregate
operator|.
name|AggCallBinding
argument_list|(
name|typeFactory
argument_list|,
name|aggFunction
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|operandType
argument_list|)
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|filter
operator|>=
literal|0
argument_list|)
decl_stmt|;
return|return
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggFunction
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|argOrdinal
argument_list|)
argument_list|,
name|filter
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|aggFunction
operator|.
name|inferReturnType
argument_list|(
name|binding
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|reduceAvg
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputExprs
parameter_list|)
block|{
specifier|final
name|int
name|nGroups
init|=
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iAvgInput
init|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|avgInputType
init|=
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|iAvgInput
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|sumCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SUM
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|oldCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|oldCall
operator|.
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|countCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|oldCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|oldCall
operator|.
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// NOTE:  these references are with respect to the output
comment|// of newAggRel
name|RexNode
name|numeratorRef
init|=
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|sumCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|avgInputType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|denominatorRef
init|=
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|countCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|avgInputType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|avgType
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|numeratorRef
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
argument_list|)
decl_stmt|;
name|numeratorRef
operator|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|avgType
argument_list|,
name|numeratorRef
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|divideRef
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
name|numeratorRef
argument_list|,
name|denominatorRef
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|divideRef
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|reduceSum
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|)
block|{
specifier|final
name|int
name|nGroups
init|=
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|int
name|arg
init|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelDataType
name|argType
init|=
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|arg
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|sumZeroCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SUM0
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|oldCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|oldCall
operator|.
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
literal|null
argument_list|,
name|oldCall
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|countCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|oldCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|oldCall
operator|.
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// NOTE:  these references are with respect to the output
comment|// of newAggRel
name|RexNode
name|sumZeroRef
init|=
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|sumZeroCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|argType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldCall
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
comment|// If SUM(x) is not nullable, the validator must have determined that
comment|// nulls are impossible (because the group is never empty and x is never
comment|// null). Therefore we translate to SUM0(x).
return|return
name|sumZeroRef
return|;
block|}
name|RexNode
name|countRef
init|=
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|countCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|argType
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|countRef
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|sumZeroRef
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|)
argument_list|,
name|sumZeroRef
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|reduceStddev
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|boolean
name|biased
parameter_list|,
name|boolean
name|sqrt
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputExprs
parameter_list|)
block|{
comment|// stddev_pop(x) ==>
comment|//   power(
comment|//     (sum(x * x) - sum(x) * sum(x) / count(x))
comment|//     / count(x),
comment|//     .5)
comment|//
comment|// stddev_samp(x) ==>
comment|//   power(
comment|//     (sum(x * x) - sum(x) * sum(x) / count(x))
comment|//     / nullif(count(x) - 1, 0),
comment|//     .5)
specifier|final
name|int
name|nGroups
init|=
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
assert|assert
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|:
name|oldCall
operator|.
name|getArgList
argument_list|()
assert|;
specifier|final
name|int
name|argOrdinal
init|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|argOrdinalType
init|=
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|argOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|oldCallType
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|argOrdinalType
operator|.
name|isNullable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argRef
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|inputExprs
operator|.
name|get
argument_list|(
name|argOrdinal
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argSquared
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|argRef
argument_list|,
name|argRef
argument_list|)
decl_stmt|;
specifier|final
name|int
name|argSquaredOrdinal
init|=
name|lookupOrAdd
argument_list|(
name|inputExprs
argument_list|,
name|argSquared
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|sumArgSquaredAggCall
init|=
name|createAggregateCallWithBinding
argument_list|(
name|typeFactory
argument_list|,
name|SqlStdOperatorTable
operator|.
name|SUM
argument_list|,
name|argSquared
operator|.
name|getType
argument_list|()
argument_list|,
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|argSquaredOrdinal
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumArgSquared
init|=
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|sumArgSquaredAggCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|sumArgSquaredAggCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|sumArgAggCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SUM
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|argOrdinal
argument_list|)
argument_list|,
name|oldCall
operator|.
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumArg
init|=
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|sumArgAggCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|sumArgAggCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumArgCast
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|sumArg
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumSquaredArg
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|sumArgCast
argument_list|,
name|sumArgCast
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|countArgAggCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|oldCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|oldCall
operator|.
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|countArg
init|=
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|countArgAggCall
argument_list|,
name|nGroups
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|argOrdinalType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|avgSumSquaredArg
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
name|sumSquaredArg
argument_list|,
name|countArg
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|diff
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
name|sumArgSquared
argument_list|,
name|avgSumSquaredArg
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|denominator
decl_stmt|;
if|if
condition|(
name|biased
condition|)
block|{
name|denominator
operator|=
name|countArg
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|RexLiteral
name|one
init|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|nul
init|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|countArg
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|countMinusOne
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
name|countArg
argument_list|,
name|one
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|countEqOne
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|countArg
argument_list|,
name|one
argument_list|)
decl_stmt|;
name|denominator
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|countEqOne
argument_list|,
name|nul
argument_list|,
name|countMinusOne
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|div
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
name|diff
argument_list|,
name|denominator
argument_list|)
decl_stmt|;
name|RexNode
name|result
init|=
name|div
decl_stmt|;
if|if
condition|(
name|sqrt
condition|)
block|{
specifier|final
name|RexNode
name|half
init|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"0.5"
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|POWER
argument_list|,
name|div
argument_list|,
name|half
argument_list|)
expr_stmt|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|result
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|getSumAggregatedRexNode
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|,
name|int
name|argOrdinal
parameter_list|,
name|int
name|filterArg
parameter_list|)
block|{
specifier|final
name|AggregateCall
name|aggregateCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SUM
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|argOrdinal
argument_list|)
argument_list|,
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|addAggCall
argument_list|(
name|aggregateCall
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|aggregateCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|getSumAggregatedRexNodeWithBinding
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|RelDataType
name|operandType
parameter_list|,
name|int
name|argOrdinal
parameter_list|,
name|int
name|filter
parameter_list|)
block|{
name|RelOptCluster
name|cluster
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|AggregateCall
name|sumArgSquaredAggCall
init|=
name|createAggregateCallWithBinding
argument_list|(
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|SqlStdOperatorTable
operator|.
name|SUM
argument_list|,
name|operandType
argument_list|,
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|argOrdinal
argument_list|,
name|filter
argument_list|)
decl_stmt|;
return|return
name|cluster
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|addAggCall
argument_list|(
name|sumArgSquaredAggCall
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|sumArgSquaredAggCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|getRegrCountRexNode
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|ImmutableIntList
name|argOrdinals
parameter_list|,
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|operandTypes
parameter_list|,
name|int
name|filterArg
parameter_list|)
block|{
specifier|final
name|AggregateCall
name|countArgAggCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|REGR_COUNT
argument_list|,
name|oldCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|oldCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|oldCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|argOrdinals
argument_list|,
name|filterArg
argument_list|,
name|oldCall
operator|.
name|collation
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|oldAggRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|addAggCall
argument_list|(
name|countArgAggCall
argument_list|,
name|oldAggRel
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|oldAggRel
operator|.
name|indicator
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|operandTypes
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|reduceRegrSzz
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputExprs
parameter_list|,
name|int
name|xIndex
parameter_list|,
name|int
name|yIndex
parameter_list|,
name|int
name|nullFilterIndex
parameter_list|)
block|{
comment|// regr_sxx(x, y) ==>
comment|//    sum(y * y, x) - sum(y, x) * sum(y, x) / regr_count(x, y)
comment|//
specifier|final
name|RelOptCluster
name|cluster
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|argXType
init|=
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|xIndex
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|argYType
init|=
name|xIndex
operator|==
name|yIndex
condition|?
name|argXType
else|:
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|yIndex
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|nullFilterIndexType
init|=
name|nullFilterIndex
operator|==
name|yIndex
condition|?
name|argYType
else|:
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|yIndex
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|oldCallType
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|argXType
operator|.
name|isNullable
argument_list|()
operator|||
name|argYType
operator|.
name|isNullable
argument_list|()
operator|||
name|nullFilterIndexType
operator|.
name|isNullable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argX
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|inputExprs
operator|.
name|get
argument_list|(
name|xIndex
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argY
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|inputExprs
operator|.
name|get
argument_list|(
name|yIndex
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argNullFilter
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|inputExprs
operator|.
name|get
argument_list|(
name|nullFilterIndex
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argXArgY
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|argX
argument_list|,
name|argY
argument_list|)
decl_stmt|;
specifier|final
name|int
name|argSquaredOrdinal
init|=
name|lookupOrAdd
argument_list|(
name|inputExprs
argument_list|,
name|argXArgY
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argXAndYNotNullFilter
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|argX
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|argY
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|argNullFilter
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|argXAndYNotNullFilterOrdinal
init|=
name|lookupOrAdd
argument_list|(
name|inputExprs
argument_list|,
name|argXAndYNotNullFilter
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumXY
init|=
name|getSumAggregatedRexNodeWithBinding
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|argXArgY
operator|.
name|getType
argument_list|()
argument_list|,
name|argSquaredOrdinal
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumXYCast
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|sumXY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumX
init|=
name|getSumAggregatedRexNode
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|rexBuilder
argument_list|,
name|xIndex
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumY
init|=
name|xIndex
operator|==
name|yIndex
condition|?
name|sumX
else|:
name|getSumAggregatedRexNode
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|rexBuilder
argument_list|,
name|yIndex
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumXSumY
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|sumX
argument_list|,
name|sumY
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|countArg
init|=
name|getRegrCountRexNode
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|xIndex
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|argXType
argument_list|)
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
name|RexLiteral
name|zero
init|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|RexNode
name|nul
init|=
name|rexBuilder
operator|.
name|constantNull
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|avgSumXSumY
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|countArg
argument_list|,
name|zero
argument_list|)
argument_list|,
name|nul
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
name|sumXSumY
argument_list|,
name|countArg
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|avgSumXSumYCast
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|avgSumXSumY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|result
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
name|sumXYCast
argument_list|,
name|avgSumXSumYCast
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|result
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|reduceCovariance
parameter_list|(
name|Aggregate
name|oldAggRel
parameter_list|,
name|AggregateCall
name|oldCall
parameter_list|,
name|boolean
name|biased
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|,
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|RexNode
argument_list|>
name|aggCallMapping
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputExprs
parameter_list|)
block|{
comment|// covar_pop(x, y) ==>
comment|//     (sum(x * y) - sum(x) * sum(y) / regr_count(x, y))
comment|//     / regr_count(x, y)
comment|//
comment|// covar_samp(x, y) ==>
comment|//     (sum(x * y) - sum(x) * sum(y) / regr_count(x, y))
comment|//     / regr_count(count(x, y) - 1, 0)
specifier|final
name|RelOptCluster
name|cluster
init|=
name|oldAggRel
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
assert|assert
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|:
name|oldCall
operator|.
name|getArgList
argument_list|()
assert|;
specifier|final
name|int
name|argXOrdinal
init|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|argYOrdinal
init|=
name|oldCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|argXOrdinalType
init|=
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|argXOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|argYOrdinalType
init|=
name|getFieldType
argument_list|(
name|oldAggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|argYOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|oldCallType
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|argXOrdinalType
operator|.
name|isNullable
argument_list|()
operator|||
name|argYOrdinalType
operator|.
name|isNullable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argX
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|inputExprs
operator|.
name|get
argument_list|(
name|argXOrdinal
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argY
init|=
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|oldCallType
argument_list|,
name|inputExprs
operator|.
name|get
argument_list|(
name|argYOrdinal
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argXAndYNotNullFilter
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|argX
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|argY
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|argXAndYNotNullFilterOrdinal
init|=
name|lookupOrAdd
argument_list|(
name|inputExprs
argument_list|,
name|argXAndYNotNullFilter
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|argXY
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|argX
argument_list|,
name|argY
argument_list|)
decl_stmt|;
specifier|final
name|int
name|argXYOrdinal
init|=
name|lookupOrAdd
argument_list|(
name|inputExprs
argument_list|,
name|argXY
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumXY
init|=
name|getSumAggregatedRexNodeWithBinding
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|argXY
operator|.
name|getType
argument_list|()
argument_list|,
name|argXYOrdinal
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumX
init|=
name|getSumAggregatedRexNode
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|rexBuilder
argument_list|,
name|argXOrdinal
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumY
init|=
name|getSumAggregatedRexNode
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|rexBuilder
argument_list|,
name|argYOrdinal
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sumXSumY
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|sumX
argument_list|,
name|sumY
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|countArg
init|=
name|getRegrCountRexNode
argument_list|(
name|oldAggRel
argument_list|,
name|oldCall
argument_list|,
name|newCalls
argument_list|,
name|aggCallMapping
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|argXOrdinal
argument_list|,
name|argYOrdinal
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|argXOrdinalType
argument_list|,
name|argYOrdinalType
argument_list|)
argument_list|,
name|argXAndYNotNullFilterOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|avgSumSquaredArg
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
name|sumXSumY
argument_list|,
name|countArg
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|diff
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
name|sumXY
argument_list|,
name|avgSumSquaredArg
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|denominator
decl_stmt|;
if|if
condition|(
name|biased
condition|)
block|{
name|denominator
operator|=
name|countArg
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|RexLiteral
name|one
init|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|nul
init|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|countArg
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|countMinusOne
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
name|countArg
argument_list|,
name|one
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|countEqOne
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|countArg
argument_list|,
name|one
argument_list|)
decl_stmt|;
name|denominator
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|countEqOne
argument_list|,
name|nul
argument_list|,
name|countMinusOne
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|result
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
name|diff
argument_list|,
name|denominator
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|oldCall
operator|.
name|getType
argument_list|()
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/**    * Finds the ordinal of an element in a list, or adds it.    *    * @param list    List    * @param element Element to lookup or add    * @param<T>     Element type    * @return Ordinal of element in list    */
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|lookupOrAdd
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|T
name|element
parameter_list|)
block|{
name|int
name|ordinal
init|=
name|list
operator|.
name|indexOf
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinal
operator|==
operator|-
literal|1
condition|)
block|{
name|ordinal
operator|=
name|list
operator|.
name|size
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|ordinal
return|;
block|}
comment|/**    * Do a shallow clone of oldAggRel and update aggCalls. Could be refactored    * into Aggregate and subclasses - but it's only needed for some    * subclasses.    *    * @param relBuilder Builder of relational expressions; at the top of its    *                   stack is its input    * @param oldAggregate LogicalAggregate to clone.    * @param newCalls  New list of AggregateCalls    */
specifier|protected
name|void
name|newAggregateRel
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|oldAggregate
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
parameter_list|)
block|{
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|oldAggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|oldAggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|)
argument_list|,
name|newCalls
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a calc with the expressions to compute the original agg calls from the    * decomposed ones.    *    * @param relBuilder Builder of relational expressions; at the top of its    *                   stack is its input    * @param rowType The output row type of the original aggregate.    * @param exprs The expressions to compute the original agg calls.    */
specifier|protected
name|void
name|newCalcRel
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprs
parameter_list|)
block|{
name|relBuilder
operator|.
name|project
argument_list|(
name|exprs
argument_list|,
name|rowType
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RelDataType
name|getFieldType
parameter_list|(
name|RelNode
name|relNode
parameter_list|,
name|int
name|i
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
name|inputField
init|=
name|relNode
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|inputField
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateReduceFunctionsRule.java
end_comment

end_unit

