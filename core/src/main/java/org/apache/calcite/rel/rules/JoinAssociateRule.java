begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that changes a join based on the associativity rule.  *  *<p>((a JOIN b) JOIN c)&rarr; (a JOIN (b JOIN c))</p>  *  *<p>We do not need a rule to convert (a JOIN (b JOIN c))&rarr;  * ((a JOIN b) JOIN c) because we have  * {@link JoinCommuteRule}.  *  * @see JoinCommuteRule  * @see CoreRules#JOIN_ASSOCIATE  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|JoinAssociateRule
extends|extends
name|RelRule
argument_list|<
name|JoinAssociateRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
comment|/** Creates a JoinAssociateRule. */
specifier|protected
name|JoinAssociateRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|JoinAssociateRule
parameter_list|(
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
specifier|final
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|topJoin
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|bottomJoin
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|relA
init|=
name|bottomJoin
operator|.
name|getLeft
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|relB
init|=
name|bottomJoin
operator|.
name|getRight
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|relC
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|topJoin
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|relC
operator|.
name|getConvention
argument_list|()
operator|!=
name|relA
operator|.
name|getConvention
argument_list|()
condition|)
block|{
comment|// relC could have any trait-set. But if we're matching say
comment|// EnumerableConvention, we're only interested in enumerable subsets.
return|return;
block|}
comment|//        topJoin
comment|//        /     \
comment|//   bottomJoin  C
comment|//    /    \
comment|//   A      B
specifier|final
name|int
name|aCount
init|=
name|relA
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bCount
init|=
name|relB
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|cCount
init|=
name|relC
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|aBitSet
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|aCount
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|ImmutableBitSet
name|bBitSet
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|aCount
argument_list|,
name|aCount
operator|+
name|bCount
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|topJoin
operator|.
name|getSystemFieldList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// FIXME Enable this rule for joins with system fields
return|return;
block|}
comment|// If either join is not inner, we cannot proceed.
comment|// (Is this too strict?)
if|if
condition|(
name|topJoin
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
operator|||
name|bottomJoin
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
return|return;
block|}
comment|// Goal is to transform to
comment|//
comment|//       newTopJoin
comment|//        /     \
comment|//       A   newBottomJoin
comment|//               /    \
comment|//              B      C
comment|// Split the condition of topJoin and bottomJoin into a conjunctions. A
comment|// condition can be pushed down if it does not use columns from A.
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|top
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|bottom
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|JoinPushThroughJoinRule
operator|.
name|split
argument_list|(
name|topJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|aBitSet
argument_list|,
name|top
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|JoinPushThroughJoinRule
operator|.
name|split
argument_list|(
name|bottomJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|aBitSet
argument_list|,
name|top
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|allowAlwaysTrueCondition
init|=
name|config
operator|.
name|isAllowAlwaysTrueCondition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|allowAlwaysTrueCondition
operator|&&
operator|(
name|top
operator|.
name|isEmpty
argument_list|()
operator|||
name|bottom
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
comment|// Mapping for moving conditions from topJoin or bottomJoin to
comment|// newBottomJoin.
comment|// target: | B | C      |
comment|// source: | A       | B | C      |
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|bottomMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|aCount
operator|+
name|bCount
operator|+
name|cCount
argument_list|,
literal|0
argument_list|,
name|aCount
argument_list|,
name|bCount
argument_list|,
name|bCount
argument_list|,
name|aCount
operator|+
name|bCount
argument_list|,
name|cCount
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newBottomList
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|bottomMapping
argument_list|,
name|relB
argument_list|,
name|relC
argument_list|)
operator|.
name|visitList
argument_list|(
name|bottom
argument_list|)
decl_stmt|;
name|RexNode
name|newBottomCondition
init|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|newBottomList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allowAlwaysTrueCondition
operator|&&
name|newBottomCondition
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Condition for newTopJoin consists of pieces from bottomJoin and topJoin.
comment|// Field ordinals do not need to be changed.
name|RexNode
name|newTopCondition
init|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|top
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allowAlwaysTrueCondition
operator|&&
name|newTopCondition
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|Join
name|newBottomJoin
init|=
name|bottomJoin
operator|.
name|copy
argument_list|(
name|bottomJoin
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newBottomCondition
argument_list|,
name|relB
argument_list|,
name|relC
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SuspiciousNameCombination"
argument_list|)
specifier|final
name|Join
name|newTopJoin
init|=
name|topJoin
operator|.
name|copy
argument_list|(
name|topJoin
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newTopCondition
argument_list|,
name|relA
argument_list|,
name|newBottomJoin
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newTopJoin
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|ImmutableJoinAssociateRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withOperandFor
argument_list|(
name|Join
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|JoinAssociateRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|JoinAssociateRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Whether to emit the new join tree if the new top or bottom join has a condition which      * is always {@code TRUE}.      */
annotation|@
name|ImmutableBeans
operator|.
name|Property
annotation|@
name|ImmutableBeans
operator|.
name|BooleanDefault
argument_list|(
literal|true
argument_list|)
annotation|@
name|Value
operator|.
name|Default
specifier|default
name|boolean
name|isAllowAlwaysTrueCondition
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/** Sets {@link #isAllowAlwaysTrueCondition()}. */
name|Config
name|withAllowAlwaysTrueCondition
parameter_list|(
name|boolean
name|allowAlwaysTrueCondition
parameter_list|)
function_decl|;
comment|/** Defines an operand tree for the given classes. */
specifier|default
name|Config
name|withOperandFor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|joinClass
parameter_list|)
block|{
return|return
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|joinClass
argument_list|)
operator|.
name|inputs
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|joinClass
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|,
name|b2
lambda|->
name|b2
operator|.
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

