begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Contexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|RelHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCorrelate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalIntersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalMatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalRepeatUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSortExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableSpool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlTableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Contains factory interface and default implementation for creating various  * rel nodes.  */
end_comment

begin_class
specifier|public
class|class
name|RelFactories
block|{
specifier|public
specifier|static
specifier|final
name|ProjectFactory
name|DEFAULT_PROJECT_FACTORY
init|=
operator|new
name|ProjectFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FilterFactory
name|DEFAULT_FILTER_FACTORY
init|=
operator|new
name|FilterFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|JoinFactory
name|DEFAULT_JOIN_FACTORY
init|=
operator|new
name|JoinFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CorrelateFactory
name|DEFAULT_CORRELATE_FACTORY
init|=
operator|new
name|CorrelateFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SortFactory
name|DEFAULT_SORT_FACTORY
init|=
operator|new
name|SortFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ExchangeFactory
name|DEFAULT_EXCHANGE_FACTORY
init|=
operator|new
name|ExchangeFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SortExchangeFactory
name|DEFAULT_SORT_EXCHANGE_FACTORY
init|=
operator|new
name|SortExchangeFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|AggregateFactory
name|DEFAULT_AGGREGATE_FACTORY
init|=
operator|new
name|AggregateFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MatchFactory
name|DEFAULT_MATCH_FACTORY
init|=
operator|new
name|MatchFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SetOpFactory
name|DEFAULT_SET_OP_FACTORY
init|=
operator|new
name|SetOpFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ValuesFactory
name|DEFAULT_VALUES_FACTORY
init|=
operator|new
name|ValuesFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TableScanFactory
name|DEFAULT_TABLE_SCAN_FACTORY
init|=
operator|new
name|TableScanFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TableFunctionScanFactory
name|DEFAULT_TABLE_FUNCTION_SCAN_FACTORY
init|=
operator|new
name|TableFunctionScanFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SnapshotFactory
name|DEFAULT_SNAPSHOT_FACTORY
init|=
operator|new
name|SnapshotFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SpoolFactory
name|DEFAULT_SPOOL_FACTORY
init|=
operator|new
name|SpoolFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RepeatUnionFactory
name|DEFAULT_REPEAT_UNION_FACTORY
init|=
operator|new
name|RepeatUnionFactoryImpl
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Struct
name|DEFAULT_STRUCT
init|=
operator|new
name|Struct
argument_list|(
name|DEFAULT_FILTER_FACTORY
argument_list|,
name|DEFAULT_PROJECT_FACTORY
argument_list|,
name|DEFAULT_AGGREGATE_FACTORY
argument_list|,
name|DEFAULT_SORT_FACTORY
argument_list|,
name|DEFAULT_EXCHANGE_FACTORY
argument_list|,
name|DEFAULT_SORT_EXCHANGE_FACTORY
argument_list|,
name|DEFAULT_SET_OP_FACTORY
argument_list|,
name|DEFAULT_JOIN_FACTORY
argument_list|,
name|DEFAULT_CORRELATE_FACTORY
argument_list|,
name|DEFAULT_VALUES_FACTORY
argument_list|,
name|DEFAULT_TABLE_SCAN_FACTORY
argument_list|,
name|DEFAULT_TABLE_FUNCTION_SCAN_FACTORY
argument_list|,
name|DEFAULT_SNAPSHOT_FACTORY
argument_list|,
name|DEFAULT_MATCH_FACTORY
argument_list|,
name|DEFAULT_SPOOL_FACTORY
argument_list|,
name|DEFAULT_REPEAT_UNION_FACTORY
argument_list|)
decl_stmt|;
comment|/** A {@link RelBuilderFactory} that creates a {@link RelBuilder} that will    * create logical relational expressions for everything. */
specifier|public
specifier|static
specifier|final
name|RelBuilderFactory
name|LOGICAL_BUILDER
init|=
name|RelBuilder
operator|.
name|proto
argument_list|(
name|Contexts
operator|.
name|of
argument_list|(
name|DEFAULT_STRUCT
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|RelFactories
parameter_list|()
block|{
block|}
comment|/**    * Can create a    * {@link org.apache.calcite.rel.logical.LogicalProject} of the    * appropriate type for this rule's calling convention.    */
specifier|public
interface|interface
name|ProjectFactory
block|{
comment|/**      * Creates a project.      *      * @param input The input      * @param hints The hints      * @param childExprs The projection expressions      * @param fieldNames The projection field names      * @return a project      * @deprecated Use {@link #createProject(RelNode, List, List, List, Set)} instead      */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|default
name|RelNode
name|createProject
argument_list|(
name|RelNode
name|input
argument_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|childExprs
argument_list|,
annotation|@
name|Nullable
name|List
operator|<
condition|?
then|extends @
name|Nullable
name|String
operator|>
name|fieldNames
argument_list|)
block|{
return|return
name|createProject
argument_list|(
name|input
argument_list|,
name|hints
argument_list|,
name|childExprs
argument_list|,
name|fieldNames
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a project.      *      * @param input The input      * @param hints The hints      * @param childExprs The projection expressions      * @param fieldNames The projection field names      * @param variablesSet Correlating variables that are set when reading a row      *                     from the input, and which may be referenced from the      *                     projection expressions      * @return a project      */
name|RelNode
name|createProject
argument_list|(
name|RelNode
name|input
argument_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|childExprs
argument_list|,
annotation|@
name|Nullable
name|List
operator|<
condition|?
then|extends @
name|Nullable
name|String
operator|>
name|fieldNames
argument_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
argument_list|)
decl_stmt|;
block|}
comment|/**    * Implementation of {@link ProjectFactory} that returns a vanilla    * {@link org.apache.calcite.rel.logical.LogicalProject}.    */
specifier|private
specifier|static
class|class
name|ProjectFactoryImpl
implements|implements
name|ProjectFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createProject
argument_list|(
name|RelNode
name|input
argument_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|childExprs
argument_list|,
annotation|@
name|Nullable
name|List
operator|<
condition|?
then|extends @
name|Nullable
name|String
operator|>
name|fieldNames
argument_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
argument_list|)
block|{
return|return
name|LogicalProject
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|hints
argument_list|,
name|childExprs
argument_list|,
name|fieldNames
argument_list|,
name|variablesSet
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link Sort} of the appropriate type    * for this rule's calling convention.    */
specifier|public
interface|interface
name|SortFactory
block|{
comment|/** Creates a sort. */
name|RelNode
name|createSort
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|offset
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|fetch
parameter_list|)
function_decl|;
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|default
name|RelNode
name|createSort
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|offset
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|fetch
parameter_list|)
block|{
return|return
name|createSort
argument_list|(
name|input
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
block|}
comment|/**    * Implementation of {@link RelFactories.SortFactory} that    * returns a vanilla {@link Sort}.    */
specifier|private
specifier|static
class|class
name|SortFactoryImpl
implements|implements
name|SortFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createSort
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|offset
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|fetch
parameter_list|)
block|{
return|return
name|LogicalSort
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link org.apache.calcite.rel.core.Exchange}    * of the appropriate type for a rule's calling convention.    */
specifier|public
interface|interface
name|ExchangeFactory
block|{
comment|/** Creates an Exchange. */
name|RelNode
name|createExchange
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelDistribution
name|distribution
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of    * {@link RelFactories.ExchangeFactory}    * that returns a {@link Exchange}.    */
specifier|private
specifier|static
class|class
name|ExchangeFactoryImpl
implements|implements
name|ExchangeFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createExchange
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelDistribution
name|distribution
parameter_list|)
block|{
return|return
name|LogicalExchange
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|distribution
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link SortExchange}    * of the appropriate type for a rule's calling convention.    */
specifier|public
interface|interface
name|SortExchangeFactory
block|{
comment|/**      * Creates a {@link SortExchange}.      */
name|RelNode
name|createSortExchange
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelDistribution
name|distribution
parameter_list|,
name|RelCollation
name|collation
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of    * {@link RelFactories.SortExchangeFactory}    * that returns a {@link SortExchange}.    */
specifier|private
specifier|static
class|class
name|SortExchangeFactoryImpl
implements|implements
name|SortExchangeFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createSortExchange
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelDistribution
name|distribution
parameter_list|,
name|RelCollation
name|collation
parameter_list|)
block|{
return|return
name|LogicalSortExchange
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|distribution
argument_list|,
name|collation
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link SetOp} for a particular kind of    * set operation (UNION, EXCEPT, INTERSECT) and of the appropriate type    * for this rule's calling convention.    */
specifier|public
interface|interface
name|SetOpFactory
block|{
comment|/** Creates a set operation. */
name|RelNode
name|createSetOp
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link RelFactories.SetOpFactory} that    * returns a vanilla {@link SetOp} for the particular kind of set    * operation (UNION, EXCEPT, INTERSECT).    */
specifier|private
specifier|static
class|class
name|SetOpFactoryImpl
implements|implements
name|SetOpFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createSetOp
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|UNION
case|:
return|return
name|LogicalUnion
operator|.
name|create
argument_list|(
name|inputs
argument_list|,
name|all
argument_list|)
return|;
case|case
name|EXCEPT
case|:
return|return
name|LogicalMinus
operator|.
name|create
argument_list|(
name|inputs
argument_list|,
name|all
argument_list|)
return|;
case|case
name|INTERSECT
case|:
return|return
name|LogicalIntersect
operator|.
name|create
argument_list|(
name|inputs
argument_list|,
name|all
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a set op: "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Can create a {@link LogicalAggregate} of the appropriate type    * for this rule's calling convention.    */
specifier|public
interface|interface
name|AggregateFactory
block|{
comment|/** Creates an aggregate. */
name|RelNode
name|createAggregate
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link RelFactories.AggregateFactory}    * that returns a vanilla {@link LogicalAggregate}.    */
specifier|private
specifier|static
class|class
name|AggregateFactoryImpl
implements|implements
name|AggregateFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createAggregate
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
return|return
name|LogicalAggregate
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|hints
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link Filter} of the appropriate type    * for this rule's calling convention.    */
specifier|public
interface|interface
name|FilterFactory
block|{
comment|/** Creates a filter.      *      *<p>Some implementations of {@code Filter} do not support correlation      * variables, and for these, this method will throw if {@code variablesSet}      * is not empty.      *      * @param input Input relational expression      * @param condition Filter condition; only rows for which this condition      *   evaluates to TRUE will be emitted      * @param variablesSet Correlating variables that are set when reading      *   a row from the input, and which may be referenced from inside the      *   condition      */
name|RelNode
name|createFilter
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|)
function_decl|;
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|default
name|RelNode
name|createFilter
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
name|createFilter
argument_list|(
name|input
argument_list|,
name|condition
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Implementation of {@link RelFactories.FilterFactory} that    * returns a vanilla {@link LogicalFilter}.    */
specifier|private
specifier|static
class|class
name|FilterFactoryImpl
implements|implements
name|FilterFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createFilter
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|)
block|{
return|return
name|LogicalFilter
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|condition
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|variablesSet
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a join of the appropriate type for a rule's calling convention.    *    *<p>The result is typically a {@link Join}.    */
specifier|public
interface|interface
name|JoinFactory
block|{
comment|/**      * Creates a join.      *      * @param left             Left input      * @param right            Right input      * @param hints            Hints      * @param condition        Join condition      * @param variablesSet     Set of variables that are set by the      *                         LHS and used by the RHS and are not available to      *                         nodes above this LogicalJoin in the tree      * @param joinType         Join type      * @param semiJoinDone     Whether this join has been translated to a      *                         semi-join      */
name|RelNode
name|createJoin
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link JoinFactory} that returns a vanilla    * {@link org.apache.calcite.rel.logical.LogicalJoin}.    */
specifier|private
specifier|static
class|class
name|JoinFactoryImpl
implements|implements
name|JoinFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createJoin
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
block|{
return|return
name|LogicalJoin
operator|.
name|create
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|hints
argument_list|,
name|condition
argument_list|,
name|variablesSet
argument_list|,
name|joinType
argument_list|,
name|semiJoinDone
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a correlate of the appropriate type for a rule's calling    * convention.    *    *<p>The result is typically a {@link Correlate}.    */
specifier|public
interface|interface
name|CorrelateFactory
block|{
comment|/**      * Creates a correlate.      *      * @param left             Left input      * @param right            Right input      * @param hints            Hints      * @param correlationId    Variable name for the row of left input      * @param requiredColumns  Required columns      * @param joinType         Join type      */
name|RelNode
name|createCorrelate
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|CorrelationId
name|correlationId
parameter_list|,
name|ImmutableBitSet
name|requiredColumns
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link CorrelateFactory} that returns a vanilla    * {@link org.apache.calcite.rel.logical.LogicalCorrelate}.    */
specifier|private
specifier|static
class|class
name|CorrelateFactoryImpl
implements|implements
name|CorrelateFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createCorrelate
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|CorrelationId
name|correlationId
parameter_list|,
name|ImmutableBitSet
name|requiredColumns
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|)
block|{
return|return
name|LogicalCorrelate
operator|.
name|create
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|hints
argument_list|,
name|correlationId
argument_list|,
name|requiredColumns
argument_list|,
name|joinType
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a semi-join of the appropriate type for a rule's calling    * convention.    *    * @deprecated Use {@link JoinFactory} instead.    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
interface|interface
name|SemiJoinFactory
block|{
comment|/**      * Creates a semi-join.      *      * @param left             Left input      * @param right            Right input      * @param condition        Join condition      */
name|RelNode
name|createSemiJoin
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|)
function_decl|;
block|}
comment|/**    * Can create a {@link Values} of the appropriate type for a rule's calling    * convention.    */
specifier|public
interface|interface
name|ValuesFactory
block|{
comment|/**      * Creates a Values.      */
name|RelNode
name|createValues
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link ValuesFactory} that returns a    * {@link LogicalValues}.    */
specifier|private
specifier|static
class|class
name|ValuesFactoryImpl
implements|implements
name|ValuesFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createValues
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|)
block|{
return|return
name|LogicalValues
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|tuples
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link TableScan} of the appropriate type for a rule's calling    * convention.    */
specifier|public
interface|interface
name|TableScanFactory
block|{
comment|/**      * Creates a {@link TableScan}.      */
name|RelNode
name|createScan
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|toRelContext
parameter_list|,
name|RelOptTable
name|table
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link TableScanFactory} that returns a    * {@link LogicalTableScan}.    */
specifier|private
specifier|static
class|class
name|TableScanFactoryImpl
implements|implements
name|TableScanFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createScan
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|toRelContext
parameter_list|,
name|RelOptTable
name|table
parameter_list|)
block|{
return|return
name|table
operator|.
name|toRel
argument_list|(
name|toRelContext
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link TableFunctionScan}    * of the appropriate type for a rule's calling convention.    */
specifier|public
interface|interface
name|TableFunctionScanFactory
block|{
comment|/** Creates a {@link TableFunctionScan}. */
name|RelNode
name|createTableFunctionScan
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexCall
name|call
parameter_list|,
annotation|@
name|Nullable
name|Type
name|elementType
parameter_list|,
annotation|@
name|Nullable
name|Set
argument_list|<
name|RelColumnMapping
argument_list|>
name|columnMappings
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of    * {@link TableFunctionScanFactory}    * that returns a {@link TableFunctionScan}.    */
specifier|private
specifier|static
class|class
name|TableFunctionScanFactoryImpl
implements|implements
name|TableFunctionScanFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createTableFunctionScan
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexCall
name|call
parameter_list|,
annotation|@
name|Nullable
name|Type
name|elementType
parameter_list|,
annotation|@
name|Nullable
name|Set
argument_list|<
name|RelColumnMapping
argument_list|>
name|columnMappings
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
comment|// To deduce the return type:
comment|// 1. if the operator implements SqlTableFunction,
comment|// use the SqlTableFunction's return type inference;
comment|// 2. else use the call's type, e.g. the operator may has
comment|// its custom way for return type inference.
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlTableFunction
condition|)
block|{
specifier|final
name|SqlOperatorBinding
name|callBinding
init|=
operator|new
name|RexCallBinding
argument_list|(
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
argument_list|,
name|call
operator|.
name|operands
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SqlTableFunction
name|operator
init|=
operator|(
name|SqlTableFunction
operator|)
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
specifier|final
name|SqlReturnTypeInference
name|rowTypeInference
init|=
name|operator
operator|.
name|getRowTypeInference
argument_list|()
decl_stmt|;
name|rowType
operator|=
name|rowTypeInference
operator|.
name|inferReturnType
argument_list|(
name|callBinding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowType
operator|=
name|call
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|LogicalTableFunctionScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|inputs
argument_list|,
name|call
argument_list|,
name|elementType
argument_list|,
name|requireNonNull
argument_list|(
name|rowType
argument_list|,
literal|"rowType"
argument_list|)
argument_list|,
name|columnMappings
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link Snapshot} of    * the appropriate type for a rule's calling convention.    */
specifier|public
interface|interface
name|SnapshotFactory
block|{
comment|/**      * Creates a {@link Snapshot}.      */
name|RelNode
name|createSnapshot
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RexNode
name|period
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link RelFactories.SnapshotFactory} that    * returns a vanilla {@link LogicalSnapshot}.    */
specifier|public
specifier|static
class|class
name|SnapshotFactoryImpl
implements|implements
name|SnapshotFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createSnapshot
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RexNode
name|period
parameter_list|)
block|{
return|return
name|LogicalSnapshot
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|period
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link Match} of    * the appropriate type for a rule's calling convention.    */
specifier|public
interface|interface
name|MatchFactory
block|{
comment|/** Creates a {@link Match}. */
name|RelNode
name|createMatch
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RexNode
name|pattern
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|boolean
name|strictStart
parameter_list|,
name|boolean
name|strictEnd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|patternDefinitions
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|measures
parameter_list|,
name|RexNode
name|after
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|subsets
parameter_list|,
name|boolean
name|allRows
parameter_list|,
name|ImmutableBitSet
name|partitionKeys
parameter_list|,
name|RelCollation
name|orderKeys
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|interval
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link MatchFactory}    * that returns a {@link LogicalMatch}.    */
specifier|private
specifier|static
class|class
name|MatchFactoryImpl
implements|implements
name|MatchFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createMatch
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RexNode
name|pattern
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|boolean
name|strictStart
parameter_list|,
name|boolean
name|strictEnd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|patternDefinitions
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|measures
parameter_list|,
name|RexNode
name|after
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|subsets
parameter_list|,
name|boolean
name|allRows
parameter_list|,
name|ImmutableBitSet
name|partitionKeys
parameter_list|,
name|RelCollation
name|orderKeys
parameter_list|,
annotation|@
name|Nullable
name|RexNode
name|interval
parameter_list|)
block|{
return|return
name|LogicalMatch
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|rowType
argument_list|,
name|pattern
argument_list|,
name|strictStart
argument_list|,
name|strictEnd
argument_list|,
name|patternDefinitions
argument_list|,
name|measures
argument_list|,
name|after
argument_list|,
name|subsets
argument_list|,
name|allRows
argument_list|,
name|partitionKeys
argument_list|,
name|orderKeys
argument_list|,
name|interval
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link Spool} of    * the appropriate type for a rule's calling convention.    */
annotation|@
name|Experimental
specifier|public
interface|interface
name|SpoolFactory
block|{
comment|/** Creates a {@link TableSpool}. */
name|RelNode
name|createTableSpool
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|Spool
operator|.
name|Type
name|readType
parameter_list|,
name|Spool
operator|.
name|Type
name|writeType
parameter_list|,
name|RelOptTable
name|table
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link SpoolFactory}    * that returns Logical Spools.    */
specifier|private
specifier|static
class|class
name|SpoolFactoryImpl
implements|implements
name|SpoolFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createTableSpool
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|Spool
operator|.
name|Type
name|readType
parameter_list|,
name|Spool
operator|.
name|Type
name|writeType
parameter_list|,
name|RelOptTable
name|table
parameter_list|)
block|{
return|return
name|LogicalTableSpool
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|readType
argument_list|,
name|writeType
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
comment|/**    * Can create a {@link RepeatUnion} of    * the appropriate type for a rule's calling convention.    */
annotation|@
name|Experimental
specifier|public
interface|interface
name|RepeatUnionFactory
block|{
comment|/** Creates a {@link RepeatUnion}. */
name|RelNode
name|createRepeatUnion
parameter_list|(
name|RelNode
name|seed
parameter_list|,
name|RelNode
name|iterative
parameter_list|,
name|boolean
name|all
parameter_list|,
name|int
name|iterationLimit
parameter_list|,
name|RelOptTable
name|table
parameter_list|)
function_decl|;
block|}
comment|/**    * Implementation of {@link RepeatUnion}    * that returns a {@link LogicalRepeatUnion}.    */
specifier|private
specifier|static
class|class
name|RepeatUnionFactoryImpl
implements|implements
name|RepeatUnionFactory
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|createRepeatUnion
parameter_list|(
name|RelNode
name|seed
parameter_list|,
name|RelNode
name|iterative
parameter_list|,
name|boolean
name|all
parameter_list|,
name|int
name|iterationLimit
parameter_list|,
name|RelOptTable
name|table
parameter_list|)
block|{
return|return
name|LogicalRepeatUnion
operator|.
name|create
argument_list|(
name|seed
argument_list|,
name|iterative
argument_list|,
name|all
argument_list|,
name|iterationLimit
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
comment|/** Immutable record that contains an instance of each factory. */
specifier|public
specifier|static
class|class
name|Struct
block|{
specifier|public
specifier|final
name|FilterFactory
name|filterFactory
decl_stmt|;
specifier|public
specifier|final
name|ProjectFactory
name|projectFactory
decl_stmt|;
specifier|public
specifier|final
name|AggregateFactory
name|aggregateFactory
decl_stmt|;
specifier|public
specifier|final
name|SortFactory
name|sortFactory
decl_stmt|;
specifier|public
specifier|final
name|ExchangeFactory
name|exchangeFactory
decl_stmt|;
specifier|public
specifier|final
name|SortExchangeFactory
name|sortExchangeFactory
decl_stmt|;
specifier|public
specifier|final
name|SetOpFactory
name|setOpFactory
decl_stmt|;
specifier|public
specifier|final
name|JoinFactory
name|joinFactory
decl_stmt|;
specifier|public
specifier|final
name|CorrelateFactory
name|correlateFactory
decl_stmt|;
specifier|public
specifier|final
name|ValuesFactory
name|valuesFactory
decl_stmt|;
specifier|public
specifier|final
name|TableScanFactory
name|scanFactory
decl_stmt|;
specifier|public
specifier|final
name|TableFunctionScanFactory
name|tableFunctionScanFactory
decl_stmt|;
specifier|public
specifier|final
name|SnapshotFactory
name|snapshotFactory
decl_stmt|;
specifier|public
specifier|final
name|MatchFactory
name|matchFactory
decl_stmt|;
specifier|public
specifier|final
name|SpoolFactory
name|spoolFactory
decl_stmt|;
specifier|public
specifier|final
name|RepeatUnionFactory
name|repeatUnionFactory
decl_stmt|;
specifier|private
name|Struct
parameter_list|(
name|FilterFactory
name|filterFactory
parameter_list|,
name|ProjectFactory
name|projectFactory
parameter_list|,
name|AggregateFactory
name|aggregateFactory
parameter_list|,
name|SortFactory
name|sortFactory
parameter_list|,
name|ExchangeFactory
name|exchangeFactory
parameter_list|,
name|SortExchangeFactory
name|sortExchangeFactory
parameter_list|,
name|SetOpFactory
name|setOpFactory
parameter_list|,
name|JoinFactory
name|joinFactory
parameter_list|,
name|CorrelateFactory
name|correlateFactory
parameter_list|,
name|ValuesFactory
name|valuesFactory
parameter_list|,
name|TableScanFactory
name|scanFactory
parameter_list|,
name|TableFunctionScanFactory
name|tableFunctionScanFactory
parameter_list|,
name|SnapshotFactory
name|snapshotFactory
parameter_list|,
name|MatchFactory
name|matchFactory
parameter_list|,
name|SpoolFactory
name|spoolFactory
parameter_list|,
name|RepeatUnionFactory
name|repeatUnionFactory
parameter_list|)
block|{
name|this
operator|.
name|filterFactory
operator|=
name|requireNonNull
argument_list|(
name|filterFactory
argument_list|,
literal|"filterFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectFactory
operator|=
name|requireNonNull
argument_list|(
name|projectFactory
argument_list|,
literal|"projectFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregateFactory
operator|=
name|requireNonNull
argument_list|(
name|aggregateFactory
argument_list|,
literal|"aggregateFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortFactory
operator|=
name|requireNonNull
argument_list|(
name|sortFactory
argument_list|,
literal|"sortFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|exchangeFactory
operator|=
name|requireNonNull
argument_list|(
name|exchangeFactory
argument_list|,
literal|"exchangeFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortExchangeFactory
operator|=
name|requireNonNull
argument_list|(
name|sortExchangeFactory
argument_list|,
literal|"sortExchangeFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setOpFactory
operator|=
name|requireNonNull
argument_list|(
name|setOpFactory
argument_list|,
literal|"setOpFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|joinFactory
operator|=
name|requireNonNull
argument_list|(
name|joinFactory
argument_list|,
literal|"joinFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|correlateFactory
operator|=
name|requireNonNull
argument_list|(
name|correlateFactory
argument_list|,
literal|"correlateFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|valuesFactory
operator|=
name|requireNonNull
argument_list|(
name|valuesFactory
argument_list|,
literal|"valuesFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|scanFactory
operator|=
name|requireNonNull
argument_list|(
name|scanFactory
argument_list|,
literal|"scanFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableFunctionScanFactory
operator|=
name|requireNonNull
argument_list|(
name|tableFunctionScanFactory
argument_list|,
literal|"tableFunctionScanFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotFactory
operator|=
name|requireNonNull
argument_list|(
name|snapshotFactory
argument_list|,
literal|"snapshotFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchFactory
operator|=
name|requireNonNull
argument_list|(
name|matchFactory
argument_list|,
literal|"matchFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|spoolFactory
operator|=
name|requireNonNull
argument_list|(
name|spoolFactory
argument_list|,
literal|"spoolFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|repeatUnionFactory
operator|=
name|requireNonNull
argument_list|(
name|repeatUnionFactory
argument_list|,
literal|"repeatUnionFactory"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Struct
name|fromContext
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Struct
name|struct
init|=
name|context
operator|.
name|unwrap
argument_list|(
name|Struct
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|struct
operator|!=
literal|null
condition|)
block|{
return|return
name|struct
return|;
block|}
return|return
operator|new
name|Struct
argument_list|(
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|FilterFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_FILTER_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|ProjectFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_PROJECT_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|AggregateFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_AGGREGATE_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|SortFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_SORT_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|ExchangeFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_EXCHANGE_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|SortExchangeFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_SORT_EXCHANGE_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|SetOpFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_SET_OP_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|JoinFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_JOIN_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|CorrelateFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_CORRELATE_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|ValuesFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_VALUES_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|TableScanFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_TABLE_SCAN_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|TableFunctionScanFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_TABLE_FUNCTION_SCAN_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|SnapshotFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_SNAPSHOT_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|MatchFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_MATCH_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|SpoolFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_SPOOL_FACTORY
argument_list|)
argument_list|,
name|context
operator|.
name|maybeUnwrap
argument_list|(
name|RepeatUnionFactory
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
name|DEFAULT_REPEAT_UNION_FACTORY
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

