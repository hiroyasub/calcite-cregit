begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Planner rule that matches an {@link org.apache.calcite.rel.core.Aggregate}  * on a {@link org.apache.calcite.rel.core.Join} and removes the join  * provided that the join is a left join or right join and it computes no  * aggregate functions or all the aggregate calls have distinct.  *  *<p>For instance,</p>  *  *<blockquote>  *<pre>select distinct s.product_id from  * sales as s  * left join product as p  * on s.product_id = p.product_id</pre></blockquote>  *  *<p>becomes  *  *<blockquote>  *<pre>select distinct s.product_id from sales as s</pre></blockquote>  *  */
end_comment

begin_class
specifier|public
class|class
name|AggregateJoinRemoveRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|AggregateJoinRemoveRule
name|INSTANCE
init|=
operator|new
name|AggregateJoinRemoveRule
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|LogicalJoin
operator|.
name|class
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
decl_stmt|;
comment|/** Creates an AggregateJoinRemoveRule. */
specifier|public
name|AggregateJoinRemoveRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|joinClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|aggregateClass
argument_list|,
name|operandJ
argument_list|(
name|joinClass
argument_list|,
literal|null
argument_list|,
name|join
lambda|->
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
operator|||
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|RIGHT
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|isLeftJoin
init|=
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
decl_stmt|;
name|int
name|lower
init|=
name|isLeftJoin
condition|?
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|-
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|upper
init|=
name|isLeftJoin
condition|?
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
else|:
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
comment|// Check whether the aggregate uses columns whose index is between
comment|// lower(included) and upper(excluded).
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|allFields
init|=
name|RelOptUtil
operator|.
name|getAllFields
argument_list|(
name|aggregate
argument_list|)
decl_stmt|;
if|if
condition|(
name|allFields
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|i
lambda|->
name|i
operator|>=
name|lower
operator|&&
name|i
operator|<
name|upper
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|aggregateCall
lambda|->
operator|!
name|aggregateCall
operator|.
name|isDistinct
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|RelNode
name|node
decl_stmt|;
if|if
condition|(
name|isLeftJoin
condition|)
block|{
name|node
operator|=
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|allFields
operator|.
name|forEach
argument_list|(
name|index
lambda|->
name|map
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|index
operator|-
name|upper
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|groupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|permute
argument_list|(
name|map
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|sourceCount
init|=
name|aggregate
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|targetMapping
init|=
name|Mappings
operator|.
name|target
argument_list|(
name|map
argument_list|,
name|sourceCount
argument_list|,
name|sourceCount
argument_list|)
decl_stmt|;
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|forEach
argument_list|(
name|aggregateCall
lambda|->
name|aggCalls
operator|.
name|add
argument_list|(
name|aggregateCall
operator|.
name|transform
argument_list|(
name|targetMapping
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|node
operator|=
name|relBuilder
operator|.
name|push
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|groupSet
argument_list|)
argument_list|,
name|aggCalls
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateJoinRemoveRule.java
end_comment

end_unit

