begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Represents a hint within a relation expression.  */
end_comment

begin_class
specifier|public
class|class
name|RelHint
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|public
specifier|final
name|ImmutableBitSet
name|inheritPath
decl_stmt|;
specifier|public
specifier|final
name|String
name|hintName
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|listOptions
decl_stmt|;
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvOptions
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a {@code RelHint}.    *    * @param inheritPath Hint inherit path    * @param hintName    Hint name    * @param listOption  Hint options as string list    * @param kvOptions   Hint options as string key value pair    */
specifier|public
name|RelHint
parameter_list|(
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|inheritPath
parameter_list|,
name|String
name|hintName
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|listOption
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvOptions
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|inheritPath
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hintName
argument_list|)
expr_stmt|;
name|this
operator|.
name|inheritPath
operator|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|inheritPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|hintName
operator|=
name|hintName
expr_stmt|;
name|this
operator|.
name|listOptions
operator|=
name|listOption
operator|==
literal|null
condition|?
name|ImmutableList
operator|.
name|of
argument_list|()
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|listOption
argument_list|)
expr_stmt|;
name|this
operator|.
name|kvOptions
operator|=
name|kvOptions
operator|==
literal|null
condition|?
name|ImmutableMap
operator|.
name|of
argument_list|()
else|:
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|kvOptions
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Represents a copy of this hint that has a specified inherit path.    *    * @param inheritPath Hint path    * @return the new {@code RelHint}    */
specifier|public
name|RelHint
name|copy
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|inheritPath
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|inheritPath
argument_list|)
expr_stmt|;
return|return
operator|new
name|RelHint
argument_list|(
name|inheritPath
argument_list|,
name|hintName
argument_list|,
name|listOptions
argument_list|,
name|kvOptions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|RelHint
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RelHint
name|that
init|=
operator|(
name|RelHint
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|hintName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|hintName
argument_list|)
operator|&&
name|this
operator|.
name|inheritPath
operator|.
name|equals
argument_list|(
name|that
operator|.
name|inheritPath
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|listOptions
argument_list|,
name|that
operator|.
name|listOptions
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|kvOptions
argument_list|,
name|that
operator|.
name|kvOptions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|hintName
argument_list|,
name|this
operator|.
name|inheritPath
argument_list|,
name|this
operator|.
name|listOptions
argument_list|,
name|this
operator|.
name|kvOptions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|hintName
argument_list|)
operator|.
name|append
argument_list|(
literal|" inheritPath:"
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|inheritPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|listOptions
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|this
operator|.
name|kvOptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" options:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|listOptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|listOptions
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|kvOptions
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelHint.java
end_comment

end_unit

