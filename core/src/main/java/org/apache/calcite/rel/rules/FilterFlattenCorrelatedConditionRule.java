begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apiguardian
operator|.
name|api
operator|.
name|API
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that matches a {@link Filter} expression with correlated variables, and rewrites the  * condition in a simpler form that is more convenient for the decorrelation logic.  *  *<p>Uncorrelated calls below a comparison operator are turned into input references by extracting  * the computation in a {@link org.apache.calcite.rel.core.Project} expression. An additional  * projection may be added on top of the new filter to retain expression equivalence.</p>  *  *<p>Sub-plan before</p>  *<pre>  * LogicalProject($f0=[true])  *   LogicalFilter(condition=[=($cor0.DEPTNO, +($7, 30))])  *     LogicalTableScan(table=[[CATALOG, SALES, EMP]])  *</pre>  *  *<p>Sub-plan after</p>  *<pre>  * LogicalProject($f0=[true])  *   LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2],..., COMM=[$6], DEPTNO=[$7], SLACKER=[$8])  *     LogicalFilter(condition=[=($cor0.DEPTNO, $9)])  *       LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2],..., SLACKER=[$8], $f9=[+($7, 30)])  *         LogicalTableScan(table=[[CATALOG, SALES, EMP]])  *</pre>  *  *<p>The rule should be used in conjunction with other rules and transformations to have a positive  * impact on the plan. At the moment it is tightly connected with the decorrelation logic and may  * not be useful in a broader context. Projects may implement decorrelation differently so they may  * choose to use this rule or not.</p>  */
end_comment

begin_class
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.27"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|EXPERIMENTAL
argument_list|)
specifier|public
specifier|final
class|class
name|FilterFlattenCorrelatedConditionRule
extends|extends
name|RelRule
argument_list|<
name|FilterFlattenCorrelatedConditionRule
operator|.
name|Config
argument_list|>
block|{
specifier|public
name|FilterFlattenCorrelatedConditionRule
parameter_list|(
specifier|final
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|RexUtil
operator|.
name|containsCorrelation
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelBuilder
name|b
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|push
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|proj
init|=
name|b
operator|.
name|fields
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|projOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Visitor logic strongly dependent on RelDecorrelator#findCorrelationEquivalent
comment|// Handling more kinds of expressions may be useless if the respective logic cannot exploit them
name|RexNode
name|newCondition
init|=
name|filter
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|IS_DISTINCT_FROM
case|:
case|case
name|IS_NOT_DISTINCT_FROM
case|:
name|RexNode
name|op0
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|op1
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|replaceIndex
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|containsCorrelation
argument_list|(
name|op1
argument_list|)
operator|&&
name|isUncorrelatedCall
argument_list|(
name|op0
argument_list|)
condition|)
block|{
name|replaceIndex
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|RexUtil
operator|.
name|containsCorrelation
argument_list|(
name|op0
argument_list|)
operator|&&
name|isUncorrelatedCall
argument_list|(
name|op1
argument_list|)
condition|)
block|{
name|replaceIndex
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// Structure does not match, do not replace
name|replaceIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|replaceIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|copyOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|call
operator|.
name|operands
argument_list|)
decl_stmt|;
name|RexNode
name|oldOp
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
name|replaceIndex
argument_list|)
decl_stmt|;
name|RexNode
name|newOp
init|=
name|b
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|oldOp
operator|.
name|getType
argument_list|()
argument_list|,
name|proj
operator|+
name|projOperands
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|projOperands
operator|.
name|add
argument_list|(
name|oldOp
argument_list|)
expr_stmt|;
name|copyOperands
operator|.
name|set
argument_list|(
name|replaceIndex
argument_list|,
name|newOp
argument_list|)
expr_stmt|;
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|type
argument_list|,
name|copyOperands
argument_list|)
return|;
block|}
return|return
name|call
return|;
case|case
name|AND
case|:
case|case
name|OR
case|:
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
default|default:
return|return
name|call
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCondition
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|b
operator|.
name|projectPlus
argument_list|(
name|projOperands
argument_list|)
expr_stmt|;
name|b
operator|.
name|filter
argument_list|(
name|newCondition
argument_list|)
expr_stmt|;
name|b
operator|.
name|project
argument_list|(
name|b
operator|.
name|fields
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|proj
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isUncorrelatedCall
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|instanceof
name|RexCall
operator|&&
operator|!
name|RexUtil
operator|.
name|containsCorrelation
argument_list|(
name|node
argument_list|)
return|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|EMPTY
operator|.
name|withOperandSupplier
argument_list|(
name|op
lambda|->
name|op
operator|.
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|FilterFlattenCorrelatedConditionRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|FilterFlattenCorrelatedConditionRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

