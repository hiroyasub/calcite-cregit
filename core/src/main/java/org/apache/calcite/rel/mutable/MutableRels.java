begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Calc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Collect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Correlate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Intersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Minus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Uncollect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCalc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCorrelate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Utilities for dealing with {@link MutableRel}s. */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MutableRels
block|{
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|MutableRel
name|ancestor
parameter_list|,
specifier|final
name|MutableRel
name|target
parameter_list|)
block|{
if|if
condition|(
name|ancestor
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
comment|// Short-cut common case.
return|return
literal|true
return|;
block|}
try|try
block|{
operator|new
name|MutableRelVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|MutableRel
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
name|Util
operator|.
name|FoundOne
operator|.
name|NULL
throw|;
block|}
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// CHECKSTYLE: IGNORE 1
block|}
operator|.
name|go
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
name|MutableRel
name|preOrderTraverseNext
parameter_list|(
name|MutableRel
name|node
parameter_list|)
block|{
name|MutableRel
name|parent
init|=
name|node
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|int
name|ordinal
init|=
name|node
operator|.
name|ordinalInParent
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|ordinal
condition|)
block|{
return|return
name|parent
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
name|node
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|ordinal
operator|=
name|node
operator|.
name|ordinalInParent
operator|+
literal|1
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|MutableRel
argument_list|>
name|descendants
parameter_list|(
name|MutableRel
name|query
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|descendantsRecurse
argument_list|(
name|list
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|void
name|descendantsRecurse
parameter_list|(
name|List
argument_list|<
name|MutableRel
argument_list|>
name|list
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|rel
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableRel
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|descendantsRecurse
argument_list|(
name|list
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Based on    * {@link org.apache.calcite.rel.rules.ProjectRemoveRule#strip}. */
specifier|public
specifier|static
name|MutableRel
name|strip
parameter_list|(
name|MutableProject
name|project
parameter_list|)
block|{
return|return
name|isTrivial
argument_list|(
name|project
argument_list|)
condition|?
name|project
operator|.
name|getInput
argument_list|()
else|:
name|project
return|;
block|}
comment|/** Based on    * {@link org.apache.calcite.rel.rules.ProjectRemoveRule#isTrivial(org.apache.calcite.rel.core.Project)}. */
specifier|public
specifier|static
name|boolean
name|isTrivial
parameter_list|(
name|MutableProject
name|project
parameter_list|)
block|{
name|MutableRel
name|child
init|=
name|project
operator|.
name|getInput
argument_list|()
decl_stmt|;
return|return
name|RexUtil
operator|.
name|isIdentity
argument_list|(
name|project
operator|.
name|projects
argument_list|,
name|child
operator|.
name|rowType
argument_list|)
return|;
block|}
comment|/** Equivalent to    * {@link RelOptUtil#createProject(org.apache.calcite.rel.RelNode, java.util.List)}    * for {@link MutableRel}. */
specifier|public
specifier|static
name|MutableRel
name|createProject
parameter_list|(
specifier|final
name|MutableRel
name|child
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|posList
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|child
operator|.
name|rowType
decl_stmt|;
if|if
condition|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|posList
argument_list|,
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|child
return|;
block|}
return|return
name|MutableProject
operator|.
name|of
argument_list|(
name|RelOptUtil
operator|.
name|permute
argument_list|(
name|child
operator|.
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|Mappings
operator|.
name|bijection
argument_list|(
name|posList
argument_list|)
argument_list|)
argument_list|,
name|child
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|posList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|RexNode
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|pos
init|=
name|posList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|RexInputRef
operator|.
name|of
argument_list|(
name|pos
argument_list|,
name|rowType
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Equivalence to {@link org.apache.calcite.plan.RelOptUtil#createCastRel}    * for {@link MutableRel}. */
specifier|public
specifier|static
name|MutableRel
name|createCastRel
parameter_list|(
name|MutableRel
name|rel
parameter_list|,
name|RelDataType
name|castRowType
parameter_list|,
name|boolean
name|rename
parameter_list|)
block|{
name|RelDataType
name|rowType
init|=
name|rel
operator|.
name|rowType
decl_stmt|;
if|if
condition|(
name|RelOptUtil
operator|.
name|areRowTypesEqual
argument_list|(
name|rowType
argument_list|,
name|castRowType
argument_list|,
name|rename
argument_list|)
condition|)
block|{
comment|// nothing to do
return|return
name|rel
return|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|castExps
init|=
name|RexUtil
operator|.
name|generateCastExpressions
argument_list|(
name|rel
operator|.
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|castRowType
argument_list|,
name|rowType
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|rename
condition|?
name|castRowType
operator|.
name|getFieldNames
argument_list|()
else|:
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
return|return
name|MutableProject
operator|.
name|of
argument_list|(
name|rel
argument_list|,
name|castExps
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelNode
name|fromMutable
parameter_list|(
name|MutableRel
name|node
parameter_list|)
block|{
return|return
name|fromMutable
argument_list|(
name|node
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
operator|.
name|create
argument_list|(
name|node
operator|.
name|cluster
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelNode
name|fromMutable
parameter_list|(
name|MutableRel
name|node
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|type
condition|)
block|{
case|case
name|TABLE_SCAN
case|:
case|case
name|VALUES
case|:
return|return
operator|(
operator|(
name|MutableLeafRel
operator|)
name|node
operator|)
operator|.
name|rel
return|;
case|case
name|PROJECT
case|:
specifier|final
name|MutableProject
name|project
init|=
operator|(
name|MutableProject
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|fromMutable
argument_list|(
name|project
operator|.
name|input
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|project
argument_list|(
name|project
operator|.
name|projects
argument_list|,
name|project
operator|.
name|rowType
operator|.
name|getFieldNames
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
case|case
name|FILTER
case|:
specifier|final
name|MutableFilter
name|filter
init|=
operator|(
name|MutableFilter
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|fromMutable
argument_list|(
name|filter
operator|.
name|input
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|filter
argument_list|(
name|filter
operator|.
name|condition
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
case|case
name|AGGREGATE
case|:
specifier|final
name|MutableAggregate
name|aggregate
init|=
operator|(
name|MutableAggregate
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|fromMutable
argument_list|(
name|aggregate
operator|.
name|input
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|aggregate
operator|.
name|groupSet
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|aggregate
operator|.
name|groupSets
argument_list|)
argument_list|,
name|aggregate
operator|.
name|aggCalls
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
case|case
name|SORT
case|:
specifier|final
name|MutableSort
name|sort
init|=
operator|(
name|MutableSort
operator|)
name|node
decl_stmt|;
return|return
name|LogicalSort
operator|.
name|create
argument_list|(
name|fromMutable
argument_list|(
name|sort
operator|.
name|input
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|sort
operator|.
name|collation
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
return|;
case|case
name|CALC
case|:
specifier|final
name|MutableCalc
name|calc
init|=
operator|(
name|MutableCalc
operator|)
name|node
decl_stmt|;
return|return
name|LogicalCalc
operator|.
name|create
argument_list|(
name|fromMutable
argument_list|(
name|calc
operator|.
name|input
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|calc
operator|.
name|program
argument_list|)
return|;
case|case
name|EXCHANGE
case|:
specifier|final
name|MutableExchange
name|exchange
init|=
operator|(
name|MutableExchange
operator|)
name|node
decl_stmt|;
return|return
name|LogicalExchange
operator|.
name|create
argument_list|(
name|fromMutable
argument_list|(
name|exchange
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|exchange
operator|.
name|distribution
argument_list|)
return|;
case|case
name|COLLECT
case|:
block|{
specifier|final
name|MutableCollect
name|collect
init|=
operator|(
name|MutableCollect
operator|)
name|node
decl_stmt|;
specifier|final
name|RelNode
name|child
init|=
name|fromMutable
argument_list|(
name|collect
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
return|return
operator|new
name|Collect
argument_list|(
name|collect
operator|.
name|cluster
argument_list|,
name|child
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|child
argument_list|,
name|collect
operator|.
name|fieldName
argument_list|)
return|;
block|}
case|case
name|UNCOLLECT
case|:
block|{
specifier|final
name|MutableUncollect
name|uncollect
init|=
operator|(
name|MutableUncollect
operator|)
name|node
decl_stmt|;
specifier|final
name|RelNode
name|child
init|=
name|fromMutable
argument_list|(
name|uncollect
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
return|return
name|Uncollect
operator|.
name|create
argument_list|(
name|child
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|child
argument_list|,
name|uncollect
operator|.
name|withOrdinality
argument_list|)
return|;
block|}
case|case
name|WINDOW
case|:
block|{
specifier|final
name|MutableWindow
name|window
init|=
operator|(
name|MutableWindow
operator|)
name|node
decl_stmt|;
specifier|final
name|RelNode
name|child
init|=
name|fromMutable
argument_list|(
name|window
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
return|return
name|LogicalWindow
operator|.
name|create
argument_list|(
name|child
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|child
argument_list|,
name|window
operator|.
name|constants
argument_list|,
name|window
operator|.
name|rowType
argument_list|,
name|window
operator|.
name|groups
argument_list|)
return|;
block|}
case|case
name|TABLE_MODIFY
case|:
specifier|final
name|MutableTableModify
name|modify
init|=
operator|(
name|MutableTableModify
operator|)
name|node
decl_stmt|;
return|return
name|LogicalTableModify
operator|.
name|create
argument_list|(
name|modify
operator|.
name|table
argument_list|,
name|modify
operator|.
name|catalogReader
argument_list|,
name|fromMutable
argument_list|(
name|modify
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|modify
operator|.
name|operation
argument_list|,
name|modify
operator|.
name|updateColumnList
argument_list|,
name|modify
operator|.
name|sourceExpressionList
argument_list|,
name|modify
operator|.
name|flattened
argument_list|)
return|;
case|case
name|SAMPLE
case|:
specifier|final
name|MutableSample
name|sample
init|=
operator|(
name|MutableSample
operator|)
name|node
decl_stmt|;
return|return
operator|new
name|Sample
argument_list|(
name|sample
operator|.
name|cluster
argument_list|,
name|fromMutable
argument_list|(
name|sample
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|sample
operator|.
name|params
argument_list|)
return|;
case|case
name|TABLE_FUNCTION_SCAN
case|:
specifier|final
name|MutableTableFunctionScan
name|tableFunctionScan
init|=
operator|(
name|MutableTableFunctionScan
operator|)
name|node
decl_stmt|;
return|return
name|LogicalTableFunctionScan
operator|.
name|create
argument_list|(
name|tableFunctionScan
operator|.
name|cluster
argument_list|,
name|fromMutables
argument_list|(
name|tableFunctionScan
operator|.
name|getInputs
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|tableFunctionScan
operator|.
name|rexCall
argument_list|,
name|tableFunctionScan
operator|.
name|elementType
argument_list|,
name|tableFunctionScan
operator|.
name|rowType
argument_list|,
name|tableFunctionScan
operator|.
name|columnMappings
argument_list|)
return|;
case|case
name|JOIN
case|:
specifier|final
name|MutableJoin
name|join
init|=
operator|(
name|MutableJoin
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|fromMutable
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|fromMutable
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|join
argument_list|(
name|join
operator|.
name|joinType
argument_list|,
name|join
operator|.
name|condition
argument_list|,
name|join
operator|.
name|variablesSet
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
case|case
name|SEMIJOIN
case|:
specifier|final
name|MutableSemiJoin
name|semiJoin
init|=
operator|(
name|MutableSemiJoin
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|fromMutable
argument_list|(
name|semiJoin
operator|.
name|getLeft
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|fromMutable
argument_list|(
name|semiJoin
operator|.
name|getRight
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|semiJoin
argument_list|(
name|semiJoin
operator|.
name|condition
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
case|case
name|CORRELATE
case|:
specifier|final
name|MutableCorrelate
name|correlate
init|=
operator|(
name|MutableCorrelate
operator|)
name|node
decl_stmt|;
return|return
name|LogicalCorrelate
operator|.
name|create
argument_list|(
name|fromMutable
argument_list|(
name|correlate
operator|.
name|getLeft
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|fromMutable
argument_list|(
name|correlate
operator|.
name|getRight
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|,
name|correlate
operator|.
name|correlationId
argument_list|,
name|correlate
operator|.
name|requiredColumns
argument_list|,
name|correlate
operator|.
name|joinType
argument_list|)
return|;
case|case
name|UNION
case|:
specifier|final
name|MutableUnion
name|union
init|=
operator|(
name|MutableUnion
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|pushAll
argument_list|(
name|MutableRels
operator|.
name|fromMutables
argument_list|(
name|union
operator|.
name|inputs
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|union
argument_list|(
name|union
operator|.
name|all
argument_list|,
name|union
operator|.
name|inputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
case|case
name|MINUS
case|:
specifier|final
name|MutableMinus
name|minus
init|=
operator|(
name|MutableMinus
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|pushAll
argument_list|(
name|MutableRels
operator|.
name|fromMutables
argument_list|(
name|minus
operator|.
name|inputs
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|minus
argument_list|(
name|minus
operator|.
name|all
argument_list|,
name|minus
operator|.
name|inputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
case|case
name|INTERSECT
case|:
specifier|final
name|MutableIntersect
name|intersect
init|=
operator|(
name|MutableIntersect
operator|)
name|node
decl_stmt|;
name|relBuilder
operator|.
name|pushAll
argument_list|(
name|MutableRels
operator|.
name|fromMutables
argument_list|(
name|intersect
operator|.
name|inputs
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|intersect
argument_list|(
name|intersect
operator|.
name|all
argument_list|,
name|intersect
operator|.
name|inputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|relBuilder
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|node
operator|.
name|deep
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RelNode
argument_list|>
name|fromMutables
parameter_list|(
name|List
argument_list|<
name|MutableRel
argument_list|>
name|nodes
parameter_list|,
specifier|final
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|nodes
argument_list|,
operator|new
name|Function
argument_list|<
name|MutableRel
argument_list|,
name|RelNode
argument_list|>
argument_list|()
block|{
specifier|public
name|RelNode
name|apply
parameter_list|(
name|MutableRel
name|mutableRel
parameter_list|)
block|{
return|return
name|fromMutable
argument_list|(
name|mutableRel
argument_list|,
name|relBuilder
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutableRel
name|toMutable
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|HepRelVertex
condition|)
block|{
return|return
name|toMutable
argument_list|(
operator|(
operator|(
name|HepRelVertex
operator|)
name|rel
operator|)
operator|.
name|getCurrentRel
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|RelSubset
condition|)
block|{
return|return
name|toMutable
argument_list|(
name|Util
operator|.
name|first
argument_list|(
operator|(
operator|(
name|RelSubset
operator|)
name|rel
operator|)
operator|.
name|getBest
argument_list|()
argument_list|,
operator|(
operator|(
name|RelSubset
operator|)
name|rel
operator|)
operator|.
name|getOriginal
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|TableScan
condition|)
block|{
return|return
name|MutableScan
operator|.
name|of
argument_list|(
operator|(
name|TableScan
operator|)
name|rel
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Values
condition|)
block|{
return|return
name|MutableValues
operator|.
name|of
argument_list|(
operator|(
name|Values
operator|)
name|rel
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Project
condition|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableProject
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableFilter
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableAggregate
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|sort
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableSort
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Calc
condition|)
block|{
specifier|final
name|Calc
name|calc
init|=
operator|(
name|Calc
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|calc
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableCalc
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|calc
operator|.
name|getProgram
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Exchange
condition|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
operator|(
name|Exchange
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|exchange
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableExchange
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|exchange
operator|.
name|getDistribution
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Collect
condition|)
block|{
specifier|final
name|Collect
name|collect
init|=
operator|(
name|Collect
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|collect
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableCollect
operator|.
name|of
argument_list|(
name|collect
operator|.
name|getRowType
argument_list|()
argument_list|,
name|input
argument_list|,
name|collect
operator|.
name|getFieldName
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Uncollect
condition|)
block|{
specifier|final
name|Uncollect
name|uncollect
init|=
operator|(
name|Uncollect
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|uncollect
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableUncollect
operator|.
name|of
argument_list|(
name|uncollect
operator|.
name|getRowType
argument_list|()
argument_list|,
name|input
argument_list|,
name|uncollect
operator|.
name|withOrdinality
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Window
condition|)
block|{
specifier|final
name|Window
name|window
init|=
operator|(
name|Window
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|window
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableWindow
operator|.
name|of
argument_list|(
name|window
operator|.
name|getRowType
argument_list|()
argument_list|,
name|input
argument_list|,
name|window
operator|.
name|groups
argument_list|,
name|window
operator|.
name|getConstants
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|TableModify
condition|)
block|{
specifier|final
name|TableModify
name|modify
init|=
operator|(
name|TableModify
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|modify
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableTableModify
operator|.
name|of
argument_list|(
name|modify
operator|.
name|getRowType
argument_list|()
argument_list|,
name|input
argument_list|,
name|modify
operator|.
name|getTable
argument_list|()
argument_list|,
name|modify
operator|.
name|getCatalogReader
argument_list|()
argument_list|,
name|modify
operator|.
name|getOperation
argument_list|()
argument_list|,
name|modify
operator|.
name|getUpdateColumnList
argument_list|()
argument_list|,
name|modify
operator|.
name|getSourceExpressionList
argument_list|()
argument_list|,
name|modify
operator|.
name|isFlattened
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Sample
condition|)
block|{
specifier|final
name|Sample
name|sample
init|=
operator|(
name|Sample
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|input
init|=
name|toMutable
argument_list|(
name|sample
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableSample
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|sample
operator|.
name|getSamplingParameters
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|TableFunctionScan
condition|)
block|{
specifier|final
name|TableFunctionScan
name|tableFunctionScan
init|=
operator|(
name|TableFunctionScan
operator|)
name|rel
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|inputs
init|=
name|toMutables
argument_list|(
name|tableFunctionScan
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableTableFunctionScan
operator|.
name|of
argument_list|(
name|tableFunctionScan
operator|.
name|getCluster
argument_list|()
argument_list|,
name|tableFunctionScan
operator|.
name|getRowType
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|tableFunctionScan
operator|.
name|getCall
argument_list|()
argument_list|,
name|tableFunctionScan
operator|.
name|getElementType
argument_list|()
argument_list|,
name|tableFunctionScan
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
return|;
block|}
comment|// It is necessary that SemiJoin is placed in front of Join here, since SemiJoin
comment|// is a sub-class of Join.
if|if
condition|(
name|rel
operator|instanceof
name|SemiJoin
condition|)
block|{
specifier|final
name|SemiJoin
name|semiJoin
init|=
operator|(
name|SemiJoin
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|left
init|=
name|toMutable
argument_list|(
name|semiJoin
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MutableRel
name|right
init|=
name|toMutable
argument_list|(
name|semiJoin
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableSemiJoin
operator|.
name|of
argument_list|(
name|semiJoin
operator|.
name|getRowType
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|semiJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|semiJoin
operator|.
name|getLeftKeys
argument_list|()
argument_list|,
name|semiJoin
operator|.
name|getRightKeys
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Join
condition|)
block|{
specifier|final
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|left
init|=
name|toMutable
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MutableRel
name|right
init|=
name|toMutable
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableJoin
operator|.
name|of
argument_list|(
name|join
operator|.
name|getRowType
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesSet
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Correlate
condition|)
block|{
specifier|final
name|Correlate
name|correlate
init|=
operator|(
name|Correlate
operator|)
name|rel
decl_stmt|;
specifier|final
name|MutableRel
name|left
init|=
name|toMutable
argument_list|(
name|correlate
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MutableRel
name|right
init|=
name|toMutable
argument_list|(
name|correlate
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableCorrelate
operator|.
name|of
argument_list|(
name|correlate
operator|.
name|getRowType
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|correlate
operator|.
name|getCorrelationId
argument_list|()
argument_list|,
name|correlate
operator|.
name|getRequiredColumns
argument_list|()
argument_list|,
name|correlate
operator|.
name|getJoinType
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Union
condition|)
block|{
specifier|final
name|Union
name|union
init|=
operator|(
name|Union
operator|)
name|rel
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|inputs
init|=
name|toMutables
argument_list|(
name|union
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableUnion
operator|.
name|of
argument_list|(
name|union
operator|.
name|getRowType
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|union
operator|.
name|all
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Minus
condition|)
block|{
specifier|final
name|Minus
name|minus
init|=
operator|(
name|Minus
operator|)
name|rel
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|inputs
init|=
name|toMutables
argument_list|(
name|minus
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableMinus
operator|.
name|of
argument_list|(
name|minus
operator|.
name|getRowType
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|minus
operator|.
name|all
argument_list|)
return|;
block|}
if|if
condition|(
name|rel
operator|instanceof
name|Intersect
condition|)
block|{
specifier|final
name|Intersect
name|intersect
init|=
operator|(
name|Intersect
operator|)
name|rel
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|inputs
init|=
name|toMutables
argument_list|(
name|intersect
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|MutableIntersect
operator|.
name|of
argument_list|(
name|intersect
operator|.
name|getRowType
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|intersect
operator|.
name|all
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot translate "
operator|+
name|rel
operator|+
literal|" to MutableRel"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|MutableRel
argument_list|>
name|toMutables
parameter_list|(
name|List
argument_list|<
name|RelNode
argument_list|>
name|nodes
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|nodes
argument_list|,
operator|new
name|Function
argument_list|<
name|RelNode
argument_list|,
name|MutableRel
argument_list|>
argument_list|()
block|{
specifier|public
name|MutableRel
name|apply
parameter_list|(
name|RelNode
name|relNode
parameter_list|)
block|{
return|return
name|toMutable
argument_list|(
name|relNode
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End MutableRels.java
end_comment

end_unit

