begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Planner rule that matches an {@link org.apache.calcite.rel.core.Project}  * on a {@link org.apache.calcite.rel.core.Join} and removes the left input  * of the join provided that the left input is also a left join if possible.  *  *<p>For instance,</p>  *  *<blockquote>  *<pre>select s.product_id, pc.product_id from  * sales as s  * left join product as p  * on s.product_id = p.product_id  * left join product_class pc  * on s.product_id = pc.product_id</pre></blockquote>  *  *<p>becomes  *  *<blockquote>  *<pre>select s.product_id, pc.product_id from  * sales as s  * left join product_class pc  * on s.product_id = pc.product_id</pre></blockquote>  *  */
end_comment

begin_class
specifier|public
class|class
name|ProjectJoinJoinRemoveRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|ProjectJoinJoinRemoveRule
name|INSTANCE
init|=
operator|new
name|ProjectJoinJoinRemoveRule
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|LogicalJoin
operator|.
name|class
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
decl_stmt|;
comment|/** Creates a ProjectJoinJoinRemoveRule. */
specifier|public
name|ProjectJoinJoinRemoveRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Project
argument_list|>
name|projectClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|joinClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|projectClass
argument_list|,
name|operandJ
argument_list|(
name|joinClass
argument_list|,
literal|null
argument_list|,
name|join
lambda|->
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|operandJ
argument_list|(
name|joinClass
argument_list|,
literal|null
argument_list|,
name|join
lambda|->
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|topJoin
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|bottomJoin
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|leftBottomChildSize
init|=
name|bottomJoin
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
comment|// Check whether the project uses columns in the right input of bottom join.
for|for
control|(
name|RexNode
name|expr
range|:
name|project
operator|.
name|getProjects
argument_list|()
control|)
block|{
if|if
condition|(
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|expr
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|i
lambda|->
name|i
operator|>=
name|leftBottomChildSize
operator|&&
name|i
operator|<
name|bottomJoin
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
comment|// Check whether the top join uses columns in the right input of bottom join.
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|topJoin
operator|.
name|getLeft
argument_list|()
argument_list|,
name|topJoin
operator|.
name|getRight
argument_list|()
argument_list|,
name|topJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftKeys
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftKeys
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|s
lambda|->
name|s
operator|>=
name|leftBottomChildSize
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Check whether left join keys in top join and bottom join are equal.
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftChildKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rightChildKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|bottomJoin
operator|.
name|getLeft
argument_list|()
argument_list|,
name|bottomJoin
operator|.
name|getRight
argument_list|()
argument_list|,
name|bottomJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftChildKeys
argument_list|,
name|rightChildKeys
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|leftKeys
operator|.
name|equals
argument_list|(
name|leftChildKeys
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Make sure that right keys of bottom join are unique.
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|columns
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rightChildKeys
operator|.
name|forEach
argument_list|(
name|key
lambda|->
name|columns
operator|.
name|set
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mq
operator|.
name|areColumnsUnique
argument_list|(
name|bottomJoin
operator|.
name|getRight
argument_list|()
argument_list|,
name|columns
operator|.
name|build
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|offset
init|=
name|bottomJoin
operator|.
name|getRight
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|condition
init|=
name|RexUtil
operator|.
name|shift
argument_list|(
name|topJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftBottomChildSize
argument_list|,
operator|-
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|join
init|=
name|relBuilder
operator|.
name|push
argument_list|(
name|bottomJoin
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|push
argument_list|(
name|topJoin
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|topJoin
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|condition
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newExprs
init|=
name|project
operator|.
name|getProjects
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|expr
lambda|->
name|RexUtil
operator|.
name|shift
argument_list|(
name|expr
argument_list|,
name|leftBottomChildSize
argument_list|,
operator|-
name|offset
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|join
argument_list|)
operator|.
name|project
argument_list|(
name|newExprs
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

