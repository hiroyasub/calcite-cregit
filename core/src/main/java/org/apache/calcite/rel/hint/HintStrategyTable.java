begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A collection of {@link HintStrategy}s.  *  *<p>Every hint must register a {@link HintStrategy} into the collection.  * With a hint strategies mapping, the hint strategy table is used as a tool  * to decide i) if the given hint was registered; ii) which hints are suitable for the rel with  * a given hints collection; iii) if the hint options are valid.  *  *<p>Once built, the hint strategy table is immutable during the planning phrase.  *  *<p>Match of hint name is case in-sensitive.  *  * @see HintPredicate  */
end_comment

begin_class
specifier|public
class|class
name|HintStrategyTable
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/** Empty strategies. */
specifier|public
specifier|static
specifier|final
name|HintStrategyTable
name|EMPTY
init|=
operator|new
name|HintStrategyTable
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|HintErrorLogger
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/** Mapping from hint name to {@link HintStrategy}. */
specifier|private
specifier|final
name|Map
argument_list|<
name|Key
argument_list|,
name|HintStrategy
argument_list|>
name|strategies
decl_stmt|;
comment|/** Handler for the hint error. */
specifier|private
specifier|final
name|Litmus
name|errorHandler
decl_stmt|;
specifier|private
name|HintStrategyTable
parameter_list|(
name|Map
argument_list|<
name|Key
argument_list|,
name|HintStrategy
argument_list|>
name|strategies
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
name|this
operator|.
name|strategies
operator|=
name|strategies
expr_stmt|;
name|this
operator|.
name|errorHandler
operator|=
name|litmus
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Applies this {@link HintStrategyTable} hint strategies to the given relational    * expression and the {@code hints}.    *    * @param hints Hints that may attach to the {@code rel}    * @param rel   Relational expression    * @return A hint list that can be attached to the {@code rel}    */
specifier|public
name|List
argument_list|<
name|RelHint
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
parameter_list|,
name|RelNode
name|rel
parameter_list|)
block|{
return|return
name|hints
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|relHint
lambda|->
name|canApply
argument_list|(
name|relHint
argument_list|,
name|rel
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|canApply
parameter_list|(
name|RelHint
name|hint
parameter_list|,
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Key
name|key
init|=
name|Key
operator|.
name|of
argument_list|(
name|hint
operator|.
name|hintName
argument_list|)
decl_stmt|;
assert|assert
name|this
operator|.
name|strategies
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
assert|;
return|return
name|this
operator|.
name|strategies
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|predicate
operator|.
name|apply
argument_list|(
name|hint
argument_list|,
name|rel
argument_list|)
return|;
block|}
comment|/**    * Checks if the given hint is valid.    *    * @param hint The hint    */
specifier|public
name|boolean
name|validateHint
parameter_list|(
name|RelHint
name|hint
parameter_list|)
block|{
specifier|final
name|Key
name|key
init|=
name|Key
operator|.
name|of
argument_list|(
name|hint
operator|.
name|hintName
argument_list|)
decl_stmt|;
name|boolean
name|hintExists
init|=
name|this
operator|.
name|errorHandler
operator|.
name|check
argument_list|(
name|this
operator|.
name|strategies
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|,
literal|"Hint: {} should be registered in the {}"
argument_list|,
name|hint
operator|.
name|hintName
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hintExists
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|HintStrategy
name|strategy
init|=
name|strategies
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|.
name|hintOptionChecker
operator|!=
literal|null
condition|)
block|{
return|return
name|strategy
operator|.
name|hintOptionChecker
operator|.
name|checkOptions
argument_list|(
name|hint
argument_list|,
name|this
operator|.
name|errorHandler
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** Returns whether the {@code hintable} has hints that imply    * the given {@code rule} should be excluded. */
specifier|public
name|boolean
name|isRuleExcluded
parameter_list|(
name|Hintable
name|hintable
parameter_list|,
name|RelOptRule
name|rule
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
init|=
name|hintable
operator|.
name|getHints
argument_list|()
decl_stmt|;
if|if
condition|(
name|hints
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|RelHint
name|hint
range|:
name|hints
control|)
block|{
specifier|final
name|Key
name|key
init|=
name|Key
operator|.
name|of
argument_list|(
name|hint
operator|.
name|hintName
argument_list|)
decl_stmt|;
assert|assert
name|this
operator|.
name|strategies
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
assert|;
specifier|final
name|HintStrategy
name|strategy
init|=
name|strategies
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|.
name|excludedRules
operator|.
name|contains
argument_list|(
name|rule
argument_list|)
condition|)
block|{
return|return
name|isDesiredConversionPossible
argument_list|(
name|strategy
operator|.
name|converterRules
argument_list|,
name|hintable
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns whether the {@code hintable} has hints that imply    * the given {@code hintable} can make conversion successfully. */
specifier|private
specifier|static
name|boolean
name|isDesiredConversionPossible
parameter_list|(
name|Set
argument_list|<
name|ConverterRule
argument_list|>
name|converterRules
parameter_list|,
name|Hintable
name|hintable
parameter_list|)
block|{
comment|// If no converter rules are specified, we assume the conversion is possible.
return|return
name|converterRules
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|converterRules
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|converterRule
lambda|->
name|converterRule
operator|.
name|convert
argument_list|(
operator|(
name|RelNode
operator|)
name|hintable
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns a {@code HintStrategyTable} builder.    */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|//~ Inner Class ------------------------------------------------------------
comment|/**    * Key used to keep the strategies which ignores the case sensitivity.    */
specifier|private
specifier|static
class|class
name|Key
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Key
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|static
name|Key
name|of
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Key
name|key
init|=
operator|(
name|Key
operator|)
name|o
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|key
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * Builder for {@code HintStrategyTable}.    */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|Map
argument_list|<
name|Key
argument_list|,
name|HintStrategy
argument_list|>
name|strategies
decl_stmt|;
specifier|private
name|Litmus
name|errorHandler
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|strategies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|errorHandler
operator|=
name|HintErrorLogger
operator|.
name|INSTANCE
expr_stmt|;
block|}
specifier|public
name|Builder
name|hintStrategy
parameter_list|(
name|String
name|hintName
parameter_list|,
name|HintPredicate
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|strategies
operator|.
name|put
argument_list|(
name|Key
operator|.
name|of
argument_list|(
name|hintName
argument_list|)
argument_list|,
name|HintStrategy
operator|.
name|builder
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|strategy
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|hintStrategy
parameter_list|(
name|String
name|hintName
parameter_list|,
name|HintStrategy
name|entry
parameter_list|)
block|{
name|this
operator|.
name|strategies
operator|.
name|put
argument_list|(
name|Key
operator|.
name|of
argument_list|(
name|hintName
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets an error handler to customize the hints error handling.      *      *<p>The default behavior is to log warnings.      *      * @param errorHandler The handler      */
specifier|public
name|Builder
name|errorHandler
parameter_list|(
name|Litmus
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|HintStrategyTable
name|build
parameter_list|()
block|{
return|return
operator|new
name|HintStrategyTable
argument_list|(
name|this
operator|.
name|strategies
argument_list|,
name|this
operator|.
name|errorHandler
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.util.Litmus} that returns    * a status code, it logs warnings for fail check and does not throw. */
specifier|public
specifier|static
class|class
name|HintErrorLogger
implements|implements
name|Litmus
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|PARSER_LOGGER
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HintErrorLogger
name|INSTANCE
init|=
operator|new
name|HintErrorLogger
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|fail
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|succeed
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|condition
condition|)
block|{
return|return
name|succeed
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|fail
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

