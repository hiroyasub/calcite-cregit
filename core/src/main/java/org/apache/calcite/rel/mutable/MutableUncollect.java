begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Mutable equivalent of {@link org.apache.calcite.rel.core.Uncollect}. */
end_comment

begin_class
specifier|public
class|class
name|MutableUncollect
extends|extends
name|MutableSingleRel
block|{
specifier|public
specifier|final
name|boolean
name|withOrdinality
decl_stmt|;
specifier|private
name|MutableUncollect
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|MutableRel
name|input
parameter_list|,
name|boolean
name|withOrdinality
parameter_list|)
block|{
name|super
argument_list|(
name|MutableRelType
operator|.
name|UNCOLLECT
argument_list|,
name|rowType
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|withOrdinality
operator|=
name|withOrdinality
expr_stmt|;
block|}
comment|/**    * Creates a MutableUncollect.    *    * @param rowType         Row type    * @param input           Input relational expression    * @param withOrdinality  Whether the output contains an extra    *                        {@code ORDINALITY} column    */
specifier|public
specifier|static
name|MutableUncollect
name|of
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|MutableRel
name|input
parameter_list|,
name|boolean
name|withOrdinality
parameter_list|)
block|{
return|return
operator|new
name|MutableUncollect
argument_list|(
name|rowType
argument_list|,
name|input
argument_list|,
name|withOrdinality
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|MutableUncollect
operator|&&
name|withOrdinality
operator|==
operator|(
operator|(
name|MutableUncollect
operator|)
name|obj
operator|)
operator|.
name|withOrdinality
operator|&&
name|input
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|MutableUncollect
operator|)
name|obj
operator|)
operator|.
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|input
argument_list|,
name|withOrdinality
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|digest
parameter_list|(
name|StringBuilder
name|buf
parameter_list|)
block|{
return|return
name|buf
operator|.
name|append
argument_list|(
literal|"Uncollect(withOrdinality: "
argument_list|)
operator|.
name|append
argument_list|(
name|withOrdinality
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MutableRel
name|clone
parameter_list|()
block|{
return|return
name|MutableUncollect
operator|.
name|of
argument_list|(
name|rowType
argument_list|,
name|input
operator|.
name|clone
argument_list|()
argument_list|,
name|withOrdinality
argument_list|)
return|;
block|}
block|}
end_class

end_unit

