begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperandChildPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_comment
comment|/**  * TraitMatchingRule adapts a converter rule, restricting it to fire only when  * its input already matches the expected output trait. This can be used with  * {@link org.apache.calcite.plan.hep.HepPlanner} in cases where alternate  * implementations are available and it is desirable to minimize converters.  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|TraitMatchingRule
extends|extends
name|RelRule
argument_list|<
name|TraitMatchingRule
operator|.
name|Config
argument_list|>
block|{
comment|/**    * Creates a configuration for a TraitMatchingRule.    *    * @param converterRule     Rule to be restricted; rule must take a single    *                          operand expecting a single input    * @param relBuilderFactory Builder for relational expressions    */
specifier|public
specifier|static
name|Config
name|config
parameter_list|(
name|ConverterRule
name|converterRule
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
specifier|final
name|RelOptRuleOperand
name|operand
init|=
name|converterRule
operator|.
name|getOperand
argument_list|()
decl_stmt|;
assert|assert
name|operand
operator|.
name|childPolicy
operator|==
name|RelOptRuleOperandChildPolicy
operator|.
name|ANY
assert|;
return|return
name|ImmutableTraitMatchingRule
operator|.
name|Config
operator|.
name|builder
argument_list|()
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"TraitMatchingRule: "
operator|+
name|converterRule
argument_list|)
operator|.
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|operand
operator|.
name|getMatchedClass
argument_list|()
argument_list|)
operator|.
name|oneInput
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withConverterRule
argument_list|(
name|converterRule
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a TraitMatchingRule. */
specifier|protected
name|TraitMatchingRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|TraitMatchingRule
parameter_list|(
name|ConverterRule
name|converterRule
parameter_list|)
block|{
name|this
argument_list|(
name|config
argument_list|(
name|converterRule
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|TraitMatchingRule
parameter_list|(
name|ConverterRule
name|converterRule
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|this
argument_list|(
name|config
argument_list|(
name|converterRule
argument_list|,
name|relBuilderFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|config
operator|.
name|converterRule
argument_list|()
operator|.
name|getOutConvention
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|RelNode
name|input
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ConverterRule
name|converterRule
init|=
name|config
operator|.
name|converterRule
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|contains
argument_list|(
name|converterRule
operator|.
name|getOutTrait
argument_list|()
argument_list|)
condition|)
block|{
name|converterRule
operator|.
name|onMatch
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
argument_list|(
name|singleton
operator|=
literal|false
argument_list|)
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|TraitMatchingRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|TraitMatchingRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Returns the rule to be restricted; rule must take a single      * operand expecting a single input. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|ImmutableBeans
operator|.
name|Property
name|ConverterRule
name|converterRule
parameter_list|()
function_decl|;
comment|/** Sets {@link #converterRule()}. */
name|Config
name|withConverterRule
parameter_list|(
name|ConverterRule
name|converterRule
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

