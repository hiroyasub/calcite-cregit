begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Root of a tree of {@link RelNode}.  *  *<p>One important reason that RelRoot exists is to deal with queries like  *  *<blockquote><code>SELECT name  * FROM emp  * ORDER BY empno DESC</code></blockquote>  *  *<p>Calcite knows that the result must be sorted, but cannot represent its  * sort order as a collation, because {@code empno} is not a field in the  * result.  *  *<p>Instead we represent this as  *  *<blockquote><code>RelRoot: {  *   rel: Sort($1 DESC)  *          Project(name, empno)  *            TableScan(EMP)  *   fields: [0]  *   collation: [1 DESC]  * }</code></blockquote>  *  *<p>Note that the {@code empno} field is present in the result, but the  * {@code fields} mask tells the consumer to throw it away.  *  *<p>Another use case is queries like this:  *  *<blockquote><code>SELECT name AS n, name AS n2, empno AS n  * FROM emp</code></blockquote>  *  *<p>The there are multiple uses of the {@code name} field. and there are  * multiple columns aliased as {@code n}. You can represent this as  *  *<blockquote><code>RelRoot: {  *   rel: Project(name, empno)  *          TableScan(EMP)  *   fields: [(0, "n"), (0, "n2"), (1, "n")]  *   collation: []  * }</code></blockquote>  */
end_comment

begin_class
specifier|public
class|class
name|RelRoot
block|{
specifier|public
specifier|final
name|RelNode
name|rel
decl_stmt|;
specifier|public
specifier|final
name|RelDataType
name|validatedRowType
decl_stmt|;
specifier|public
specifier|final
name|SqlKind
name|kind
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|fields
decl_stmt|;
specifier|public
specifier|final
name|RelCollation
name|collation
decl_stmt|;
comment|/**    * Creates a RelRoot.    *    * @param validatedRowType Original row type returned by query validator    * @param kind Type of query (SELECT, UPDATE, ...)    */
specifier|public
name|RelRoot
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelDataType
name|validatedRowType
parameter_list|,
name|SqlKind
name|kind
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|fields
parameter_list|,
name|RelCollation
name|collation
parameter_list|)
block|{
name|this
operator|.
name|rel
operator|=
name|rel
expr_stmt|;
name|this
operator|.
name|validatedRowType
operator|=
name|validatedRowType
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|this
operator|.
name|collation
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|collation
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a simple RelRoot. */
specifier|public
specifier|static
name|RelRoot
name|of
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|SqlKind
name|kind
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|rel
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|kind
argument_list|)
return|;
block|}
comment|/** Creates a simple RelRoot. */
specifier|public
specifier|static
name|RelRoot
name|of
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|SqlKind
name|kind
parameter_list|)
block|{
specifier|final
name|ImmutableIntList
name|refs
init|=
name|ImmutableIntList
operator|.
name|identity
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
return|return
operator|new
name|RelRoot
argument_list|(
name|rel
argument_list|,
name|rowType
argument_list|,
name|kind
argument_list|,
name|Pair
operator|.
name|zip
argument_list|(
name|refs
argument_list|,
name|names
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Root {kind: "
operator|+
name|kind
operator|+
literal|", rel: "
operator|+
name|rel
operator|+
literal|", rowType: "
operator|+
name|validatedRowType
operator|+
literal|", fields: "
operator|+
name|fields
operator|+
literal|", collation: "
operator|+
name|collation
operator|+
literal|"}"
return|;
block|}
comment|/** Creates a copy of this RelRoot, assigning a {@link RelNode}. */
specifier|public
name|RelRoot
name|withRel
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|==
name|this
operator|.
name|rel
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RelRoot
argument_list|(
name|rel
argument_list|,
name|validatedRowType
argument_list|,
name|kind
argument_list|,
name|fields
argument_list|,
name|collation
argument_list|)
return|;
block|}
comment|/** Creates a copy, assigning a new kind. */
specifier|public
name|RelRoot
name|withKind
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
if|if
condition|(
name|kind
operator|==
name|this
operator|.
name|kind
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|RelRoot
argument_list|(
name|rel
argument_list|,
name|validatedRowType
argument_list|,
name|kind
argument_list|,
name|fields
argument_list|,
name|collation
argument_list|)
return|;
block|}
specifier|public
name|RelRoot
name|withCollation
parameter_list|(
name|RelCollation
name|collation
parameter_list|)
block|{
return|return
operator|new
name|RelRoot
argument_list|(
name|rel
argument_list|,
name|validatedRowType
argument_list|,
name|kind
argument_list|,
name|fields
argument_list|,
name|collation
argument_list|)
return|;
block|}
comment|/** Returns the root relational expression, creating a {@link LogicalProject}    * if necessary to remove fields that are not needed. */
specifier|public
name|RelNode
name|project
parameter_list|()
block|{
if|if
condition|(
name|isRefTrivial
argument_list|()
condition|)
block|{
return|return
name|rel
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|field
range|:
name|fields
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|rel
argument_list|,
name|field
operator|.
name|left
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|LogicalProject
operator|.
name|create
argument_list|(
name|rel
argument_list|,
name|projects
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|fields
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isNameTrivial
parameter_list|()
block|{
specifier|final
name|RelDataType
name|inputRowType
init|=
name|rel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
return|return
name|Pair
operator|.
name|right
argument_list|(
name|fields
argument_list|)
operator|.
name|equals
argument_list|(
name|inputRowType
operator|.
name|getFieldNames
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isRefTrivial
parameter_list|()
block|{
if|if
condition|(
name|SqlKind
operator|.
name|DML
operator|.
name|contains
argument_list|(
name|kind
argument_list|)
condition|)
block|{
comment|// DML statements return a single count column.
comment|// The validated type is of the SELECT.
comment|// Still, we regard the mapping as trivial.
return|return
literal|true
return|;
block|}
specifier|final
name|RelDataType
name|inputRowType
init|=
name|rel
operator|.
name|getRowType
argument_list|()
decl_stmt|;
return|return
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Pair
operator|.
name|left
argument_list|(
name|fields
argument_list|)
argument_list|,
name|inputRowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCollationTrivial
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collations
init|=
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|getTraits
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
return|return
name|collations
operator|!=
literal|null
operator|&&
name|collations
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|collation
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelRoot.java
end_comment

end_unit

