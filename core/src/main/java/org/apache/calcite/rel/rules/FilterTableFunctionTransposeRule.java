begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes  * a {@link org.apache.calcite.rel.logical.LogicalFilter}  * past a {@link org.apache.calcite.rel.logical.LogicalTableFunctionScan}.  */
end_comment

begin_class
specifier|public
class|class
name|FilterTableFunctionTransposeRule
extends|extends
name|RelOptRule
implements|implements
name|TransformationRule
block|{
comment|/** @deprecated Use {@link CoreRules#FILTER_TABLE_FUNCTION_TRANSPOSE}. */
annotation|@
name|Deprecated
comment|// to be removed before 1.25
specifier|public
specifier|static
specifier|final
name|FilterTableFunctionTransposeRule
name|INSTANCE
init|=
name|CoreRules
operator|.
name|FILTER_TABLE_FUNCTION_TRANSPOSE
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a FilterTableFunctionTransposeRule.    */
specifier|public
name|FilterTableFunctionTransposeRule
parameter_list|(
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|LogicalFilter
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|LogicalTableFunctionScan
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LogicalFilter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LogicalTableFunctionScan
name|funcRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RelColumnMapping
argument_list|>
name|columnMappings
init|=
name|funcRel
operator|.
name|getColumnMappings
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnMappings
operator|==
literal|null
operator|||
name|columnMappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No column mapping information, so no push-down
comment|// possible.
return|return;
block|}
name|List
argument_list|<
name|RelNode
argument_list|>
name|funcInputs
init|=
name|funcRel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
name|funcInputs
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// TODO:  support more than one relational input; requires
comment|// offsetting field indices, similar to join
return|return;
block|}
comment|// TODO:  support mappings other than 1-to-1
if|if
condition|(
name|funcRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|!=
name|funcInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|RelColumnMapping
name|mapping
range|:
name|columnMappings
control|)
block|{
if|if
condition|(
name|mapping
operator|.
name|iInputColumn
operator|!=
name|mapping
operator|.
name|iOutputColumn
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|mapping
operator|.
name|derived
condition|)
block|{
return|return;
block|}
block|}
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newFuncInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|funcRel
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|condition
init|=
name|filter
operator|.
name|getCondition
argument_list|()
decl_stmt|;
comment|// create filters on top of each func input, modifying the filter
comment|// condition to reference the child instead
name|RexBuilder
name|rexBuilder
init|=
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|origFields
init|=
name|funcRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
comment|// TODO:  these need to be non-zero once we
comment|// support arbitrary mappings
name|int
index|[]
name|adjustments
init|=
operator|new
name|int
index|[
name|origFields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|RelNode
name|funcInput
range|:
name|funcInputs
control|)
block|{
name|RexNode
name|newCondition
init|=
name|condition
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|rexBuilder
argument_list|,
name|origFields
argument_list|,
name|funcInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|,
name|adjustments
argument_list|)
argument_list|)
decl_stmt|;
name|newFuncInputs
operator|.
name|add
argument_list|(
name|LogicalFilter
operator|.
name|create
argument_list|(
name|funcInput
argument_list|,
name|newCondition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create a new UDX whose children are the filters created above
name|LogicalTableFunctionScan
name|newFuncRel
init|=
name|LogicalTableFunctionScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|newFuncInputs
argument_list|,
name|funcRel
operator|.
name|getCall
argument_list|()
argument_list|,
name|funcRel
operator|.
name|getElementType
argument_list|()
argument_list|,
name|funcRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|columnMappings
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newFuncRel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

