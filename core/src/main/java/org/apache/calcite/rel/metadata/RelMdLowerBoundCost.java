begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|BuiltInMetadata
operator|.
name|LowerBoundCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Default implementations of the  * {@link BuiltInMetadata.LowerBoundCost}  * metadata provider for the standard algebra.  */
end_comment

begin_class
specifier|public
class|class
name|RelMdLowerBoundCost
implements|implements
name|MetadataHandler
argument_list|<
name|LowerBoundCost
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
operator|new
name|RelMdLowerBoundCost
argument_list|()
argument_list|,
name|LowerBoundCost
operator|.
name|Handler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|RelMdLowerBoundCost
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|MetadataDef
argument_list|<
name|LowerBoundCost
argument_list|>
name|getDef
parameter_list|()
block|{
return|return
name|BuiltInMetadata
operator|.
name|LowerBoundCost
operator|.
name|DEF
return|;
block|}
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|getLowerBoundCost
parameter_list|(
name|RelSubset
name|subset
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|,
name|VolcanoPlanner
name|planner
parameter_list|)
block|{
if|if
condition|(
name|planner
operator|.
name|isLogical
argument_list|(
name|subset
argument_list|)
condition|)
block|{
comment|// currently only support physical, will improve in the future
return|return
literal|null
return|;
block|}
return|return
name|subset
operator|.
name|getWinnerCost
argument_list|()
return|;
block|}
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|getLowerBoundCost
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|,
name|VolcanoPlanner
name|planner
parameter_list|)
block|{
if|if
condition|(
name|planner
operator|.
name|isLogical
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// currently only support physical, will improve in the future
return|return
literal|null
return|;
block|}
name|RelOptCost
name|selfCost
init|=
name|mq
operator|.
name|getNonCumulativeCost
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|selfCost
operator|!=
literal|null
operator|&&
name|selfCost
operator|.
name|isInfinite
argument_list|()
condition|)
block|{
name|selfCost
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|RelNode
name|input
range|:
name|node
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|RelOptCost
name|lb
init|=
name|mq
operator|.
name|getLowerBoundCost
argument_list|(
name|input
argument_list|,
name|planner
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|!=
literal|null
condition|)
block|{
name|selfCost
operator|=
name|selfCost
operator|==
literal|null
condition|?
name|lb
else|:
name|selfCost
operator|.
name|plus
argument_list|(
name|lb
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|selfCost
return|;
block|}
block|}
end_class

end_unit

