begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|FilterRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|TableAccessRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|FilterableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|EnumerableRel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|JavaRules
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes a filter into a scan of a {@link FilterableTable}  * or {@link net.hydromatic.optiq.ProjectableFilterableTable}.  */
end_comment

begin_class
specifier|public
class|class
name|FilterTableRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|TableAccessRelBase
argument_list|>
name|PREDICATE
init|=
operator|new
name|Predicate
argument_list|<
name|TableAccessRelBase
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|TableAccessRelBase
name|scan
parameter_list|)
block|{
comment|// We can only push filters into a FilterableTable or
comment|// ProjectableFilterableTable.
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|table
operator|.
name|unwrap
argument_list|(
name|FilterableTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FilterTableRule
name|INSTANCE
init|=
operator|new
name|FilterTableRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a FilterTableRule. */
specifier|private
name|FilterTableRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|FilterRelBase
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|JavaRules
operator|.
name|EnumerableInterpreterRel
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|TableAccessRelBase
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|PREDICATE
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|FilterRelBase
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|JavaRules
operator|.
name|EnumerableInterpreterRel
name|interpreter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TableAccessRelBase
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|FilterableTable
name|filterableTable
init|=
name|scan
operator|.
name|getTable
argument_list|()
operator|.
name|unwrap
argument_list|(
name|FilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ProjectableFilterableTable
name|projectableFilterableTable
init|=
name|scan
operator|.
name|getTable
argument_list|()
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|FilterSplit
name|filterSplit
decl_stmt|;
if|if
condition|(
name|filterableTable
operator|!=
literal|null
condition|)
block|{
name|filterSplit
operator|=
name|FilterSplit
operator|.
name|of
argument_list|(
name|filterableTable
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|projectableFilterableTable
operator|!=
literal|null
condition|)
block|{
name|filterSplit
operator|=
name|FilterSplit
operator|.
name|of
argument_list|(
name|projectableFilterableTable
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|scan
operator|.
name|getTable
argument_list|()
argument_list|)
throw|;
block|}
comment|// It's worth using the ProjectableFilterableTable interface even if it
comment|// refused all filters.
specifier|final
name|RelNode
name|newFilter
init|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|interpreter
operator|.
name|getChild
argument_list|()
argument_list|,
name|filterSplit
operator|.
name|acceptedFilters
argument_list|,
name|EnumerableRel
operator|.
name|FILTER_FACTORY
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newInterpreter
init|=
operator|new
name|JavaRules
operator|.
name|EnumerableInterpreterRel
argument_list|(
name|interpreter
operator|.
name|getCluster
argument_list|()
argument_list|,
name|interpreter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newFilter
argument_list|,
literal|0.15d
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|residue
init|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|newInterpreter
argument_list|,
name|filterSplit
operator|.
name|rejectedFilters
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|residue
argument_list|)
expr_stmt|;
block|}
comment|/** Splits a filter condition into parts that can and cannot be    * handled by a {@link FilterableTable} or    * {@link ProjectableFilterableTable}. */
specifier|public
specifier|static
class|class
name|FilterSplit
block|{
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|acceptedFilters
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|rejectedFilters
decl_stmt|;
specifier|public
name|FilterSplit
parameter_list|(
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|acceptedFilters
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|rejectedFilters
parameter_list|)
block|{
name|this
operator|.
name|acceptedFilters
operator|=
name|acceptedFilters
expr_stmt|;
name|this
operator|.
name|rejectedFilters
operator|=
name|rejectedFilters
expr_stmt|;
block|}
specifier|public
specifier|static
name|FilterSplit
name|of
parameter_list|(
name|FilterableTable
name|table
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|DataContext
name|dataContext
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|condition
argument_list|,
name|filters
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|originalFilters
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filters
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerable
init|=
name|table
operator|.
name|scan
argument_list|(
name|dataContext
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
name|rest
argument_list|(
name|originalFilters
argument_list|,
name|filters
argument_list|,
name|enumerable
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FilterSplit
name|of
parameter_list|(
name|ProjectableFilterableTable
name|table
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|DataContext
name|dataContext
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|condition
argument_list|,
name|filters
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|originalFilters
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filters
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerable
init|=
name|table
operator|.
name|scan
argument_list|(
name|dataContext
argument_list|,
name|filters
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|rest
argument_list|(
name|originalFilters
argument_list|,
name|filters
argument_list|,
name|enumerable
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FilterSplit
name|rest
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|originalFilters
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerable
parameter_list|)
block|{
if|if
condition|(
name|enumerable
operator|==
literal|null
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|filterableTableScanReturnedNull
argument_list|()
operator|.
name|ex
argument_list|()
throw|;
block|}
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|accepted
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|rejected
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|originalFilter
range|:
name|originalFilters
control|)
block|{
if|if
condition|(
name|filters
operator|.
name|contains
argument_list|(
name|originalFilter
argument_list|)
condition|)
block|{
name|rejected
operator|.
name|add
argument_list|(
name|originalFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accepted
operator|.
name|add
argument_list|(
name|originalFilter
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RexNode
name|node
range|:
name|filters
control|)
block|{
if|if
condition|(
operator|!
name|originalFilters
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|filterableTableInventedFilter
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
return|return
operator|new
name|FilterSplit
argument_list|(
name|accepted
operator|.
name|build
argument_list|()
argument_list|,
name|rejected
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End FilterTableRule.java
end_comment

end_unit

