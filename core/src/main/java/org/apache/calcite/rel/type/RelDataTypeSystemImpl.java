begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|BasicSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_comment
comment|/** Default implementation of  * {@link org.apache.calcite.rel.type.RelDataTypeSystem},  * providing parameters from the SQL standard.  *  *<p>To implement other type systems, create a derived class and override  * values as needed.  *  *<table border='1'>  *<caption>Parameter values</caption>  *<tr><th>Parameter</th><th>Value</th></tr>  *<tr><td>MAX_NUMERIC_SCALE</td><td>19</td></tr>  *</table>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RelDataTypeSystemImpl
implements|implements
name|RelDataTypeSystem
block|{
annotation|@
name|Override
specifier|public
name|int
name|getMaxScale
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|DECIMAL
case|:
return|return
name|getMaxNumericScale
argument_list|()
return|;
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
return|return
name|SqlTypeName
operator|.
name|MAX_INTERVAL_FRACTIONAL_SECOND_PRECISION
return|;
default|default:
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDefaultPrecision
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
comment|// Following BasicSqlType precision as the default
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|BINARY
case|:
return|return
literal|1
return|;
case|case
name|VARCHAR
case|:
case|case
name|VARBINARY
case|:
return|return
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
return|;
case|case
name|DECIMAL
case|:
return|return
name|getMaxNumericPrecision
argument_list|()
return|;
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
return|return
name|SqlTypeName
operator|.
name|DEFAULT_INTERVAL_START_PRECISION
return|;
case|case
name|BOOLEAN
case|:
return|return
literal|1
return|;
case|case
name|TINYINT
case|:
return|return
literal|3
return|;
case|case
name|SMALLINT
case|:
return|return
literal|5
return|;
case|case
name|INTEGER
case|:
return|return
literal|10
return|;
case|case
name|BIGINT
case|:
return|return
literal|19
return|;
case|case
name|REAL
case|:
return|return
literal|7
return|;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
literal|15
return|;
case|case
name|TIME
case|:
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|DATE
case|:
return|return
literal|0
return|;
comment|// SQL99 part 2 section 6.1 syntax rule 30
case|case
name|TIMESTAMP
case|:
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
comment|// farrago supports only 0 (see
comment|// SqlTypeName.getDefaultPrecision), but it should be 6
comment|// (microseconds) per SQL99 part 2 section 6.1 syntax rule 30.
return|return
literal|0
return|;
default|default:
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxPrecision
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|DECIMAL
case|:
return|return
name|getMaxNumericPrecision
argument_list|()
return|;
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
return|return
literal|65536
return|;
case|case
name|VARBINARY
case|:
case|case
name|BINARY
case|:
return|return
literal|65536
return|;
case|case
name|TIME
case|:
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
return|return
name|SqlTypeName
operator|.
name|MAX_DATETIME_PRECISION
return|;
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
return|return
name|SqlTypeName
operator|.
name|MAX_INTERVAL_START_PRECISION
return|;
default|default:
return|return
name|getDefaultPrecision
argument_list|(
name|typeName
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumericScale
parameter_list|()
block|{
return|return
literal|19
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumericPrecision
parameter_list|()
block|{
return|return
literal|19
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLiteral
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|boolean
name|isPrefix
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|VARBINARY
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
return|return
literal|"'"
return|;
case|case
name|BINARY
case|:
return|return
name|isPrefix
condition|?
literal|"x'"
else|:
literal|"'"
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isPrefix
condition|?
literal|"TIMESTAMP '"
else|:
literal|"'"
return|;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
return|return
name|isPrefix
condition|?
literal|"TIMESTAMP WITH LOCAL TIME ZONE '"
else|:
literal|"'"
return|;
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
return|return
name|isPrefix
condition|?
literal|"INTERVAL '"
else|:
literal|"' DAY"
return|;
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_MONTH
case|:
return|return
name|isPrefix
condition|?
literal|"INTERVAL '"
else|:
literal|"' YEAR TO MONTH"
return|;
case|case
name|TIME
case|:
return|return
name|isPrefix
condition|?
literal|"TIME '"
else|:
literal|"'"
return|;
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
return|return
name|isPrefix
condition|?
literal|"TIME WITH LOCAL TIME ZONE '"
else|:
literal|"'"
return|;
case|case
name|DATE
case|:
return|return
name|isPrefix
condition|?
literal|"DATE '"
else|:
literal|"'"
return|;
case|case
name|ARRAY
case|:
return|return
name|isPrefix
condition|?
literal|"("
else|:
literal|")"
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAutoincrement
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumTypeRadix
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
if|if
condition|(
name|typeName
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|NUMERIC
operator|&&
name|getDefaultPrecision
argument_list|(
name|typeName
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|10
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveSumType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|argumentType
parameter_list|)
block|{
if|if
condition|(
name|argumentType
operator|instanceof
name|BasicSqlType
condition|)
block|{
name|SqlTypeName
name|typeName
init|=
name|argumentType
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|.
name|allowsPrec
argument_list|()
operator|&&
name|argumentType
operator|.
name|getPrecision
argument_list|()
operator|!=
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
condition|)
block|{
name|int
name|precision
init|=
name|typeFactory
operator|.
name|getTypeSystem
argument_list|()
operator|.
name|getMaxPrecision
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|.
name|allowsScale
argument_list|()
condition|)
block|{
name|argumentType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|,
name|argumentType
operator|.
name|getScale
argument_list|()
argument_list|)
argument_list|,
name|argumentType
operator|.
name|isNullable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|)
argument_list|,
name|argumentType
operator|.
name|isNullable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|argumentType
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveAvgAggType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|argumentType
parameter_list|)
block|{
return|return
name|argumentType
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveCovarType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|RelDataType
name|arg0Type
parameter_list|,
name|RelDataType
name|arg1Type
parameter_list|)
block|{
return|return
name|arg0Type
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveFractionalRankType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRankType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSchemaCaseSensitive
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldConvertRaggedUnionTypesToVarying
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|allowExtendedTrim
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

