begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Mutable equivalent of {@link org.apache.calcite.rel.core.TableScan}. */
end_comment

begin_class
specifier|public
class|class
name|MutableScan
extends|extends
name|MutableLeafRel
block|{
specifier|private
name|MutableScan
parameter_list|(
name|TableScan
name|rel
parameter_list|)
block|{
name|super
argument_list|(
name|MutableRelType
operator|.
name|TABLE_SCAN
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a MutableScan.    *    * @param scan  The underlying TableScan object    */
specifier|public
specifier|static
name|MutableScan
name|of
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
return|return
operator|new
name|MutableScan
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|private
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|tableQualifiedName
parameter_list|()
block|{
name|RelOptTable
name|table
init|=
name|rel
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|table
operator|==
literal|null
condition|?
literal|null
else|:
name|table
operator|.
name|getQualifiedName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|MutableScan
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MutableScan
name|other
init|=
operator|(
name|MutableScan
operator|)
name|obj
decl_stmt|;
return|return
name|obj
operator|==
name|this
operator|||
name|Objects
operator|.
name|equals
argument_list|(
name|tableQualifiedName
argument_list|()
argument_list|,
name|other
operator|.
name|tableQualifiedName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|tableQualifiedName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|digest
parameter_list|(
name|StringBuilder
name|buf
parameter_list|)
block|{
return|return
name|buf
operator|.
name|append
argument_list|(
literal|"Scan(table: "
argument_list|)
operator|.
name|append
argument_list|(
name|tableQualifiedName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MutableRel
name|clone
parameter_list|()
block|{
return|return
name|MutableScan
operator|.
name|of
argument_list|(
operator|(
name|TableScan
operator|)
name|rel
argument_list|)
return|;
block|}
block|}
end_class

end_unit

