begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * A relational expression that collapses multiple rows into one.  *  *<p>Rules:</p>  *  *<ul>  *<li>{@link org.apache.calcite.rel.rules.SubQueryRemoveRule}  * creates a Collect from a call to  * {@link org.apache.calcite.sql.fun.SqlArrayQueryConstructor},  * {@link org.apache.calcite.sql.fun.SqlMapQueryConstructor}, or  * {@link org.apache.calcite.sql.fun.SqlMultisetQueryConstructor}.</li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|Collect
extends|extends
name|SingleRel
block|{
comment|//~ Instance fields --------------------------------------------------------
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a Collect.    *    *<p>Use {@link #create} unless you know what you're doing.    *    * @param cluster   Cluster    * @param traitSet  Trait set    * @param input     Input relational expression    * @param rowType   Row type    */
specifier|protected
name|Collect
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|requireNonNull
argument_list|(
name|rowType
argument_list|,
literal|"rowType"
argument_list|)
expr_stmt|;
specifier|final
name|SqlTypeName
name|collectionType
init|=
name|getCollectionType
argument_list|(
name|rowType
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|collectionType
condition|)
block|{
case|case
name|ARRAY
case|:
case|case
name|MAP
case|:
case|case
name|MULTISET
case|:
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"not a collection type "
operator|+
name|collectionType
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|Collect
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|deriveRowType
argument_list|(
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|SqlTypeName
operator|.
name|MULTISET
argument_list|,
name|fieldName
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a Collect by parsing serialized output.    */
specifier|public
name|Collect
parameter_list|(
name|RelInput
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
operator|.
name|getCluster
argument_list|()
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|input
operator|.
name|getInput
argument_list|()
argument_list|,
name|deriveRowType
argument_list|(
name|input
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|SqlTypeName
operator|.
name|MULTISET
argument_list|,
name|requireNonNull
argument_list|(
name|input
operator|.
name|getString
argument_list|(
literal|"field"
argument_list|)
argument_list|,
literal|"field"
argument_list|)
argument_list|,
name|input
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Creates a Collect.    *    * @param input          Input relational expression    * @param rowType        Row type    */
specifier|public
specifier|static
name|Collect
name|create
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|input
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|cluster
operator|.
name|traitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Collect
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|rowType
argument_list|)
return|;
block|}
comment|/**    * Creates a Collect.    *    * @param input          Input relational expression    * @param collectionType ARRAY, MAP or MULTISET    * @param fieldName      Name of the sole output field    */
specifier|public
specifier|static
name|Collect
name|create
parameter_list|(
name|RelNode
name|input
parameter_list|,
name|SqlTypeName
name|collectionType
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|input
argument_list|,
name|deriveRowType
argument_list|(
name|input
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|collectionType
argument_list|,
name|fieldName
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns the row type, guaranteed not null.    * (The row type is never null after initialization, but    * CheckerFramework can't deduce that references are safe.) */
specifier|protected
specifier|final
name|RelDataType
name|rowType
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|rowType
argument_list|,
literal|"rowType"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
name|copy
argument_list|(
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|containsIfApplicable
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|Collect
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|rowType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"field"
argument_list|,
name|getFieldName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the name of the sole output field.    *    * @return name of the sole output field    */
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/** Returns the collection type (ARRAY, MAP, or MULTISET). */
specifier|public
name|SqlTypeName
name|getCollectionType
parameter_list|()
block|{
return|return
name|getCollectionType
argument_list|(
name|rowType
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SqlTypeName
name|getCollectionType
parameter_list|(
name|RelDataType
name|rowType
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
comment|// this method should never be called; rowType is always set
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Derives the output row type of a Collect relational expression.    *    * @param rel       relational expression    * @param fieldName name of sole output field    * @return output row type of a Collect relational expression    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|RelDataType
name|deriveCollectRowType
parameter_list|(
name|SingleRel
name|rel
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|RelDataType
name|inputType
init|=
name|rel
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
assert|assert
name|inputType
operator|.
name|isStruct
argument_list|()
assert|;
return|return
name|deriveRowType
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|SqlTypeName
operator|.
name|MULTISET
argument_list|,
name|fieldName
argument_list|,
name|inputType
argument_list|)
return|;
block|}
comment|/**    * Derives the output row type of a Collect relational expression.    *    * @param typeFactory    Type factory    * @param collectionType MULTISET, ARRAY or MAP    * @param fieldName      Name of sole output field    * @param elementType    Element type    * @return output row type of a Collect relational expression    */
specifier|public
specifier|static
name|RelDataType
name|deriveRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|SqlTypeName
name|collectionType
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|RelDataType
name|elementType
parameter_list|)
block|{
specifier|final
name|RelDataType
name|type1
decl_stmt|;
switch|switch
condition|(
name|collectionType
condition|)
block|{
case|case
name|ARRAY
case|:
name|type1
operator|=
name|SqlTypeUtil
operator|.
name|createArrayType
argument_list|(
name|typeFactory
argument_list|,
name|elementType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|MULTISET
case|:
name|type1
operator|=
name|SqlTypeUtil
operator|.
name|createMultisetType
argument_list|(
name|typeFactory
argument_list|,
name|elementType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|type1
operator|=
name|SqlTypeUtil
operator|.
name|createMapTypeFromRecord
argument_list|(
name|typeFactory
argument_list|,
name|elementType
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|collectionType
argument_list|)
throw|;
block|}
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|type1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

