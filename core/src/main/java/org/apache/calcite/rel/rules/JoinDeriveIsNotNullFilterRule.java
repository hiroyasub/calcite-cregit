begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Strong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Planner rule that derives IS NOT NULL predicates from a inner  * {@link org.apache.calcite.rel.core.Join} and creates  * {@link org.apache.calcite.rel.core.Filter}s with those predicates as new inputs of the join.  *  * Since the Null value can never match in the inner join and it can lead to skewness due to  * too many Null values, a not-null filter can be created and pushed down into the input of join.  *  * Similar to {@link CoreRules#FILTER_INTO_JOIN}, it would try to create filters and push them into  * the inputs of the join to filter data as much as possible before join.  *  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|JoinDeriveIsNotNullFilterRule
extends|extends
name|RelRule
argument_list|<
name|JoinDeriveIsNotNullFilterRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
specifier|public
name|JoinDeriveIsNotNullFilterRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|notNullableKeys
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|node
lambda|->
block|{
if|if
condition|(
name|Strong
operator|.
name|isStrong
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|notNullableKeys
operator|.
name|addAll
argument_list|(
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leftKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rightKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|notNullableKeys
operator|.
name|build
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|forEach
argument_list|(
name|i
lambda|->
block|{
if|if
condition|(
name|i
operator|<
name|offset
condition|)
block|{
name|leftKeys
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rightKeys
operator|.
name|add
argument_list|(
name|i
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|withPredicates
argument_list|(
name|mq
argument_list|,
name|r
lambda|->
name|r
operator|.
name|filter
argument_list|(
name|leftKeys
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
operator|::
name|field
argument_list|)
operator|.
name|map
argument_list|(
name|r
operator|::
name|isNotNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|newLeft
init|=
name|relBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|withPredicates
argument_list|(
name|mq
argument_list|,
name|r
lambda|->
name|r
operator|.
name|filter
argument_list|(
name|rightKeys
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
operator|::
name|field
argument_list|)
operator|.
name|map
argument_list|(
name|r
operator|::
name|isNotNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|newRight
init|=
name|relBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|newLeft
operator|!=
name|join
operator|.
name|getLeft
argument_list|()
operator|||
name|newRight
operator|!=
name|join
operator|.
name|getRight
argument_list|()
condition|)
block|{
specifier|final
name|RelNode
name|newJoin
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newLeft
argument_list|,
name|newRight
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newJoin
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rule configuration.    */
annotation|@
name|Value
operator|.
name|Immutable
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|ImmutableJoinDeriveIsNotNullFilterRule
operator|.
name|Config
name|DEFAULT
init|=
name|ImmutableJoinDeriveIsNotNullFilterRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|LogicalJoin
operator|.
name|class
argument_list|)
operator|.
name|predicate
argument_list|(
name|join
lambda|->
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|INNER
operator|&&
operator|!
name|join
operator|.
name|getCondition
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|JoinDeriveIsNotNullFilterRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|JoinDeriveIsNotNullFilterRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

