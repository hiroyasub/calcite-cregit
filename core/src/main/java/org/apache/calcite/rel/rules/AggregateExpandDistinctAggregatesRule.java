begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Contexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlSumEmptyIsZeroAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Optionality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Planner rule that expands distinct aggregates  * (such as {@code COUNT(DISTINCT x)}) from a  * {@link org.apache.calcite.rel.core.Aggregate}.  *  *<p>How this is done depends upon the arguments to the function. If all  * functions have the same argument  * (e.g. {@code COUNT(DISTINCT x), SUM(DISTINCT x)} both have the argument  * {@code x}) then one extra {@link org.apache.calcite.rel.core.Aggregate} is  * sufficient.  *  *<p>If there are multiple arguments  * (e.g. {@code COUNT(DISTINCT x), COUNT(DISTINCT y)})  * the rule creates separate {@code Aggregate}s and combines using a  * {@link org.apache.calcite.rel.core.Join}.  *  * @see CoreRules#AGGREGATE_EXPAND_DISTINCT_AGGREGATES  * @see CoreRules#AGGREGATE_EXPAND_DISTINCT_AGGREGATES_TO_JOIN  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
specifier|final
class|class
name|AggregateExpandDistinctAggregatesRule
extends|extends
name|RelRule
argument_list|<
name|AggregateExpandDistinctAggregatesRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
comment|/** Creates an AggregateExpandDistinctAggregatesRule. */
name|AggregateExpandDistinctAggregatesRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateExpandDistinctAggregatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|clazz
parameter_list|,
name|boolean
name|useGroupingSets
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|clazz
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withUsingGroupingSets
argument_list|(
name|useGroupingSets
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateExpandDistinctAggregatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|LogicalAggregate
argument_list|>
name|clazz
parameter_list|,
name|boolean
name|useGroupingSets
parameter_list|,
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
name|useGroupingSets
argument_list|,
name|RelBuilder
operator|.
name|proto
argument_list|(
name|Contexts
operator|.
name|of
argument_list|(
name|joinFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateExpandDistinctAggregatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|LogicalAggregate
argument_list|>
name|clazz
parameter_list|,
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
literal|false
argument_list|,
name|RelBuilder
operator|.
name|proto
argument_list|(
name|Contexts
operator|.
name|of
argument_list|(
name|joinFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aggregate
operator|.
name|containsDistinctCall
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Find all of the agg expressions. We use a LinkedHashSet to ensure determinism.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
comment|// Find all aggregate calls with distinct
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|distinctAggCalls
init|=
name|aggCalls
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|AggregateCall
operator|::
name|isDistinct
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Find all aggregate calls without distinct
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|nonDistinctAggCalls
init|=
name|aggCalls
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|aggCall
lambda|->
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|filterCount
init|=
name|aggCalls
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|aggCall
lambda|->
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
specifier|final
name|long
name|unsupportedNonDistinctAggCallCount
init|=
name|nonDistinctAggCalls
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|aggCall
lambda|->
block|{
specifier|final
name|SqlKind
name|aggCallKind
init|=
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
decl_stmt|;
comment|// We only support COUNT/SUM/MIN/MAX for the "single" count distinct optimization
switch|switch
condition|(
name|aggCallKind
condition|)
block|{
case|case
name|COUNT
case|:
case|case
name|SUM
case|:
case|case
name|SUM0
case|:
case|case
name|MIN
case|:
case|case
name|MAX
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// Argument list of distinct agg calls.
specifier|final
name|Set
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|distinctCallArgLists
init|=
name|distinctAggCalls
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|aggCall
lambda|->
name|Pair
operator|.
name|of
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|LinkedHashSet
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|distinctCallArgLists
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
literal|"containsDistinctCall lied"
argument_list|)
expr_stmt|;
comment|// If all of the agg expressions are distinct and have the same
comment|// arguments then we can use a more efficient form.
comment|// MAX, MIN, BIT_AND, BIT_OR always ignore distinct attribute,
comment|// when they are mixed in with other distinct agg calls,
comment|// we can still use this promotion.
comment|// Treat the agg expression with Optionality.IGNORED as distinct and
comment|// re-statistic the non-distinct agg call count and the distinct agg
comment|// call arguments.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|nonDistinctAggCallsOfIgnoredOptionality
init|=
name|nonDistinctAggCalls
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|aggCall
lambda|->
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getDistinctOptionality
argument_list|()
operator|==
name|Optionality
operator|.
name|IGNORED
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Different with distinctCallArgLists, this list also contains args that come from
comment|// agg call which can ignore the distinct constraint.
specifier|final
name|Set
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|distinctCallArgLists2
init|=
name|Stream
operator|.
name|of
argument_list|(
name|distinctAggCalls
argument_list|,
name|nonDistinctAggCallsOfIgnoredOptionality
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|map
argument_list|(
name|aggCall
lambda|->
name|Pair
operator|.
name|of
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|LinkedHashSet
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nonDistinctAggCalls
operator|.
name|size
argument_list|()
operator|-
name|nonDistinctAggCallsOfIgnoredOptionality
operator|.
name|size
argument_list|()
operator|)
operator|==
literal|0
operator|&&
name|distinctCallArgLists2
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|aggregate
operator|.
name|getGroupType
argument_list|()
operator|==
name|Group
operator|.
name|SIMPLE
condition|)
block|{
specifier|final
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|pair
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|distinctCallArgLists2
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|convertMonopole
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|pair
operator|.
name|left
argument_list|,
name|pair
operator|.
name|right
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
operator|(
name|Config
operator|)
name|config
operator|)
operator|.
name|isUsingGroupingSets
argument_list|()
condition|)
block|{
name|rewriteUsingGroupingSets
argument_list|(
name|call
argument_list|,
name|aggregate
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If only one distinct aggregate and one or more non-distinct aggregates,
comment|// we can generate multi-phase aggregates
if|if
condition|(
name|distinctAggCalls
operator|.
name|size
argument_list|()
operator|==
literal|1
comment|// one distinct aggregate
operator|&&
name|filterCount
operator|==
literal|0
comment|// no filter
operator|&&
name|unsupportedNonDistinctAggCallCount
operator|==
literal|0
comment|// sum/min/max/count in non-distinct aggregate
operator|&&
name|nonDistinctAggCalls
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// one or more non-distinct aggregates
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|convertSingletonDistinct
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|distinctCallArgLists
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create a list of the expressions which will yield the final result.
comment|// Initially, the expressions point to the input field.
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|aggFields
init|=
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
annotation|@
name|Nullable
name|RexInputRef
argument_list|>
name|refs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|groupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|aggregate
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|Util
operator|.
name|range
argument_list|(
name|groupCount
argument_list|)
control|)
block|{
name|refs
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|aggFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Aggregate the original relation, including any non-distinct aggregates.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|refs
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|refs
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|groupCount
operator|+
name|newAggCallList
operator|.
name|size
argument_list|()
argument_list|,
name|aggFields
operator|.
name|get
argument_list|(
name|groupCount
operator|+
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newAggCallList
operator|.
name|add
argument_list|(
name|aggCall
argument_list|)
expr_stmt|;
block|}
comment|// In the case where there are no non-distinct aggregates (regardless of
comment|// whether there are group bys), there's no need to generate the
comment|// extra aggregate and join.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|newAggCallList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|RelBuilder
operator|.
name|GroupKey
name|groupKey
init|=
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|groupSet
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|groupKey
argument_list|,
name|newAggCallList
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
comment|// For each set of operands, find and rewrite all calls which have that
comment|// set of operands.
for|for
control|(
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|argList
range|:
name|distinctCallArgLists
control|)
block|{
name|doRewrite
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|n
operator|++
argument_list|,
name|argList
operator|.
name|left
argument_list|,
name|argList
operator|.
name|right
argument_list|,
name|refs
argument_list|)
expr_stmt|;
block|}
comment|// It is assumed doRewrite above replaces nulls in refs
annotation|@
name|SuppressWarnings
argument_list|(
literal|"assignment.type.incompatible"
argument_list|)
name|List
argument_list|<
name|RexInputRef
argument_list|>
name|nonNullRefs
init|=
name|refs
decl_stmt|;
name|relBuilder
operator|.
name|project
argument_list|(
name|nonNullRefs
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts an aggregate with one distinct aggregate and one or more    * non-distinct aggregates to multi-phase aggregates (see reference example    * below).    *    * @param relBuilder Contains the input relational expression    * @param aggregate  Original aggregate    * @param argLists   Arguments and filters to the distinct aggregate function    *    */
specifier|private
specifier|static
name|RelBuilder
name|convertSingletonDistinct
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|Set
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|argLists
parameter_list|)
block|{
comment|// In this case, we are assuming that there is a single distinct function.
comment|// So make sure that argLists is of size one.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|argLists
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// For example,
comment|//    SELECT deptno, COUNT(*), SUM(bonus), MIN(DISTINCT sal)
comment|//    FROM emp
comment|//    GROUP BY deptno
comment|//
comment|// becomes
comment|//
comment|//    SELECT deptno, SUM(cnt), SUM(bonus), MIN(sal)
comment|//    FROM (
comment|//          SELECT deptno, COUNT(*) as cnt, SUM(bonus), sal
comment|//          FROM EMP
comment|//          GROUP BY deptno, sal)            // Aggregate B
comment|//    GROUP BY deptno                        // Aggregate A
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|originalAggCalls
init|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|originalGroupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
comment|// Add the distinct aggregate column(s) to the group-by columns,
comment|// if not already a part of the group-by
specifier|final
name|NavigableSet
argument_list|<
name|Integer
argument_list|>
name|bottomGroups
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|originalAggCalls
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|bottomGroups
operator|.
name|addAll
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
expr_stmt|;
break|break;
comment|// since we only have single distinct call
block|}
block|}
specifier|final
name|ImmutableBitSet
name|bottomGroupSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|bottomGroups
argument_list|)
decl_stmt|;
comment|// Generate the intermediate aggregate B, the one on the bottom that converts
comment|// a distinct call to group by call.
comment|// Bottom aggregate is the same as the original aggregate, except that
comment|// the bottom aggregate has converted the DISTINCT aggregate to a group by clause.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|bottomAggregateCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|originalAggCalls
control|)
block|{
comment|// Project the column corresponding to the distinct aggregate. Project
comment|// as-is all the non-distinct aggregates
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
specifier|final
name|AggregateCall
name|newCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|aggCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|aggCall
operator|.
name|distinctKeys
argument_list|,
name|aggCall
operator|.
name|collation
argument_list|,
name|bottomGroupSet
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
decl_stmt|;
name|bottomAggregateCalls
operator|.
name|add
argument_list|(
name|newCall
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Generate the aggregate B (see the reference example above)
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|bottomGroupSet
argument_list|,
literal|null
argument_list|,
name|bottomAggregateCalls
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add aggregate A (see the reference example above), the top aggregate
comment|// to handle the rest of the aggregation that the bottom aggregate hasn't handled
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|topAggregateCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Use the remapped arguments for the (non)distinct aggregate calls
name|int
name|nonDistinctAggCallProcessedSoFar
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|originalAggCalls
control|)
block|{
specifier|final
name|AggregateCall
name|newCall
decl_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|newArgList
operator|.
name|add
argument_list|(
name|bottomGroups
operator|.
name|headSet
argument_list|(
name|arg
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newCall
operator|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|aggCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|newArgList
argument_list|,
operator|-
literal|1
argument_list|,
name|aggCall
operator|.
name|distinctKeys
argument_list|,
name|aggCall
operator|.
name|collation
argument_list|,
name|originalGroupSet
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If aggregate B had a COUNT aggregate call the corresponding aggregate at
comment|// aggregate A must be SUM. For other aggregates, it remains the same.
specifier|final
name|int
name|arg
init|=
name|bottomGroups
operator|.
name|size
argument_list|()
operator|+
name|nonDistinctAggCallProcessedSoFar
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|COUNT
condition|)
block|{
name|newCall
operator|=
name|AggregateCall
operator|.
name|create
argument_list|(
operator|new
name|SqlSumEmptyIsZeroAggFunction
argument_list|()
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|aggCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggCall
operator|.
name|distinctKeys
argument_list|,
name|aggCall
operator|.
name|collation
argument_list|,
name|originalGroupSet
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCall
operator|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|aggCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggCall
operator|.
name|distinctKeys
argument_list|,
name|aggCall
operator|.
name|collation
argument_list|,
name|originalGroupSet
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|nonDistinctAggCallProcessedSoFar
operator|++
expr_stmt|;
block|}
name|topAggregateCalls
operator|.
name|add
argument_list|(
name|newCall
argument_list|)
expr_stmt|;
block|}
comment|// Populate the group-by keys with the remapped arguments for aggregate A
comment|// The top groupset is basically an identity (first X fields of aggregate B's
comment|// output), minus the distinct aggCall's input.
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|topGroupSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|groupSetToAdd
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|bottomGroup
range|:
name|bottomGroups
control|)
block|{
if|if
condition|(
name|originalGroupSet
operator|.
name|get
argument_list|(
name|bottomGroup
argument_list|)
condition|)
block|{
name|topGroupSet
operator|.
name|add
argument_list|(
name|groupSetToAdd
argument_list|)
expr_stmt|;
block|}
name|groupSetToAdd
operator|++
expr_stmt|;
block|}
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|topGroupSet
argument_list|)
argument_list|,
literal|null
argument_list|,
name|topAggregateCalls
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add projection node for case: SUM of COUNT(*):
comment|// Type of the SUM may be larger than type of COUNT.
comment|// CAST to original type must be added.
name|relBuilder
operator|.
name|convert
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|relBuilder
return|;
block|}
specifier|private
specifier|static
name|void
name|rewriteUsingGroupingSets
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSetTreeSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|ImmutableBitSet
operator|.
name|ORDERING
argument_list|)
decl_stmt|;
comment|// GroupSet to distinct filter arg map,
comment|// filterArg will be -1 for non-distinct agg call.
comment|// Using `Set` here because it's possible that two agg calls
comment|// have different filterArgs but same groupSet.
specifier|final
name|Map
argument_list|<
name|ImmutableBitSet
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|distinctFilterArgMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
name|ImmutableBitSet
name|groupSet
decl_stmt|;
name|int
name|filterArg
decl_stmt|;
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|filterArg
operator|=
operator|-
literal|1
expr_stmt|;
name|groupSet
operator|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
expr_stmt|;
name|groupSetTreeSet
operator|.
name|add
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filterArg
operator|=
name|aggCall
operator|.
name|filterArg
expr_stmt|;
name|groupSet
operator|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
operator|.
name|setIf
argument_list|(
name|filterArg
argument_list|,
name|filterArg
operator|>=
literal|0
argument_list|)
operator|.
name|union
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
expr_stmt|;
name|groupSetTreeSet
operator|.
name|add
argument_list|(
name|groupSet
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|filterList
init|=
name|distinctFilterArgMap
operator|.
name|computeIfAbsent
argument_list|(
name|groupSet
argument_list|,
name|g
lambda|->
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|add
argument_list|(
name|filterArg
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|groupSetTreeSet
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|fullGroupSet
init|=
name|ImmutableBitSet
operator|.
name|union
argument_list|(
name|groupSets
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|distinctAggCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|String
argument_list|>
name|aggCall
range|:
name|aggregate
operator|.
name|getNamedAggCalls
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|aggCall
operator|.
name|left
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|AggregateCall
name|newAggCall
init|=
name|aggCall
operator|.
name|left
operator|.
name|adaptTo
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|,
name|aggCall
operator|.
name|left
operator|.
name|getArgList
argument_list|()
argument_list|,
name|aggCall
operator|.
name|left
operator|.
name|filterArg
argument_list|,
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|fullGroupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
name|distinctAggCalls
operator|.
name|add
argument_list|(
name|newAggCall
operator|.
name|withName
argument_list|(
name|aggCall
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|fullGroupSet
operator|.
name|cardinality
argument_list|()
decl_stmt|;
comment|// Get the base ordinal of filter args for different groupSets.
specifier|final
name|Map
argument_list|<
name|Pair
argument_list|<
name|ImmutableBitSet
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|filters
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|z
init|=
name|groupCount
operator|+
name|distinctAggCalls
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|groupSet
range|:
name|groupSets
control|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|filterArgList
init|=
name|distinctFilterArgMap
operator|.
name|get
argument_list|(
name|groupSet
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|filterArg
range|:
name|requireNonNull
argument_list|(
name|filterArgList
argument_list|,
literal|"filterArgList"
argument_list|)
control|)
block|{
name|filters
operator|.
name|put
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|groupSet
argument_list|,
name|filterArg
argument_list|)
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|z
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|distinctAggCalls
operator|.
name|add
argument_list|(
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GROUPING
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|fullGroupSet
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|groupSets
operator|.
name|size
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"$g"
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|fullGroupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|,
name|distinctAggCalls
argument_list|)
expr_stmt|;
comment|// GROUPING returns an integer (0 or 1). Add a project to convert those
comment|// values to BOOLEAN.
if|if
condition|(
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|relBuilder
operator|.
name|fields
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|nodeZ
init|=
name|nodes
operator|.
name|remove
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pair
argument_list|<
name|ImmutableBitSet
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|filters
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|long
name|v
init|=
name|groupValue
argument_list|(
name|fullGroupSet
operator|.
name|asList
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|left
argument_list|)
decl_stmt|;
name|int
name|distinctFilterArg
init|=
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|right
argument_list|)
decl_stmt|;
name|RexNode
name|expr
init|=
name|relBuilder
operator|.
name|equals
argument_list|(
name|nodeZ
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|distinctFilterArg
operator|>
operator|-
literal|1
condition|)
block|{
comment|// 'AND' the filter of the distinct aggregate call and the group value.
name|expr
operator|=
name|relBuilder
operator|.
name|and
argument_list|(
name|expr
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
argument_list|,
name|relBuilder
operator|.
name|field
argument_list|(
name|distinctFilterArg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// "f" means filter.
name|nodes
operator|.
name|add
argument_list|(
name|relBuilder
operator|.
name|alias
argument_list|(
name|expr
argument_list|,
literal|"$g_"
operator|+
name|v
operator|+
operator|(
name|distinctFilterArg
operator|<
literal|0
condition|?
literal|""
else|:
literal|"_f_"
operator|+
name|distinctFilterArg
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|project
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
name|groupCount
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|groupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
specifier|final
name|int
name|newFilterArg
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgList
decl_stmt|;
specifier|final
name|SqlAggFunction
name|aggregation
decl_stmt|;
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|aggregation
operator|=
name|SqlStdOperatorTable
operator|.
name|MIN
expr_stmt|;
name|newArgList
operator|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|x
operator|++
argument_list|)
expr_stmt|;
name|newFilterArg
operator|=
name|requireNonNull
argument_list|(
name|filters
operator|.
name|get
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|groupSet
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|"filters.get(Pair.of(groupSet, -1))"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregation
operator|=
name|aggCall
operator|.
name|getAggregation
argument_list|()
expr_stmt|;
name|newArgList
operator|=
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|newGroupSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
operator|.
name|setIf
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|,
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
argument_list|)
operator|.
name|union
argument_list|(
name|groupSet
argument_list|)
decl_stmt|;
name|newFilterArg
operator|=
name|requireNonNull
argument_list|(
name|filters
operator|.
name|get
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|newGroupSet
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|)
argument_list|,
literal|"filters.get(of(newGroupSet, aggCall.filterArg))"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AggregateCall
name|newCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggregation
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|aggCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|newArgList
argument_list|,
name|newFilterArg
argument_list|,
name|aggCall
operator|.
name|distinctKeys
argument_list|,
name|aggCall
operator|.
name|collation
argument_list|,
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
decl_stmt|;
name|newCalls
operator|.
name|add
argument_list|(
name|newCall
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|groupSet
argument_list|)
argument_list|,
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|newCalls
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|convert
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the value that "GROUPING(fullGroupSet)" will return for    * "groupSet".    *    *<p>It is important that {@code fullGroupSet} is not an    * {@link ImmutableBitSet}; the order of the bits matters. */
specifier|static
name|long
name|groupValue
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|fullGroupSet
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|)
block|{
name|long
name|v
init|=
literal|0
decl_stmt|;
name|long
name|x
init|=
literal|1L
operator|<<
operator|(
name|fullGroupSet
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
assert|assert
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|fullGroupSet
argument_list|)
operator|.
name|contains
argument_list|(
name|groupSet
argument_list|)
assert|;
for|for
control|(
name|int
name|i
range|:
name|fullGroupSet
control|)
block|{
if|if
condition|(
operator|!
name|groupSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|v
operator||=
name|x
expr_stmt|;
block|}
name|x
operator|>>=
literal|1
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
specifier|static
name|ImmutableBitSet
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|ImmutableBitSet
name|bitSet
parameter_list|)
block|{
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|builder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|bit
range|:
name|bitSet
control|)
block|{
name|builder
operator|.
name|set
argument_list|(
name|remap
argument_list|(
name|groupSet
argument_list|,
name|bit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|Iterable
argument_list|<
name|ImmutableBitSet
argument_list|>
name|bitSets
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ImmutableBitSet
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|bitSet
range|:
name|bitSets
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|remap
argument_list|(
name|groupSet
argument_list|,
name|bitSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|)
block|{
name|ImmutableIntList
name|list
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|argList
control|)
block|{
name|list
operator|=
name|list
operator|.
name|append
argument_list|(
name|remap
argument_list|(
name|groupSet
argument_list|,
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|int
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|int
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|groupSet
operator|.
name|indexOf
argument_list|(
name|arg
argument_list|)
return|;
block|}
comment|/**    * Converts an aggregate relational expression that contains just one    * distinct aggregate function (or perhaps several over the same arguments)    * and no non-distinct aggregate functions.    */
specifier|private
specifier|static
name|RelBuilder
name|convertMonopole
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|int
name|filterArg
parameter_list|)
block|{
comment|// For example,
comment|//    SELECT deptno, COUNT(DISTINCT sal), SUM(DISTINCT sal)
comment|//    FROM emp
comment|//    GROUP BY deptno
comment|//
comment|// becomes
comment|//
comment|//    SELECT deptno, COUNT(distinct_sal), SUM(distinct_sal)
comment|//    FROM (
comment|//      SELECT DISTINCT deptno, sal AS distinct_sal
comment|//      FROM EMP GROUP BY deptno)
comment|//    GROUP BY deptno
comment|// Project the columns of the GROUP BY plus the arguments
comment|// to the agg function.
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createSelectDistinct
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|argList
argument_list|,
name|filterArg
argument_list|,
name|sourceOf
argument_list|)
expr_stmt|;
comment|// Create an aggregate on top, with the new aggregate list.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
name|rewriteAggCalls
argument_list|(
name|newAggCalls
argument_list|,
name|argList
argument_list|,
name|sourceOf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cardinality
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|cardinality
argument_list|)
argument_list|,
literal|null
argument_list|,
name|newAggCalls
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|relBuilder
return|;
block|}
comment|/**    * Converts all distinct aggregate calls to a given set of arguments.    *    *<p>This method is called several times, one for each set of arguments.    * Each time it is called, it generates a JOIN to a new SELECT DISTINCT    * relational expression, and modifies the set of top-level calls.    *    * @param aggregate Original aggregate    * @param n         Ordinal of this in a join. {@code relBuilder} contains the    *                  input relational expression (either the original    *                  aggregate, the output from the previous call to this    *                  method. {@code n} is 0 if we're converting the    *                  first distinct aggregate in a query with no non-distinct    *                  aggregates)    * @param argList   Arguments to the distinct aggregate function    * @param filterArg Argument that filters input to aggregate function, or -1    * @param refs      Array of expressions which will be the projected by the    *                  result of this rule. Those relating to this arg list will    *                  be modified    */
specifier|private
specifier|static
name|void
name|doRewrite
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|int
name|n
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|int
name|filterArg
parameter_list|,
name|List
argument_list|<
annotation|@
name|Nullable
name|RexInputRef
argument_list|>
name|refs
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|leftFields
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|leftFields
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|leftFields
operator|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
block|}
comment|// Aggregate(
comment|//     child,
comment|//     {COUNT(DISTINCT 1), SUM(DISTINCT 1), SUM(2)})
comment|//
comment|// becomes
comment|//
comment|// Aggregate(
comment|//     Join(
comment|//         child,
comment|//         Aggregate(child,< all columns> {}),
comment|//         INNER,
comment|//<f2 = f5>))
comment|//
comment|// E.g.
comment|//   SELECT deptno, SUM(DISTINCT sal), COUNT(DISTINCT gender), MAX(age)
comment|//   FROM Emps
comment|//   GROUP BY deptno
comment|//
comment|// becomes
comment|//
comment|//   SELECT e.deptno, adsal.sum_sal, adgender.count_gender, e.max_age
comment|//   FROM (
comment|//     SELECT deptno, MAX(age) as max_age
comment|//     FROM Emps GROUP BY deptno) AS e
comment|//   JOIN (
comment|//     SELECT deptno, COUNT(gender) AS count_gender FROM (
comment|//       SELECT DISTINCT deptno, gender FROM Emps) AS dgender
comment|//     GROUP BY deptno) AS adgender
comment|//     ON e.deptno = adgender.deptno
comment|//   JOIN (
comment|//     SELECT deptno, SUM(sal) AS sum_sal FROM (
comment|//       SELECT DISTINCT deptno, sal FROM Emps) AS dsal
comment|//     GROUP BY deptno) AS adsal
comment|//   ON e.deptno = adsal.deptno
comment|//   GROUP BY e.deptno
comment|//
comment|// Note that if a query contains no non-distinct aggregates, then the
comment|// very first join/group by is omitted.  In the example above, if
comment|// MAX(age) is removed, then the sub-select of "e" is not needed, and
comment|// instead the two other group by's are joined to one another.
comment|// Project the columns of the GROUP BY plus the arguments
comment|// to the agg function.
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createSelectDistinct
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|argList
argument_list|,
name|filterArg
argument_list|,
name|sourceOf
argument_list|)
expr_stmt|;
comment|// Now compute the aggregate functions on top of the distinct dataset.
comment|// Each distinct agg becomes a non-distinct call to the corresponding
comment|// field from the right; for example,
comment|//   "COUNT(DISTINCT e.sal)"
comment|// becomes
comment|//   "COUNT(distinct_e.sal)".
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|aggregate
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|groupCount
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
operator|++
name|i
expr_stmt|;
comment|// Ignore agg calls which are not distinct or have the wrong set
comment|// arguments. If we're rewriting aggs whose args are {sal}, we will
comment|// rewrite COUNT(DISTINCT sal) and SUM(DISTINCT sal) but ignore
comment|// COUNT(DISTINCT gender) or SUM(sal).
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|equals
argument_list|(
name|argList
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Re-map arguments.
specifier|final
name|int
name|argCount
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|newArgs
operator|.
name|add
argument_list|(
name|requireNonNull
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"sourceOf.get("
operator|+
name|arg
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|newFilterArg
init|=
name|aggCall
operator|.
name|filterArg
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|requireNonNull
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"sourceOf.get("
operator|+
name|aggCall
operator|.
name|filterArg
operator|+
literal|")"
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|newAggCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|aggCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|newArgs
argument_list|,
name|newFilterArg
argument_list|,
name|aggCall
operator|.
name|distinctKeys
argument_list|,
name|aggCall
operator|.
name|collation
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|refs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
assert|;
if|if
condition|(
name|leftFields
operator|==
literal|null
condition|)
block|{
name|refs
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|RexInputRef
argument_list|(
name|groupCount
operator|+
name|aggCallList
operator|.
name|size
argument_list|()
argument_list|,
name|newAggCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refs
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|RexInputRef
argument_list|(
name|leftFields
operator|.
name|size
argument_list|()
operator|+
name|groupCount
operator|+
name|aggCallList
operator|.
name|size
argument_list|()
argument_list|,
name|newAggCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aggCallList
operator|.
name|add
argument_list|(
name|newAggCall
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableBitSet
name|newGroupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|permute
argument_list|(
name|map
argument_list|)
decl_stmt|;
assert|assert
name|newGroupSet
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|)
argument_list|)
assert|;
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|newGroupingSets
init|=
literal|null
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|newGroupSet
argument_list|,
name|newGroupingSets
argument_list|,
name|aggCallList
argument_list|)
argument_list|)
expr_stmt|;
comment|// If there's no left child yet, no need to create the join
if|if
condition|(
name|leftFields
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Create the join condition. It is of the form
comment|//  'left.f0 = right.f0 and left.f1 = right.f1 and ...'
comment|// where {f0, f1, ...} are the GROUP BY fields.
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|distinctFields
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|groupCount
condition|;
operator|++
name|i
control|)
block|{
comment|// null values form its own group
comment|// use "is not distinct from" so that the join condition
comment|// allows null values to match.
name|conditions
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|leftFields
argument_list|)
argument_list|,
operator|new
name|RexInputRef
argument_list|(
name|leftFields
operator|.
name|size
argument_list|()
operator|+
name|i
argument_list|,
name|distinctFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Join in the new 'select distinct' relation.
name|relBuilder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|rewriteAggCalls
parameter_list|(
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
parameter_list|)
block|{
comment|// Rewrite the agg calls. Each distinct agg becomes a non-distinct call
comment|// to the corresponding field from the right; for example,
comment|// "COUNT(DISTINCT e.sal)" becomes   "COUNT(distinct_e.sal)".
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newAggCalls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AggregateCall
name|aggCall
init|=
name|newAggCalls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Ignore agg calls which are not distinct or have the wrong set
comment|// arguments. If we're rewriting aggregates whose args are {sal}, we will
comment|// rewrite COUNT(DISTINCT sal) and SUM(DISTINCT sal) but ignore
comment|// COUNT(DISTINCT gender) or SUM(sal).
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
operator|&&
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getDistinctOptionality
argument_list|()
operator|!=
name|Optionality
operator|.
name|IGNORED
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|equals
argument_list|(
name|argList
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Re-map arguments.
specifier|final
name|int
name|argCount
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Integer
name|arg
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|newArgs
operator|.
name|add
argument_list|(
name|requireNonNull
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"sourceOf.get("
operator|+
name|arg
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AggregateCall
name|newAggCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|aggCall
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggCall
operator|.
name|distinctKeys
argument_list|,
name|aggCall
operator|.
name|collation
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|newAggCalls
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newAggCall
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given an {@link org.apache.calcite.rel.core.Aggregate}    * and the ordinals of the arguments to a    * particular call to an aggregate function, creates a 'select distinct'    * relational expression which projects the group columns and those    * arguments but nothing else.    *    *<p>For example, given    *    *<blockquote>    *<pre>select f0, count(distinct f1), count(distinct f2)    * from t group by f0</pre>    *</blockquote>    *    *<p>and the argument list    *    *<blockquote>{2}</blockquote>    *    *<p>returns    *    *<blockquote>    *<pre>select distinct f0, f2 from t</pre>    *</blockquote>    *    *<p>The<code>sourceOf</code> map is populated with the source of each    * column; in this case sourceOf.get(0) = 0, and sourceOf.get(1) = 2.    *    * @param relBuilder Relational expression builder    * @param aggregate Aggregate relational expression    * @param argList   Ordinals of columns to make distinct    * @param filterArg Ordinal of column to filter on, or -1    * @param sourceOf  Out parameter, is populated with a map of where each    *                  output field came from    * @return Aggregate relational expression which projects the required    * columns    */
specifier|private
specifier|static
name|RelBuilder
name|createSelectDistinct
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|int
name|filterArg
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
parameter_list|)
block|{
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|childFields
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|sourceOf
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of2
argument_list|(
name|i
argument_list|,
name|childFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|arg
range|:
name|argList
control|)
block|{
if|if
condition|(
name|filterArg
operator|>=
literal|0
condition|)
block|{
comment|// Implement
comment|//   agg(DISTINCT arg) FILTER $f
comment|// by generating
comment|//   SELECT DISTINCT ... CASE WHEN $f THEN arg ELSE NULL END AS arg
comment|// and then applying
comment|//   agg(arg)
comment|// as usual.
comment|//
comment|// It works except for (rare) agg functions that need to see null
comment|// values.
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexInputRef
name|filterRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|filterArg
argument_list|,
name|childFields
argument_list|)
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
name|argRef
init|=
name|RexInputRef
operator|.
name|of2
argument_list|(
name|arg
argument_list|,
name|childFields
argument_list|)
decl_stmt|;
name|RexNode
name|condition
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|filterRef
argument_list|,
name|argRef
operator|.
name|left
argument_list|,
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|argRef
operator|.
name|left
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|condition
argument_list|,
literal|"i$"
operator|+
name|argRef
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of2
argument_list|(
name|arg
argument_list|,
name|childFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|project
argument_list|(
name|Pair
operator|.
name|left
argument_list|(
name|projects
argument_list|)
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|projects
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the distinct values of the GROUP BY fields and the arguments
comment|// to the agg functions.
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|projects
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|relBuilder
return|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|ImmutableAggregateExpandDistinctAggregatesRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
decl_stmt|;
name|Config
name|JOIN
init|=
name|DEFAULT
operator|.
name|withUsingGroupingSets
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|AggregateExpandDistinctAggregatesRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|AggregateExpandDistinctAggregatesRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Whether to use GROUPING SETS, default true. */
annotation|@
name|Value
operator|.
name|Default
specifier|default
name|boolean
name|isUsingGroupingSets
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/** Sets {@link #isUsingGroupingSets()}. */
name|Config
name|withUsingGroupingSets
parameter_list|(
name|boolean
name|usingGroupingSets
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

