begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Contexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlCountAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlMinMaxAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlSumAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlSumEmptyIsZeroAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Planner rule that expands distinct aggregates  * (such as {@code COUNT(DISTINCT x)}) from a  * {@link org.apache.calcite.rel.logical.LogicalAggregate}.  *  *<p>How this is done depends upon the arguments to the function. If all  * functions have the same argument  * (e.g. {@code COUNT(DISTINCT x), SUM(DISTINCT x)} both have the argument  * {@code x}) then one extra {@link org.apache.calcite.rel.core.Aggregate} is  * sufficient.  *  *<p>If there are multiple arguments  * (e.g. {@code COUNT(DISTINCT x), COUNT(DISTINCT y)})  * the rule creates separate {@code Aggregate}s and combines using a  * {@link org.apache.calcite.rel.core.Join}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AggregateExpandDistinctAggregatesRule
extends|extends
name|RelOptRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/** The default instance of the rule; operates only on logical expressions. */
specifier|public
specifier|static
specifier|final
name|AggregateExpandDistinctAggregatesRule
name|INSTANCE
init|=
operator|new
name|AggregateExpandDistinctAggregatesRule
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
decl_stmt|;
comment|/** Instance of the rule that operates only on logical expressions and    * generates a join. */
specifier|public
specifier|static
specifier|final
name|AggregateExpandDistinctAggregatesRule
name|JOIN
init|=
operator|new
name|AggregateExpandDistinctAggregatesRule
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|TWO
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|2L
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|useGroupingSets
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|AggregateExpandDistinctAggregatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|LogicalAggregate
argument_list|>
name|clazz
parameter_list|,
name|boolean
name|useGroupingSets
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|useGroupingSets
operator|=
name|useGroupingSets
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateExpandDistinctAggregatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|LogicalAggregate
argument_list|>
name|clazz
parameter_list|,
name|boolean
name|useGroupingSets
parameter_list|,
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
name|useGroupingSets
argument_list|,
name|RelBuilder
operator|.
name|proto
argument_list|(
name|Contexts
operator|.
name|of
argument_list|(
name|joinFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateExpandDistinctAggregatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|LogicalAggregate
argument_list|>
name|clazz
parameter_list|,
name|RelFactories
operator|.
name|JoinFactory
name|joinFactory
parameter_list|)
block|{
name|this
argument_list|(
name|clazz
argument_list|,
literal|false
argument_list|,
name|RelBuilder
operator|.
name|proto
argument_list|(
name|Contexts
operator|.
name|of
argument_list|(
name|joinFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aggregate
operator|.
name|containsDistinctCall
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Find all of the agg expressions. We use a LinkedHashSet to ensure
comment|// determinism.
name|int
name|nonDistinctCount
init|=
literal|0
decl_stmt|;
name|int
name|distinctCount
init|=
literal|0
decl_stmt|;
name|int
name|filterCount
init|=
literal|0
decl_stmt|;
name|int
name|unsupportedAggCount
init|=
literal|0
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|argLists
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
condition|)
block|{
operator|++
name|filterCount
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
operator|++
name|nonDistinctCount
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|instanceof
name|SqlCountAggFunction
operator|||
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|instanceof
name|SqlSumAggFunction
operator|||
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|instanceof
name|SqlMinMaxAggFunction
operator|)
condition|)
block|{
operator|++
name|unsupportedAggCount
expr_stmt|;
block|}
continue|continue;
block|}
operator|++
name|distinctCount
expr_stmt|;
name|argLists
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|argLists
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
literal|"containsDistinctCall lied"
argument_list|)
expr_stmt|;
comment|// If all of the agg expressions are distinct and have the same
comment|// arguments then we can use a more efficient form.
if|if
condition|(
name|nonDistinctCount
operator|==
literal|0
operator|&&
name|argLists
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|pair
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|argLists
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|convertMonopole
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|pair
operator|.
name|left
argument_list|,
name|pair
operator|.
name|right
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|useGroupingSets
condition|)
block|{
name|rewriteUsingGroupingSets
argument_list|(
name|call
argument_list|,
name|aggregate
argument_list|,
name|argLists
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If only one distinct aggregate and one or more non-distinct aggregates,
comment|// we can generate multi-phase aggregates
if|if
condition|(
name|distinctCount
operator|==
literal|1
comment|// one distinct aggregate
operator|&&
name|filterCount
operator|==
literal|0
comment|// no filter
operator|&&
name|unsupportedAggCount
operator|==
literal|0
comment|// sum/min/max/count in non-distinct aggregate
operator|&&
name|nonDistinctCount
operator|>
literal|0
condition|)
block|{
comment|// one or more non-distinct aggregates
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|convertSingletonDistinct
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|argLists
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create a list of the expressions which will yield the final result.
comment|// Initially, the expressions point to the input field.
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|aggFields
init|=
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexInputRef
argument_list|>
name|refs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|groupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupAndIndicatorCount
init|=
name|aggregate
operator|.
name|getGroupCount
argument_list|()
operator|+
name|aggregate
operator|.
name|getIndicatorCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|Util
operator|.
name|range
argument_list|(
name|groupAndIndicatorCount
argument_list|)
control|)
block|{
name|refs
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|aggFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Aggregate the original relation, including any non-distinct aggregates.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|refs
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|refs
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|groupAndIndicatorCount
operator|+
name|newAggCallList
operator|.
name|size
argument_list|()
argument_list|,
name|aggFields
operator|.
name|get
argument_list|(
name|groupAndIndicatorCount
operator|+
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newAggCallList
operator|.
name|add
argument_list|(
name|aggCall
argument_list|)
expr_stmt|;
block|}
comment|// In the case where there are no non-distinct aggregates (regardless of
comment|// whether there are group bys), there's no need to generate the
comment|// extra aggregate and join.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|newAggCallList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|RelBuilder
operator|.
name|GroupKey
name|groupKey
init|=
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|groupSet
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|groupKey
argument_list|,
name|newAggCallList
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
comment|// For each set of operands, find and rewrite all calls which have that
comment|// set of operands.
for|for
control|(
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|argList
range|:
name|argLists
control|)
block|{
name|doRewrite
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|n
operator|++
argument_list|,
name|argList
operator|.
name|left
argument_list|,
name|argList
operator|.
name|right
argument_list|,
name|refs
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|project
argument_list|(
name|refs
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts an aggregate with one distinct aggregate and one or more    * non-distinct aggregates to multi-phase aggregates (see reference example    * below).    *    * @param relBuilder Contains the input relational expression    * @param aggregate  Original aggregate    * @param argLists   Arguments and filters to the distinct aggregate function    *    */
specifier|private
name|RelBuilder
name|convertSingletonDistinct
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|Set
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|argLists
parameter_list|)
block|{
comment|// For example,
comment|//    SELECT deptno, COUNT(*), SUM(bonus), MIN(DISTINCT sal)
comment|//    FROM emp
comment|//    GROUP BY deptno
comment|//
comment|// becomes
comment|//
comment|//    SELECT deptno, SUM(cnt), SUM(bonus), MIN(sal)
comment|//    FROM (
comment|//          SELECT deptno, COUNT(*) as cnt, SUM(bonus), sal
comment|//          FROM EMP
comment|//          GROUP BY deptno, sal)            // Aggregate B
comment|//    GROUP BY deptno                        // Aggregate A
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|newGroupSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|childFields
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasGroupBy
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|groupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|asSet
argument_list|()
decl_stmt|;
comment|// Add the distinct aggregate column(s) to the group-by columns,
comment|// if not already a part of the group-by
name|newGroupSet
operator|.
name|addAll
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|argList
range|:
name|argLists
control|)
block|{
name|newGroupSet
operator|.
name|addAll
argument_list|(
name|argList
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-map the arguments to the aggregate A. These arguments will get
comment|// remapped because of the intermediate aggregate B generated as part of the
comment|// transformation.
for|for
control|(
name|int
name|arg
range|:
name|newGroupSet
control|)
block|{
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of2
argument_list|(
name|arg
argument_list|,
name|childFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Generate the intermediate aggregate B
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|fakeArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|Integer
argument_list|>
name|callArgMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// First identify the real arguments, then use the rest for fake arguments
comment|// e.g. if real arguments are 0, 1, 3. Then the fake arguments will be 2, 4
for|for
control|(
specifier|final
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|groupSet
operator|.
name|contains
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|fakeArg0
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
comment|// We will deal with non-distinct aggregates below
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
operator|&&
operator|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|Util
operator|.
name|intersects
argument_list|(
name|groupSet
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
operator|)
condition|)
block|{
while|while
condition|(
name|sourceOf
operator|.
name|get
argument_list|(
name|fakeArg0
argument_list|)
operator|!=
literal|null
condition|)
block|{
operator|++
name|fakeArg0
expr_stmt|;
block|}
name|fakeArgs
operator|.
name|add
argument_list|(
name|fakeArg0
argument_list|)
expr_stmt|;
operator|++
name|fakeArg0
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|groupSet
operator|.
name|contains
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|sourceOf
operator|.
name|remove
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Compute the remapped arguments using fake arguments for non-distinct
comment|// aggregates with no arguments e.g. count(*).
name|int
name|fakeArgIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
comment|// Project the column corresponding to the distinct aggregate. Project
comment|// as-is all the non-distinct aggregates
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
specifier|final
name|AggregateCall
name|newCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|newGroupSet
argument_list|)
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
decl_stmt|;
name|newAggCalls
operator|.
name|add
argument_list|(
name|newCall
argument_list|)
expr_stmt|;
if|if
condition|(
name|newCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|int
name|fakeArg
init|=
name|fakeArgs
operator|.
name|get
argument_list|(
name|fakeArgIdx
argument_list|)
decl_stmt|;
name|callArgMap
operator|.
name|put
argument_list|(
name|newCall
argument_list|,
name|fakeArg
argument_list|)
expr_stmt|;
name|sourceOf
operator|.
name|put
argument_list|(
name|fakeArg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
operator|(
name|RexNode
operator|)
operator|new
name|RexInputRef
argument_list|(
name|fakeArg
argument_list|,
name|newCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|newCall
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|fakeArgIdx
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|arg
range|:
name|newCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
if|if
condition|(
name|groupSet
operator|.
name|contains
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|arg
operator|=
name|fakeArgs
operator|.
name|get
argument_list|(
name|fakeArgIdx
operator|++
argument_list|)
expr_stmt|;
name|callArgMap
operator|.
name|put
argument_list|(
name|newCall
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
operator|(
name|RexNode
operator|)
operator|new
name|RexInputRef
argument_list|(
name|arg
argument_list|,
name|newCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|newCall
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Generate the aggregate B (see the reference example above)
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|false
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|newGroupSet
argument_list|)
argument_list|,
literal|null
argument_list|,
name|newAggCalls
argument_list|)
argument_list|)
expr_stmt|;
comment|// Convert the existing aggregate to aggregate A (see the reference example above)
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newTopAggCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Use the remapped arguments for the (non)distinct aggregate calls
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newTopAggCalls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Re-map arguments.
specifier|final
name|AggregateCall
name|aggCall
init|=
name|newTopAggCalls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|argCount
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|newCall
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Integer
name|arg
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|callArgMap
operator|.
name|containsKey
argument_list|(
name|aggCall
argument_list|)
condition|)
block|{
name|newArgs
operator|.
name|add
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|callArgMap
operator|.
name|get
argument_list|(
name|aggCall
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newArgs
operator|.
name|add
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|newCall
operator|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If aggregate B had a COUNT aggregate call the corresponding aggregate at
comment|// aggregate A must be SUM. For other aggregates, it remains the same.
if|if
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|instanceof
name|SqlCountAggFunction
condition|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newArgs
operator|.
name|add
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|callArgMap
operator|.
name|get
argument_list|(
name|aggCall
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasGroupBy
condition|)
block|{
name|SqlSumAggFunction
name|sumAgg
init|=
operator|new
name|SqlSumAggFunction
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|newCall
operator|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|sumAgg
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SqlSumEmptyIsZeroAggFunction
name|sumAgg
init|=
operator|new
name|SqlSumEmptyIsZeroAggFunction
argument_list|()
decl_stmt|;
name|newCall
operator|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|sumAgg
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newCall
operator|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|peek
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|newTopAggCalls
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newCall
argument_list|)
expr_stmt|;
block|}
comment|// Populate the group-by keys with the remapped arguments for aggregate A
name|newGroupSet
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|newGroupSet
operator|.
name|add
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|newGroupSet
argument_list|)
argument_list|,
literal|null
argument_list|,
name|newTopAggCalls
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|relBuilder
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"DanglingJavadoc"
argument_list|)
specifier|private
name|void
name|rewriteUsingGroupingSets
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|Set
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|argLists
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSetTreeSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|ImmutableBitSet
operator|.
name|ORDERING
argument_list|)
decl_stmt|;
name|groupSetTreeSet
operator|.
name|add
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|argList
range|:
name|argLists
control|)
block|{
name|groupSetTreeSet
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|argList
operator|.
name|left
argument_list|)
operator|.
name|setIf
argument_list|(
name|argList
operator|.
name|right
argument_list|,
name|argList
operator|.
name|right
operator|>=
literal|0
argument_list|)
operator|.
name|union
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|groupSetTreeSet
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|fullGroupSet
init|=
name|ImmutableBitSet
operator|.
name|union
argument_list|(
name|groupSets
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|distinctAggCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|String
argument_list|>
name|aggCall
range|:
name|aggregate
operator|.
name|getNamedAggCalls
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|aggCall
operator|.
name|left
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|distinctAggCalls
operator|.
name|add
argument_list|(
name|aggCall
operator|.
name|left
operator|.
name|rename
argument_list|(
name|aggCall
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|fullGroupSet
argument_list|,
name|groupSets
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|,
name|groupSets
argument_list|)
argument_list|,
name|distinctAggCalls
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|distinct
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|fullGroupSet
operator|.
name|cardinality
argument_list|()
decl_stmt|;
specifier|final
name|int
name|indicatorCount
init|=
name|groupSets
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|groupCount
else|:
literal|0
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|booleanType
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|predicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ImmutableBitSet
argument_list|,
name|Integer
argument_list|>
name|filters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Function to register a filter for a group set. */
class|class
name|Registrar
block|{
name|RexNode
name|group
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|register
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|)
block|{
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|makeGroup
argument_list|(
name|groupCount
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|node
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|group
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|toNumber
argument_list|(
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|groupSet
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|node
argument_list|,
name|toString
argument_list|(
name|groupSet
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|groupCount
operator|+
name|indicatorCount
operator|+
name|distinctAggCalls
operator|.
name|size
argument_list|()
operator|+
name|predicates
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
specifier|private
name|RexNode
name|makeGroup
parameter_list|(
name|int
name|i
parameter_list|)
block|{
specifier|final
name|RexInputRef
name|ref
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|booleanType
argument_list|,
name|groupCount
operator|+
name|i
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|kase
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|ref
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|TWO
operator|.
name|pow
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|kase
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|makeGroup
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|kase
argument_list|)
return|;
block|}
block|}
specifier|private
name|BigDecimal
name|toNumber
parameter_list|(
name|ImmutableBitSet
name|bitSet
parameter_list|)
block|{
name|BigDecimal
name|n
init|=
name|BigDecimal
operator|.
name|ZERO
decl_stmt|;
for|for
control|(
name|int
name|key
range|:
name|bitSet
control|)
block|{
name|n
operator|=
name|n
operator|.
name|add
argument_list|(
name|TWO
operator|.
name|pow
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|ImmutableBitSet
name|bitSet
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"$i"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|key
range|:
name|bitSet
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
specifier|final
name|Registrar
name|registrar
init|=
operator|new
name|Registrar
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|groupSet
range|:
name|groupSets
control|)
block|{
name|filters
operator|.
name|put
argument_list|(
name|groupSet
argument_list|,
name|registrar
operator|.
name|register
argument_list|(
name|groupSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|predicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|f
range|:
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
specifier|final
name|RexNode
name|node
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|,
name|f
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|node
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|addAll
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|project
argument_list|(
name|Pair
operator|.
name|left
argument_list|(
name|nodes
argument_list|)
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
name|groupCount
operator|+
name|indicatorCount
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
specifier|final
name|int
name|newFilterArg
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgList
decl_stmt|;
specifier|final
name|SqlAggFunction
name|aggregation
decl_stmt|;
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|aggregation
operator|=
name|SqlStdOperatorTable
operator|.
name|MIN
expr_stmt|;
name|newArgList
operator|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|x
operator|++
argument_list|)
expr_stmt|;
name|newFilterArg
operator|=
name|filters
operator|.
name|get
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregation
operator|=
name|aggCall
operator|.
name|getAggregation
argument_list|()
expr_stmt|;
name|newArgList
operator|=
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
expr_stmt|;
name|newFilterArg
operator|=
name|filters
operator|.
name|get
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
operator|.
name|setIf
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|,
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
argument_list|)
operator|.
name|union
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AggregateCall
name|newCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggregation
argument_list|,
literal|false
argument_list|,
name|newArgList
argument_list|,
name|newFilterArg
argument_list|,
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|distinct
argument_list|,
literal|null
argument_list|,
name|aggCall
operator|.
name|name
argument_list|)
decl_stmt|;
name|newCalls
operator|.
name|add
argument_list|(
name|newCall
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|remap
argument_list|(
name|fullGroupSet
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|newCalls
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|convert
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ImmutableBitSet
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|ImmutableBitSet
name|bitSet
parameter_list|)
block|{
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|builder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|bit
range|:
name|bitSet
control|)
block|{
name|builder
operator|.
name|set
argument_list|(
name|remap
argument_list|(
name|groupSet
argument_list|,
name|bit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|Iterable
argument_list|<
name|ImmutableBitSet
argument_list|>
name|bitSets
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ImmutableBitSet
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|bitSet
range|:
name|bitSets
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|remap
argument_list|(
name|groupSet
argument_list|,
name|bitSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|)
block|{
name|ImmutableIntList
name|list
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|argList
control|)
block|{
name|list
operator|=
name|list
operator|.
name|append
argument_list|(
name|remap
argument_list|(
name|groupSet
argument_list|,
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|int
name|remap
parameter_list|(
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|int
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|groupSet
operator|.
name|indexOf
argument_list|(
name|arg
argument_list|)
return|;
block|}
comment|/**    * Converts an aggregate relational expression that contains just one    * distinct aggregate function (or perhaps several over the same arguments)    * and no non-distinct aggregate functions.    */
specifier|private
name|RelBuilder
name|convertMonopole
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|int
name|filterArg
parameter_list|)
block|{
comment|// For example,
comment|//    SELECT deptno, COUNT(DISTINCT sal), SUM(DISTINCT sal)
comment|//    FROM emp
comment|//    GROUP BY deptno
comment|//
comment|// becomes
comment|//
comment|//    SELECT deptno, COUNT(distinct_sal), SUM(distinct_sal)
comment|//    FROM (
comment|//      SELECT DISTINCT deptno, sal AS distinct_sal
comment|//      FROM EMP GROUP BY deptno)
comment|//    GROUP BY deptno
comment|// Project the columns of the GROUP BY plus the arguments
comment|// to the agg function.
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createSelectDistinct
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|argList
argument_list|,
name|filterArg
argument_list|,
name|sourceOf
argument_list|)
expr_stmt|;
comment|// Create an aggregate on top, with the new aggregate list.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
name|rewriteAggCalls
argument_list|(
name|newAggCalls
argument_list|,
name|argList
argument_list|,
name|sourceOf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cardinality
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|cardinality
argument_list|)
argument_list|,
literal|null
argument_list|,
name|newAggCalls
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|relBuilder
return|;
block|}
comment|/**    * Converts all distinct aggregate calls to a given set of arguments.    *    *<p>This method is called several times, one for each set of arguments.    * Each time it is called, it generates a JOIN to a new SELECT DISTINCT    * relational expression, and modifies the set of top-level calls.    *    * @param aggregate Original aggregate    * @param n         Ordinal of this in a join. {@code relBuilder} contains the    *                  input relational expression (either the original    *                  aggregate, the output from the previous call to this    *                  method. {@code n} is 0 if we're converting the    *                  first distinct aggregate in a query with no non-distinct    *                  aggregates)    * @param argList   Arguments to the distinct aggregate function    * @param filterArg Argument that filters input to aggregate function, or -1    * @param refs      Array of expressions which will be the projected by the    *                  result of this rule. Those relating to this arg list will    *                  be modified  @return Relational expression    */
specifier|private
name|void
name|doRewrite
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|int
name|n
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|int
name|filterArg
parameter_list|,
name|List
argument_list|<
name|RexInputRef
argument_list|>
name|refs
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|leftFields
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|leftFields
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|leftFields
operator|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
block|}
comment|// LogicalAggregate(
comment|//     child,
comment|//     {COUNT(DISTINCT 1), SUM(DISTINCT 1), SUM(2)})
comment|//
comment|// becomes
comment|//
comment|// LogicalAggregate(
comment|//     LogicalJoin(
comment|//         child,
comment|//         LogicalAggregate(child,< all columns> {}),
comment|//         INNER,
comment|//<f2 = f5>))
comment|//
comment|// E.g.
comment|//   SELECT deptno, SUM(DISTINCT sal), COUNT(DISTINCT gender), MAX(age)
comment|//   FROM Emps
comment|//   GROUP BY deptno
comment|//
comment|// becomes
comment|//
comment|//   SELECT e.deptno, adsal.sum_sal, adgender.count_gender, e.max_age
comment|//   FROM (
comment|//     SELECT deptno, MAX(age) as max_age
comment|//     FROM Emps GROUP BY deptno) AS e
comment|//   JOIN (
comment|//     SELECT deptno, COUNT(gender) AS count_gender FROM (
comment|//       SELECT DISTINCT deptno, gender FROM Emps) AS dgender
comment|//     GROUP BY deptno) AS adgender
comment|//     ON e.deptno = adgender.deptno
comment|//   JOIN (
comment|//     SELECT deptno, SUM(sal) AS sum_sal FROM (
comment|//       SELECT DISTINCT deptno, sal FROM Emps) AS dsal
comment|//     GROUP BY deptno) AS adsal
comment|//   ON e.deptno = adsal.deptno
comment|//   GROUP BY e.deptno
comment|//
comment|// Note that if a query contains no non-distinct aggregates, then the
comment|// very first join/group by is omitted.  In the example above, if
comment|// MAX(age) is removed, then the sub-select of "e" is not needed, and
comment|// instead the two other group by's are joined to one another.
comment|// Project the columns of the GROUP BY plus the arguments
comment|// to the agg function.
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createSelectDistinct
argument_list|(
name|relBuilder
argument_list|,
name|aggregate
argument_list|,
name|argList
argument_list|,
name|filterArg
argument_list|,
name|sourceOf
argument_list|)
expr_stmt|;
comment|// Now compute the aggregate functions on top of the distinct dataset.
comment|// Each distinct agg becomes a non-distinct call to the corresponding
comment|// field from the right; for example,
comment|//   "COUNT(DISTINCT e.sal)"
comment|// becomes
comment|//   "COUNT(distinct_e.sal)".
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupAndIndicatorCount
init|=
name|aggregate
operator|.
name|getGroupCount
argument_list|()
operator|+
name|aggregate
operator|.
name|getIndicatorCount
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|groupAndIndicatorCount
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
operator|++
name|i
expr_stmt|;
comment|// Ignore agg calls which are not distinct or have the wrong set
comment|// arguments. If we're rewriting aggs whose args are {sal}, we will
comment|// rewrite COUNT(DISTINCT sal) and SUM(DISTINCT sal) but ignore
comment|// COUNT(DISTINCT gender) or SUM(sal).
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|equals
argument_list|(
name|argList
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Re-map arguments.
specifier|final
name|int
name|argCount
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Integer
name|arg
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|newArgs
operator|.
name|add
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|newFilterArg
init|=
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
condition|?
name|sourceOf
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
specifier|final
name|AggregateCall
name|newAggCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
name|newFilterArg
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|refs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
assert|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|refs
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|RexInputRef
argument_list|(
name|groupAndIndicatorCount
operator|+
name|aggCallList
operator|.
name|size
argument_list|()
argument_list|,
name|newAggCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refs
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|RexInputRef
argument_list|(
name|leftFields
operator|.
name|size
argument_list|()
operator|+
name|groupAndIndicatorCount
operator|+
name|aggCallList
operator|.
name|size
argument_list|()
argument_list|,
name|newAggCall
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aggCallList
operator|.
name|add
argument_list|(
name|newAggCall
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableBitSet
name|newGroupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|permute
argument_list|(
name|map
argument_list|)
decl_stmt|;
assert|assert
name|newGroupSet
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|)
argument_list|)
assert|;
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|newGroupingSets
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|indicator
condition|)
block|{
name|newGroupingSets
operator|=
name|ImmutableBitSet
operator|.
name|ORDERING
operator|.
name|immutableSortedCopy
argument_list|(
name|ImmutableBitSet
operator|.
name|permute
argument_list|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|newGroupSet
argument_list|,
name|newGroupingSets
argument_list|,
name|aggCallList
argument_list|)
argument_list|)
expr_stmt|;
comment|// If there's no left child yet, no need to create the join
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Create the join condition. It is of the form
comment|//  'left.f0 = right.f0 and left.f1 = right.f1 and ...'
comment|// where {f0, f1, ...} are the GROUP BY fields.
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|distinctFields
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conditions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|groupAndIndicatorCount
condition|;
operator|++
name|i
control|)
block|{
comment|// null values form its own group
comment|// use "is not distinct from" so that the join condition
comment|// allows null values to match.
name|conditions
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|leftFields
argument_list|)
argument_list|,
operator|new
name|RexInputRef
argument_list|(
name|leftFields
operator|.
name|size
argument_list|()
operator|+
name|i
argument_list|,
name|distinctFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Join in the new 'select distinct' relation.
name|relBuilder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|rewriteAggCalls
parameter_list|(
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
parameter_list|)
block|{
comment|// Rewrite the agg calls. Each distinct agg becomes a non-distinct call
comment|// to the corresponding field from the right; for example,
comment|// "COUNT(DISTINCT e.sal)" becomes   "COUNT(distinct_e.sal)".
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newAggCalls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AggregateCall
name|aggCall
init|=
name|newAggCalls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Ignore agg calls which are not distinct or have the wrong set
comment|// arguments. If we're rewriting aggregates whose args are {sal}, we will
comment|// rewrite COUNT(DISTINCT sal) and SUM(DISTINCT sal) but ignore
comment|// COUNT(DISTINCT gender) or SUM(sal).
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|equals
argument_list|(
name|argList
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Re-map arguments.
specifier|final
name|int
name|argCount
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Integer
name|arg
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|newArgs
operator|.
name|add
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AggregateCall
name|newAggCall
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
operator|-
literal|1
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|newAggCalls
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newAggCall
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given an {@link org.apache.calcite.rel.logical.LogicalAggregate}    * and the ordinals of the arguments to a    * particular call to an aggregate function, creates a 'select distinct'    * relational expression which projects the group columns and those    * arguments but nothing else.    *    *<p>For example, given    *    *<blockquote>    *<pre>select f0, count(distinct f1), count(distinct f2)    * from t group by f0</pre>    *</blockquote>    *    * and the argument list    *    *<blockquote>{2}</blockquote>    *    * returns    *    *<blockquote>    *<pre>select distinct f0, f2 from t</pre>    *</blockquote>    *    * '    *    *<p>The<code>sourceOf</code> map is populated with the source of each    * column; in this case sourceOf.get(0) = 0, and sourceOf.get(1) = 2.</p>    *    * @param relBuilder Relational expression builder    * @param aggregate Aggregate relational expression    * @param argList   Ordinals of columns to make distinct    * @param filterArg Ordinal of column to filter on, or -1    * @param sourceOf  Out parameter, is populated with a map of where each    *                  output field came from    * @return Aggregate relational expression which projects the required    * columns    */
specifier|private
name|RelBuilder
name|createSelectDistinct
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|int
name|filterArg
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
parameter_list|)
block|{
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|childFields
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|sourceOf
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of2
argument_list|(
name|i
argument_list|,
name|childFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|arg
range|:
name|argList
control|)
block|{
if|if
condition|(
name|filterArg
operator|>=
literal|0
condition|)
block|{
comment|// Implement
comment|//   agg(DISTINCT arg) FILTER $f
comment|// by generating
comment|//   SELECT DISTINCT ... CASE WHEN $f THEN arg ELSE NULL END AS arg
comment|// and then applying
comment|//   agg(arg)
comment|// as usual.
comment|//
comment|// It works except for (rare) agg functions that need to see null
comment|// values.
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexInputRef
name|filterRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|filterArg
argument_list|,
name|childFields
argument_list|)
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
name|argRef
init|=
name|RexInputRef
operator|.
name|of2
argument_list|(
name|arg
argument_list|,
name|childFields
argument_list|)
decl_stmt|;
name|RexNode
name|condition
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|filterRef
argument_list|,
name|argRef
operator|.
name|left
argument_list|,
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|argRef
operator|.
name|left
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|argRef
operator|.
name|left
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|condition
argument_list|,
literal|"i$"
operator|+
name|argRef
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of2
argument_list|(
name|arg
argument_list|,
name|childFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|project
argument_list|(
name|Pair
operator|.
name|left
argument_list|(
name|projects
argument_list|)
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|projects
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the distinct values of the GROUP BY fields and the arguments
comment|// to the agg functions.
name|relBuilder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|false
argument_list|,
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|projects
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
expr|<
name|AggregateCall
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|relBuilder
return|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateExpandDistinctAggregatesRule.java
end_comment

end_unit

