begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|MonotonicSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|fraction
operator|.
name|BigFraction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|EPOCH_JULIAN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|floorDiv
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|floorMod
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/** Utilities for {@link TimeFrame}. */
end_comment

begin_class
specifier|public
class|class
name|TimeFrames
block|{
specifier|private
name|TimeFrames
parameter_list|()
block|{
block|}
comment|/** The core time frame set. Includes the time frames for all Avatica time    * units plus ISOWEEK:    *    *<ul>    *<li>SECOND, and multiples MINUTE, HOUR, DAY, WEEK (starts on a Sunday),    *   sub-multiples MILLISECOND, MICROSECOND, NANOSECOND,    *   quotients DOY, DOW;    *<li>MONTH, and multiples QUARTER, YEAR, DECADE, CENTURY, MILLENNIUM;    *<li>ISOYEAR, and sub-unit ISOWEEK (starts on a Monday), quotient ISODOW;    *</ul>    *    *<p>Does not include EPOCH.    */
specifier|public
specifier|static
specifier|final
name|TimeFrameSet
name|CORE
init|=
name|addTsi
argument_list|(
name|addCore
argument_list|(
operator|new
name|BuilderImpl
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|BuilderImpl
name|addCore
parameter_list|(
name|BuilderImpl
name|b
parameter_list|)
block|{
name|b
operator|.
name|addCore
argument_list|(
name|TimeUnit
operator|.
name|SECOND
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
literal|false
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|HOUR
argument_list|,
literal|false
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
literal|false
argument_list|,
literal|24
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|WEEK
argument_list|,
literal|false
argument_list|,
literal|7
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
operator|new
name|TimestampString
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// a sunday
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|MILLISECOND
argument_list|,
literal|true
argument_list|,
literal|1_000
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|MICROSECOND
argument_list|,
literal|true
argument_list|,
literal|1_000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECOND
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|NANOSECOND
argument_list|,
literal|true
argument_list|,
literal|1_000
argument_list|,
name|TimeUnit
operator|.
name|MICROSECOND
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|EPOCH
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|,
operator|new
name|TimestampString
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|addCore
argument_list|(
name|TimeUnit
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|QUARTER
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|,
literal|false
argument_list|,
literal|12
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|DECADE
argument_list|,
literal|false
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|YEAR
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|CENTURY
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|YEAR
argument_list|,
operator|new
name|TimestampString
argument_list|(
literal|2001
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
name|TimeUnit
operator|.
name|MILLENNIUM
argument_list|,
literal|false
argument_list|,
literal|1_000
argument_list|,
name|TimeUnit
operator|.
name|YEAR
argument_list|,
operator|new
name|TimestampString
argument_list|(
literal|2001
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|addCore
argument_list|(
name|TimeUnit
operator|.
name|ISOYEAR
argument_list|)
expr_stmt|;
name|b
operator|.
name|addSub
argument_list|(
literal|"ISOWEEK"
argument_list|,
literal|false
argument_list|,
literal|7
argument_list|,
name|TimeUnit
operator|.
name|DAY
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|TimestampString
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// a monday
name|b
operator|.
name|addQuotient
argument_list|(
name|TimeUnit
operator|.
name|DOY
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|YEAR
argument_list|)
expr_stmt|;
name|b
operator|.
name|addQuotient
argument_list|(
name|TimeUnit
operator|.
name|DOW
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|WEEK
argument_list|)
expr_stmt|;
name|b
operator|.
name|addQuotient
argument_list|(
name|TimeUnit
operator|.
name|ISODOW
operator|.
name|name
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|DAY
operator|.
name|name
argument_list|()
argument_list|,
literal|"ISOWEEK"
argument_list|)
expr_stmt|;
name|b
operator|.
name|addRollup
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|b
operator|.
name|addRollup
argument_list|(
literal|"ISOWEEK"
argument_list|,
name|TimeUnit
operator|.
name|ISOYEAR
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/** Adds abbreviations used by {@code TIMESTAMPADD}, {@code TIMESTAMPDIFF}    * functions. */
specifier|private
specifier|static
name|BuilderImpl
name|addTsi
parameter_list|(
name|BuilderImpl
name|b
parameter_list|)
block|{
name|b
operator|.
name|addAlias
argument_list|(
literal|"FRAC_SECOND"
argument_list|,
name|TimeUnit
operator|.
name|MICROSECOND
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_FRAC_SECOND"
argument_list|,
name|TimeUnit
operator|.
name|NANOSECOND
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_MICROSECOND"
argument_list|,
name|TimeUnit
operator|.
name|MICROSECOND
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_SECOND"
argument_list|,
name|TimeUnit
operator|.
name|SECOND
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_MINUTE"
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_HOUR"
argument_list|,
name|TimeUnit
operator|.
name|HOUR
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_DAY"
argument_list|,
name|TimeUnit
operator|.
name|DAY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_WEEK"
argument_list|,
name|TimeUnit
operator|.
name|WEEK
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_MONTH"
argument_list|,
name|TimeUnit
operator|.
name|MONTH
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_QUARTER"
argument_list|,
name|TimeUnit
operator|.
name|QUARTER
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addAlias
argument_list|(
literal|"SQL_TSI_YEAR"
argument_list|,
name|TimeUnit
operator|.
name|YEAR
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/** Given a date, returns the date of the first day of its ISO Year.    * Usually occurs in the same calendar year, but may be as early as Dec 29    * of the previous calendar year.    *    *<p>After    *<a href="https://issues.apache.org/jira/browse/CALCITE-5369">[CALCITE-5369]    * In Avatica DateTimeUtils, add support for FLOOR and CEIL to ISOYEAR</a> is    * fixed, we can use {@link DateTimeUtils#unixDateFloor} instead of this    * method. */
specifier|static
name|int
name|floorCeilIsoYear
parameter_list|(
name|int
name|date
parameter_list|,
name|boolean
name|ceil
parameter_list|)
block|{
specifier|final
name|int
name|year
init|=
operator|(
name|int
operator|)
name|DateTimeUtils
operator|.
name|unixDateExtract
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
name|date
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|firstMondayOfFirstWeek
argument_list|(
name|year
operator|+
operator|(
name|ceil
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
operator|-
name|EPOCH_JULIAN
return|;
block|}
comment|/** Returns the first day of the first week of a year.    * Per ISO-8601 it is the Monday of the week that contains Jan 4,    * or equivalently, it is a Monday between Dec 29 and Jan 4.    * Sometimes it is in the year before the given year. */
comment|// Note: copied from DateTimeUtils
specifier|static
name|long
name|firstMondayOfFirstWeek
parameter_list|(
name|int
name|year
parameter_list|)
block|{
specifier|final
name|long
name|janFirst
init|=
name|DateTimeUtils
operator|.
name|ymdToJulian
argument_list|(
name|year
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|long
name|janFirstDow
init|=
name|floorMod
argument_list|(
name|janFirst
operator|+
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|7
argument_list|)
decl_stmt|;
comment|// sun=0, sat=6
return|return
name|janFirst
operator|+
operator|(
literal|11
operator|-
name|janFirstDow
operator|)
operator|%
literal|7
operator|-
literal|3
return|;
block|}
comment|/** Returns the number of months since 1 BCE.    *    *<p>Parameters mean the same as in    * {@link DateTimeUtils#ymdToJulian(int, int, int)}.    *    * @param year Year (e.g. 2020 means 2020 CE, 0 means 1 BCE)    * @param month Month (e.g. 1 means January)    */
specifier|static
name|int
name|fullMonth
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
name|year
operator|*
literal|12
operator|+
operator|(
name|month
operator|-
literal|1
operator|)
return|;
block|}
comment|/** Given a {@link #fullMonth(int, int)} value, returns the month    * (1 means January). */
specifier|static
name|int
name|fullMonthToMonth
parameter_list|(
name|int
name|fullMonth
parameter_list|)
block|{
return|return
name|floorMod
argument_list|(
name|fullMonth
argument_list|,
literal|12
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** Given a {@link #fullMonth(int, int)} value, returns the year    * (2020 means 2020 CE). */
specifier|static
name|int
name|fullMonthToYear
parameter_list|(
name|int
name|fullMonth
parameter_list|)
block|{
return|return
name|floorDiv
argument_list|(
name|fullMonth
argument_list|,
literal|12
argument_list|)
return|;
block|}
comment|/** As {@link DateTimeUtils#unixTimestamp(int, int, int, int, int, int)}    * but based on a fullMonth value (per {@link #fullMonth(int, int)}). */
specifier|static
name|long
name|unixTimestamp
parameter_list|(
name|int
name|fullMonth
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|hour
parameter_list|,
name|int
name|minute
parameter_list|,
name|int
name|second
parameter_list|)
block|{
specifier|final
name|int
name|year
init|=
name|fullMonthToYear
argument_list|(
name|fullMonth
argument_list|)
decl_stmt|;
specifier|final
name|int
name|month
init|=
name|fullMonthToMonth
argument_list|(
name|fullMonth
argument_list|)
decl_stmt|;
return|return
name|DateTimeUtils
operator|.
name|unixTimestamp
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|)
return|;
block|}
specifier|static
name|int
name|mdToUnixDate
parameter_list|(
name|int
name|fullMonth
parameter_list|,
name|int
name|day
parameter_list|)
block|{
specifier|final
name|int
name|year
init|=
name|fullMonthToYear
argument_list|(
name|fullMonth
argument_list|)
decl_stmt|;
specifier|final
name|int
name|month
init|=
name|fullMonthToMonth
argument_list|(
name|fullMonth
argument_list|)
decl_stmt|;
return|return
name|DateTimeUtils
operator|.
name|ymdToUnixDate
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|canDirectlyRollUp
parameter_list|(
name|TimeFrameImpl
name|from
parameter_list|,
name|TimeFrameImpl
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|.
name|core
argument_list|()
operator|.
name|equals
argument_list|(
name|to
operator|.
name|core
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|divisible
argument_list|(
name|from
operator|.
name|coreMultiplier
argument_list|()
argument_list|,
name|to
operator|.
name|coreMultiplier
argument_list|()
argument_list|)
condition|)
block|{
name|BigFraction
name|diff
init|=
operator|new
name|BigFraction
argument_list|(
name|from
operator|.
name|core
argument_list|()
operator|.
name|epochDiff
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|divisible
argument_list|(
name|from
operator|.
name|coreMultiplier
argument_list|()
argument_list|,
name|diff
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns whether {@code numerator} is divisible by {@code denominator}.    *    *<p>For example, {@code divisible(6, 2)} returns {@code true};    * {@code divisible(0, 2)} also returns {@code true};    * {@code divisible(2, 6)} returns {@code false}. */
specifier|private
specifier|static
name|boolean
name|divisible
parameter_list|(
name|BigFraction
name|numerator
parameter_list|,
name|BigFraction
name|denominator
parameter_list|)
block|{
return|return
name|denominator
operator|.
name|equals
argument_list|(
name|BigFraction
operator|.
name|ZERO
argument_list|)
operator|||
name|numerator
operator|.
name|divide
argument_list|(
name|denominator
argument_list|)
operator|.
name|getNumerator
argument_list|()
operator|.
name|abs
argument_list|()
operator|.
name|equals
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
return|;
block|}
comment|/** Implementation of {@link TimeFrameSet.Builder}. */
specifier|static
class|class
name|BuilderImpl
implements|implements
name|TimeFrameSet
operator|.
name|Builder
block|{
name|BuilderImpl
parameter_list|()
block|{
block|}
specifier|final
name|MonotonicSupplier
argument_list|<
name|TimeFrameSet
argument_list|>
name|frameSetSupplier
init|=
operator|new
name|MonotonicSupplier
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TimeFrameImpl
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableMultimap
operator|.
name|Builder
argument_list|<
name|TimeFrameImpl
argument_list|,
name|TimeFrameImpl
argument_list|>
name|rollupList
init|=
name|ImmutableMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TimeFrameSet
name|build
parameter_list|()
block|{
specifier|final
name|TimeFrameSet
name|frameSet
init|=
operator|new
name|TimeFrameSet
argument_list|(
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
argument_list|,
name|rollupList
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|frameSetSupplier
operator|.
name|accept
argument_list|(
name|frameSet
argument_list|)
expr_stmt|;
return|return
name|frameSet
return|;
block|}
comment|/** Converts a number to an exactly equivalent {@code BigInteger}.      * May silently lose precision if n is a {@code Float} or {@code Double}. */
specifier|static
name|BigInteger
name|toBigInteger
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|number
operator|instanceof
name|BigInteger
condition|?
operator|(
name|BigInteger
operator|)
name|number
else|:
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the time frame with the given name,      * or throws {@link IllegalArgumentException}. */
name|TimeFrameImpl
name|getFrame
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|TimeFrameImpl
name|timeFrame
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeFrame
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown frame: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|timeFrame
return|;
block|}
comment|/** Adds a frame.      *      *<p>If a frame with this name already exists, throws      * {@link IllegalArgumentException} and leaves the builder in the same      * state.      *      *<p>It is very important that we don't allow replacement of frames.      * If replacement were allowed, people would be able to create a DAG      * (e.g. two routes from DAY to MONTH with different multipliers)      * or a cycle (e.g. one SECOND equals 1,000 MILLISECOND      * and one MILLISECOND equals 20 SECOND). Those scenarios give rise to      * inconsistent multipliers. */
specifier|private
name|BuilderImpl
name|addFrame
parameter_list|(
name|String
name|name
parameter_list|,
name|TimeFrameImpl
name|frame
parameter_list|)
block|{
specifier|final
name|TimeFrameImpl
name|previousFrame
init|=
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|requireNonNull
argument_list|(
name|frame
argument_list|,
literal|"frame"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousFrame
operator|!=
literal|null
condition|)
block|{
comment|// There was already a frame with that name. Replace the old frame
comment|// (so that that builder is still valid usable) and throw.
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|previousFrame
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"duplicate frame: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|addCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|addFrame
argument_list|(
name|name
argument_list|,
operator|new
name|CoreFrame
argument_list|(
name|frameSetSupplier
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/** Defines a time unit that consists of {@code count} instances of      * {@code baseUnit}. */
name|BuilderImpl
name|addSub
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|divide
parameter_list|,
name|Number
name|count
parameter_list|,
name|String
name|baseName
parameter_list|,
name|TimestampString
name|epoch
parameter_list|)
block|{
specifier|final
name|TimeFrameImpl
name|baseFrame
init|=
name|getFrame
argument_list|(
name|baseName
argument_list|)
decl_stmt|;
specifier|final
name|BigInteger
name|factor
init|=
name|toBigInteger
argument_list|(
name|count
argument_list|)
decl_stmt|;
specifier|final
name|CoreFrame
name|coreFrame
init|=
name|baseFrame
operator|.
name|core
argument_list|()
decl_stmt|;
specifier|final
name|BigFraction
name|coreFactor
init|=
name|divide
condition|?
name|baseFrame
operator|.
name|coreMultiplier
argument_list|()
operator|.
name|divide
argument_list|(
name|factor
argument_list|)
else|:
name|baseFrame
operator|.
name|coreMultiplier
argument_list|()
operator|.
name|multiply
argument_list|(
name|factor
argument_list|)
decl_stmt|;
return|return
name|addFrame
argument_list|(
name|name
argument_list|,
operator|new
name|SubFrame
argument_list|(
name|name
argument_list|,
name|baseFrame
argument_list|,
name|divide
argument_list|,
name|factor
argument_list|,
name|coreFrame
argument_list|,
name|coreFactor
argument_list|,
name|epoch
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|addQuotient
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|minorName
parameter_list|,
name|String
name|majorName
parameter_list|)
block|{
specifier|final
name|TimeFrameImpl
name|minorFrame
init|=
name|getFrame
argument_list|(
name|minorName
argument_list|)
decl_stmt|;
specifier|final
name|TimeFrameImpl
name|majorFrame
init|=
name|getFrame
argument_list|(
name|majorName
argument_list|)
decl_stmt|;
return|return
name|addFrame
argument_list|(
name|name
argument_list|,
operator|new
name|QuotientFrame
argument_list|(
name|name
argument_list|,
name|minorFrame
argument_list|,
name|majorFrame
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|addMultiple
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|count
parameter_list|,
name|String
name|baseName
parameter_list|)
block|{
return|return
name|addSub
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
name|count
argument_list|,
name|baseName
argument_list|,
name|TimestampString
operator|.
name|EPOCH
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|addDivision
parameter_list|(
name|String
name|name
parameter_list|,
name|Number
name|count
parameter_list|,
name|String
name|baseName
parameter_list|)
block|{
return|return
name|addSub
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|count
argument_list|,
name|baseName
argument_list|,
name|TimestampString
operator|.
name|EPOCH
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|addRollup
parameter_list|(
name|String
name|fromName
parameter_list|,
name|String
name|toName
parameter_list|)
block|{
specifier|final
name|TimeFrameImpl
name|fromFrame
init|=
name|getFrame
argument_list|(
name|fromName
argument_list|)
decl_stmt|;
specifier|final
name|TimeFrameImpl
name|toFrame
init|=
name|getFrame
argument_list|(
name|toName
argument_list|)
decl_stmt|;
name|rollupList
operator|.
name|put
argument_list|(
name|fromFrame
argument_list|,
name|toFrame
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|addAll
parameter_list|(
name|TimeFrameSet
name|timeFrameSet
parameter_list|)
block|{
name|timeFrameSet
operator|.
name|map
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|frame
lambda|->
name|frame
operator|.
name|replicate
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|withEpoch
parameter_list|(
name|TimestampString
name|epoch
parameter_list|)
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TimeFrameImpl
argument_list|>
name|entry
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|SubFrame
name|value
init|=
name|requireNonNull
argument_list|(
operator|(
name|SubFrame
operator|)
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|.
name|replicateWithEpoch
argument_list|(
name|this
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderImpl
name|addAlias
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|originalName
parameter_list|)
block|{
specifier|final
name|TimeFrameImpl
name|frame
init|=
name|getFrame
argument_list|(
name|originalName
argument_list|)
decl_stmt|;
return|return
name|addFrame
argument_list|(
name|name
argument_list|,
operator|new
name|AliasFrame
argument_list|(
name|name
argument_list|,
name|frame
argument_list|)
argument_list|)
return|;
block|}
comment|// Extra methods for Avatica's built-in time frames.
name|void
name|addCore
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
name|addCore
argument_list|(
name|unit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|addSub
parameter_list|(
name|TimeUnit
name|unit
parameter_list|,
name|boolean
name|divide
parameter_list|,
name|Number
name|count
parameter_list|,
name|TimeUnit
name|baseUnit
parameter_list|)
block|{
name|addSub
argument_list|(
name|unit
argument_list|,
name|divide
argument_list|,
name|count
argument_list|,
name|baseUnit
argument_list|,
name|TimestampString
operator|.
name|EPOCH
argument_list|)
expr_stmt|;
block|}
name|void
name|addSub
parameter_list|(
name|TimeUnit
name|unit
parameter_list|,
name|boolean
name|divide
parameter_list|,
name|Number
name|count
parameter_list|,
name|TimeUnit
name|baseUnit
parameter_list|,
name|TimestampString
name|epoch
parameter_list|)
block|{
name|addSub
argument_list|(
name|unit
operator|.
name|name
argument_list|()
argument_list|,
name|divide
argument_list|,
name|count
argument_list|,
name|baseUnit
operator|.
name|name
argument_list|()
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
block|}
name|void
name|addRollup
parameter_list|(
name|TimeUnit
name|fromUnit
parameter_list|,
name|TimeUnit
name|toUnit
parameter_list|)
block|{
name|addRollup
argument_list|(
name|fromUnit
operator|.
name|name
argument_list|()
argument_list|,
name|toUnit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|addQuotient
parameter_list|(
name|TimeUnit
name|unit
parameter_list|,
name|TimeUnit
name|minor
parameter_list|,
name|TimeUnit
name|major
parameter_list|)
block|{
name|addQuotient
argument_list|(
name|unit
operator|.
name|name
argument_list|()
argument_list|,
name|minor
operator|.
name|name
argument_list|()
argument_list|,
name|major
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implementation of {@link TimeFrame}. */
specifier|abstract
specifier|static
class|class
name|TimeFrameImpl
implements|implements
name|TimeFrame
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|Supplier
argument_list|<
name|TimeFrameSet
argument_list|>
name|frameSetSupplier
decl_stmt|;
name|TimeFrameImpl
parameter_list|(
name|Supplier
argument_list|<
name|TimeFrameSet
argument_list|>
name|frameSetSupplier
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|frameSetSupplier
operator|=
name|requireNonNull
argument_list|(
name|frameSetSupplier
argument_list|,
literal|"frameSetSupplier"
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|requireNonNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimeFrameSet
name|frameSet
parameter_list|()
block|{
return|return
name|frameSetSupplier
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|BigFraction
name|per
parameter_list|(
name|TimeFrame
name|timeFrame
parameter_list|)
block|{
comment|// Note: The following algorithm is not very efficient. It becomes less
comment|// efficient as the number of time frames increases. A more efficient
comment|// algorithm would be for TimeFrameSet.Builder.build() to call this method
comment|// for each pair of time frames and cache the results in a list:
comment|//
comment|//   (coreFrame,
comment|//   [(subFrame0, multiplier0),
comment|//    ...
comment|//    (subFrameN, multiplierN)])
specifier|final
name|Map
argument_list|<
name|TimeFrame
argument_list|,
name|BigFraction
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|TimeFrame
argument_list|,
name|BigFraction
argument_list|>
name|map2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expand
argument_list|(
name|map
argument_list|,
name|BigFraction
operator|.
name|ONE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TimeFrameImpl
operator|)
name|timeFrame
operator|)
operator|.
name|expand
argument_list|(
name|map2
argument_list|,
name|BigFraction
operator|.
name|ONE
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|BigFraction
argument_list|>
name|fractions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TimeFrame
argument_list|,
name|BigFraction
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|BigFraction
name|value2
init|=
name|map2
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value2
operator|!=
literal|null
condition|)
block|{
name|fractions
operator|.
name|add
argument_list|(
name|value2
operator|.
name|divide
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|fractions
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// There is no path from this TimeFrame to that.
return|return
literal|null
return|;
case|case
literal|1
case|:
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|fractions
argument_list|)
return|;
default|default:
comment|// If there are multiple units in common, the multipliers must be the
comment|// same for all. If they are not, the must have somehow created a
comment|// TimeFrameSet that has multiple paths between units (i.e. a DAG),
comment|// or has a cycle. TimeFrameSet.Builder is supposed to prevent all of
comment|// these, and so we throw an AssertionError.
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"inconsistent multipliers for "
operator|+
name|this
operator|+
literal|".per("
operator|+
name|timeFrame
operator|+
literal|"): "
operator|+
name|fractions
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|expand
parameter_list|(
name|Map
argument_list|<
name|TimeFrame
argument_list|,
name|BigFraction
argument_list|>
name|map
parameter_list|,
name|BigFraction
name|f
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|this
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
comment|/** Adds a time frame like this to a builder. */
specifier|abstract
name|void
name|replicate
parameter_list|(
name|BuilderImpl
name|b
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|CoreFrame
name|core
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|BigFraction
name|coreMultiplier
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|canRollUpTo
parameter_list|(
name|TimeFrame
name|toFrame
parameter_list|)
block|{
if|if
condition|(
name|toFrame
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|toFrame
operator|instanceof
name|TimeFrameImpl
condition|)
block|{
specifier|final
name|TimeFrameImpl
name|toFrame1
init|=
operator|(
name|TimeFrameImpl
operator|)
name|toFrame
decl_stmt|;
if|if
condition|(
name|canDirectlyRollUp
argument_list|(
name|this
argument_list|,
name|toFrame1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|TimeFrameSet
name|frameSet
init|=
name|frameSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|frameSet
operator|.
name|rollupMap
operator|.
name|entries
argument_list|()
operator|.
name|contains
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|this
argument_list|,
name|toFrame1
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Hard-code roll-up via DAY-to-MONTH bridge, for now.
specifier|final
name|TimeFrameImpl
name|day
init|=
name|requireNonNull
argument_list|(
name|frameSet
operator|.
name|map
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|DAY
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TimeFrameImpl
name|month
init|=
name|requireNonNull
argument_list|(
name|frameSet
operator|.
name|map
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|MONTH
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|canDirectlyRollUp
argument_list|(
name|this
argument_list|,
name|day
argument_list|)
operator|&&
name|canDirectlyRollUp
argument_list|(
name|month
argument_list|,
name|toFrame1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Hard-code roll-up via ISOWEEK-to-ISOYEAR bridge, for now.
specifier|final
name|TimeFrameImpl
name|isoYear
init|=
name|requireNonNull
argument_list|(
name|frameSet
operator|.
name|map
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|ISOYEAR
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TimeFrameImpl
name|isoWeek
init|=
name|requireNonNull
argument_list|(
name|frameSet
operator|.
name|map
operator|.
name|get
argument_list|(
literal|"ISOWEEK"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|canDirectlyRollUp
argument_list|(
name|this
argument_list|,
name|isoWeek
argument_list|)
operator|&&
name|canDirectlyRollUp
argument_list|(
name|isoYear
argument_list|,
name|toFrame1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/** Core time frame (such as SECOND, MONTH, ISOYEAR). */
specifier|static
class|class
name|CoreFrame
extends|extends
name|TimeFrameImpl
block|{
name|CoreFrame
parameter_list|(
name|Supplier
argument_list|<
name|TimeFrameSet
argument_list|>
name|frameSetSupplier
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|frameSetSupplier
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|replicate
parameter_list|(
name|BuilderImpl
name|b
parameter_list|)
block|{
name|b
operator|.
name|addCore
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoreFrame
name|core
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BigFraction
name|coreMultiplier
parameter_list|()
block|{
return|return
name|BigFraction
operator|.
name|ONE
return|;
block|}
comment|/** Returns the difference between the epochs of two frames, in the      * units of this core frame. */
name|BigInteger
name|epochDiff
parameter_list|(
name|TimeFrameImpl
name|from
parameter_list|,
name|TimeFrameImpl
name|to
parameter_list|)
block|{
assert|assert
name|from
operator|.
name|core
argument_list|()
operator|==
name|this
assert|;
assert|assert
name|to
operator|.
name|core
argument_list|()
operator|==
name|this
assert|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
literal|"MONTH"
case|:
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|from
operator|.
name|monthEpoch
argument_list|()
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|to
operator|.
name|monthEpoch
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|from
operator|.
name|timestampEpoch
argument_list|()
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|to
operator|.
name|timestampEpoch
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
comment|/** A time frame that is composed of another time frame.    *    *<p>For example, {@code MINUTE} is composed of 60 {@code SECOND};    * (factor = 60, divide = false);    * {@code MILLISECOND} is composed of 1 / 1000 {@code SECOND}    * (factor = 1000, divide = true).    *    *<p>A sub-time frame S is aligned with its parent frame P;    * that is, every instance of S belongs to one instance of P.    * Every {@code MINUTE} belongs to one {@code HOUR};    * not every {@code WEEK} belongs to precisely one {@code MONTH} or    * {@code MILLENNIUM}.    */
specifier|static
class|class
name|SubFrame
extends|extends
name|TimeFrameImpl
block|{
specifier|private
specifier|final
name|TimeFrameImpl
name|base
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|divide
decl_stmt|;
specifier|private
specifier|final
name|BigInteger
name|multiplier
decl_stmt|;
specifier|private
specifier|final
name|CoreFrame
name|coreFrame
decl_stmt|;
comment|/** The number of core frames that are equivalent to one of these. For      * example, MINUTE, HOUR, MILLISECOND all have core = SECOND, and have      * multipliers 60, 3,600, 1 / 1,000 respectively. */
specifier|private
specifier|final
name|BigFraction
name|coreMultiplier
decl_stmt|;
specifier|private
specifier|final
name|TimestampString
name|epoch
decl_stmt|;
name|SubFrame
parameter_list|(
name|String
name|name
parameter_list|,
name|TimeFrameImpl
name|base
parameter_list|,
name|boolean
name|divide
parameter_list|,
name|BigInteger
name|multiplier
parameter_list|,
name|CoreFrame
name|coreFrame
parameter_list|,
name|BigFraction
name|coreMultiplier
parameter_list|,
name|TimestampString
name|epoch
parameter_list|)
block|{
name|super
argument_list|(
name|base
operator|.
name|frameSetSupplier
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|requireNonNull
argument_list|(
name|base
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
name|this
operator|.
name|divide
operator|=
name|divide
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
name|requireNonNull
argument_list|(
name|multiplier
argument_list|,
literal|"multiplier"
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreFrame
operator|=
name|requireNonNull
argument_list|(
name|coreFrame
argument_list|,
literal|"coreFrame"
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreMultiplier
operator|=
name|requireNonNull
argument_list|(
name|coreMultiplier
argument_list|,
literal|"coreMultiplier"
argument_list|)
expr_stmt|;
name|this
operator|.
name|epoch
operator|=
name|requireNonNull
argument_list|(
name|epoch
argument_list|,
literal|"epoch"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|+
literal|", composedOf "
operator|+
name|multiplier
operator|+
literal|" "
operator|+
name|base
operator|.
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|dateEpoch
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|floorDiv
argument_list|(
name|epoch
operator|.
name|getMillisSinceEpoch
argument_list|()
argument_list|,
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|monthEpoch
parameter_list|()
block|{
specifier|final
name|Calendar
name|calendar
init|=
name|epoch
operator|.
name|toCalendar
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
comment|// 2020 CE is represented by 2020
name|int
name|m
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// January is represented by 1
return|return
name|fullMonth
argument_list|(
name|y
argument_list|,
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|timestampEpoch
parameter_list|()
block|{
return|return
name|epoch
operator|.
name|getMillisSinceEpoch
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|replicate
parameter_list|(
name|BuilderImpl
name|b
parameter_list|)
block|{
name|b
operator|.
name|addSub
argument_list|(
name|name
argument_list|,
name|divide
argument_list|,
name|multiplier
argument_list|,
name|base
operator|.
name|name
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a copy of this TimeFrameImpl with a given epoch. */
name|void
name|replicateWithEpoch
parameter_list|(
name|BuilderImpl
name|b
parameter_list|,
name|TimestampString
name|epoch
parameter_list|)
block|{
name|b
operator|.
name|addSub
argument_list|(
name|name
argument_list|,
name|divide
argument_list|,
name|multiplier
argument_list|,
name|base
operator|.
name|name
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|expand
parameter_list|(
name|Map
argument_list|<
name|TimeFrame
argument_list|,
name|BigFraction
argument_list|>
name|map
parameter_list|,
name|BigFraction
name|f
parameter_list|)
block|{
name|super
operator|.
name|expand
argument_list|(
name|map
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|base
operator|.
name|expand
argument_list|(
name|map
argument_list|,
name|divide
condition|?
name|f
operator|.
name|divide
argument_list|(
name|multiplier
argument_list|)
else|:
name|f
operator|.
name|multiply
argument_list|(
name|multiplier
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoreFrame
name|core
parameter_list|()
block|{
return|return
name|coreFrame
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BigFraction
name|coreMultiplier
parameter_list|()
block|{
return|return
name|coreMultiplier
return|;
block|}
block|}
comment|/** Frame that defines is based on a minor frame and resets whenever the major    * frame resets. For example, "DOY" (day of year) is based on DAY and resets    * every YEAR. */
specifier|static
class|class
name|QuotientFrame
extends|extends
name|TimeFrameImpl
block|{
specifier|private
specifier|final
name|TimeFrameImpl
name|minorFrame
decl_stmt|;
specifier|private
specifier|final
name|TimeFrameImpl
name|majorFrame
decl_stmt|;
name|QuotientFrame
parameter_list|(
name|String
name|name
parameter_list|,
name|TimeFrameImpl
name|minorFrame
parameter_list|,
name|TimeFrameImpl
name|majorFrame
parameter_list|)
block|{
name|super
argument_list|(
name|minorFrame
operator|.
name|frameSetSupplier
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|minorFrame
operator|=
name|requireNonNull
argument_list|(
name|minorFrame
argument_list|,
literal|"minorFrame"
argument_list|)
expr_stmt|;
name|this
operator|.
name|majorFrame
operator|=
name|requireNonNull
argument_list|(
name|majorFrame
argument_list|,
literal|"majorFrame"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|replicate
parameter_list|(
name|BuilderImpl
name|b
parameter_list|)
block|{
name|b
operator|.
name|addQuotient
argument_list|(
name|name
argument_list|,
name|minorFrame
operator|.
name|name
argument_list|,
name|majorFrame
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoreFrame
name|core
parameter_list|()
block|{
return|return
name|minorFrame
operator|.
name|core
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BigFraction
name|coreMultiplier
parameter_list|()
block|{
return|return
name|minorFrame
operator|.
name|coreMultiplier
argument_list|()
return|;
block|}
block|}
comment|/** Frame that defines an alias. */
specifier|static
class|class
name|AliasFrame
extends|extends
name|TimeFrameImpl
block|{
specifier|final
name|TimeFrameImpl
name|frame
decl_stmt|;
name|AliasFrame
parameter_list|(
name|String
name|name
parameter_list|,
name|TimeFrameImpl
name|frame
parameter_list|)
block|{
name|super
argument_list|(
name|frame
operator|.
name|frameSetSupplier
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|requireNonNull
argument_list|(
name|frame
argument_list|,
literal|"frame"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|replicate
parameter_list|(
name|BuilderImpl
name|b
parameter_list|)
block|{
name|b
operator|.
name|addAlias
argument_list|(
name|name
argument_list|,
name|frame
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoreFrame
name|core
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|BigFraction
name|coreMultiplier
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

