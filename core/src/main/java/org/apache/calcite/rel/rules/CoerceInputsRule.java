begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * CoerceInputsRule pre-casts inputs to a particular type. This can be used to  * assist operator implementations which impose requirements on their input  * types.  *  * @see CoreRules#COERCE_INPUTS  */
end_comment

begin_class
specifier|public
class|class
name|CoerceInputsRule
extends|extends
name|RelRule
argument_list|<
name|CoerceInputsRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a CoerceInputsRule. */
specifier|protected
name|CoerceInputsRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|CoerceInputsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|consumerRelClass
parameter_list|,
name|boolean
name|coerceNames
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withCoerceNames
argument_list|(
name|coerceNames
argument_list|)
operator|.
name|withOperandFor
argument_list|(
name|consumerRelClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|CoerceInputsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|consumerRelClass
parameter_list|,
name|boolean
name|coerceNames
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withCoerceNames
argument_list|(
name|coerceNames
argument_list|)
operator|.
name|withConsumerRelClass
argument_list|(
name|consumerRelClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|Convention
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|RelNode
name|consumerRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerRel
operator|.
name|getClass
argument_list|()
operator|!=
name|config
operator|.
name|consumerRelClass
argument_list|()
condition|)
block|{
comment|// require exact match on type
return|return;
block|}
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|consumerRel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|boolean
name|coerce
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|RelDataType
name|expectedType
init|=
name|consumerRel
operator|.
name|getExpectedInputRowType
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RelNode
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RelNode
name|newInput
init|=
name|RelOptUtil
operator|.
name|createCastRel
argument_list|(
name|input
argument_list|,
name|expectedType
argument_list|,
name|config
operator|.
name|isCoerceNames
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newInput
operator|!=
name|input
condition|)
block|{
name|newInputs
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newInput
argument_list|)
expr_stmt|;
name|coerce
operator|=
literal|true
expr_stmt|;
block|}
assert|assert
name|RelOptUtil
operator|.
name|areRowTypesEqual
argument_list|(
name|newInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRowType
argument_list|()
argument_list|,
name|expectedType
argument_list|,
name|config
operator|.
name|isCoerceNames
argument_list|()
argument_list|)
assert|;
block|}
if|if
condition|(
operator|!
name|coerce
condition|)
block|{
return|return;
block|}
name|RelNode
name|newConsumerRel
init|=
name|consumerRel
operator|.
name|copy
argument_list|(
name|consumerRel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newInputs
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newConsumerRel
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|EMPTY
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withCoerceNames
argument_list|(
literal|false
argument_list|)
operator|.
name|withOperandFor
argument_list|(
name|RelNode
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|CoerceInputsRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|CoerceInputsRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Whether to coerce names. */
annotation|@
name|ImmutableBeans
operator|.
name|Property
annotation|@
name|ImmutableBeans
operator|.
name|BooleanDefault
argument_list|(
literal|false
argument_list|)
name|boolean
name|isCoerceNames
parameter_list|()
function_decl|;
comment|/** Sets {@link #isCoerceNames()}. */
name|Config
name|withCoerceNames
parameter_list|(
name|boolean
name|coerceNames
parameter_list|)
function_decl|;
comment|/** Class of {@link RelNode} to coerce to. */
annotation|@
name|ImmutableBeans
operator|.
name|Property
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|consumerRelClass
parameter_list|()
function_decl|;
comment|/** Sets {@link #consumerRelClass()}. */
name|Config
name|withConsumerRelClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
parameter_list|)
function_decl|;
comment|/** Defines an operand tree for the given classes. */
specifier|default
name|Config
name|withOperandFor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|consumerRelClass
parameter_list|)
block|{
return|return
name|withConsumerRelClass
argument_list|(
name|consumerRelClass
argument_list|)
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|consumerRelClass
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"CoerceInputsRule:"
operator|+
name|consumerRelClass
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

