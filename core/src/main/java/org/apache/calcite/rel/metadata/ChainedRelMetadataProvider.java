begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link RelMetadataProvider}  * interface via the  * {@link org.apache.calcite.util.Glossary#CHAIN_OF_RESPONSIBILITY_PATTERN}.  *  *<p>When a consumer calls the {@link #apply} method to ask for a provider  * for a particular type of {@link RelNode} and {@link Metadata}, scans the list  * of underlying providers.</p>  */
end_comment

begin_class
specifier|public
class|class
name|ChainedRelMetadataProvider
implements|implements
name|RelMetadataProvider
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|RelMetadataProvider
argument_list|>
name|providers
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a chain.    */
specifier|protected
name|ChainedRelMetadataProvider
parameter_list|(
name|ImmutableList
argument_list|<
name|RelMetadataProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providers
operator|=
name|providers
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
name|apply
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Metadata
argument_list|>
name|metadataClass
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
argument_list|>
name|functions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RelMetadataProvider
name|provider
range|:
name|providers
control|)
block|{
specifier|final
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
name|function
init|=
name|provider
operator|.
name|apply
argument_list|(
name|relClass
argument_list|,
name|metadataClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|function
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|functions
operator|.
name|add
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|functions
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|null
return|;
case|case
literal|1
case|:
return|return
name|functions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
return|return
operator|new
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
argument_list|()
block|{
specifier|public
name|Metadata
name|apply
parameter_list|(
name|RelNode
name|input
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Function
argument_list|<
name|RelNode
argument_list|,
name|Metadata
argument_list|>
name|function
range|:
name|functions
control|)
block|{
specifier|final
name|Metadata
name|metadata
init|=
name|function
operator|.
name|apply
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|metadataList
operator|.
name|add
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Metadata
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|metadataClass
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|metadataClass
block|}
argument_list|,
operator|new
name|ChainedInvocationHandler
argument_list|(
name|metadataList
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Creates a chain. */
specifier|public
specifier|static
name|RelMetadataProvider
name|of
parameter_list|(
name|List
argument_list|<
name|RelMetadataProvider
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|ChainedRelMetadataProvider
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
comment|/** Invocation handler that calls a list of {@link Metadata} objects,    * returning the first non-null value. */
specifier|private
specifier|static
class|class
name|ChainedInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
decl_stmt|;
specifier|public
name|ChainedInvocationHandler
parameter_list|(
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
parameter_list|)
block|{
name|this
operator|.
name|metadataList
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|metadataList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|Metadata
name|metadata
range|:
name|metadataList
control|)
block|{
specifier|final
name|Object
name|o
init|=
name|method
operator|.
name|invoke
argument_list|(
name|metadata
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
return|return
name|o
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ChainedRelMetadataProvider.java
end_comment

end_unit

