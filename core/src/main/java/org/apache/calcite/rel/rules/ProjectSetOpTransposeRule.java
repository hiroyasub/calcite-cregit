begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SetOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes  * a {@link org.apache.calcite.rel.logical.LogicalProject}  * past a {@link org.apache.calcite.rel.core.SetOp}.  *  *<p>The children of the {@code SetOp} will project  * only the {@link RexInputRef}s referenced in the original  * {@code LogicalProject}.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectSetOpTransposeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|ProjectSetOpTransposeRule
name|INSTANCE
init|=
operator|new
name|ProjectSetOpTransposeRule
argument_list|(
name|PushProjector
operator|.
name|ExprCondition
operator|.
name|FALSE
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**    * Expressions that should be preserved in the projection    */
specifier|private
name|PushProjector
operator|.
name|ExprCondition
name|preserveExprCondition
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a ProjectSetOpTransposeRule with an explicit condition whether    * to preserve expressions.    *    * @param preserveExprCondition Condition whether to preserve expressions    */
specifier|public
name|ProjectSetOpTransposeRule
parameter_list|(
name|PushProjector
operator|.
name|ExprCondition
name|preserveExprCondition
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|SetOp
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|preserveExprCondition
operator|=
name|preserveExprCondition
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// implement RelOptRule
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LogicalProject
name|origProj
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SetOp
name|setOp
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// cannot push project past a distinct
if|if
condition|(
operator|!
name|setOp
operator|.
name|all
condition|)
block|{
return|return;
block|}
comment|// locate all fields referenced in the projection
name|PushProjector
name|pushProject
init|=
operator|new
name|PushProjector
argument_list|(
name|origProj
argument_list|,
literal|null
argument_list|,
name|setOp
argument_list|,
name|preserveExprCondition
argument_list|)
decl_stmt|;
name|pushProject
operator|.
name|locateAllRefs
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newSetOpInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
name|adjustments
init|=
name|pushProject
operator|.
name|getAdjustments
argument_list|()
decl_stmt|;
comment|// push the projects completely below the setop; this
comment|// is different from pushing below a join, where we decompose
comment|// to try to keep expensive expressions above the join,
comment|// because UNION ALL does not have any filtering effect,
comment|// and it is the only operator this rule currently acts on
for|for
control|(
name|RelNode
name|input
range|:
name|setOp
operator|.
name|getInputs
argument_list|()
control|)
block|{
comment|// be lazy:  produce two ProjectRels, and let another rule
comment|// merge them (could probably just clone origProj instead?)
name|LogicalProject
name|p
init|=
name|pushProject
operator|.
name|createProjectRefsAndExprs
argument_list|(
name|input
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|newSetOpInputs
operator|.
name|add
argument_list|(
name|pushProject
operator|.
name|createNewProject
argument_list|(
name|p
argument_list|,
name|adjustments
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create a new setop whose children are the ProjectRels created above
name|SetOp
name|newSetOp
init|=
name|setOp
operator|.
name|copy
argument_list|(
name|setOp
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newSetOpInputs
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newSetOp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ProjectSetOpTransposeRule.java
end_comment

end_unit

