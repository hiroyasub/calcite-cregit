begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * A MetadataHandlerProvider built on a RelMetadataProvider.  *  * Uses proxies to call the underlying metadata provider.  */
end_comment

begin_class
specifier|public
class|class
name|ProxyingMetadataHandlerProvider
implements|implements
name|MetadataHandlerProvider
block|{
specifier|private
specifier|final
name|RelMetadataProvider
name|provider
decl_stmt|;
comment|/**    * Create a proxying handler provider.    * @param provider The provider this will operate against.    */
specifier|public
name|ProxyingMetadataHandlerProvider
parameter_list|(
name|RelMetadataProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|MH
extends|extends
name|MetadataHandler
argument_list|<
name|?
argument_list|>
parameter_list|>
name|MH
name|handler
parameter_list|(
name|Class
argument_list|<
name|MH
argument_list|>
name|handlerClass
parameter_list|)
block|{
name|Type
index|[]
name|types
init|=
name|handlerClass
operator|.
name|getGenericInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|!=
literal|1
operator|||
operator|!
operator|(
name|types
index|[
literal|0
index|]
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unexpected failure. "
operator|+
name|handlerClass
argument_list|)
throw|;
block|}
name|ParameterizedType
name|pType
init|=
operator|(
name|ParameterizedType
operator|)
name|types
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|pType
operator|.
name|getRawType
argument_list|()
operator|!=
name|MetadataHandler
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unexpected failure. "
operator|+
name|handlerClass
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|metadataType
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|Field
name|field
decl_stmt|;
specifier|final
name|MetadataDef
argument_list|<
name|?
argument_list|>
name|def
decl_stmt|;
try|try
block|{
name|field
operator|=
name|metadataType
operator|.
name|getField
argument_list|(
literal|"DEF"
argument_list|)
expr_stmt|;
name|def
operator|=
name|requireNonNull
argument_list|(
operator|(
name|MetadataDef
argument_list|<
name|?
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"Unexpected failure. "
operator|+
name|handlerClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
name|def
operator|.
name|methods
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|methodMap
init|=
name|methods
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Method
operator|::
name|getName
argument_list|,
name|f
lambda|->
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|InvocationHandler
name|handler
init|=
parameter_list|(
name|proxy
parameter_list|,
name|method
parameter_list|,
name|args
parameter_list|)
lambda|->
block|{
name|Method
name|metadataMethod
init|=
name|requireNonNull
argument_list|(
name|methodMap
operator|.
name|get
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"Not supported: "
operator|+
name|method
argument_list|)
decl_stmt|;
name|RelNode
name|rel
init|=
name|requireNonNull
argument_list|(
operator|(
name|RelNode
operator|)
name|args
index|[
literal|0
index|]
argument_list|,
literal|"rel must be non null"
argument_list|)
decl_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|requireNonNull
argument_list|(
operator|(
name|RelMetadataQuery
operator|)
name|args
index|[
literal|1
index|]
argument_list|,
literal|"mq must be non null"
argument_list|)
decl_stmt|;
comment|// using deprecated RelMetadataProvider method here as the non-deprecated methods completely
comment|// sidestep the purpose of RelMetadataProvider reflection-based functionality.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|UnboundMetadata
name|metadata
init|=
name|provider
operator|.
name|apply
argument_list|(
name|rel
operator|.
name|getClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Metadata
argument_list|>
operator|)
name|metadataType
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|Method
name|handlerMethod
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|handlerClass
operator|.
name|getMethods
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|metadataMethod
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find method."
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"No handler for method [%s] applied to "
operator|+
literal|"argument of type [%s]; we recommend you create a catch-all "
operator|+
literal|"(RelNode) handler"
argument_list|,
name|handlerMethod
argument_list|,
name|rel
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|Metadata
name|bound
init|=
name|requireNonNull
argument_list|(
name|metadata
argument_list|,
literal|"expected defined metadata"
argument_list|)
operator|.
name|bind
argument_list|(
name|rel
argument_list|,
name|mq
argument_list|)
decl_stmt|;
name|Object
index|[]
name|abbreviatedArgs
init|=
operator|new
name|Object
index|[
name|args
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|2
argument_list|,
name|abbreviatedArgs
argument_list|,
literal|0
argument_list|,
name|abbreviatedArgs
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|metadataMethod
operator|.
name|invoke
argument_list|(
name|bound
argument_list|,
name|abbreviatedArgs
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|CyclicMetadataException
condition|)
block|{
throw|throw
operator|(
name|CyclicMetadataException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
return|return
operator|(
name|MH
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|handlerClass
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|handlerClass
block|}
argument_list|,
name|handler
argument_list|)
return|;
block|}
block|}
end_class

end_unit

