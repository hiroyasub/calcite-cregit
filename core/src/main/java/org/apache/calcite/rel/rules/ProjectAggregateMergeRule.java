begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Planner rule that matches a {@link Project} on a {@link Aggregate}  * and projects away aggregate calls that are not used.  *  *<p>Also converts {@code COALESCE(SUM(x), 0)} to {@code SUM0(x)}.  * This transformation is useful because there are cases where  * {@link AggregateMergeRule} can merge {@code SUM0} but not {@code SUM}.  *  * @see CoreRules#PROJECT_AGGREGATE_MERGE  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|ProjectAggregateMergeRule
extends|extends
name|RelRule
argument_list|<
name|ProjectAggregateMergeRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
comment|/** Creates a ProjectAggregateMergeRule. */
specifier|protected
name|ProjectAggregateMergeRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
decl_stmt|;
comment|// Do a quick check. If all aggregate calls are used, and there are no CASE
comment|// expressions, there is nothing to do.
specifier|final
name|ImmutableBitSet
name|bits
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|bits
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|kindCount
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|SqlKind
operator|.
name|CASE
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Replace 'COALESCE(SUM(x), 0)' with 'SUM0(x)' wherever it occurs.
comment|// Add 'SUM0(x)' to the aggregate call list, if necessary.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexShuttle
name|shuttle
init|=
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CASE
case|:
comment|// Do we have "CASE(IS NOT NULL($0), CAST($0):INTEGER NOT NULL, 0)"?
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|operands
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|IS_NOT_NULL
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|INPUT_REF
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|INPUT_REF
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
specifier|final
name|RexCall
name|isNotNull
init|=
operator|(
name|RexCall
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexInputRef
name|ref0
init|=
operator|(
name|RexInputRef
operator|)
name|isNotNull
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexCall
name|cast
init|=
operator|(
name|RexCall
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RexInputRef
name|ref1
init|=
operator|(
name|RexInputRef
operator|)
name|cast
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref0
operator|.
name|getIndex
argument_list|()
operator|==
name|ref1
operator|.
name|getIndex
argument_list|()
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|ZERO
argument_list|)
condition|)
block|{
specifier|final
name|int
name|aggCallIndex
init|=
name|ref1
operator|.
name|getIndex
argument_list|()
operator|-
name|aggregate
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggCallIndex
operator|>=
literal|0
condition|)
block|{
specifier|final
name|AggregateCall
name|aggCall
init|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|get
argument_list|(
name|aggCallIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|SUM
condition|)
block|{
name|int
name|j
init|=
name|findSum0
argument_list|(
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|aggCall
argument_list|,
name|aggCallList
argument_list|)
decl_stmt|;
return|return
name|cluster
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|call
operator|.
name|type
argument_list|,
name|j
argument_list|)
return|;
block|}
block|}
block|}
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects2
init|=
name|shuttle
operator|.
name|visitList
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|bits2
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|projects2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Build the mapping that we will apply to the project expressions.
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|FUNCTION
argument_list|,
name|aggregate
operator|.
name|getGroupCount
argument_list|()
operator|+
name|aggCallList
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapping
operator|.
name|getSourceCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|aggregate
operator|.
name|getGroupCount
argument_list|()
condition|)
block|{
comment|// Field is a group key. All group keys are retained.
name|mapping
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|j
operator|++
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bits2
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// Field is an aggregate call. It is used.
name|mapping
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|j
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Field is an aggregate call. It is not used. Remove it.
name|aggCallList
operator|.
name|remove
argument_list|(
name|j
operator|-
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RelBuilder
name|builder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
operator|(
name|Iterable
argument_list|<
name|ImmutableBitSet
argument_list|>
operator|)
name|aggregate
operator|.
name|groupSets
argument_list|)
argument_list|,
name|aggCallList
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|RexPermuteInputsShuttle
operator|.
name|of
argument_list|(
name|mapping
argument_list|)
operator|.
name|visitList
argument_list|(
name|projects2
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Given a call to SUM, finds a call to SUM0 with identical arguments,    * or creates one and adds it to the list. Returns the index. */
specifier|private
specifier|static
name|int
name|findSum0
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|AggregateCall
name|sum
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
parameter_list|)
block|{
specifier|final
name|AggregateCall
name|sum0
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SUM0
argument_list|,
name|sum
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|sum
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|sum
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|sum
operator|.
name|getArgList
argument_list|()
argument_list|,
name|sum
operator|.
name|filterArg
argument_list|,
name|sum
operator|.
name|distinctKeys
argument_list|,
name|sum
operator|.
name|collation
argument_list|,
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|sum
operator|.
name|type
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|aggCallList
operator|.
name|indexOf
argument_list|(
name|sum0
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
name|aggCallList
operator|.
name|add
argument_list|(
name|sum0
argument_list|)
expr_stmt|;
return|return
name|aggCallList
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
comment|/** Returns the number of calls of a given kind in a list of expressions. */
specifier|private
specifier|static
name|int
name|kindCount
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|nodes
parameter_list|,
specifier|final
name|SqlKind
name|kind
parameter_list|)
block|{
specifier|final
name|AtomicInteger
name|kindCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|new
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|kind
condition|)
block|{
name|kindCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
operator|.
name|visitEach
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
return|return
name|kindCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|ImmutableProjectAggregateMergeRule
operator|.
name|Config
operator|.
name|of
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|)
operator|.
name|oneInput
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|ProjectAggregateMergeRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|ProjectAggregateMergeRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

