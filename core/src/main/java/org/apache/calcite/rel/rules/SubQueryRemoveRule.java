begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Collect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Correlate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|LogicVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexSubQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlQuantifyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|RelDecorrelator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
operator|.
name|last
import|;
end_import

begin_comment
comment|/**  * Transform that converts IN, EXISTS and scalar sub-queries into joins.  *  *<p>Sub-queries are represented by {@link RexSubQuery} expressions.  *  *<p>A sub-query may or may not be correlated. If a sub-query is correlated,  * the wrapped {@link RelNode} will contain a {@link RexCorrelVariable} before  * the rewrite, and the product of the rewrite will be a {@link Correlate}.  * The Correlate can be removed using {@link RelDecorrelator}.  *  * @see CoreRules#FILTER_SUB_QUERY_TO_CORRELATE  * @see CoreRules#PROJECT_SUB_QUERY_TO_CORRELATE  * @see CoreRules#JOIN_SUB_QUERY_TO_CORRELATE  */
end_comment

begin_class
annotation|@
name|Value
operator|.
name|Enclosing
specifier|public
class|class
name|SubQueryRemoveRule
extends|extends
name|RelRule
argument_list|<
name|SubQueryRemoveRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
comment|/** Creates a SubQueryRemoveRule. */
specifier|protected
name|SubQueryRemoveRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|config
operator|.
name|matchHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|config
operator|.
name|matchHandler
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|,
name|call
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RexNode
name|apply
parameter_list|(
name|RexSubQuery
name|e
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|RelOptUtil
operator|.
name|Logic
name|logic
parameter_list|,
name|RelBuilder
name|builder
parameter_list|,
name|int
name|inputCount
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|SCALAR_QUERY
case|:
return|return
name|rewriteScalarQuery
argument_list|(
name|e
argument_list|,
name|variablesSet
argument_list|,
name|builder
argument_list|,
name|inputCount
argument_list|,
name|offset
argument_list|)
return|;
case|case
name|ARRAY_QUERY_CONSTRUCTOR
case|:
return|return
name|rewriteCollection
argument_list|(
name|e
argument_list|,
name|SqlTypeName
operator|.
name|ARRAY
argument_list|,
name|variablesSet
argument_list|,
name|builder
argument_list|,
name|inputCount
argument_list|,
name|offset
argument_list|)
return|;
case|case
name|MAP_QUERY_CONSTRUCTOR
case|:
return|return
name|rewriteCollection
argument_list|(
name|e
argument_list|,
name|SqlTypeName
operator|.
name|MAP
argument_list|,
name|variablesSet
argument_list|,
name|builder
argument_list|,
name|inputCount
argument_list|,
name|offset
argument_list|)
return|;
case|case
name|MULTISET_QUERY_CONSTRUCTOR
case|:
return|return
name|rewriteCollection
argument_list|(
name|e
argument_list|,
name|SqlTypeName
operator|.
name|MULTISET
argument_list|,
name|variablesSet
argument_list|,
name|builder
argument_list|,
name|inputCount
argument_list|,
name|offset
argument_list|)
return|;
case|case
name|SOME
case|:
return|return
name|rewriteSome
argument_list|(
name|e
argument_list|,
name|variablesSet
argument_list|,
name|builder
argument_list|)
return|;
case|case
name|IN
case|:
return|return
name|rewriteIn
argument_list|(
name|e
argument_list|,
name|variablesSet
argument_list|,
name|logic
argument_list|,
name|builder
argument_list|,
name|offset
argument_list|)
return|;
case|case
name|EXISTS
case|:
return|return
name|rewriteExists
argument_list|(
name|e
argument_list|,
name|variablesSet
argument_list|,
name|logic
argument_list|,
name|builder
argument_list|)
return|;
case|case
name|UNIQUE
case|:
return|return
name|rewriteUnique
argument_list|(
name|e
argument_list|,
name|builder
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Rewrites a scalar sub-query into an    * {@link org.apache.calcite.rel.core.Aggregate}.    *    * @param e            Scalar sub-query to rewrite    * @param variablesSet A set of variables used by a relational    *                     expression of the specified RexSubQuery    * @param builder      Builder    * @param offset       Offset to shift {@link RexInputRef}    *    * @return Expression that may be used to replace the RexSubQuery    */
specifier|private
specifier|static
name|RexNode
name|rewriteScalarQuery
parameter_list|(
name|RexSubQuery
name|e
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|RelBuilder
name|builder
parameter_list|,
name|int
name|inputCount
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
expr_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|e
operator|.
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Boolean
name|unique
init|=
name|mq
operator|.
name|areColumnsUnique
argument_list|(
name|builder
operator|.
name|peek
argument_list|()
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|unique
operator|==
literal|null
operator|||
operator|!
name|unique
condition|)
block|{
name|builder
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|()
argument_list|,
name|builder
operator|.
name|aggregateCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SINGLE_VALUE
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
return|return
name|field
argument_list|(
name|builder
argument_list|,
name|inputCount
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**    * Rewrites a sub-query into a    * {@link org.apache.calcite.rel.core.Collect}.    *    * @param e            Sub-query to rewrite    * @param collectionType Collection type (ARRAY, MAP, MULTISET)    * @param variablesSet A set of variables used by a relational    *                     expression of the specified RexSubQuery    * @param builder      Builder    * @param offset       Offset to shift {@link RexInputRef}    * @return Expression that may be used to replace the RexSubQuery    */
specifier|private
specifier|static
name|RexNode
name|rewriteCollection
parameter_list|(
name|RexSubQuery
name|e
parameter_list|,
name|SqlTypeName
name|collectionType
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|RelBuilder
name|builder
parameter_list|,
name|int
name|inputCount
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
expr_stmt|;
name|builder
operator|.
name|push
argument_list|(
name|Collect
operator|.
name|create
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|collectionType
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
return|return
name|field
argument_list|(
name|builder
argument_list|,
name|inputCount
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**    * Rewrites a SOME sub-query into a {@link Join}.    *    * @param e            SOME sub-query to rewrite    * @param builder      Builder    *    * @return Expression that may be used to replace the RexSubQuery    */
specifier|private
specifier|static
name|RexNode
name|rewriteSome
parameter_list|(
name|RexSubQuery
name|e
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|RelBuilder
name|builder
parameter_list|)
block|{
comment|// Most general case, where the left and right keys might have nulls, and
comment|// caller requires 3-valued logic return.
comment|//
comment|// select e.deptno, e.deptno< some (select deptno from emp) as v
comment|// from emp as e
comment|//
comment|// becomes
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when q.c = 0 then false // sub-query is empty
comment|//   when (e.deptno< q.m) is true then true
comment|//   when q.c> q.d then unknown // sub-query has at least one null
comment|//   else e.deptno< q.m
comment|//   end as v
comment|// from emp as e
comment|// cross join (
comment|//   select max(deptno) as m, count(*) as c, count(deptno) as d
comment|//   from emp) as q
comment|//
specifier|final
name|SqlQuantifyOperator
name|op
init|=
operator|(
name|SqlQuantifyOperator
operator|)
name|e
operator|.
name|op
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|comparisonKind
condition|)
block|{
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|NOT_EQUALS
case|:
break|break;
default|default:
comment|// "SOME =" should have been rewritten into IN.
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected "
operator|+
name|op
argument_list|)
throw|;
block|}
specifier|final
name|RexNode
name|caseRexNode
decl_stmt|;
specifier|final
name|RexNode
name|literalFalse
init|=
name|builder
operator|.
name|literal
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literalTrue
init|=
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literalUnknown
init|=
name|builder
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeNullLiteral
argument_list|(
name|literalFalse
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SqlAggFunction
name|minMax
init|=
name|op
operator|.
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN
operator|||
name|op
operator|.
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
condition|?
name|SqlStdOperatorTable
operator|.
name|MIN
else|:
name|SqlStdOperatorTable
operator|.
name|MAX
decl_stmt|;
if|if
condition|(
name|variablesSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|op
operator|.
name|comparisonKind
condition|)
block|{
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
comment|// for non-correlated case queries such as
comment|// select e.deptno, e.deptno< some (select deptno from emp) as v
comment|// from emp as e
comment|//
comment|// becomes
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when q.c = 0 then false // sub-query is empty
comment|//   when (e.deptno< q.m) is true then true
comment|//   when q.c> q.d then unknown // sub-query has at least one null
comment|//   else e.deptno< q.m
comment|//   end as v
comment|// from emp as e
comment|// cross join (
comment|//   select max(deptno) as m, count(*) as c, count(deptno) as d
comment|//   from emp) as q
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|()
argument_list|,
name|builder
operator|.
name|aggregateCall
argument_list|(
name|minMax
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"m"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"d"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"q"
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|)
expr_stmt|;
name|caseRexNode
operator|=
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|literalFalse
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|op
operator|.
name|comparisonKind
argument_list|)
argument_list|,
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|literalTrue
argument_list|,
name|builder
operator|.
name|greaterThan
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|literalUnknown
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|op
operator|.
name|comparisonKind
argument_list|)
argument_list|,
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT_EQUALS
case|:
comment|// for non-correlated case queries such as
comment|// select e.deptno, e.deptno<> some (select deptno from emp) as v
comment|// from emp as e
comment|//
comment|// becomes
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when q.c = 0 then false // sub-query is empty
comment|//   when e.deptno is null then unknown
comment|//   when q.c<> q.d&& q.d<= 1 then e.deptno != m || unknown
comment|//   when q.d = 1
comment|//     then e.deptno != m // sub-query has the distinct result
comment|//   else true
comment|//   end as v
comment|// from emp as e
comment|// cross join (
comment|//   select count(*) as c, count(deptno) as d, max(deptno) as m
comment|//   from (select distinct deptno from emp)) as q
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
expr_stmt|;
name|builder
operator|.
name|distinct
argument_list|()
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|()
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"d"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|max
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"m"
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"q"
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|)
expr_stmt|;
name|caseRexNode
operator|=
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|literalFalse
argument_list|,
name|builder
operator|.
name|isNull
argument_list|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|literalUnknown
argument_list|,
name|builder
operator|.
name|and
argument_list|(
name|builder
operator|.
name|notEquals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|lessThanOrEqual
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|or
argument_list|(
name|builder
operator|.
name|notEquals
argument_list|(
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|,
name|literalUnknown
argument_list|)
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|notEquals
argument_list|(
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|,
name|literalTrue
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not possible - per above check"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
specifier|final
name|String
name|indicator
init|=
literal|"trueLiteral"
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|parentQueryFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|comparisonKind
condition|)
block|{
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
comment|// for correlated case queries such as
comment|//
comment|// select e.deptno, e.deptno< some (
comment|//   select deptno from emp where emp.name = e.name) as v
comment|// from emp as e
comment|//
comment|// becomes
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when indicator is null then false // sub-query is empty for corresponding corr value
comment|//   when q.c = 0 then false // sub-query is empty
comment|//   when (e.deptno< q.m) is true then true
comment|//   when q.c> q.d then unknown // sub-query has at least one null
comment|//   else e.deptno< q.m
comment|//   end as v
comment|// from emp as e
comment|// left outer join (
comment|//   select name, max(deptno) as m, count(*) as c, count(deptno) as d,
comment|//       "alwaysTrue" as indicator
comment|//   from emp group by name) as q on e.name = q.name
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|()
argument_list|,
name|builder
operator|.
name|aggregateCall
argument_list|(
name|minMax
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"m"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"d"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parentQueryFields
operator|.
name|addAll
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
expr_stmt|;
name|parentQueryFields
operator|.
name|add
argument_list|(
name|builder
operator|.
name|alias
argument_list|(
name|literalTrue
argument_list|,
name|indicator
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|parentQueryFields
argument_list|)
operator|.
name|as
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|literalTrue
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
name|caseRexNode
operator|=
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|builder
operator|.
name|isNull
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
name|indicator
argument_list|)
argument_list|)
argument_list|,
name|literalFalse
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|literalFalse
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|op
operator|.
name|comparisonKind
argument_list|)
argument_list|,
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|literalTrue
argument_list|,
name|builder
operator|.
name|greaterThan
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|literalUnknown
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|op
operator|.
name|comparisonKind
argument_list|)
argument_list|,
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT_EQUALS
case|:
comment|// for correlated case queries such as
comment|//
comment|// select e.deptno, e.deptno<> some (
comment|//   select deptno from emp where emp.name = e.name) as v
comment|// from emp as e
comment|//
comment|// becomes
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when indicator is null
comment|//     then false // sub-query is empty for corresponding corr value
comment|//   when q.c = 0 then false // sub-query is empty
comment|//   when e.deptno is null then unknown
comment|//   when q.c<> q.d&& q.d<= 1
comment|//     then e.deptno != m || unknown
comment|//   when q.d = 1
comment|//     then e.deptno != m // sub-query has the distinct result
comment|//   else true
comment|//   end as v
comment|// from emp as e
comment|// left outer join (
comment|//   select name, count(distinct *) as c, count(distinct deptno) as d,
comment|//       max(deptno) as m, "alwaysTrue" as indicator
comment|//   from emp group by name) as q on e.name = q.name
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|()
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|true
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|true
argument_list|,
literal|"d"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|max
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|parentQueryFields
operator|.
name|addAll
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
expr_stmt|;
name|parentQueryFields
operator|.
name|add
argument_list|(
name|builder
operator|.
name|alias
argument_list|(
name|literalTrue
argument_list|,
name|indicator
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|parentQueryFields
argument_list|)
operator|.
name|as
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
comment|// TODO use projectPlus
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|literalTrue
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
name|caseRexNode
operator|=
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|builder
operator|.
name|isNull
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
name|indicator
argument_list|)
argument_list|)
argument_list|,
name|literalFalse
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|literalFalse
argument_list|,
name|builder
operator|.
name|isNull
argument_list|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|literalUnknown
argument_list|,
name|builder
operator|.
name|and
argument_list|(
name|builder
operator|.
name|notEquals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|lessThanOrEqual
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|or
argument_list|(
name|builder
operator|.
name|notEquals
argument_list|(
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|,
name|literalUnknown
argument_list|)
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|notEquals
argument_list|(
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"q"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
argument_list|,
name|literalTrue
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not possible - per above check"
argument_list|)
throw|;
block|}
block|}
comment|// CASE statement above is created with nullable boolean type, but it might
comment|// not be correct.  If the original sub-query node's type is not nullable it
comment|// is guaranteed for case statement to not produce NULLs. Therefore to avoid
comment|// planner complaining we need to add cast.  Note that nullable type is
comment|// created due to the MIN aggregate call, since there is no GROUP BY.
if|if
condition|(
operator|!
name|e
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|builder
operator|.
name|cast
argument_list|(
name|caseRexNode
argument_list|,
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|caseRexNode
return|;
block|}
comment|/**    * Rewrites an EXISTS RexSubQuery into a {@link Join}.    *    * @param e            EXISTS sub-query to rewrite    * @param variablesSet A set of variables used by a relational    *                     expression of the specified RexSubQuery    * @param logic        Logic for evaluating    * @param builder      Builder    *    * @return Expression that may be used to replace the RexSubQuery    */
specifier|private
specifier|static
name|RexNode
name|rewriteExists
parameter_list|(
name|RexSubQuery
name|e
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|RelOptUtil
operator|.
name|Logic
name|logic
parameter_list|,
name|RelBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|builder
operator|.
name|alias
argument_list|(
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|logic
condition|)
block|{
case|case
name|TRUE
case|:
comment|// Handles queries with single EXISTS in filter condition:
comment|// select e.deptno from emp as e
comment|// where exists (select deptno from emp)
name|builder
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|as
argument_list|(
literal|"dt"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
return|;
default|default:
name|builder
operator|.
name|distinct
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|as
argument_list|(
literal|"dt"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|isNotNull
argument_list|(
name|last
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Rewrites a UNIQUE RexSubQuery into an EXISTS RexSubQuery.    *    *<p>For example, rewrites the UNIQUE sub-query:    *    *<pre>{@code    * UNIQUE (SELECT PUBLISHED_IN    * FROM BOOK    * WHERE AUTHOR_ID = 3)    * }</pre>    *    *<p>to the following EXISTS sub-query:    *    *<pre>{@code    * NOT EXISTS (    *   SELECT * FROM (    *     SELECT PUBLISHED_IN    *     FROM BOOK    *     WHERE AUTHOR_ID = 3    *   ) T    *   WHERE (T.PUBLISHED_IN) IS NOT NULL    *   GROUP BY T.PUBLISHED_IN    *   HAVING COUNT(*)> 1    * )    * }</pre>    *    * @param e            UNIQUE sub-query to rewrite    * @param builder      Builder    *    * @return Expression that may be used to replace the RexSubQuery    */
specifier|private
specifier|static
name|RexNode
name|rewriteUnique
parameter_list|(
name|RexSubQuery
name|e
parameter_list|,
name|RelBuilder
name|builder
parameter_list|)
block|{
comment|// if sub-query always return unique value.
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|e
operator|.
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|Boolean
name|isUnique
init|=
name|mq
operator|.
name|areRowsUnique
argument_list|(
name|e
operator|.
name|rel
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUnique
operator|!=
literal|null
operator|&&
name|isUnique
condition|)
block|{
return|return
name|builder
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|notNullCondition
init|=
name|builder
operator|.
name|fields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|builder
operator|::
name|isNotNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|filter
argument_list|(
name|notNullCondition
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
argument_list|,
name|builder
operator|.
name|countStar
argument_list|(
literal|"c"
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|greaterThan
argument_list|(
name|last
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|relNode
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|RexSubQuery
operator|.
name|exists
argument_list|(
name|relNode
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Rewrites an IN RexSubQuery into a {@link Join}.    *    * @param e            IN sub-query to rewrite    * @param variablesSet A set of variables used by a relational    *                     expression of the specified RexSubQuery    * @param logic        Logic for evaluating    * @param builder      Builder    * @param offset       Offset to shift {@link RexInputRef}    *    * @return Expression that may be used to replace the RexSubQuery    */
specifier|private
specifier|static
name|RexNode
name|rewriteIn
parameter_list|(
name|RexSubQuery
name|e
parameter_list|,
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
parameter_list|,
name|RelOptUtil
operator|.
name|Logic
name|logic
parameter_list|,
name|RelBuilder
name|builder
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
comment|// Most general case, where the left and right keys might have nulls, and
comment|// caller requires 3-valued logic return.
comment|//
comment|// select e.deptno, e.deptno in (select deptno from emp)
comment|// from emp as e
comment|//
comment|// becomes
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when ct.c = 0 then false
comment|//   when e.deptno is null then null
comment|//   when dt.i is not null then true
comment|//   when ct.ck< ct.c then null
comment|//   else false
comment|//   end
comment|// from emp as e
comment|// left join (
comment|//   (select count(*) as c, count(deptno) as ck from emp) as ct
comment|//   cross join (select distinct deptno, true as i from emp)) as dt
comment|//   on e.deptno = dt.deptno
comment|//
comment|// If keys are not null we can remove "ct" and simplify to
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when dt.i is not null then true
comment|//   else false
comment|//   end
comment|// from emp as e
comment|// left join (select distinct deptno, true as i from emp) as dt
comment|//   on e.deptno = dt.deptno
comment|//
comment|// We could further simplify to
comment|//
comment|// select e.deptno,
comment|//   dt.i is not null
comment|// from emp as e
comment|// left join (select distinct deptno, true as i from emp) as dt
comment|//   on e.deptno = dt.deptno
comment|//
comment|// but have not yet.
comment|//
comment|// If the logic is TRUE we can just kill the record if the condition
comment|// evaluates to FALSE or UNKNOWN. Thus the query simplifies to an inner
comment|// join:
comment|//
comment|// select e.deptno,
comment|//   true
comment|// from emp as e
comment|// inner join (select distinct deptno from emp) as dt
comment|//   on e.deptno = dt.deptno
comment|//
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
decl_stmt|;
comment|// for the case when IN has only literal operands, it may be handled
comment|// in the simpler way:
comment|//
comment|// select e.deptno, 123456 in (select deptno from emp)
comment|// from emp as e
comment|//
comment|// becomes
comment|//
comment|// select e.deptno,
comment|//   case
comment|//   when dt.c IS NULL THEN FALSE
comment|//   when e.deptno IS NULL THEN NULL
comment|//   when dt.cs IS FALSE THEN NULL
comment|//   when dt.cs IS NOT NULL THEN TRUE
comment|//   else false
comment|//   end
comment|// from emp AS e
comment|// cross join (
comment|//   select distinct deptno is not null as cs, count(*) as c
comment|//   from emp
comment|//   where deptno = 123456 or deptno is null or e.deptno is null
comment|//   order by cs desc limit 1) as dt
comment|//
name|boolean
name|allLiterals
init|=
name|RexUtil
operator|.
name|allLiterals
argument_list|(
name|e
operator|.
name|getOperands
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|expressionOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|e
operator|.
name|getOperands
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|keyIsNulls
init|=
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|operand
lambda|->
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|builder
operator|::
name|isNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|trueLiteral
init|=
name|builder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|falseLiteral
init|=
name|builder
operator|.
name|literal
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|unknownLiteral
init|=
name|builder
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeNullLiteral
argument_list|(
name|trueLiteral
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allLiterals
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conditions
init|=
name|Pair
operator|.
name|zip
argument_list|(
name|expressionOperands
argument_list|,
name|fields
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pair
lambda|->
name|builder
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|left
argument_list|,
name|pair
operator|.
name|right
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|logic
condition|)
block|{
case|case
name|TRUE
case|:
case|case
name|TRUE_FALSE
case|:
name|builder
operator|.
name|filter
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|builder
operator|.
name|alias
argument_list|(
name|trueLiteral
argument_list|,
literal|"cs"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|distinct
argument_list|()
expr_stmt|;
break|break;
default|default:
name|List
argument_list|<
name|RexNode
argument_list|>
name|isNullOperands
init|=
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|builder
operator|::
name|isNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// uses keyIsNulls conditions in the filter to avoid empty results
name|isNullOperands
operator|.
name|addAll
argument_list|(
name|keyIsNulls
argument_list|)
expr_stmt|;
name|builder
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|or
argument_list|(
name|builder
operator|.
name|and
argument_list|(
name|conditions
argument_list|)
argument_list|,
name|builder
operator|.
name|or
argument_list|(
name|isNullOperands
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RexNode
name|project
init|=
name|builder
operator|.
name|and
argument_list|(
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|builder
operator|::
name|isNotNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|builder
operator|.
name|alias
argument_list|(
name|project
argument_list|,
literal|"cs"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|variablesSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"cs"
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// sorts input with desc order since we are interested
comment|// only in the case when one of the values is true.
comment|// When true value is absent then we are interested
comment|// only in false value.
name|builder
operator|.
name|sortLimit
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|builder
operator|.
name|desc
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"cs"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|distinct
argument_list|()
expr_stmt|;
block|}
block|}
comment|// clears expressionOperands and fields lists since
comment|// all expressions were used in the filter
name|expressionOperands
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|logic
condition|)
block|{
case|case
name|TRUE
case|:
name|builder
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRUE_FALSE_UNKNOWN
case|:
case|case
name|UNKNOWN_AS_TRUE
case|:
comment|// Builds the cross join
name|builder
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|()
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"ck"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|as
argument_list|(
literal|"ct"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|variablesSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|trueLiteral
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|trueLiteral
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
literal|2
expr_stmt|;
name|builder
operator|.
name|push
argument_list|(
name|e
operator|.
name|rel
argument_list|)
expr_stmt|;
comment|// fall through
default|default:
name|fields
operator|.
name|add
argument_list|(
name|builder
operator|.
name|alias
argument_list|(
name|trueLiteral
argument_list|,
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|builder
operator|.
name|distinct
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|as
argument_list|(
literal|"dt"
argument_list|)
expr_stmt|;
name|int
name|refOffset
init|=
name|offset
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conditions
init|=
name|Pair
operator|.
name|zip
argument_list|(
name|expressionOperands
argument_list|,
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pair
lambda|->
name|builder
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|left
argument_list|,
name|RexUtil
operator|.
name|shift
argument_list|(
name|pair
operator|.
name|right
argument_list|,
name|refOffset
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|logic
condition|)
block|{
case|case
name|TRUE
case|:
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|builder
operator|.
name|and
argument_list|(
name|conditions
argument_list|)
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
return|return
name|trueLiteral
return|;
default|default:
break|break;
block|}
comment|// Now the left join
name|builder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|builder
operator|.
name|and
argument_list|(
name|conditions
argument_list|)
argument_list|,
name|variablesSet
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|RexLiteral
name|b
init|=
name|trueLiteral
decl_stmt|;
switch|switch
condition|(
name|logic
condition|)
block|{
case|case
name|TRUE_FALSE_UNKNOWN
case|:
name|b
operator|=
name|unknownLiteral
expr_stmt|;
comment|// fall through
case|case
name|UNKNOWN_AS_TRUE
case|:
if|if
condition|(
name|allLiterals
condition|)
block|{
comment|// Considers case when right side of IN is empty
comment|// for the case of non-correlated sub-queries
if|if
condition|(
name|variablesSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|builder
operator|.
name|isNull
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|falseLiteral
argument_list|)
expr_stmt|;
block|}
name|operands
operator|.
name|add
argument_list|(
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"cs"
argument_list|)
argument_list|,
name|falseLiteral
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operands
operator|.
name|add
argument_list|(
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"ct"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|falseLiteral
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|keyIsNulls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|builder
operator|.
name|or
argument_list|(
name|keyIsNulls
argument_list|)
argument_list|,
name|unknownLiteral
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allLiterals
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|builder
operator|.
name|isNotNull
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"cs"
argument_list|)
argument_list|)
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operands
operator|.
name|add
argument_list|(
name|builder
operator|.
name|isNotNull
argument_list|(
name|last
argument_list|(
name|builder
operator|.
name|fields
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allLiterals
condition|)
block|{
switch|switch
condition|(
name|logic
condition|)
block|{
case|case
name|TRUE_FALSE_UNKNOWN
case|:
case|case
name|UNKNOWN_AS_TRUE
case|:
name|operands
operator|.
name|add
argument_list|(
name|builder
operator|.
name|lessThan
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"ct"
argument_list|,
literal|"ck"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ct"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|operands
operator|.
name|add
argument_list|(
name|falseLiteral
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|operands
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a reference to a particular field, by offset, across several    * inputs on a {@link RelBuilder}'s stack. */
specifier|private
specifier|static
name|RexInputRef
name|field
parameter_list|(
name|RelBuilder
name|builder
parameter_list|,
name|int
name|inputCount
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
for|for
control|(
name|int
name|inputOrdinal
init|=
literal|0
init|;
condition|;
control|)
block|{
specifier|final
name|RelNode
name|r
init|=
name|builder
operator|.
name|peek
argument_list|(
name|inputCount
argument_list|,
name|inputOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|<
name|r
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
return|return
name|builder
operator|.
name|field
argument_list|(
name|inputCount
argument_list|,
name|inputOrdinal
argument_list|,
name|offset
argument_list|)
return|;
block|}
operator|++
name|inputOrdinal
expr_stmt|;
name|offset
operator|-=
name|r
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Returns a list of expressions that project the first {@code fieldCount}    * fields of the top input on a {@link RelBuilder}'s stack. */
specifier|private
specifier|static
name|List
argument_list|<
name|RexNode
argument_list|>
name|fields
parameter_list|(
name|RelBuilder
name|builder
parameter_list|,
name|int
name|fieldCount
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|builder
operator|.
name|field
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|projects
return|;
block|}
specifier|private
specifier|static
name|void
name|matchProject
parameter_list|(
name|SubQueryRemoveRule
name|rule
parameter_list|,
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RexSubQuery
name|e
init|=
name|RexUtil
operator|.
name|SubQueryFinder
operator|.
name|find
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|e
operator|!=
literal|null
assert|;
specifier|final
name|RelOptUtil
operator|.
name|Logic
name|logic
init|=
name|LogicVisitor
operator|.
name|find
argument_list|(
name|RelOptUtil
operator|.
name|Logic
operator|.
name|TRUE_FALSE_UNKNOWN
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|builder
operator|.
name|push
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|builder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
init|=
name|RelOptUtil
operator|.
name|getVariablesUsed
argument_list|(
name|e
operator|.
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|target
init|=
name|rule
operator|.
name|apply
argument_list|(
name|e
argument_list|,
name|variablesSet
argument_list|,
name|logic
argument_list|,
name|builder
argument_list|,
literal|1
argument_list|,
name|fieldCount
argument_list|)
decl_stmt|;
specifier|final
name|RexShuttle
name|shuttle
init|=
operator|new
name|ReplaceSubQueryShuttle
argument_list|(
name|e
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|shuttle
operator|.
name|apply
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|matchFilter
parameter_list|(
name|SubQueryRemoveRule
name|rule
parameter_list|,
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|push
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|RexNode
name|c
init|=
name|filter
operator|.
name|getCondition
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|RexSubQuery
name|e
init|=
name|RexUtil
operator|.
name|SubQueryFinder
operator|.
name|find
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
assert|assert
name|count
operator|>
literal|0
assert|;
break|break;
block|}
operator|++
name|count
expr_stmt|;
specifier|final
name|RelOptUtil
operator|.
name|Logic
name|logic
init|=
name|LogicVisitor
operator|.
name|find
argument_list|(
name|RelOptUtil
operator|.
name|Logic
operator|.
name|TRUE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|c
argument_list|)
argument_list|,
name|e
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
init|=
name|RelOptUtil
operator|.
name|getVariablesUsed
argument_list|(
name|e
operator|.
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|target
init|=
name|rule
operator|.
name|apply
argument_list|(
name|e
argument_list|,
name|variablesSet
argument_list|,
name|logic
argument_list|,
name|builder
argument_list|,
literal|1
argument_list|,
name|builder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexShuttle
name|shuttle
init|=
operator|new
name|ReplaceSubQueryShuttle
argument_list|(
name|e
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|c
operator|=
name|c
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|filter
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|fields
argument_list|(
name|builder
argument_list|,
name|filter
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|matchJoin
parameter_list|(
name|SubQueryRemoveRule
name|rule
parameter_list|,
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RexSubQuery
name|e
init|=
name|RexUtil
operator|.
name|SubQueryFinder
operator|.
name|find
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|e
operator|!=
literal|null
assert|;
specifier|final
name|RelOptUtil
operator|.
name|Logic
name|logic
init|=
name|LogicVisitor
operator|.
name|find
argument_list|(
name|RelOptUtil
operator|.
name|Logic
operator|.
name|TRUE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|builder
operator|.
name|push
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|push
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|CorrelationId
argument_list|>
name|variablesSet
init|=
name|RelOptUtil
operator|.
name|getVariablesUsed
argument_list|(
name|e
operator|.
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|target
init|=
name|rule
operator|.
name|apply
argument_list|(
name|e
argument_list|,
name|variablesSet
argument_list|,
name|logic
argument_list|,
name|builder
argument_list|,
literal|2
argument_list|,
name|fieldCount
argument_list|)
decl_stmt|;
specifier|final
name|RexShuttle
name|shuttle
init|=
operator|new
name|ReplaceSubQueryShuttle
argument_list|(
name|e
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|builder
operator|.
name|join
argument_list|(
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|shuttle
operator|.
name|apply
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|project
argument_list|(
name|fields
argument_list|(
name|builder
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Shuttle that replaces occurrences of a given    * {@link org.apache.calcite.rex.RexSubQuery} with a replacement    * expression. */
specifier|private
specifier|static
class|class
name|ReplaceSubQueryShuttle
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexSubQuery
name|subQuery
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|replacement
decl_stmt|;
name|ReplaceSubQueryShuttle
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|,
name|RexNode
name|replacement
parameter_list|)
block|{
name|this
operator|.
name|subQuery
operator|=
name|subQuery
expr_stmt|;
name|this
operator|.
name|replacement
operator|=
name|replacement
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitSubQuery
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|)
block|{
return|return
name|subQuery
operator|.
name|equals
argument_list|(
name|this
operator|.
name|subQuery
argument_list|)
condition|?
name|replacement
else|:
name|subQuery
return|;
block|}
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
argument_list|(
name|singleton
operator|=
literal|false
argument_list|)
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|PROJECT
init|=
name|ImmutableSubQueryRemoveRule
operator|.
name|Config
operator|.
name|builder
argument_list|()
operator|.
name|withMatchHandler
argument_list|(
name|SubQueryRemoveRule
operator|::
name|matchProject
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|)
operator|.
name|predicate
argument_list|(
name|RexUtil
operator|.
name|SubQueryFinder
operator|::
name|containsSubQuery
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"SubQueryRemoveRule:Project"
argument_list|)
decl_stmt|;
name|Config
name|FILTER
init|=
name|ImmutableSubQueryRemoveRule
operator|.
name|Config
operator|.
name|builder
argument_list|()
operator|.
name|withMatchHandler
argument_list|(
name|SubQueryRemoveRule
operator|::
name|matchFilter
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
operator|.
name|predicate
argument_list|(
name|RexUtil
operator|.
name|SubQueryFinder
operator|::
name|containsSubQuery
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"SubQueryRemoveRule:Filter"
argument_list|)
decl_stmt|;
name|Config
name|JOIN
init|=
name|ImmutableSubQueryRemoveRule
operator|.
name|Config
operator|.
name|builder
argument_list|()
operator|.
name|withMatchHandler
argument_list|(
name|SubQueryRemoveRule
operator|::
name|matchJoin
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|)
operator|.
name|predicate
argument_list|(
name|RexUtil
operator|.
name|SubQueryFinder
operator|::
name|containsSubQuery
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"SubQueryRemoveRule:Join"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|SubQueryRemoveRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|SubQueryRemoveRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Forwards a call to {@link #onMatch(RelOptRuleCall)}. */
name|MatchHandler
argument_list|<
name|SubQueryRemoveRule
argument_list|>
name|matchHandler
parameter_list|()
function_decl|;
comment|/** Sets {@link #matchHandler()}. */
name|Config
name|withMatchHandler
parameter_list|(
name|MatchHandler
argument_list|<
name|SubQueryRemoveRule
argument_list|>
name|matchHandler
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

