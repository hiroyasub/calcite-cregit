begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPatternFieldRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlBitOpAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlMinMaxAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlSumAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlSumEmptyIsZeroAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Relational expression that represent a MATCH_RECOGNIZE node.  *  *<p>Each output row has the columns defined in the measure statements.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Match
extends|extends
name|SingleRel
block|{
comment|//~ Instance fields ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|String
name|STAR
init|=
literal|"*"
decl_stmt|;
specifier|protected
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|measures
decl_stmt|;
specifier|protected
specifier|final
name|RexNode
name|pattern
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|strictStart
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|strictEnd
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|allRows
decl_stmt|;
specifier|protected
specifier|final
name|RexNode
name|after
decl_stmt|;
specifier|protected
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|patternDefinitions
decl_stmt|;
specifier|protected
specifier|final
name|Set
argument_list|<
name|RexMRAggCall
argument_list|>
name|aggregateCalls
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|RexMRAggCall
argument_list|>
argument_list|>
name|aggregateCallsPreVar
decl_stmt|;
specifier|protected
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|subsets
decl_stmt|;
specifier|protected
specifier|final
name|ImmutableBitSet
name|partitionKeys
decl_stmt|;
specifier|protected
specifier|final
name|RelCollation
name|orderKeys
decl_stmt|;
specifier|protected
specifier|final
name|RexNode
name|interval
decl_stmt|;
comment|//~ Constructors -----------------------------------------------
comment|/**    * Creates a Match.    *    * @param cluster Cluster    * @param traitSet Trait set    * @param input Input relational expression    * @param rowType Row type    * @param pattern Regular expression that defines pattern variables    * @param strictStart Whether it is a strict start pattern    * @param strictEnd Whether it is a strict end pattern    * @param patternDefinitions Pattern definitions    * @param measures Measure definitions    * @param after After match definitions    * @param subsets Subsets of pattern variables    * @param allRows Whether all rows per match (false means one row per match)    * @param partitionKeys Partition by columns    * @param orderKeys Order by columns    * @param interval Interval definition, null if WITHIN clause is not defined    */
specifier|protected
name|Match
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|RexNode
name|pattern
parameter_list|,
name|boolean
name|strictStart
parameter_list|,
name|boolean
name|strictEnd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|patternDefinitions
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|measures
parameter_list|,
name|RexNode
name|after
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|subsets
parameter_list|,
name|boolean
name|allRows
parameter_list|,
name|ImmutableBitSet
name|partitionKeys
parameter_list|,
name|RelCollation
name|orderKeys
parameter_list|,
name|RexNode
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rowType
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|patternDefinitions
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|strictStart
operator|=
name|strictStart
expr_stmt|;
name|this
operator|.
name|strictEnd
operator|=
name|strictEnd
expr_stmt|;
name|this
operator|.
name|patternDefinitions
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|patternDefinitions
argument_list|)
expr_stmt|;
name|this
operator|.
name|measures
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|measures
argument_list|)
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|this
operator|.
name|subsets
operator|=
name|copyMap
argument_list|(
name|subsets
argument_list|)
expr_stmt|;
name|this
operator|.
name|allRows
operator|=
name|allRows
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|partitionKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|orderKeys
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|orderKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
specifier|final
name|AggregateFinder
name|aggregateFinder
init|=
operator|new
name|AggregateFinder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|rex
range|:
name|this
operator|.
name|patternDefinitions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|rex
operator|instanceof
name|RexCall
condition|)
block|{
name|aggregateFinder
operator|.
name|go
argument_list|(
operator|(
name|RexCall
operator|)
name|rex
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RexNode
name|rex
range|:
name|this
operator|.
name|measures
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|rex
operator|instanceof
name|RexCall
condition|)
block|{
name|aggregateFinder
operator|.
name|go
argument_list|(
operator|(
name|RexCall
operator|)
name|rex
argument_list|)
expr_stmt|;
block|}
block|}
name|aggregateCalls
operator|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|aggregateFinder
operator|.
name|aggregateCalls
argument_list|)
expr_stmt|;
name|aggregateCallsPreVar
operator|=
name|copyMap
argument_list|(
name|aggregateFinder
operator|.
name|aggregateCallsPerVar
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an immutable map of a map of sorted sets. */
specifier|private
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|SortedSet
argument_list|<
name|V
argument_list|>
argument_list|>
name|copyMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|SortedSet
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|SortedSet
argument_list|<
name|V
argument_list|>
argument_list|>
name|b
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|SortedSet
argument_list|<
name|V
argument_list|>
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|b
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
comment|//~ Methods --------------------------------------------------
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|getMeasures
parameter_list|()
block|{
return|return
name|measures
return|;
block|}
specifier|public
name|RexNode
name|getAfter
parameter_list|()
block|{
return|return
name|after
return|;
block|}
specifier|public
name|RexNode
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
specifier|public
name|boolean
name|isStrictStart
parameter_list|()
block|{
return|return
name|strictStart
return|;
block|}
specifier|public
name|boolean
name|isStrictEnd
parameter_list|()
block|{
return|return
name|strictEnd
return|;
block|}
specifier|public
name|boolean
name|isAllRows
parameter_list|()
block|{
return|return
name|allRows
return|;
block|}
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|getPatternDefinitions
parameter_list|()
block|{
return|return
name|patternDefinitions
return|;
block|}
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSubsets
parameter_list|()
block|{
return|return
name|subsets
return|;
block|}
specifier|public
name|ImmutableBitSet
name|getPartitionKeys
parameter_list|()
block|{
return|return
name|partitionKeys
return|;
block|}
specifier|public
name|RelCollation
name|getOrderKeys
parameter_list|()
block|{
return|return
name|orderKeys
return|;
block|}
specifier|public
name|RexNode
name|getInterval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"partition"
argument_list|,
name|getPartitionKeys
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"order"
argument_list|,
name|getOrderKeys
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"outputFields"
argument_list|,
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"allRows"
argument_list|,
name|isAllRows
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"after"
argument_list|,
name|getAfter
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"pattern"
argument_list|,
name|getPattern
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"isStrictStarts"
argument_list|,
name|isStrictStart
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"isStrictEnds"
argument_list|,
name|isStrictEnd
argument_list|()
argument_list|)
operator|.
name|itemIf
argument_list|(
literal|"interval"
argument_list|,
name|getInterval
argument_list|()
argument_list|,
name|getInterval
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|item
argument_list|(
literal|"subsets"
argument_list|,
name|getSubsets
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"patternDefinitions"
argument_list|,
name|getPatternDefinitions
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"inputFields"
argument_list|,
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Find aggregate functions in operands.    */
specifier|private
specifier|static
class|class
name|AggregateFinder
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|final
name|SortedSet
argument_list|<
name|RexMRAggCall
argument_list|>
name|aggregateCalls
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|RexMRAggCall
argument_list|>
argument_list|>
name|aggregateCallsPerVar
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AggregateFinder
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|SqlAggFunction
name|aggFunction
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|SUM
case|:
name|aggFunction
operator|=
operator|new
name|SqlSumAggFunction
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUM0
case|:
name|aggFunction
operator|=
operator|new
name|SqlSumEmptyIsZeroAggFunction
argument_list|()
expr_stmt|;
break|break;
case|case
name|MAX
case|:
case|case
name|MIN
case|:
name|aggFunction
operator|=
operator|new
name|SqlMinMaxAggFunction
argument_list|(
name|call
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|COUNT
case|:
name|aggFunction
operator|=
name|SqlStdOperatorTable
operator|.
name|COUNT
expr_stmt|;
break|break;
case|case
name|ANY_VALUE
case|:
name|aggFunction
operator|=
name|SqlStdOperatorTable
operator|.
name|ANY_VALUE
expr_stmt|;
break|break;
case|case
name|BIT_AND
case|:
case|case
name|BIT_OR
case|:
case|case
name|BIT_XOR
case|:
name|aggFunction
operator|=
operator|new
name|SqlBitOpAggFunction
argument_list|(
name|call
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|visitEach
argument_list|(
name|call
operator|.
name|operands
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aggFunction
operator|!=
literal|null
condition|)
block|{
name|RexMRAggCall
name|aggCall
init|=
operator|new
name|RexMRAggCall
argument_list|(
name|aggFunction
argument_list|,
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|call
operator|.
name|getOperands
argument_list|()
argument_list|,
name|aggregateCalls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|aggregateCalls
operator|.
name|add
argument_list|(
name|aggCall
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|pv
init|=
operator|new
name|PatternVarFinder
argument_list|()
operator|.
name|go
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pv
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pv
operator|.
name|add
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|alpha
range|:
name|pv
control|)
block|{
specifier|final
name|SortedSet
argument_list|<
name|RexMRAggCall
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|aggregateCallsPerVar
operator|.
name|containsKey
argument_list|(
name|alpha
argument_list|)
condition|)
block|{
name|set
operator|=
name|aggregateCallsPerVar
operator|.
name|get
argument_list|(
name|alpha
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|aggregateCallsPerVar
operator|.
name|put
argument_list|(
name|alpha
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
name|boolean
name|update
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RexMRAggCall
name|rex
range|:
name|set
control|)
block|{
if|if
condition|(
name|rex
operator|.
name|equals
argument_list|(
name|aggCall
argument_list|)
condition|)
block|{
name|update
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|update
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|aggCall
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|go
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|call
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Visits the operands of an aggregate call to retrieve relevant pattern    * variables.    */
specifier|private
specifier|static
class|class
name|PatternVarFinder
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|patternVars
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|PatternVarFinder
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitPatternFieldRef
parameter_list|(
name|RexPatternFieldRef
name|fieldRef
parameter_list|)
block|{
name|patternVars
operator|.
name|add
argument_list|(
name|fieldRef
operator|.
name|getAlpha
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|visitEach
argument_list|(
name|call
operator|.
name|operands
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|go
parameter_list|(
name|RexNode
name|rex
parameter_list|)
block|{
name|rex
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|patternVars
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|go
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexNodeList
parameter_list|)
block|{
name|visitEach
argument_list|(
name|rexNodeList
argument_list|)
expr_stmt|;
return|return
name|patternVars
return|;
block|}
block|}
comment|/**    * Aggregate calls in match recognize.    */
specifier|public
specifier|static
specifier|final
class|class
name|RexMRAggCall
extends|extends
name|RexCall
implements|implements
name|Comparable
argument_list|<
name|RexMRAggCall
argument_list|>
block|{
specifier|public
specifier|final
name|int
name|ordinal
decl_stmt|;
name|RexMRAggCall
parameter_list|(
name|SqlAggFunction
name|aggFun
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|aggFun
argument_list|,
name|operands
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
name|digest
operator|=
name|toString
argument_list|()
expr_stmt|;
comment|// can compute here because class is final
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RexMRAggCall
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|RexMRAggCall
operator|&&
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

