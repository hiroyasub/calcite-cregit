begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * A {@link HintPredicate} to combine multiple hint predicates into one.  *  *<p>The composition can be {@code AND} or {@code OR}.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeHintPredicate
implements|implements
name|HintPredicate
block|{
comment|//~ Enums ------------------------------------------------------------------
comment|/** How hint predicates are composed. */
specifier|public
enum|enum
name|Composition
block|{
name|AND
block|,
name|OR
block|}
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|ImmutableList
argument_list|<
name|HintPredicate
argument_list|>
name|predicates
decl_stmt|;
specifier|private
name|Composition
name|composition
decl_stmt|;
comment|/**    * Creates a {@link CompositeHintPredicate} with a {@link Composition}    * and an array of hint predicates.    *    *<p>Make this constructor package-protected intentionally.    * Use utility methods in {@link HintPredicates}    * to create a {@link CompositeHintPredicate}.</p>    */
name|CompositeHintPredicate
parameter_list|(
name|Composition
name|composition
parameter_list|,
name|HintPredicate
modifier|...
name|predicates
parameter_list|)
block|{
assert|assert
name|predicates
operator|!=
literal|null
assert|;
assert|assert
name|predicates
operator|.
name|length
operator|>
literal|1
assert|;
for|for
control|(
name|HintPredicate
name|predicate
range|:
name|predicates
control|)
block|{
assert|assert
name|predicate
operator|!=
literal|null
assert|;
block|}
name|this
operator|.
name|predicates
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
name|this
operator|.
name|composition
operator|=
name|composition
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|RelHint
name|hint
parameter_list|,
name|RelNode
name|rel
parameter_list|)
block|{
return|return
name|apply
argument_list|(
name|composition
argument_list|,
name|hint
argument_list|,
name|rel
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|apply
parameter_list|(
name|Composition
name|composition
parameter_list|,
name|RelHint
name|hint
parameter_list|,
name|RelNode
name|rel
parameter_list|)
block|{
switch|switch
condition|(
name|composition
condition|)
block|{
case|case
name|AND
case|:
for|for
control|(
name|HintPredicate
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
operator|!
name|predicate
operator|.
name|apply
argument_list|(
name|hint
argument_list|,
name|rel
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|OR
case|:
default|default:
for|for
control|(
name|HintPredicate
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|hint
argument_list|,
name|rel
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

