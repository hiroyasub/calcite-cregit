begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Correlation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Correlator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Rule that converts a {@link org.apache.calcite.rel.logical.LogicalJoin}  * into a {@link org.apache.calcite.rel.core.Correlator}, which can  * then be implemented using nested loops.  *  *<p>For example,</p>  *  *<blockquote><code>select * from emp join dept on emp.deptno =  * dept.deptno</code></blockquote>  *  *<p>becomes a Correlator which restarts LogicalTableScan("DEPT") for each  * row read from LogicalTableScan("EMP").</p>  *  *<p>This rule is not applicable if for certain types of outer join. For  * example,</p>  *  *<blockquote><code>select * from emp right join dept on emp.deptno =  * dept.deptno</code></blockquote>  *  *<p>would require emitting a NULL emp row if a certain department contained no  * employees, and Correlator cannot do that.</p>  */
end_comment

begin_class
specifier|public
class|class
name|JoinToCorrelatorRule
extends|extends
name|RelOptRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|JoinToCorrelatorRule
name|INSTANCE
init|=
operator|new
name|JoinToCorrelatorRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Private constructor; use singleton {@link #INSTANCE}.    */
specifier|private
name|JoinToCorrelatorRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|LogicalJoin
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LogicalJoin
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
condition|)
block|{
case|case
name|INNER
case|:
case|case
name|LEFT
case|:
return|return
literal|true
return|;
case|case
name|FULL
case|:
case|case
name|RIGHT
case|:
return|return
literal|false
return|;
default|default:
throw|throw
name|Util
operator|.
name|unexpected
argument_list|(
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
assert|assert
name|matches
argument_list|(
name|call
argument_list|)
assert|;
specifier|final
name|LogicalJoin
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|right
init|=
name|join
operator|.
name|getRight
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|left
init|=
name|join
operator|.
name|getLeft
argument_list|()
decl_stmt|;
specifier|final
name|JoinInfo
name|joinInfo
init|=
name|join
operator|.
name|analyzeCondition
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Correlation
argument_list|>
name|correlationList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|join
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conditions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|IntPair
name|p
range|:
name|joinInfo
operator|.
name|pairs
argument_list|()
control|)
block|{
specifier|final
name|String
name|dynInIdStr
init|=
name|cluster
operator|.
name|getQuery
argument_list|()
operator|.
name|createCorrel
argument_list|()
decl_stmt|;
specifier|final
name|int
name|dynInId
init|=
name|RelOptQuery
operator|.
name|getCorrelOrdinal
argument_list|(
name|dynInIdStr
argument_list|)
decl_stmt|;
comment|// Create correlation to say 'each row, set variable #id
comment|// to the value of column #leftKey'.
name|correlationList
operator|.
name|add
argument_list|(
operator|new
name|Correlation
argument_list|(
name|dynInId
argument_list|,
name|p
operator|.
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|conditions
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|right
argument_list|,
name|p
operator|.
name|target
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCorrel
argument_list|(
name|left
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|source
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|dynInIdStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|filteredRight
init|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|right
argument_list|,
name|conditions
argument_list|)
decl_stmt|;
name|RelNode
name|newRel
init|=
operator|new
name|Correlator
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|left
argument_list|,
name|filteredRight
argument_list|,
name|joinInfo
operator|.
name|getRemaining
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
argument_list|,
name|correlationList
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End JoinToCorrelatorRule.java
end_comment

end_unit

