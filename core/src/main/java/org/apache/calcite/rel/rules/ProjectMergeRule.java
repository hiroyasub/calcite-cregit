begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
operator|.
name|ProjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Permutation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ProjectMergeRule merges a {@link org.apache.calcite.rel.core.Project} into  * another {@link org.apache.calcite.rel.core.Project},  * provided the projects aren't projecting identical sets of input references.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectMergeRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|ProjectMergeRule
name|INSTANCE
init|=
operator|new
name|ProjectMergeRule
argument_list|(
literal|true
argument_list|,
name|RelFactories
operator|.
name|DEFAULT_PROJECT_FACTORY
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/** Whether to always merge projects. */
specifier|private
specifier|final
name|boolean
name|force
decl_stmt|;
specifier|private
specifier|final
name|ProjectFactory
name|projectFactory
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a ProjectMergeRule, specifying whether to always merge projects.    *    * @param force Whether to always merge projects    */
specifier|public
name|ProjectMergeRule
parameter_list|(
name|boolean
name|force
parameter_list|,
name|ProjectFactory
name|projectFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"ProjectMergeRule"
operator|+
operator|(
name|force
condition|?
literal|":force_mode"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
name|this
operator|.
name|projectFactory
operator|=
name|projectFactory
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|topProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|bottomProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// If one or both projects are permutations, short-circuit the complex logic
comment|// of building a RexProgram.
specifier|final
name|Permutation
name|topPermutation
init|=
name|topProject
operator|.
name|getPermutation
argument_list|()
decl_stmt|;
if|if
condition|(
name|topPermutation
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|topPermutation
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
comment|// Let ProjectRemoveRule handle this.
return|return;
block|}
specifier|final
name|Permutation
name|bottomPermutation
init|=
name|bottomProject
operator|.
name|getPermutation
argument_list|()
decl_stmt|;
if|if
condition|(
name|bottomPermutation
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bottomPermutation
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
comment|// Let ProjectRemoveRule handle this.
return|return;
block|}
specifier|final
name|Permutation
name|product
init|=
name|topPermutation
operator|.
name|product
argument_list|(
name|bottomPermutation
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|RelOptUtil
operator|.
name|projectMapping
argument_list|(
name|bottomProject
operator|.
name|getInput
argument_list|()
argument_list|,
name|product
operator|.
name|inverse
argument_list|()
argument_list|,
name|topProject
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|,
name|projectFactory
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// If we're not in force mode and the two projects reference identical
comment|// inputs, then return and let ProjectRemoveRule replace the projects.
if|if
condition|(
operator|!
name|force
condition|)
block|{
if|if
condition|(
name|ProjectRemoveRule
operator|.
name|isIdentity
argument_list|(
name|topProject
operator|.
name|getProjects
argument_list|()
argument_list|,
name|topProject
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
name|RelOptUtil
operator|.
name|pushPastProject
argument_list|(
name|topProject
operator|.
name|getProjects
argument_list|()
argument_list|,
name|bottomProject
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|bottomProject
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|ProjectRemoveRule
operator|.
name|isIdentity
argument_list|(
name|newProjects
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|force
operator|||
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|equals
argument_list|(
name|topProject
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// replace the two projects with a combined projection
name|RelNode
name|newProjectRel
init|=
name|projectFactory
operator|.
name|createProject
argument_list|(
name|bottomProject
operator|.
name|getInput
argument_list|()
argument_list|,
name|newProjects
argument_list|,
name|topProject
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProjectRel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ProjectMergeRule.java
end_comment

end_unit

