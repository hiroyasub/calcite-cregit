begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Utilities concerning relational expressions.  */
end_comment

begin_class
specifier|public
class|class
name|RelNodes
block|{
comment|/** Comparator that provides an arbitrary but stable ordering to    * {@link RelNode}s. */
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|RelNode
argument_list|>
name|COMPARATOR
init|=
operator|new
name|RelNodeComparator
argument_list|()
decl_stmt|;
comment|/** Ordering for {@link RelNode}s. */
specifier|public
specifier|static
specifier|final
name|Ordering
argument_list|<
name|RelNode
argument_list|>
name|ORDERING
init|=
name|Ordering
operator|.
name|from
argument_list|(
name|COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
name|RelNodes
parameter_list|()
block|{
block|}
comment|/** Compares arrays of {@link RelNode}. */
specifier|public
specifier|static
name|int
name|compareRels
parameter_list|(
name|RelNode
index|[]
name|rels0
parameter_list|,
name|RelNode
index|[]
name|rels1
parameter_list|)
block|{
name|int
name|c
init|=
name|Utilities
operator|.
name|compare
argument_list|(
name|rels0
operator|.
name|length
argument_list|,
name|rels1
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels0
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|rels0
index|[
name|i
index|]
argument_list|,
name|rels1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/** Arbitrary stable comparator for {@link RelNode}s. */
specifier|private
specifier|static
class|class
name|RelNodeComparator
implements|implements
name|Comparator
argument_list|<
name|RelNode
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RelNode
name|o1
parameter_list|,
name|RelNode
name|o2
parameter_list|)
block|{
comment|// Compare on field count first. It is more stable than id (when rules
comment|// are added to the set of active rules).
specifier|final
name|int
name|c
init|=
name|Utilities
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|o2
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
operator|-
name|c
return|;
block|}
return|return
name|Utilities
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getId
argument_list|()
argument_list|,
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

