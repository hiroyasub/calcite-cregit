begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|janino
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|MetadataDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|MetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_comment
comment|/**  * Generates the {@link MetadataHandler} code.  */
end_comment

begin_class
specifier|public
class|class
name|RelMetadataHandlerGeneratorUtil
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LICENSE
init|=
literal|"/*\n"
operator|+
literal|" * Licensed to the Apache Software Foundation (ASF) under one or more\n"
operator|+
literal|" * contributor license agreements.  See the NOTICE file distributed with\n"
operator|+
literal|" * this work for additional information regarding copyright ownership.\n"
operator|+
literal|" * The ASF licenses this file to you under the Apache License, Version 2.0\n"
operator|+
literal|" * (the \"License\"); you may not use this file except in compliance with\n"
operator|+
literal|" * the License.  You may obtain a copy of the License at\n"
operator|+
literal|" *\n"
operator|+
literal|" * http://www.apache.org/licenses/LICENSE-2.0\n"
operator|+
literal|" *\n"
operator|+
literal|" * Unless required by applicable law or agreed to in writing, software\n"
operator|+
literal|" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
operator|+
literal|" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
operator|+
literal|" * See the License for the specific language governing permissions and\n"
operator|+
literal|" * limitations under the License.\n"
operator|+
literal|" */\n"
decl_stmt|;
specifier|private
name|RelMetadataHandlerGeneratorUtil
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|HandlerNameAndGeneratedCode
name|generateHandler
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|handlerClass
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|handlers
parameter_list|)
block|{
specifier|final
name|String
name|classPackage
init|=
name|castNonNull
argument_list|(
name|RelMetadataHandlerGeneratorUtil
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"GeneratedMetadata_"
operator|+
name|simpleNameForHandler
argument_list|(
name|handlerClass
argument_list|)
decl_stmt|;
specifier|final
name|Method
index|[]
name|declaredMethods
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|handlerClass
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
operator|!
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getDef"
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|i
lambda|->
operator|new
name|Method
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|declaredMethods
argument_list|,
name|Comparator
operator|.
name|comparing
argument_list|(
name|Method
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|handlerToName
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetadataHandler
argument_list|<
name|?
argument_list|>
name|provider
range|:
name|handlers
control|)
block|{
name|handlerToName
operator|.
name|put
argument_list|(
name|provider
argument_list|,
literal|"provider"
operator|+
name|handlerToName
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|LICENSE
argument_list|)
operator|.
name|append
argument_list|(
literal|"package "
argument_list|)
operator|.
name|append
argument_list|(
name|classPackage
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n\n"
argument_list|)
expr_stmt|;
comment|//Class definition
name|buff
operator|.
name|append
argument_list|(
literal|"public final class "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  implements "
argument_list|)
operator|.
name|append
argument_list|(
name|handlerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" {\n"
argument_list|)
expr_stmt|;
comment|//PROPERTIES
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declaredMethods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CacheGeneratorUtil
operator|.
name|cacheProperties
argument_list|(
name|buff
argument_list|,
name|declaredMethods
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|handlerAndName
range|:
name|handlerToName
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"  public final "
argument_list|)
operator|.
name|append
argument_list|(
name|handlerAndName
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|handlerAndName
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
block|}
comment|//CONSTRUCTOR
name|buff
operator|.
name|append
argument_list|(
literal|"  public "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"(\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|handlerAndName
range|:
name|handlerToName
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|handlerAndName
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|handlerAndName
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|handlerToName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buff
operator|.
name|setLength
argument_list|(
name|buff
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|handlerName
range|:
name|handlerToName
operator|.
name|values
argument_list|()
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"    this."
argument_list|)
operator|.
name|append
argument_list|(
name|handlerName
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|handlerName
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
comment|//METHODS
name|getDefMethod
argument_list|(
name|buff
argument_list|,
name|handlerToName
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|DispatchGenerator
name|dispatchGenerator
init|=
operator|new
name|DispatchGenerator
argument_list|(
name|handlerToName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|declaredMethods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CacheGeneratorUtil
operator|.
name|cachedMethod
argument_list|(
name|buff
argument_list|,
name|declaredMethods
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|dispatchGenerator
operator|.
name|dispatchMethod
argument_list|(
name|buff
argument_list|,
name|declaredMethods
index|[
name|i
index|]
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
block|}
comment|//End of Class
name|buff
operator|.
name|append
argument_list|(
literal|"\n}\n"
argument_list|)
expr_stmt|;
return|return
name|ImmutableHandlerNameAndGeneratedCode
operator|.
name|builder
argument_list|()
operator|.
name|withHandlerName
argument_list|(
name|classPackage
operator|+
literal|"."
operator|+
name|name
argument_list|)
operator|.
name|withGeneratedCode
argument_list|(
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|getDefMethod
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
annotation|@
name|Nullable
name|String
name|handlerName
parameter_list|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"  public "
argument_list|)
operator|.
name|append
argument_list|(
name|MetadataDef
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" getDef() {\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|handlerName
operator|==
literal|null
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"    return null;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"    return "
argument_list|)
operator|.
name|append
argument_list|(
name|handlerName
argument_list|)
operator|.
name|append
argument_list|(
literal|".getDef();\n"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|simpleNameForHandler
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|simpleName
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
comment|//Previously the pattern was to have a nested in class named Handler
comment|//So we need to add the parents class to get a unique name
if|if
condition|(
name|simpleName
operator|.
name|equals
argument_list|(
literal|"Handler"
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\.|\\$"
argument_list|)
decl_stmt|;
return|return
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|2
index|]
operator|+
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
else|else
block|{
return|return
name|simpleName
return|;
block|}
block|}
comment|/** Contains Name and code that been generated for {@link MetadataHandler}.*/
annotation|@
name|Value
operator|.
name|Immutable
argument_list|(
name|singleton
operator|=
literal|false
argument_list|)
specifier|public
interface|interface
name|HandlerNameAndGeneratedCode
block|{
name|String
name|getHandlerName
parameter_list|()
function_decl|;
name|String
name|getGeneratedCode
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

