begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Utilities concerning {@link org.apache.calcite.rel.RelCollation}  * and {@link org.apache.calcite.rel.RelFieldCollation}.  */
end_comment

begin_class
specifier|public
class|class
name|RelCollations
block|{
comment|/**    * A collation indicating that a relation is not sorted. Ordering by no    * columns.    */
specifier|public
specifier|static
specifier|final
name|RelCollation
name|EMPTY
init|=
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
operator|new
name|RelCollationImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * A collation that cannot be replicated by applying a sort. The only    * implementation choice is to apply operations that preserve order.    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
specifier|final
name|RelCollation
name|PRESERVE
init|=
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
operator|new
name|RelCollationImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PRESERVE"
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|private
name|RelCollations
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|RelCollation
name|of
parameter_list|(
name|RelFieldCollation
modifier|...
name|fieldCollations
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldCollations
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelCollation
name|of
parameter_list|(
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
parameter_list|)
block|{
name|RelCollation
name|collation
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|ordinals
argument_list|(
name|fieldCollations
argument_list|)
argument_list|)
condition|)
block|{
name|collation
operator|=
operator|new
name|RelCollationImpl
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldCollations
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove field collations whose field has already been seen
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|fieldCollation
range|:
name|fieldCollations
control|)
block|{
if|if
condition|(
name|set
operator|.
name|add
argument_list|(
name|fieldCollation
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|fieldCollation
argument_list|)
expr_stmt|;
block|}
block|}
name|collation
operator|=
operator|new
name|RelCollationImpl
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
name|collation
argument_list|)
return|;
block|}
comment|/**    * Creates a collation containing one field.    */
specifier|public
specifier|static
name|RelCollation
name|of
parameter_list|(
name|int
name|fieldIndex
parameter_list|)
block|{
return|return
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|fieldIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates a collation containing multiple fields.    */
specifier|public
specifier|static
name|RelCollation
name|of
parameter_list|(
name|ImmutableIntList
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|cols
init|=
name|keys
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|k
lambda|->
operator|new
name|RelFieldCollation
argument_list|(
name|k
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|of
argument_list|(
name|cols
argument_list|)
return|;
block|}
comment|/**    * Creates a list containing one collation containing one field.    */
specifier|public
specifier|static
name|List
argument_list|<
name|RelCollation
argument_list|>
name|createSingleton
parameter_list|(
name|int
name|fieldIndex
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|of
argument_list|(
name|fieldIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Checks that a collection of collations is valid.    *    * @param rowType       Row type of the relational expression    * @param collationList List of collations    * @param fail          Whether to fail if invalid    * @return Whether valid    */
specifier|public
specifier|static
name|boolean
name|isValid
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
for|for
control|(
name|RelCollation
name|collation
range|:
name|collationList
control|)
block|{
for|for
control|(
name|RelFieldCollation
name|fieldCollation
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
specifier|final
name|int
name|index
init|=
name|fieldCollation
operator|.
name|getFieldIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|fieldCount
condition|)
block|{
assert|assert
operator|!
name|fail
assert|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equal
parameter_list|(
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList1
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList2
parameter_list|)
block|{
return|return
name|collationList1
operator|.
name|equals
argument_list|(
name|collationList2
argument_list|)
return|;
block|}
comment|/** Returns the indexes of the field collations in a given collation. */
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|ordinals
parameter_list|(
name|RelCollation
name|collation
parameter_list|)
block|{
return|return
name|ordinals
argument_list|(
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the indexes of the fields in a list of field collations. */
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|ordinals
parameter_list|(
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
parameter_list|)
block|{
return|return
name|Util
operator|.
name|transform
argument_list|(
name|fieldCollations
argument_list|,
name|RelFieldCollation
operator|::
name|getFieldIndex
argument_list|)
return|;
block|}
comment|/** Returns whether a collation indicates that the collection is sorted on    * a given list of keys.    *    * @param collation Collation    * @param keys List of keys    * @return Whether the collection is sorted on the given keys    */
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|RelCollation
name|collation
parameter_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|collation
argument_list|,
name|Util
operator|.
name|distinctList
argument_list|(
name|keys
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|RelCollation
name|collation
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|collation
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelFieldCollation
name|fieldCollation
init|=
name|collation
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|fieldCollation
operator|.
name|getFieldIndex
argument_list|()
operator|!=
name|iterator
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
comment|/** Returns whether one of a list of collations indicates that the collection    * is sorted on the given list of keys. */
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collations
parameter_list|,
name|ImmutableIntList
name|keys
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|distinctKeys
init|=
name|Util
operator|.
name|distinctList
argument_list|(
name|keys
argument_list|)
decl_stmt|;
for|for
control|(
name|RelCollation
name|collation
range|:
name|collations
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|collation
argument_list|,
name|distinctKeys
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns whether a collation contains a given list of keys regardless    * the order.    *    * @param collation Collation    * @param keys List of keys    * @return Whether the collection contains the given keys    */
specifier|public
specifier|static
name|boolean
name|containsOrderless
parameter_list|(
name|RelCollation
name|collation
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|distinctKeys
init|=
name|Util
operator|.
name|distinctList
argument_list|(
name|keys
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|keysBitSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|distinctKeys
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|colKeys
init|=
name|Util
operator|.
name|distinctList
argument_list|(
name|collation
operator|.
name|getKeys
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|colKeys
operator|.
name|size
argument_list|()
operator|<
name|distinctKeys
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|ImmutableBitSet
name|bitset
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|colKeys
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|distinctKeys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|bitset
operator|.
name|equals
argument_list|(
name|keysBitSet
argument_list|)
return|;
block|}
block|}
comment|/** Returns whether a collation is contained by a given list of keys regardless ordering.    *    * @param collation Collation    * @param keys List of keys    * @return Whether the collection contains the given keys    */
specifier|public
specifier|static
name|boolean
name|containsOrderless
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|,
name|RelCollation
name|collation
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|distinctKeys
init|=
name|Util
operator|.
name|distinctList
argument_list|(
name|keys
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|colKeys
init|=
name|Util
operator|.
name|distinctList
argument_list|(
name|collation
operator|.
name|getKeys
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|colKeys
operator|.
name|size
argument_list|()
operator|>
name|distinctKeys
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|colKeys
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|i
lambda|->
name|distinctKeys
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns whether one of a list of collations contains the given list of keys    * regardless the order.    */
specifier|public
specifier|static
name|boolean
name|collationsContainKeysOrderless
parameter_list|(
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collations
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|)
block|{
for|for
control|(
name|RelCollation
name|collation
range|:
name|collations
control|)
block|{
if|if
condition|(
name|containsOrderless
argument_list|(
name|collation
argument_list|,
name|keys
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether one of a list of collations is contained by the given list of keys    * regardless the order.    */
specifier|public
specifier|static
name|boolean
name|keysContainCollationsOrderless
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collations
parameter_list|)
block|{
for|for
control|(
name|RelCollation
name|collation
range|:
name|collations
control|)
block|{
if|if
condition|(
name|containsOrderless
argument_list|(
name|keys
argument_list|,
name|collation
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|RelCollation
name|shift
parameter_list|(
name|RelCollation
name|collation
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
return|return
name|collation
return|;
comment|// save some effort
block|}
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|fc
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|fieldCollations
operator|.
name|add
argument_list|(
name|fc
operator|.
name|shift
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RelCollationImpl
argument_list|(
name|fieldCollations
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates a copy of this collation that changes the ordinals of input    * fields. */
specifier|public
specifier|static
name|RelCollation
name|permute
parameter_list|(
name|RelCollation
name|collation
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|mapping
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|Util
operator|.
name|transform
argument_list|(
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|,
name|fc
lambda|->
name|fc
operator|.
name|withFieldIndex
argument_list|(
name|requireNonNull
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|fc
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"no entry for "
operator|+
name|fc
operator|.
name|getFieldIndex
argument_list|()
operator|+
literal|" in "
operator|+
name|mapping
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a copy of this collation that changes the ordinals of input    * fields. */
specifier|public
specifier|static
name|RelCollation
name|permute
parameter_list|(
name|RelCollation
name|collation
parameter_list|,
name|Mappings
operator|.
name|TargetMapping
name|mapping
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|Util
operator|.
name|transform
argument_list|(
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|,
name|fc
lambda|->
name|fc
operator|.
name|withFieldIndex
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
name|fc
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

