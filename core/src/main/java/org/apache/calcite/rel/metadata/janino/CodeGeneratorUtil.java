begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|janino
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * Common functions for code generation.  */
end_comment

begin_class
class|class
name|CodeGeneratorUtil
block|{
specifier|private
name|CodeGeneratorUtil
parameter_list|()
block|{
block|}
comment|/** Returns e.g. ",\n boolean ignoreNulls".  This ignores the first 2 arguments. */
specifier|static
name|StringBuilder
name|paramList
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|t
init|=
name|parameterTypes
index|[
name|i
index|]
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|",\n      "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" a"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
return|;
block|}
comment|/** Returns e.g. ", a2, a3". This ignores the first 2 arguments. */
specifier|static
name|StringBuilder
name|argList
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|argTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|argTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", a"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
return|;
block|}
block|}
end_class

end_unit

