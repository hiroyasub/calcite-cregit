begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|PolyNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * RelMdPercentageOriginalRows supplies a default implementation of  * {@link RelMetadataQuery#getPercentageOriginalRows} for the standard logical  * algebra.  */
end_comment

begin_class
specifier|public
class|class
name|RelMdPercentageOriginalRows
block|{
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ChainedRelMetadataProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
operator|new
name|RelMdPercentageOriginalRowsHandler
argument_list|()
argument_list|,
name|BuiltInMetadata
operator|.
name|PercentageOriginalRows
operator|.
name|Handler
operator|.
name|class
argument_list|)
argument_list|,
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
operator|new
name|RelMdCumulativeCost
argument_list|()
argument_list|,
name|BuiltInMetadata
operator|.
name|CumulativeCost
operator|.
name|Handler
operator|.
name|class
argument_list|)
argument_list|,
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
operator|new
name|RelMdNonCumulativeCost
argument_list|()
argument_list|,
name|BuiltInMetadata
operator|.
name|NonCumulativeCost
operator|.
name|Handler
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|private
name|RelMdPercentageOriginalRows
parameter_list|()
block|{
block|}
specifier|public
annotation|@
name|Nullable
name|Double
name|getPercentageOriginalRows
parameter_list|(
name|Aggregate
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
comment|// REVIEW jvs 28-Mar-2006: The assumption here seems to be that
comment|// aggregation does not apply any filtering, so it does not modify the
comment|// percentage.  That's very much oversimplified.
return|return
name|mq
operator|.
name|getPercentageOriginalRows
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getPercentageOriginalRows
parameter_list|(
name|Union
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|double
name|numerator
init|=
literal|0.0
decl_stmt|;
name|double
name|denominator
init|=
literal|0.0
decl_stmt|;
comment|// Ignore rel.isDistinct() because it's the same as an aggregate.
comment|// REVIEW jvs 28-Mar-2006: The original Broadbase formula was broken.
comment|// It was multiplying percentage into the numerator term rather than
comment|// than dividing it out of the denominator term, which would be OK if
comment|// there weren't summation going on.  Probably the cause of the error
comment|// was the desire to avoid division by zero, which I don't know how to
comment|// handle so I punt, meaning we return a totally wrong answer in the
comment|// case where a huge table has been completely filtered away.
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|Double
name|rowCount
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowCount
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Double
name|percentage
init|=
name|mq
operator|.
name|getPercentageOriginalRows
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|percentage
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|percentage
operator|!=
literal|0.0
condition|)
block|{
name|denominator
operator|+=
name|rowCount
operator|/
name|percentage
expr_stmt|;
name|numerator
operator|+=
name|rowCount
expr_stmt|;
block|}
block|}
return|return
name|quotientForPercentage
argument_list|(
name|numerator
argument_list|,
name|denominator
argument_list|)
return|;
block|}
specifier|public
annotation|@
name|Nullable
name|Double
name|getPercentageOriginalRows
parameter_list|(
name|Join
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
comment|// Assume any single-table filter conditions have already
comment|// been pushed down.
comment|// REVIEW jvs 28-Mar-2006: As with aggregation, this is
comment|// oversimplified.
comment|// REVIEW jvs 28-Mar-2006:  need any special casing for SemiJoin?
name|Double
name|left
init|=
name|mq
operator|.
name|getPercentageOriginalRows
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Double
name|right
init|=
name|mq
operator|.
name|getPercentageOriginalRows
argument_list|(
name|rel
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|left
operator|*
name|right
return|;
block|}
comment|// Catch-all rule when none of the others apply.
specifier|public
annotation|@
name|Nullable
name|Double
name|getPercentageOriginalRows
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// No generic formula available for multiple inputs.
return|return
literal|null
return|;
block|}
if|if
condition|(
name|rel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Assume no filtering happening at leaf.
return|return
literal|1.0
return|;
block|}
name|RelNode
name|child
init|=
name|rel
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Double
name|childPercentage
init|=
name|mq
operator|.
name|getPercentageOriginalRows
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childPercentage
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Compute product of percentage filtering from this rel (assuming any
comment|// filtering is the effect of single-table filters) with the percentage
comment|// filtering performed by the child.
name|Double
name|relPercentage
init|=
name|quotientForPercentage
argument_list|(
name|mq
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
argument_list|,
name|mq
operator|.
name|getRowCount
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPercentage
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|double
name|percent
init|=
name|relPercentage
operator|*
name|childPercentage
decl_stmt|;
comment|// this check is needed in cases where this method is called on a
comment|// physical rel
if|if
condition|(
operator|(
name|percent
operator|<
literal|0.0
operator|)
operator|||
operator|(
name|percent
operator|>
literal|1.0
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|relPercentage
operator|*
name|childPercentage
return|;
block|}
comment|// Ditto for getNonCumulativeCost
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|getCumulativeCost
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RelOptCost
name|cost
init|=
name|mq
operator|.
name|getNonCumulativeCost
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|rel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|inputs
control|)
block|{
name|RelOptCost
name|inputCost
init|=
name|mq
operator|.
name|getCumulativeCost
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputCost
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|cost
operator|=
name|cost
operator|.
name|plus
argument_list|(
name|inputCost
argument_list|)
expr_stmt|;
block|}
return|return
name|cost
return|;
block|}
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|getCumulativeCost
parameter_list|(
name|EnumerableInterpreter
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|mq
operator|.
name|getNonCumulativeCost
argument_list|(
name|rel
argument_list|)
return|;
block|}
comment|// Ditto for getNonCumulativeCost
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|getNonCumulativeCost
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|rel
operator|.
name|computeSelfCost
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
argument_list|,
name|mq
argument_list|)
return|;
block|}
specifier|private
specifier|static
annotation|@
name|PolyNull
name|Double
name|quotientForPercentage
parameter_list|(
annotation|@
name|PolyNull
name|Double
name|numerator
parameter_list|,
annotation|@
name|PolyNull
name|Double
name|denominator
parameter_list|)
block|{
if|if
condition|(
operator|(
name|numerator
operator|==
literal|null
operator|)
operator|||
operator|(
name|denominator
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// may need epsilon instead
if|if
condition|(
name|denominator
operator|==
literal|0.0
condition|)
block|{
comment|// cap at 100%
return|return
literal|1.0
return|;
block|}
else|else
block|{
return|return
name|numerator
operator|/
name|denominator
return|;
block|}
block|}
comment|/**    * Binds {@link RelMdPercentageOriginalRows} to {@link BuiltInMetadata.CumulativeCost}.    */
specifier|private
specifier|static
specifier|final
class|class
name|RelMdCumulativeCost
extends|extends
name|RelMdPercentageOriginalRows
implements|implements
name|MetadataHandler
argument_list|<
name|BuiltInMetadata
operator|.
name|CumulativeCost
argument_list|>
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
annotation|@
name|Override
specifier|public
name|MetadataDef
argument_list|<
name|BuiltInMetadata
operator|.
name|CumulativeCost
argument_list|>
name|getDef
parameter_list|()
block|{
return|return
name|BuiltInMetadata
operator|.
name|CumulativeCost
operator|.
name|DEF
return|;
block|}
block|}
comment|/**    * Binds {@link RelMdPercentageOriginalRows} to {@link BuiltInMetadata.NonCumulativeCost}.    */
specifier|private
specifier|static
specifier|final
class|class
name|RelMdNonCumulativeCost
extends|extends
name|RelMdPercentageOriginalRows
implements|implements
name|MetadataHandler
argument_list|<
name|BuiltInMetadata
operator|.
name|NonCumulativeCost
argument_list|>
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
annotation|@
name|Override
specifier|public
name|MetadataDef
argument_list|<
name|BuiltInMetadata
operator|.
name|NonCumulativeCost
argument_list|>
name|getDef
parameter_list|()
block|{
return|return
name|BuiltInMetadata
operator|.
name|NonCumulativeCost
operator|.
name|DEF
return|;
block|}
block|}
comment|/**    * Binds {@link RelMdPercentageOriginalRows} to {@link BuiltInMetadata.PercentageOriginalRows}.    */
specifier|private
specifier|static
specifier|final
class|class
name|RelMdPercentageOriginalRowsHandler
extends|extends
name|RelMdPercentageOriginalRows
implements|implements
name|MetadataHandler
argument_list|<
name|BuiltInMetadata
operator|.
name|PercentageOriginalRows
argument_list|>
block|{
annotation|@
name|Deprecated
comment|// to be removed before 2.0
annotation|@
name|Override
specifier|public
name|MetadataDef
argument_list|<
name|BuiltInMetadata
operator|.
name|PercentageOriginalRows
argument_list|>
name|getDef
parameter_list|()
block|{
return|return
name|BuiltInMetadata
operator|.
name|PercentageOriginalRows
operator|.
name|DEF
return|;
block|}
block|}
block|}
end_class

end_unit

