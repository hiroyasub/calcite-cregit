begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|janino
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|MetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|janino
operator|.
name|CodeGeneratorUtil
operator|.
name|argList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|janino
operator|.
name|CodeGeneratorUtil
operator|.
name|paramList
import|;
end_import

begin_comment
comment|/**  * Generates the metadata dispatch to handlers.  */
end_comment

begin_class
specifier|public
class|class
name|DispatchGenerator
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|metadataHandlerToName
decl_stmt|;
specifier|public
name|DispatchGenerator
parameter_list|(
name|Map
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|metadataHandlerToName
parameter_list|)
block|{
name|this
operator|.
name|metadataHandlerToName
operator|=
name|metadataHandlerToName
expr_stmt|;
block|}
specifier|public
name|void
name|dispatchMethod
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Method
name|method
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|metadataHandlers
parameter_list|)
block|{
name|Map
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
argument_list|>
name|handlersToClasses
init|=
name|metadataHandlers
operator|.
name|stream
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|mh
lambda|->
name|methodAndInstanceToImplementingClass
argument_list|(
name|method
argument_list|,
name|mh
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|delegateClassSet
init|=
name|handlersToClasses
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|delegateClassList
init|=
name|topologicalSort
argument_list|(
name|delegateClassSet
argument_list|)
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"  private "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"_(\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|RelNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" r,\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|RelMetadataQuery
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" mq"
argument_list|)
expr_stmt|;
name|paramList
argument_list|(
name|buff
argument_list|,
name|method
argument_list|)
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|delegateClassList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|throwUnknown
argument_list|(
name|buff
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
argument_list|,
name|method
argument_list|)
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|delegateClassList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|clazz
lambda|->
name|ifInstanceThenDispatch
argument_list|(
name|method
argument_list|,
name|metadataHandlers
argument_list|,
name|handlersToClasses
argument_list|,
name|clazz
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"    } else if "
argument_list|,
literal|"    if "
argument_list|,
literal|"    } else {\n"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|throwUnknown
argument_list|(
name|buff
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
argument_list|,
name|method
argument_list|)
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|StringBuilder
name|ifInstanceThenDispatch
parameter_list|(
name|Method
name|method
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|metadataHandlers
parameter_list|,
name|Map
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
argument_list|>
name|handlersToClasses
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|handlerName
init|=
name|findProvider
argument_list|(
name|metadataHandlers
argument_list|,
name|handlersToClasses
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"(r instanceof "
argument_list|)
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      return "
argument_list|)
decl_stmt|;
name|dispatchedCall
argument_list|(
name|buff
argument_list|,
name|handlerName
argument_list|,
name|method
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
return|return
name|buff
return|;
block|}
specifier|private
name|String
name|findProvider
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|metadataHandlers
parameter_list|,
name|Map
argument_list|<
name|MetadataHandler
argument_list|<
name|?
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
argument_list|>
name|handlerToClasses
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|)
block|{
for|for
control|(
name|MetadataHandler
argument_list|<
name|?
argument_list|>
name|mh
range|:
name|metadataHandlers
control|)
block|{
if|if
condition|(
name|handlerToClasses
operator|.
name|getOrDefault
argument_list|(
name|mh
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
name|castNonNull
argument_list|(
name|this
operator|.
name|metadataHandlerToName
operator|.
name|get
argument_list|(
name|mh
argument_list|)
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
specifier|private
specifier|static
name|StringBuilder
name|throwUnknown
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
return|return
name|buff
operator|.
name|append
argument_list|(
literal|"      throw new "
argument_list|)
operator|.
name|append
argument_list|(
name|IllegalArgumentException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"(\"No handler for method ["
argument_list|)
operator|.
name|append
argument_list|(
name|method
argument_list|)
operator|.
name|append
argument_list|(
literal|"] applied to argument of type [\" + r.getClass() + "
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"]; we recommend you create a catch-all (RelNode) handler\""
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|dispatchedCall
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|String
name|handlerName
parameter_list|,
name|Method
name|method
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|handlerName
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"(("
argument_list|)
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") r, mq"
argument_list|)
expr_stmt|;
name|argList
argument_list|(
name|buff
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|methodAndInstanceToImplementingClass
parameter_list|(
name|Method
name|method
parameter_list|,
name|MetadataHandler
argument_list|<
name|?
argument_list|>
name|handler
parameter_list|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|handler
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|aClass
init|=
name|toRelClass
argument_list|(
name|method
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|aClass
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|toRelClass
parameter_list|(
name|Method
name|superMethod
parameter_list|,
name|Method
name|candidate
parameter_list|)
block|{
if|if
condition|(
operator|!
name|superMethod
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|candidate
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|superMethod
operator|.
name|getParameterCount
argument_list|()
operator|!=
name|candidate
operator|.
name|getParameterCount
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|cpt
init|=
name|candidate
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|smpt
init|=
name|superMethod
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|RelNode
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cpt
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
operator|!
name|RelMetadataQuery
operator|.
name|class
operator|.
name|equals
argument_list|(
name|cpt
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|smpt
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cpt
index|[
name|i
index|]
operator|!=
name|smpt
index|[
name|i
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
operator|)
name|cpt
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|topologicalSort
parameter_list|(
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayDeque
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|s
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|list
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|n
init|=
name|s
operator|.
name|remove
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|other
range|:
name|s
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isAssignableFrom
argument_list|(
name|other
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|s
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
block|}
end_class

end_unit

