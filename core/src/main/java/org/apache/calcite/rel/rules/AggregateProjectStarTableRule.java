begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|StarTable
import|;
end_import

begin_comment
comment|/** Variant of {@link AggregateStarTableRule} that accepts a {@link Project}  * between the {@link Aggregate} and its {@link StarTable.StarTableScan}  * input. */
end_comment

begin_class
specifier|public
class|class
name|AggregateProjectStarTableRule
extends|extends
name|AggregateStarTableRule
block|{
comment|/** Creates an AggregateProjectStarTableRule. */
specifier|protected
name|AggregateProjectStarTableRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StarTable
operator|.
name|StarTableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|AggregateProjectMergeRule
operator|.
name|apply
argument_list|(
name|call
argument_list|,
name|aggregate
argument_list|,
name|project
argument_list|)
decl_stmt|;
specifier|final
name|Aggregate
name|aggregate2
decl_stmt|;
specifier|final
name|Project
name|project2
decl_stmt|;
if|if
condition|(
name|rel
operator|instanceof
name|Aggregate
condition|)
block|{
name|project2
operator|=
literal|null
expr_stmt|;
name|aggregate2
operator|=
operator|(
name|Aggregate
operator|)
name|rel
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|instanceof
name|Project
condition|)
block|{
name|project2
operator|=
operator|(
name|Project
operator|)
name|rel
expr_stmt|;
name|aggregate2
operator|=
operator|(
name|Aggregate
operator|)
name|project2
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
name|apply
argument_list|(
name|call
argument_list|,
name|project2
argument_list|,
name|aggregate2
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|AggregateStarTableRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|EMPTY
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withOperandFor
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|Project
operator|.
name|class
argument_list|,
name|StarTable
operator|.
name|StarTableScan
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|AggregateProjectStarTableRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|AggregateProjectStarTableRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Defines an operand tree for the given classes. */
specifier|default
name|Config
name|withOperandFor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Project
argument_list|>
name|projectClass
parameter_list|,
name|Class
argument_list|<
name|StarTable
operator|.
name|StarTableScan
argument_list|>
name|scanClass
parameter_list|)
block|{
return|return
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|aggregateClass
argument_list|)
operator|.
name|predicate
argument_list|(
name|Aggregate
operator|::
name|isSimple
argument_list|)
operator|.
name|oneInput
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|projectClass
argument_list|)
operator|.
name|oneInput
argument_list|(
name|b2
lambda|->
name|b2
operator|.
name|operand
argument_list|(
name|scanClass
argument_list|)
operator|.
name|noInputs
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

