begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLocalRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes a project into a scan of a  * {@link org.apache.calcite.schema.ProjectableFilterableTable}.  *  * @see org.apache.calcite.rel.rules.FilterTableRule  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ProjectTableRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|TableScan
argument_list|>
name|PREDICATE
init|=
operator|new
name|Predicate
argument_list|<
name|TableScan
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
comment|// We can only push projects into a ProjectableFilterableTable.
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ProjectTableRule
name|INSTANCE
init|=
operator|new
name|ProjectTableRule
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|EnumerableInterpreter
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|PREDICATE
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"ProjectTableRule:basic"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|EnumerableInterpreter
name|interpreter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
assert|assert
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
assert|;
name|apply
argument_list|(
name|call
argument_list|,
name|project
argument_list|,
literal|null
argument_list|,
name|interpreter
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ProjectTableRule
name|INSTANCE2
init|=
operator|new
name|ProjectTableRule
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|EnumerableInterpreter
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|PREDICATE
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"ProjectTableRule:filter"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|EnumerableInterpreter
name|interpreter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|TableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
assert|assert
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
operator|!=
literal|null
assert|;
name|apply
argument_list|(
name|call
argument_list|,
name|project
argument_list|,
name|filter
argument_list|,
name|interpreter
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a FilterTableRule. */
specifier|private
name|ProjectTableRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
name|void
name|apply
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|Project
name|project
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|EnumerableInterpreter
name|interpreter
parameter_list|)
block|{
comment|// Split the projects into column references and expressions on top of them.
comment|// Creating a RexProgram is a convenient way to do this.
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexProgram
name|program
init|=
name|RexProgram
operator|.
name|create
argument_list|(
name|interpreter
operator|.
name|getRowType
argument_list|()
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
literal|null
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|projectOrdinals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|extraProjects
decl_stmt|;
if|if
condition|(
name|program
operator|.
name|getExprList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|program
operator|.
name|getInputRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
comment|// There are only field references, no non-trivial expressions.
for|for
control|(
name|RexLocalRef
name|ref
range|:
name|program
operator|.
name|getProjectList
argument_list|()
control|)
block|{
name|projectOrdinals
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|extraProjects
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|extraProjects
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|RexShuttle
name|shuttle
init|=
operator|new
name|RexShuttle
argument_list|()
block|{
specifier|final
name|List
argument_list|<
name|RexInputRef
argument_list|>
name|inputRefs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
specifier|final
name|int
name|source
init|=
name|inputRef
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|target
init|=
name|projectOrdinals
operator|.
name|indexOf
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|RexInputRef
name|ref
decl_stmt|;
if|if
condition|(
name|target
operator|<
literal|0
condition|)
block|{
name|target
operator|=
name|projectOrdinals
operator|.
name|size
argument_list|()
expr_stmt|;
name|projectOrdinals
operator|.
name|add
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|ref
operator|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|inputRef
operator|.
name|getType
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|inputRefs
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|inputRefs
operator|.
name|get
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|project
operator|.
name|getProjects
argument_list|()
control|)
block|{
name|extraProjects
operator|.
name|add
argument_list|(
name|node
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RelNode
name|input
init|=
name|interpreter
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|input
operator|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|input
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|EnumerableRel
operator|.
name|FILTER_FACTORY
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|newProject
init|=
name|RelOptUtil
operator|.
name|createProject
argument_list|(
name|EnumerableRel
operator|.
name|PROJECT_FACTORY
argument_list|,
name|input
argument_list|,
name|projectOrdinals
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newInterpreter
init|=
operator|new
name|EnumerableInterpreter
argument_list|(
name|interpreter
operator|.
name|getCluster
argument_list|()
argument_list|,
name|interpreter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newProject
argument_list|,
literal|0.15d
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|residue
decl_stmt|;
if|if
condition|(
name|extraProjects
operator|!=
literal|null
condition|)
block|{
name|residue
operator|=
name|RelOptUtil
operator|.
name|createProject
argument_list|(
name|newInterpreter
argument_list|,
name|extraProjects
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|residue
operator|=
name|newInterpreter
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|residue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ProjectTableRule.java
end_comment

end_unit

