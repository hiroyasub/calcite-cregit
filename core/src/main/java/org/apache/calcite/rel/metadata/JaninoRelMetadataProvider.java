begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|JaninoRexCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|AbstractConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|CalcitePrepareImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|AbstractRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCalc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCorrelate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalIntersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|stream
operator|.
name|LogicalChi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|stream
operator|.
name|LogicalDelta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ControlFlowException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|SaffronProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|CompileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|CompilerFactoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|ICompilerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|ISimpleCompiler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link RelMetadataProvider} interface that generates  * a class that dispatches to the underlying providers.  */
end_comment

begin_class
specifier|public
class|class
name|JaninoRelMetadataProvider
implements|implements
name|RelMetadataProvider
block|{
specifier|private
specifier|final
name|RelMetadataProvider
name|provider
decl_stmt|;
comment|// Constants and static fields
specifier|public
specifier|static
specifier|final
name|JaninoRelMetadataProvider
name|DEFAULT
init|=
name|JaninoRelMetadataProvider
operator|.
name|of
argument_list|(
name|DefaultRelMetadataProvider
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|ALL_RELS
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Cache of pre-generated handlers by provider and kind of metadata.    * For the cache to be effective, providers should implement identity    * correctly. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
specifier|final
name|LoadingCache
argument_list|<
name|Key
argument_list|,
name|MetadataHandler
argument_list|>
name|HANDLERS
init|=
name|maxSize
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|SaffronProperties
operator|.
name|INSTANCE
operator|.
name|metadataHandlerCacheMaximumSize
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|key
lambda|->
name|load3
argument_list|(
name|key
operator|.
name|def
argument_list|,
name|key
operator|.
name|provider
operator|.
name|handlers
argument_list|(
name|key
operator|.
name|def
argument_list|)
argument_list|,
name|key
operator|.
name|relClasses
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Pre-register the most common relational operators, to reduce the number of
comment|// times we re-generate.
static|static
block|{
name|DEFAULT
operator|.
name|register
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|AbstractRelNode
operator|.
name|class
argument_list|,
name|RelSubset
operator|.
name|class
argument_list|,
name|HepRelVertex
operator|.
name|class
argument_list|,
name|ConverterImpl
operator|.
name|class
argument_list|,
name|AbstractConverter
operator|.
name|class
argument_list|,
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|LogicalCalc
operator|.
name|class
argument_list|,
name|LogicalCorrelate
operator|.
name|class
argument_list|,
name|LogicalExchange
operator|.
name|class
argument_list|,
name|LogicalFilter
operator|.
name|class
argument_list|,
name|LogicalIntersect
operator|.
name|class
argument_list|,
name|LogicalJoin
operator|.
name|class
argument_list|,
name|LogicalMinus
operator|.
name|class
argument_list|,
name|LogicalProject
operator|.
name|class
argument_list|,
name|LogicalSort
operator|.
name|class
argument_list|,
name|LogicalTableFunctionScan
operator|.
name|class
argument_list|,
name|LogicalTableModify
operator|.
name|class
argument_list|,
name|LogicalTableScan
operator|.
name|class
argument_list|,
name|LogicalUnion
operator|.
name|class
argument_list|,
name|LogicalValues
operator|.
name|class
argument_list|,
name|LogicalWindow
operator|.
name|class
argument_list|,
name|LogicalChi
operator|.
name|class
argument_list|,
name|LogicalDelta
operator|.
name|class
argument_list|,
name|EnumerableAggregate
operator|.
name|class
argument_list|,
name|EnumerableFilter
operator|.
name|class
argument_list|,
name|EnumerableProject
operator|.
name|class
argument_list|,
name|EnumerableJoin
operator|.
name|class
argument_list|,
name|EnumerableTableScan
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Private constructor; use {@link #of}. */
specifier|private
name|JaninoRelMetadataProvider
parameter_list|(
name|RelMetadataProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
comment|/** Creates a JaninoRelMetadataProvider.    *    * @param provider Underlying provider    */
specifier|public
specifier|static
name|JaninoRelMetadataProvider
name|of
parameter_list|(
name|RelMetadataProvider
name|provider
parameter_list|)
block|{
if|if
condition|(
name|provider
operator|instanceof
name|JaninoRelMetadataProvider
condition|)
block|{
return|return
operator|(
name|JaninoRelMetadataProvider
operator|)
name|provider
return|;
block|}
return|return
operator|new
name|JaninoRelMetadataProvider
argument_list|(
name|provider
argument_list|)
return|;
block|}
comment|// helper for initialization
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CacheBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|maxSize
parameter_list|(
name|CacheBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|maximumSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|JaninoRelMetadataProvider
operator|&&
operator|(
operator|(
name|JaninoRelMetadataProvider
operator|)
name|obj
operator|)
operator|.
name|provider
operator|.
name|equals
argument_list|(
name|provider
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|109
operator|+
name|provider
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|>
name|UnboundMetadata
argument_list|<
name|M
argument_list|>
name|apply
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|M
argument_list|>
name|metadataClass
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|>
name|Multimap
argument_list|<
name|Method
argument_list|,
name|MetadataHandler
argument_list|<
name|M
argument_list|>
argument_list|>
name|handlers
parameter_list|(
name|MetadataDef
argument_list|<
name|M
argument_list|>
name|def
parameter_list|)
block|{
return|return
name|provider
operator|.
name|handlers
argument_list|(
name|def
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|>
name|MetadataHandler
argument_list|<
name|M
argument_list|>
name|load3
parameter_list|(
name|MetadataDef
argument_list|<
name|M
argument_list|>
name|def
parameter_list|,
name|Multimap
argument_list|<
name|Method
argument_list|,
name|MetadataHandler
argument_list|<
name|M
argument_list|>
argument_list|>
name|map
parameter_list|,
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|relClasses
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"GeneratedMetadataHandler_"
operator|+
name|def
operator|.
name|metadataClass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|MetadataHandler
argument_list|>
name|providerSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|MetadataHandler
argument_list|>
argument_list|>
name|providerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//noinspection unchecked
specifier|final
name|ReflectiveRelMetadataProvider
operator|.
name|Space
name|space
init|=
operator|new
name|ReflectiveRelMetadataProvider
operator|.
name|Space
argument_list|(
operator|(
name|Multimap
operator|)
name|map
argument_list|)
decl_stmt|;
for|for
control|(
name|MetadataHandler
name|provider
range|:
name|space
operator|.
name|providerMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|providerSet
operator|.
name|add
argument_list|(
name|provider
argument_list|)
condition|)
block|{
name|providerList
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
literal|"provider"
operator|+
operator|(
name|providerSet
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|,
name|provider
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"  private final java.util.List relClasses;\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|MetadataHandler
argument_list|>
name|pair
range|:
name|providerList
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"  public final "
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|right
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|left
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"  public "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"(java.util.List relClasses"
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|MetadataHandler
argument_list|>
name|pair
range|:
name|providerList
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|right
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|left
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    this.relClasses = relClasses;\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|MetadataHandler
argument_list|>
name|pair
range|:
name|providerList
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"    this."
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|left
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|left
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  public "
argument_list|)
operator|.
name|append
argument_list|(
name|MetadataDef
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" getDef() {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    return "
argument_list|)
operator|.
name|append
argument_list|(
name|def
operator|.
name|metadataClass
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".DEF;\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Method
argument_list|>
name|method
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|def
operator|.
name|methods
argument_list|)
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"  public "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"(\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|RelNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" r,\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|RelMetadataQuery
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" mq"
argument_list|)
expr_stmt|;
name|paramList
argument_list|(
name|buff
argument_list|,
name|method
operator|.
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"    final java.util.List key = "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|method
operator|.
name|e
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|<
literal|4
condition|?
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|FlatLists
operator|.
name|class
else|:
name|ImmutableList
operator|.
name|class
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".of("
argument_list|)
operator|.
name|append
argument_list|(
name|def
operator|.
name|metadataClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|i
operator|==
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|".DEF"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|".DEF.methods.get("
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|", r"
argument_list|)
expr_stmt|;
name|safeArgList
argument_list|(
name|buff
argument_list|,
name|method
operator|.
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    final Object v = mq.map.get(key);\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    if (v != null) {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      if (v == "
argument_list|)
operator|.
name|append
argument_list|(
name|NullSentinel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".ACTIVE) {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"        throw "
argument_list|)
operator|.
name|append
argument_list|(
name|CyclicMetadataException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".INSTANCE;\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      if (v == "
argument_list|)
operator|.
name|append
argument_list|(
name|NullSentinel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".INSTANCE) {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"        return null;\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      return ("
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") v;\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    mq.map.put(key,"
argument_list|)
operator|.
name|append
argument_list|(
name|NullSentinel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".ACTIVE);\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    try {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      final "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" x = "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"_(r, mq"
argument_list|)
expr_stmt|;
name|argList
argument_list|(
name|buff
argument_list|,
name|method
operator|.
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      mq.map.put(key, "
argument_list|)
operator|.
name|append
argument_list|(
name|NullSentinel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".mask(x));\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      return x;\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    } catch ("
argument_list|)
operator|.
name|append
argument_list|(
name|Exception
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" e) {\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      mq.map.remove(key);\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      throw e;\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  private "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"_(\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|RelNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" r,\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"      "
argument_list|)
operator|.
name|append
argument_list|(
name|RelMetadataQuery
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" mq"
argument_list|)
expr_stmt|;
name|paramList
argument_list|(
name|buff
argument_list|,
name|method
operator|.
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"    switch (relClasses.indexOf(r.getClass())) {\n"
argument_list|)
expr_stmt|;
comment|// Build a list of clauses, grouping clauses that have the same action.
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clauses
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|buf2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|relClass
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|relClasses
argument_list|)
control|)
block|{
if|if
condition|(
name|relClass
operator|.
name|e
operator|==
name|HepRelVertex
operator|.
name|class
condition|)
block|{
name|buf2
operator|.
name|append
argument_list|(
literal|"      return "
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"((("
argument_list|)
operator|.
name|append
argument_list|(
name|relClass
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") r).getCurrentRel(), mq"
argument_list|)
expr_stmt|;
name|argList
argument_list|(
name|buf2
argument_list|,
name|method
operator|.
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Method
name|handler
init|=
name|space
operator|.
name|find
argument_list|(
name|relClass
operator|.
name|e
argument_list|,
name|method
operator|.
name|e
argument_list|)
decl_stmt|;
specifier|final
name|String
name|v
init|=
name|findProvider
argument_list|(
name|providerList
argument_list|,
name|handler
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
decl_stmt|;
name|buf2
operator|.
name|append
argument_list|(
literal|"      return "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|method
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"(("
argument_list|)
operator|.
name|append
argument_list|(
name|handler
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") r, mq"
argument_list|)
expr_stmt|;
name|argList
argument_list|(
name|buf2
argument_list|,
name|method
operator|.
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
block|}
name|clauses
operator|.
name|put
argument_list|(
name|buf2
operator|.
name|toString
argument_list|()
argument_list|,
name|relClass
operator|.
name|i
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|buf2
operator|.
name|append
argument_list|(
literal|"      throw new "
argument_list|)
operator|.
name|append
argument_list|(
name|NoHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"(r.getClass());\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|put
argument_list|(
name|buf2
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|pair
range|:
name|clauses
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|relClasses
operator|.
name|indexOf
argument_list|(
name|RelNode
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"    default:\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Integer
name|integer
range|:
name|pair
operator|.
name|getValue
argument_list|()
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"    case "
argument_list|)
operator|.
name|append
argument_list|(
name|integer
argument_list|)
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|buff
operator|.
name|append
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Pair
operator|.
name|right
argument_list|(
name|providerList
argument_list|)
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|relClasses
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|compile
argument_list|(
name|name
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|,
name|def
argument_list|,
name|argList
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CompileException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error compiling:\n"
operator|+
name|buff
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|findProvider
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|MetadataHandler
argument_list|>
argument_list|>
name|providerList
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
parameter_list|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|MetadataHandler
argument_list|>
name|pair
range|:
name|providerList
control|)
block|{
if|if
condition|(
name|declaringClass
operator|.
name|isInstance
argument_list|(
name|pair
operator|.
name|right
argument_list|)
condition|)
block|{
return|return
name|pair
operator|.
name|left
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not found: "
operator|+
name|declaringClass
argument_list|)
throw|;
block|}
comment|/** Returns e.g. ", ignoreNulls". */
specifier|private
specifier|static
name|StringBuilder
name|argList
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Ord
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|t
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", a"
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
return|;
block|}
comment|/** Returns e.g. ", ignoreNulls". */
specifier|private
specifier|static
name|StringBuilder
name|safeArgList
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Ord
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|t
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|Primitive
operator|.
name|is
argument_list|(
name|t
operator|.
name|e
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", a"
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|RexNode
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|t
operator|.
name|e
argument_list|)
condition|)
block|{
comment|// For RexNode, convert to string, because equals does not look deep.
comment|//   a1 == null ? "" : a1.toString()
name|buff
operator|.
name|append
argument_list|(
literal|", a"
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|" == null ? \"\" : a"
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|".toString()"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|NullSentinel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".mask(a"
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
return|;
block|}
comment|/** Returns e.g. ",\n boolean ignoreNulls". */
specifier|private
specifier|static
name|StringBuilder
name|paramList
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Ord
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|t
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|",\n      "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" a"
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
return|;
block|}
specifier|static
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|>
name|MetadataHandler
argument_list|<
name|M
argument_list|>
name|compile
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|classBody
parameter_list|,
name|MetadataDef
argument_list|<
name|M
argument_list|>
name|def
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|argList
parameter_list|)
throws|throws
name|CompileException
throws|,
name|IOException
block|{
specifier|final
name|ICompilerFactory
name|compilerFactory
decl_stmt|;
try|try
block|{
name|compilerFactory
operator|=
name|CompilerFactoryFactory
operator|.
name|getDefaultCompilerFactory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate java compiler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|ISimpleCompiler
name|compiler
init|=
name|compilerFactory
operator|.
name|newSimpleCompiler
argument_list|()
decl_stmt|;
name|compiler
operator|.
name|setParentClassLoader
argument_list|(
name|JaninoRexCompiler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
literal|"public final class "
operator|+
name|className
operator|+
literal|" implements "
operator|+
name|def
operator|.
name|handlerClass
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" {\n"
operator|+
name|classBody
operator|+
literal|"\n"
operator|+
literal|"}"
decl_stmt|;
if|if
condition|(
name|CalcitePrepareImpl
operator|.
name|DEBUG
condition|)
block|{
comment|// Add line numbers to the generated janino class
name|compiler
operator|.
name|setDebuggingInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|compiler
operator|.
name|cook
argument_list|(
name|s
argument_list|)
expr_stmt|;
specifier|final
name|Constructor
name|constructor
decl_stmt|;
specifier|final
name|Object
name|o
decl_stmt|;
try|try
block|{
name|constructor
operator|=
name|compiler
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|o
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|argList
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|def
operator|.
name|handlerClass
operator|.
name|cast
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|synchronized
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|,
name|H
extends|extends
name|MetadataHandler
argument_list|<
name|M
argument_list|>
parameter_list|>
name|H
name|create
parameter_list|(
name|MetadataDef
argument_list|<
name|M
argument_list|>
name|def
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
operator|(
name|MetadataDef
operator|)
name|def
argument_list|,
name|provider
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|ALL_RELS
argument_list|)
argument_list|)
decl_stmt|;
comment|//noinspection unchecked
return|return
operator|(
name|H
operator|)
name|HANDLERS
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|synchronized
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|,
name|H
extends|extends
name|MetadataHandler
argument_list|<
name|M
argument_list|>
parameter_list|>
name|H
name|revise
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|rClass
parameter_list|,
name|MetadataDef
argument_list|<
name|M
argument_list|>
name|def
parameter_list|)
block|{
if|if
condition|(
name|ALL_RELS
operator|.
name|add
argument_list|(
name|rClass
argument_list|)
condition|)
block|{
name|HANDLERS
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
comment|//noinspection unchecked
return|return
operator|(
name|H
operator|)
name|create
argument_list|(
name|def
argument_list|)
return|;
block|}
comment|/** Registers some classes. Does not flush the providers, but next time we    * need to generate a provider, it will handle all of these classes. So,    * calling this method reduces the number of times we need to re-generate. */
specifier|public
name|void
name|register
parameter_list|(
name|Iterable
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|classes
parameter_list|)
block|{
comment|// Register the classes and their base classes up to RelNode. Don't bother
comment|// to remove duplicates; addAll will do that.
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|classes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|c
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Class
name|s
init|=
name|c
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|RelNode
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|s
argument_list|)
condition|)
block|{
comment|//noinspection unchecked
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|ALL_RELS
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
condition|)
block|{
name|HANDLERS
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Exception that indicates there there should be a handler for    * this class but there is not. The action is probably to    * re-generate the handler class. */
specifier|public
specifier|static
class|class
name|NoHandler
extends|extends
name|ControlFlowException
block|{
specifier|public
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
decl_stmt|;
specifier|public
name|NoHandler
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
parameter_list|)
block|{
name|this
operator|.
name|relClass
operator|=
name|relClass
expr_stmt|;
block|}
block|}
comment|/** Key for the cache. */
specifier|private
specifier|static
class|class
name|Key
block|{
specifier|public
specifier|final
name|MetadataDef
name|def
decl_stmt|;
specifier|public
specifier|final
name|RelMetadataProvider
name|provider
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|relClasses
decl_stmt|;
specifier|private
name|Key
parameter_list|(
name|MetadataDef
name|def
parameter_list|,
name|RelMetadataProvider
name|provider
parameter_list|,
name|ImmutableList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|relClassList
parameter_list|)
block|{
name|this
operator|.
name|def
operator|=
name|def
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|relClasses
operator|=
name|relClassList
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|def
operator|.
name|hashCode
argument_list|()
operator|*
literal|37
operator|+
name|provider
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
literal|37
operator|+
name|relClasses
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|instanceof
name|Key
operator|&&
operator|(
operator|(
name|Key
operator|)
name|obj
operator|)
operator|.
name|def
operator|.
name|equals
argument_list|(
name|def
argument_list|)
operator|&&
operator|(
operator|(
name|Key
operator|)
name|obj
operator|)
operator|.
name|provider
operator|.
name|equals
argument_list|(
name|provider
argument_list|)
operator|&&
operator|(
operator|(
name|Key
operator|)
name|obj
operator|)
operator|.
name|relClasses
operator|.
name|equals
argument_list|(
name|relClasses
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JaninoRelMetadataProvider.java
end_comment

end_unit

