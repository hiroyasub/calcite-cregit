begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Rule to extract a {@link org.apache.calcite.rel.core.Project}  * from an {@link org.apache.calcite.rel.core.Aggregate}  * and push it down towards the input.  *  *<p>What projections can be safely pushed down depends upon which fields the  * Aggregate uses.  *  *<p>To prevent cycles, this rule will not extract a {@code Project} if the  * {@code Aggregate}s input is already a {@code Project}.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateExtractProjectRule
extends|extends
name|RelRule
argument_list|<
name|AggregateExtractProjectRule
operator|.
name|Config
argument_list|>
implements|implements
name|TransformationRule
block|{
specifier|public
specifier|static
specifier|final
name|AggregateExtractProjectRule
name|SCAN
init|=
name|Config
operator|.
name|DEFAULT
operator|.
name|toRule
argument_list|()
decl_stmt|;
comment|/** Creates an AggregateExtractProjectRule. */
specifier|protected
name|AggregateExtractProjectRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateExtractProjectRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|inputClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|relBuilderFactory
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withOperandFor
argument_list|(
name|aggregateClass
argument_list|,
name|inputClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|AggregateExtractProjectRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelBuilderFactory
name|builderFactory
parameter_list|)
block|{
name|this
argument_list|(
name|Config
operator|.
name|DEFAULT
operator|.
name|withRelBuilderFactory
argument_list|(
name|builderFactory
argument_list|)
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|exactly
argument_list|(
name|operand
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Compute which input fields are used.
comment|// 1. group fields are always used
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|rebuild
argument_list|()
decl_stmt|;
comment|// 2. agg functions
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
condition|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|aggregate
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|inputFieldsUsed
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|inputFieldsUsed
operator|.
name|build
argument_list|()
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|relBuilder
operator|.
name|field
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|j
operator|++
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|project
argument_list|(
name|projects
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|newGroupSet
init|=
name|Mappings
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|ImmutableBitSet
argument_list|>
name|newGroupSets
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|bitSet
lambda|->
name|Mappings
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|bitSet
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelBuilder
operator|.
name|AggCall
argument_list|>
name|newAggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
name|relBuilder
operator|.
name|fields
argument_list|(
name|Mappings
operator|.
name|apply2
argument_list|(
name|mapping
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|filterArg
init|=
name|aggCall
operator|.
name|filterArg
operator|<
literal|0
condition|?
literal|null
else|:
name|relBuilder
operator|.
name|field
argument_list|(
name|Mappings
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|)
decl_stmt|;
name|newAggCallList
operator|.
name|add
argument_list|(
name|relBuilder
operator|.
name|aggregateCall
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|args
argument_list|)
operator|.
name|distinct
argument_list|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|filterArg
argument_list|)
operator|.
name|approximate
argument_list|(
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|)
operator|.
name|sort
argument_list|(
name|relBuilder
operator|.
name|fields
argument_list|(
name|aggCall
operator|.
name|collation
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|aggCall
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelBuilder
operator|.
name|GroupKey
name|groupKey
init|=
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|newGroupSet
argument_list|,
name|newGroupSets
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|groupKey
argument_list|,
name|newAggCallList
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
name|Config
name|DEFAULT
init|=
name|EMPTY
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|withOperandFor
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|LogicalTableScan
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|default
name|AggregateExtractProjectRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|AggregateExtractProjectRule
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Defines an operand tree for the given classes. */
specifier|default
name|Config
name|withOperandFor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|aggregateClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|inputClass
parameter_list|)
block|{
return|return
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|aggregateClass
argument_list|)
operator|.
name|oneInput
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|inputClass
argument_list|)
comment|// Predicate prevents matching against an Aggregate whose
comment|// input is already a Project. Prevents this rule firing
comment|// repeatedly.
operator|.
name|predicate
argument_list|(
name|r
lambda|->
operator|!
operator|(
name|r
operator|instanceof
name|Project
operator|)
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

