begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSamplingParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Relational expression that returns a sample of the rows from its input.  *  *<p>In SQL, a sample is expressed using the {@code TABLESAMPLE BERNOULLI} or  * {@code SYSTEM} keyword applied to a table, view or sub-query.  */
end_comment

begin_class
specifier|public
class|class
name|Sample
extends|extends
name|SingleRel
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|RelOptSamplingParameters
name|params
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|Sample
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RelOptSamplingParameters
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
comment|/**    * Creates a Sample by parsing serialized output.    */
specifier|public
name|Sample
parameter_list|(
name|RelInput
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
operator|.
name|getCluster
argument_list|()
argument_list|,
name|input
operator|.
name|getInput
argument_list|()
argument_list|,
name|getSamplingParameters
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|private
specifier|static
name|RelOptSamplingParameters
name|getSamplingParameters
parameter_list|(
name|RelInput
name|input
parameter_list|)
block|{
name|String
name|mode
init|=
name|input
operator|.
name|getString
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
name|float
name|percentage
init|=
name|input
operator|.
name|getFloat
argument_list|(
literal|"rate"
argument_list|)
decl_stmt|;
name|Object
name|repeatableSeed
init|=
name|input
operator|.
name|get
argument_list|(
literal|"repeatableSeed"
argument_list|)
decl_stmt|;
name|boolean
name|repeatable
init|=
name|repeatableSeed
operator|instanceof
name|Number
decl_stmt|;
return|return
operator|new
name|RelOptSamplingParameters
argument_list|(
name|mode
operator|.
name|equals
argument_list|(
literal|"bernoulli"
argument_list|)
argument_list|,
name|percentage
argument_list|,
name|repeatable
argument_list|,
name|repeatable
condition|?
operator|(
operator|(
name|Number
operator|)
name|repeatableSeed
operator|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|containsIfApplicable
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|Sample
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**    * Retrieve the sampling parameters for this Sample.    */
specifier|public
name|RelOptSamplingParameters
name|getSamplingParameters
parameter_list|()
block|{
return|return
name|params
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"mode"
argument_list|,
name|params
operator|.
name|isBernoulli
argument_list|()
condition|?
literal|"bernoulli"
else|:
literal|"system"
argument_list|)
operator|.
name|item
argument_list|(
literal|"rate"
argument_list|,
name|params
operator|.
name|getSamplingPercentage
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"repeatableSeed"
argument_list|,
name|params
operator|.
name|isRepeatable
argument_list|()
condition|?
name|params
operator|.
name|getRepeatableSeed
argument_list|()
else|:
literal|"-"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

