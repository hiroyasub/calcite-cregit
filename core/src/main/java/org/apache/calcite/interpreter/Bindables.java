begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|AggImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|RexImpTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utilities pertaining to {@link BindableRel} and {@link BindableConvention}.  */
end_comment

begin_class
specifier|public
class|class
name|Bindables
block|{
specifier|private
name|Bindables
parameter_list|()
block|{
block|}
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_TABLE_RULE
init|=
operator|new
name|BindableTableScanRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_FILTER_RULE
init|=
operator|new
name|BindableFilterRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_PROJECT_RULE
init|=
operator|new
name|BindableProjectRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_SORT_RULE
init|=
operator|new
name|BindableSortRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_JOIN_RULE
init|=
operator|new
name|BindableJoinRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_UNION_RULE
init|=
operator|new
name|BindableUnionRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_VALUES_RULE
init|=
operator|new
name|BindableValuesRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_AGGREGATE_RULE
init|=
operator|new
name|BindableAggregateRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptRule
name|BINDABLE_WINDOW_RULE
init|=
operator|new
name|BindableWindowRule
argument_list|()
decl_stmt|;
comment|/** All rules that convert logical relational expression to bindable. */
specifier|public
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|RelOptRule
argument_list|>
name|RULES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|NoneToBindableConverterRule
operator|.
name|INSTANCE
argument_list|,
name|BINDABLE_TABLE_RULE
argument_list|,
name|BINDABLE_FILTER_RULE
argument_list|,
name|BINDABLE_PROJECT_RULE
argument_list|,
name|BINDABLE_SORT_RULE
argument_list|,
name|BINDABLE_JOIN_RULE
argument_list|,
name|BINDABLE_UNION_RULE
argument_list|,
name|BINDABLE_VALUES_RULE
argument_list|,
name|BINDABLE_AGGREGATE_RULE
argument_list|,
name|BINDABLE_WINDOW_RULE
argument_list|)
decl_stmt|;
comment|/** Helper method that converts a bindable relational expression into a    * record iterator.    *    *<p>Any bindable can be compiled; if its input is also bindable, it becomes    * part of the same compilation unit.    */
specifier|private
specifier|static
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|help
parameter_list|(
name|DataContext
name|dataContext
parameter_list|,
name|BindableRel
name|rel
parameter_list|)
block|{
return|return
operator|new
name|Interpreter
argument_list|(
name|dataContext
argument_list|,
name|rel
argument_list|)
return|;
block|}
comment|/** Rule that converts a {@link ScannableTable} to bindable convention. */
specifier|private
specifier|static
class|class
name|BindableTableScanRule
extends|extends
name|RelOptRule
block|{
specifier|public
name|BindableTableScanRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|TableScan
name|scan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|BindableTableScan
argument_list|(
name|scan
operator|.
name|getCluster
argument_list|()
argument_list|,
name|scan
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|scan
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Scan of a table that implements {@link ScannableTable} and therefore can    * be converted into an {@link Enumerable}. */
specifier|private
specifier|static
class|class
name|BindableTableScan
extends|extends
name|TableScan
implements|implements
name|BindableRel
block|{
name|BindableTableScan
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|table
operator|.
name|unwrap
argument_list|(
name|ScannableTable
operator|.
name|class
argument_list|)
operator|.
name|scan
argument_list|(
name|dataContext
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// TODO:
block|}
block|}
comment|/** Rule that converts a {@link Filter} to bindable convention. */
specifier|private
specifier|static
class|class
name|BindableFilterRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|BindableFilterRule
parameter_list|()
block|{
name|super
argument_list|(
name|LogicalFilter
operator|.
name|class
argument_list|,
name|RelOptUtil
operator|.
name|FILTER_PREDICATE
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableFilterRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalFilter
name|filter
init|=
operator|(
name|LogicalFilter
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|BindableFilter
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|convert
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|,
name|filter
operator|.
name|getInput
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Filter}    * in bindable convention. */
specifier|public
specifier|static
class|class
name|BindableFilter
extends|extends
name|Filter
implements|implements
name|BindableRel
block|{
specifier|public
name|BindableFilter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|BindableConvention
assert|;
block|}
specifier|public
name|BindableFilter
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
operator|new
name|BindableFilter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|FilterNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalProject}    * to a {@link BindableProject}.    */
specifier|private
specifier|static
class|class
name|BindableProjectRule
extends|extends
name|ConverterRule
block|{
name|BindableProjectRule
parameter_list|()
block|{
name|super
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|RelOptUtil
operator|.
name|PROJECT_PREDICATE
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableProjectRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalProject
name|project
init|=
operator|(
name|LogicalProject
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|BindableProject
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|convert
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Project} in    * bindable calling convention. */
specifier|public
specifier|static
class|class
name|BindableProject
extends|extends
name|Project
implements|implements
name|BindableRel
block|{
specifier|public
name|BindableProject
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|BindableConvention
assert|;
block|}
specifier|public
name|BindableProject
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
return|return
operator|new
name|BindableProject
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|projects
argument_list|,
name|rowType
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|ProjectNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert an {@link org.apache.calcite.rel.core.Sort} to a    * {@link org.apache.calcite.interpreter.Bindables.BindableSort}.    */
specifier|private
specifier|static
class|class
name|BindableSortRule
extends|extends
name|ConverterRule
block|{
name|BindableSortRule
parameter_list|()
block|{
name|super
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableSortRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|sort
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|sort
operator|.
name|getInput
argument_list|()
decl_stmt|;
return|return
operator|new
name|BindableSort
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Sort}    * bindable calling convention. */
specifier|public
specifier|static
class|class
name|BindableSort
extends|extends
name|Sort
implements|implements
name|BindableRel
block|{
specifier|public
name|BindableSort
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|BindableConvention
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|input
operator|.
name|getConvention
argument_list|()
assert|;
block|}
annotation|@
name|Override
specifier|public
name|BindableSort
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|newInput
parameter_list|,
name|RelCollation
name|newCollation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
return|return
operator|new
name|BindableSort
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|newInput
argument_list|,
name|newCollation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|SortNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalJoin}    * to a {@link BindableJoin}.    */
specifier|private
specifier|static
class|class
name|BindableJoinRule
extends|extends
name|ConverterRule
block|{
name|BindableJoinRule
parameter_list|()
block|{
name|super
argument_list|(
name|LogicalJoin
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableJoinRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalJoin
name|join
init|=
operator|(
name|LogicalJoin
operator|)
name|rel
decl_stmt|;
specifier|final
name|BindableConvention
name|out
init|=
name|BindableConvention
operator|.
name|INSTANCE
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|join
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|BindableJoin
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|convert
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesStopped
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Join} in    * bindable calling convention. */
specifier|public
specifier|static
class|class
name|BindableJoin
extends|extends
name|Join
implements|implements
name|BindableRel
block|{
specifier|protected
name|BindableJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BindableJoin
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RexNode
name|conditionExpr
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
block|{
return|return
operator|new
name|BindableJoin
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|conditionExpr
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|JoinNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert an {@link org.apache.calcite.rel.logical.LogicalUnion}    * to a {@link BindableUnion}.    */
specifier|private
specifier|static
class|class
name|BindableUnionRule
extends|extends
name|ConverterRule
block|{
name|BindableUnionRule
parameter_list|()
block|{
name|super
argument_list|(
name|LogicalUnion
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableUnionRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalUnion
name|union
init|=
operator|(
name|LogicalUnion
operator|)
name|rel
decl_stmt|;
specifier|final
name|BindableConvention
name|out
init|=
name|BindableConvention
operator|.
name|INSTANCE
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|union
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
operator|new
name|BindableUnion
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertList
argument_list|(
name|union
operator|.
name|getInputs
argument_list|()
argument_list|,
name|out
argument_list|)
argument_list|,
name|union
operator|.
name|all
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Union} in    * bindable calling convention. */
specifier|public
specifier|static
class|class
name|BindableUnion
extends|extends
name|Union
implements|implements
name|BindableRel
block|{
specifier|public
name|BindableUnion
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BindableUnion
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
return|return
operator|new
name|BindableUnion
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|all
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|UnionNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Values}    * in bindable calling convention. */
specifier|public
specifier|static
class|class
name|BindableValues
extends|extends
name|Values
implements|implements
name|BindableRel
block|{
name|BindableValues
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|ImmutableList
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
operator|new
name|BindableValues
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|tuples
argument_list|,
name|traitSet
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|ValuesNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/** Rule that converts a {@link Values} to bindable convention. */
specifier|private
specifier|static
class|class
name|BindableValuesRule
extends|extends
name|ConverterRule
block|{
name|BindableValuesRule
parameter_list|()
block|{
name|super
argument_list|(
name|LogicalValues
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableValuesRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|LogicalValues
name|values
init|=
operator|(
name|LogicalValues
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|BindableValues
argument_list|(
name|values
operator|.
name|getCluster
argument_list|()
argument_list|,
name|values
operator|.
name|getRowType
argument_list|()
argument_list|,
name|values
operator|.
name|getTuples
argument_list|()
argument_list|,
name|values
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Aggregate}    * in bindable calling convention. */
specifier|public
specifier|static
class|class
name|BindableAggregate
extends|extends
name|Aggregate
implements|implements
name|BindableRel
block|{
specifier|public
name|BindableAggregate
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|boolean
name|indicator
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|indicator
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|instanceof
name|BindableConvention
assert|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggCalls
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"distinct aggregation not supported"
argument_list|)
throw|;
block|}
name|AggImplementor
name|implementor2
init|=
name|RexImpTable
operator|.
name|INSTANCE
operator|.
name|get
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementor2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRelException
argument_list|(
literal|"aggregation "
operator|+
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|BindableAggregate
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|boolean
name|indicator
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|BindableAggregate
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|indicator
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|AggregateNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/** Rule that converts an {@link Aggregate} to bindable convention. */
specifier|private
specifier|static
class|class
name|BindableAggregateRule
extends|extends
name|ConverterRule
block|{
name|BindableAggregateRule
parameter_list|()
block|{
name|super
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableAggregateRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalAggregate
name|agg
init|=
operator|(
name|LogicalAggregate
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|agg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|BindableAggregate
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|(
name|agg
operator|.
name|getInput
argument_list|()
argument_list|,
name|traitSet
argument_list|)
argument_list|,
name|agg
operator|.
name|indicator
argument_list|,
name|agg
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|agg
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|agg
operator|.
name|getAggCallList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|RelOptPlanner
operator|.
name|LOGGER
operator|.
name|fine
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/** Implementation of {@link org.apache.calcite.rel.core.Window}    * in bindable convention. */
specifier|public
specifier|static
class|class
name|BindableWindow
extends|extends
name|Window
implements|implements
name|BindableRel
block|{
comment|/** Creates an BindableWindowRel. */
name|BindableWindow
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexLiteral
argument_list|>
name|constants
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|Group
argument_list|>
name|groups
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|constants
argument_list|,
name|rowType
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|BindableWindow
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|constants
argument_list|,
name|rowType
argument_list|,
name|groups
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|)
operator|.
name|multiplyBy
argument_list|(
name|BindableConvention
operator|.
name|COST_MULTIPLIER
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|bind
parameter_list|(
name|DataContext
name|dataContext
parameter_list|)
block|{
return|return
name|help
argument_list|(
name|dataContext
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
block|{
return|return
operator|new
name|WindowNode
argument_list|(
name|implementor
operator|.
name|interpreter
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link org.apache.calcite.rel.logical.LogicalWindow}    * to a {@link BindableWindow}.    */
specifier|private
specifier|static
class|class
name|BindableWindowRule
extends|extends
name|ConverterRule
block|{
name|BindableWindowRule
parameter_list|()
block|{
name|super
argument_list|(
name|LogicalWindow
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|BindableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"BindableWindowRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|LogicalWindow
name|winAgg
init|=
operator|(
name|LogicalWindow
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelTraitSet
name|traitSet
init|=
name|winAgg
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|winAgg
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|convertedInput
init|=
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|BindableWindow
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|convertedInput
argument_list|,
name|winAgg
operator|.
name|getConstants
argument_list|()
argument_list|,
name|winAgg
operator|.
name|getRowType
argument_list|()
argument_list|,
name|winAgg
operator|.
name|groups
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Bindables.java
end_comment

end_unit

