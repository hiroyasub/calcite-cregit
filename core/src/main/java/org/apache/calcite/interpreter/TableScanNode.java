begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Enumerables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|FilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|QueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Interpreter node that implements a  * {@link org.apache.calcite.rel.core.TableScan}.  */
end_comment

begin_class
specifier|public
class|class
name|TableScanNode
implements|implements
name|Node
block|{
specifier|private
name|TableScanNode
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|TableScan
name|rel
parameter_list|,
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|enumerable
parameter_list|)
block|{
name|compiler
operator|.
name|enumerable
argument_list|(
name|rel
argument_list|,
name|enumerable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// nothing to do
block|}
comment|/** Creates a TableScanNode.    *    *<p>Tries various table SPIs, and negotiates with the table which filters    * and projects it can implement. Adds to the Enumerable implementations of    * any filters and projects that cannot be implemented by the table. */
specifier|static
name|TableScanNode
name|create
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|TableScan
name|rel
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
annotation|@
name|Nullable
name|ImmutableIntList
name|projects
parameter_list|)
block|{
specifier|final
name|RelOptTable
name|relOptTable
init|=
name|rel
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|ProjectableFilterableTable
name|pfTable
init|=
name|relOptTable
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pfTable
operator|!=
literal|null
condition|)
block|{
return|return
name|createProjectableFilterable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|filters
argument_list|,
name|projects
argument_list|,
name|pfTable
argument_list|)
return|;
block|}
specifier|final
name|FilterableTable
name|filterableTable
init|=
name|relOptTable
operator|.
name|unwrap
argument_list|(
name|FilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterableTable
operator|!=
literal|null
condition|)
block|{
return|return
name|createFilterable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|filters
argument_list|,
name|projects
argument_list|,
name|filterableTable
argument_list|)
return|;
block|}
specifier|final
name|ScannableTable
name|scannableTable
init|=
name|relOptTable
operator|.
name|unwrap
argument_list|(
name|ScannableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|scannableTable
operator|!=
literal|null
condition|)
block|{
return|return
name|createScannable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|filters
argument_list|,
name|projects
argument_list|,
name|scannableTable
argument_list|)
return|;
block|}
comment|//noinspection unchecked
specifier|final
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|enumerable
init|=
name|relOptTable
operator|.
name|unwrap
argument_list|(
name|Enumerable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumerable
operator|!=
literal|null
condition|)
block|{
return|return
name|createEnumerable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|enumerable
argument_list|,
literal|null
argument_list|,
name|filters
argument_list|,
name|projects
argument_list|)
return|;
block|}
specifier|final
name|QueryableTable
name|queryableTable
init|=
name|relOptTable
operator|.
name|unwrap
argument_list|(
name|QueryableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryableTable
operator|!=
literal|null
condition|)
block|{
return|return
name|createQueryable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|filters
argument_list|,
name|projects
argument_list|,
name|queryableTable
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot convert table "
operator|+
name|relOptTable
operator|+
literal|" to enumerable"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|TableScanNode
name|createScannable
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|TableScan
name|rel
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
annotation|@
name|Nullable
name|ImmutableIntList
name|projects
parameter_list|,
name|ScannableTable
name|scannableTable
parameter_list|)
block|{
specifier|final
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|rowEnumerable
init|=
name|Enumerables
operator|.
name|toRow
argument_list|(
name|scannableTable
operator|.
name|scan
argument_list|(
name|compiler
operator|.
name|getDataContext
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createEnumerable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|rowEnumerable
argument_list|,
literal|null
argument_list|,
name|filters
argument_list|,
name|projects
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TableScanNode
name|createQueryable
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|TableScan
name|rel
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
annotation|@
name|Nullable
name|ImmutableIntList
name|projects
parameter_list|,
name|QueryableTable
name|queryableTable
parameter_list|)
block|{
specifier|final
name|DataContext
name|root
init|=
name|compiler
operator|.
name|getDataContext
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|relOptTable
init|=
name|rel
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|Type
name|elementType
init|=
name|queryableTable
operator|.
name|getElementType
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|root
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Util
operator|.
name|skipLast
argument_list|(
name|relOptTable
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
control|)
block|{
name|requireNonNull
argument_list|(
name|schema
argument_list|,
parameter_list|()
lambda|->
literal|"schema is null while resolving "
operator|+
name|name
operator|+
literal|" for table"
operator|+
name|relOptTable
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|=
name|schema
operator|.
name|getSubSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|rowEnumerable
decl_stmt|;
if|if
condition|(
name|elementType
operator|instanceof
name|Class
condition|)
block|{
comment|//noinspection unchecked
specifier|final
name|Queryable
argument_list|<
name|Object
argument_list|>
name|queryable
init|=
name|Schemas
operator|.
name|queryable
argument_list|(
name|root
argument_list|,
operator|(
name|Class
operator|)
name|elementType
argument_list|,
name|relOptTable
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Field
argument_list|>
name|fieldBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Class
name|type
init|=
operator|(
name|Class
operator|)
name|elementType
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|type
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|fieldBuilder
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
name|fieldBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|rowEnumerable
operator|=
name|queryable
operator|.
name|select
argument_list|(
name|o
lambda|->
block|{
specifier|final
annotation|@
name|Nullable
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|values
index|[
name|i
index|]
operator|=
name|field
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Row
argument_list|(
name|values
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowEnumerable
operator|=
name|Schemas
operator|.
name|queryable
argument_list|(
name|root
argument_list|,
name|Row
operator|.
name|class
argument_list|,
name|relOptTable
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createEnumerable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|rowEnumerable
argument_list|,
literal|null
argument_list|,
name|filters
argument_list|,
name|projects
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TableScanNode
name|createFilterable
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|TableScan
name|rel
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
annotation|@
name|Nullable
name|ImmutableIntList
name|projects
parameter_list|,
name|FilterableTable
name|filterableTable
parameter_list|)
block|{
specifier|final
name|DataContext
name|root
init|=
name|compiler
operator|.
name|getDataContext
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|mutableFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filters
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerable
init|=
name|filterableTable
operator|.
name|scan
argument_list|(
name|root
argument_list|,
name|mutableFilters
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|filter
range|:
name|mutableFilters
control|)
block|{
if|if
condition|(
operator|!
name|filters
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|filterableTableInventedFilter
argument_list|(
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|final
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|rowEnumerable
init|=
name|Enumerables
operator|.
name|toRow
argument_list|(
name|enumerable
argument_list|)
decl_stmt|;
return|return
name|createEnumerable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|rowEnumerable
argument_list|,
literal|null
argument_list|,
name|mutableFilters
argument_list|,
name|projects
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TableScanNode
name|createProjectableFilterable
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|TableScan
name|rel
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
annotation|@
name|Nullable
name|ImmutableIntList
name|projects
parameter_list|,
name|ProjectableFilterableTable
name|pfTable
parameter_list|)
block|{
specifier|final
name|DataContext
name|root
init|=
name|compiler
operator|.
name|getDataContext
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableIntList
name|originalProjects
init|=
name|projects
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|mutableFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filters
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|projectInts
decl_stmt|;
if|if
condition|(
name|projects
operator|==
literal|null
operator|||
name|projects
operator|.
name|equals
argument_list|(
name|TableScan
operator|.
name|identity
argument_list|(
name|rel
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|projectInts
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|projectInts
operator|=
name|projects
operator|.
name|toIntArray
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RexNode
name|filter
range|:
name|mutableFilters
control|)
block|{
if|if
condition|(
operator|!
name|filters
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|filterableTableInventedFilter
argument_list|(
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
block|}
specifier|final
name|ImmutableBitSet
name|usedFields
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|mutableFilters
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|usedField
range|:
name|usedFields
control|)
block|{
if|if
condition|(
operator|!
name|projects
operator|.
name|contains
argument_list|(
name|usedField
argument_list|)
condition|)
block|{
comment|// A field that is not projected is used in a filter that the
comment|// table rejected. We won't be able to apply the filter later.
comment|// Try again without any projects.
name|projects
operator|=
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|projects
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|usedField
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|changeCount
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changeCount
operator|>
literal|0
condition|)
block|{
continue|continue;
block|}
block|}
specifier|final
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|enumerable1
init|=
name|pfTable
operator|.
name|scan
argument_list|(
name|root
argument_list|,
name|mutableFilters
argument_list|,
name|projectInts
argument_list|)
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|rowEnumerable
init|=
name|Enumerables
operator|.
name|toRow
argument_list|(
name|enumerable1
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableIntList
name|rejectedProjects
decl_stmt|;
if|if
condition|(
name|originalProjects
operator|==
literal|null
operator|||
name|originalProjects
operator|.
name|equals
argument_list|(
name|projects
argument_list|)
condition|)
block|{
name|rejectedProjects
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// We projected extra columns because they were needed in filters. Now
comment|// project the leading columns.
name|rejectedProjects
operator|=
name|ImmutableIntList
operator|.
name|identity
argument_list|(
name|originalProjects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createEnumerable
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|rowEnumerable
argument_list|,
name|projects
argument_list|,
name|mutableFilters
argument_list|,
name|rejectedProjects
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|TableScanNode
name|createEnumerable
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|TableScan
name|rel
parameter_list|,
name|Enumerable
argument_list|<
name|Row
argument_list|>
name|enumerable
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|ImmutableIntList
name|acceptedProjects
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|rejectedFilters
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|ImmutableIntList
name|rejectedProjects
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rejectedFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|RexNode
name|filter
init|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|rejectedFilters
argument_list|)
decl_stmt|;
comment|// Re-map filter for the projects that have been applied already
specifier|final
name|RexNode
name|filter2
decl_stmt|;
specifier|final
name|RelDataType
name|inputRowType
decl_stmt|;
if|if
condition|(
name|acceptedProjects
operator|==
literal|null
condition|)
block|{
name|filter2
operator|=
name|filter
expr_stmt|;
name|inputRowType
operator|=
name|rel
operator|.
name|getRowType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|target
argument_list|(
name|acceptedProjects
argument_list|,
name|rel
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
name|filter2
operator|=
name|RexUtil
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|filter
argument_list|)
expr_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|builder
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fieldList
init|=
name|rel
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|acceptedProject
range|:
name|acceptedProjects
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|fieldList
operator|.
name|get
argument_list|(
name|acceptedProject
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inputRowType
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Scalar
name|condition
init|=
name|compiler
operator|.
name|compile
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|filter2
argument_list|)
argument_list|,
name|inputRowType
argument_list|)
decl_stmt|;
specifier|final
name|Context
name|context
init|=
name|compiler
operator|.
name|createContext
argument_list|()
decl_stmt|;
name|enumerable
operator|=
name|enumerable
operator|.
name|where
argument_list|(
name|row
lambda|->
block|{
name|context
operator|.
name|values
operator|=
name|row
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|Boolean
name|b
init|=
operator|(
name|Boolean
operator|)
name|condition
operator|.
name|execute
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|b
operator|!=
literal|null
operator|&&
name|b
return|;
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rejectedProjects
operator|!=
literal|null
condition|)
block|{
specifier|final
annotation|@
name|Nullable
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|rejectedProjects
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|enumerable
operator|=
name|enumerable
operator|.
name|select
argument_list|(
name|row
lambda|->
block|{
specifier|final
annotation|@
name|Nullable
name|Object
index|[]
name|inValues
init|=
name|row
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rejectedProjects
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|inValues
index|[
name|rejectedProjects
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|]
expr_stmt|;
block|}
return|return
name|Row
operator|.
name|asCopy
argument_list|(
name|values
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TableScanNode
argument_list|(
name|compiler
argument_list|,
name|rel
argument_list|,
name|enumerable
argument_list|)
return|;
block|}
block|}
end_class

end_unit

