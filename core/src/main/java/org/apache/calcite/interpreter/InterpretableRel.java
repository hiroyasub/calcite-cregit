begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Relational expression that can implement itself using an interpreter.  */
end_comment

begin_interface
specifier|public
interface|interface
name|InterpretableRel
extends|extends
name|RelNode
block|{
comment|/** Creates an interpreter node to implement this relational expression. */
name|Node
name|implement
parameter_list|(
name|InterpreterImplementor
name|implementor
parameter_list|)
function_decl|;
comment|/** Context when a {@link RelNode} is being converted to an interpreter    * {@link Node}. */
class|class
name|InterpreterImplementor
block|{
specifier|public
specifier|final
name|Compiler
name|compiler
decl_stmt|;
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|internalParameters
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|final
name|CalcitePrepare
operator|.
expr|@
name|Nullable
name|SparkHandler
name|spark
expr_stmt|;
specifier|public
specifier|final
name|DataContext
name|dataContext
decl_stmt|;
specifier|public
specifier|final
name|Map
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|<
name|Sink
argument_list|>
argument_list|>
name|relSinks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|InterpreterImplementor
argument_list|(
name|Compiler
name|compiler
argument_list|,
name|CalcitePrepare
operator|.
expr|@
name|Nullable
name|SparkHandler
name|spark
argument_list|,
name|DataContext
name|dataContext
argument_list|)
block|{
name|this
operator|.
name|compiler
operator|=
name|compiler
block|;
name|this
operator|.
name|spark
operator|=
name|spark
block|;
name|this
operator|.
name|dataContext
operator|=
name|dataContext
block|;     }
block|}
block|}
end_interface

end_unit

