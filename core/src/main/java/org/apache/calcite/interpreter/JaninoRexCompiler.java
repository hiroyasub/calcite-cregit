begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|JavaRowFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|PhysTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|RexToLixTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|BlockStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ClassDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|MemberDeclaration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformanceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|CompileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|CompilerFactoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|IClassBodyEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|commons
operator|.
name|compiler
operator|.
name|ICompilerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Compiles a scalar expression ({@link RexNode}) to an expression that  * can be evaluated ({@link Scalar}) by generating a Java AST and compiling it  * to a class using Janino.  */
end_comment

begin_class
specifier|public
class|class
name|JaninoRexCompiler
implements|implements
name|Interpreter
operator|.
name|ScalarCompiler
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|public
name|JaninoRexCompiler
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Scalar
name|compile
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|)
block|{
specifier|final
name|RexProgramBuilder
name|programBuilder
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|inputRowType
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|nodes
control|)
block|{
name|programBuilder
operator|.
name|addProject
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexProgram
name|program
init|=
name|programBuilder
operator|.
name|getProgram
argument_list|()
decl_stmt|;
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ParameterExpression
name|context_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Context
operator|.
name|class
argument_list|,
literal|"context"
argument_list|)
decl_stmt|;
specifier|final
name|ParameterExpression
name|outputValues_
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
literal|"outputValues"
argument_list|)
decl_stmt|;
specifier|final
name|JavaTypeFactoryImpl
name|javaTypeFactory
init|=
operator|new
name|JavaTypeFactoryImpl
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|getTypeSystem
argument_list|()
argument_list|)
decl_stmt|;
comment|// public void execute(Context, Object[] outputValues)
specifier|final
name|RexToLixTranslator
operator|.
name|InputGetter
name|inputGetter
init|=
operator|new
name|RexToLixTranslator
operator|.
name|InputGetterImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|Expressions
operator|.
name|field
argument_list|(
name|context_
argument_list|,
name|BuiltInMethod
operator|.
name|CONTEXT_VALUES
operator|.
name|field
argument_list|)
argument_list|,
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|javaTypeFactory
argument_list|,
name|inputRowType
argument_list|,
name|JavaRowFormat
operator|.
name|ARRAY
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Function1
argument_list|<
name|String
argument_list|,
name|RexToLixTranslator
operator|.
name|InputGetter
argument_list|>
name|correlates
init|=
name|a0
lambda|->
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
decl_stmt|;
specifier|final
name|Expression
name|root
init|=
name|Expressions
operator|.
name|field
argument_list|(
name|context_
argument_list|,
name|BuiltInMethod
operator|.
name|CONTEXT_ROOT
operator|.
name|field
argument_list|)
decl_stmt|;
specifier|final
name|SqlConformance
name|conformance
init|=
name|SqlConformanceEnum
operator|.
name|DEFAULT
decl_stmt|;
comment|// TODO: get this from implementor
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
name|RexToLixTranslator
operator|.
name|translateProjects
argument_list|(
name|program
argument_list|,
name|javaTypeFactory
argument_list|,
name|conformance
argument_list|,
name|builder
argument_list|,
literal|null
argument_list|,
name|root
argument_list|,
name|inputGetter
argument_list|,
name|correlates
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|assign
argument_list|(
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|outputValues_
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|baz
argument_list|(
name|context_
argument_list|,
name|outputValues_
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
return|;
block|}
comment|/** Given a method that implements {@link Scalar#execute(Context, Object[])},    * adds a bridge method that implements {@link Scalar#execute(Context)}, and    * compiles. */
specifier|static
name|Scalar
name|baz
parameter_list|(
name|ParameterExpression
name|context_
parameter_list|,
name|ParameterExpression
name|outputValues_
parameter_list|,
name|BlockStatement
name|block
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|MemberDeclaration
argument_list|>
name|declarations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// public void execute(Context, Object[] outputValues)
name|declarations
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|void
operator|.
name|class
argument_list|,
name|BuiltInMethod
operator|.
name|SCALAR_EXECUTE2
operator|.
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|context_
argument_list|,
name|outputValues_
argument_list|)
argument_list|,
name|block
argument_list|)
argument_list|)
expr_stmt|;
comment|// public Object execute(Context)
specifier|final
name|BlockBuilder
name|builder
init|=
operator|new
name|BlockBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|values_
init|=
name|builder
operator|.
name|append
argument_list|(
literal|"values"
argument_list|,
name|Expressions
operator|.
name|newArrayBounds
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|statement
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|Scalar
operator|.
name|class
argument_list|,
literal|"this"
argument_list|)
argument_list|,
name|BuiltInMethod
operator|.
name|SCALAR_EXECUTE2
operator|.
name|method
argument_list|,
name|context_
argument_list|,
name|values_
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|return_
argument_list|(
literal|null
argument_list|,
name|Expressions
operator|.
name|arrayIndex
argument_list|(
name|values_
argument_list|,
name|Expressions
operator|.
name|constant
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|declarations
operator|.
name|add
argument_list|(
name|Expressions
operator|.
name|methodDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|BuiltInMethod
operator|.
name|SCALAR_EXECUTE1
operator|.
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|context_
argument_list|)
argument_list|,
name|builder
operator|.
name|toBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ClassDeclaration
name|classDeclaration
init|=
name|Expressions
operator|.
name|classDecl
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
literal|"Buzz"
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Scalar
operator|.
name|class
argument_list|)
argument_list|,
name|declarations
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|Expressions
operator|.
name|toString
argument_list|(
name|declarations
argument_list|,
literal|"\n"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|DEBUG
operator|.
name|value
argument_list|()
condition|)
block|{
name|Util
operator|.
name|debugCode
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|getScalar
argument_list|(
name|classDeclaration
argument_list|,
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CompileException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Scalar
name|getScalar
parameter_list|(
name|ClassDeclaration
name|expr
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|CompileException
throws|,
name|IOException
block|{
name|ICompilerFactory
name|compilerFactory
decl_stmt|;
try|try
block|{
name|compilerFactory
operator|=
name|CompilerFactoryFactory
operator|.
name|getDefaultCompilerFactory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to instantiate java compiler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IClassBodyEvaluator
name|cbe
init|=
name|compilerFactory
operator|.
name|newClassBodyEvaluator
argument_list|()
decl_stmt|;
name|cbe
operator|.
name|setClassName
argument_list|(
name|expr
operator|.
name|name
argument_list|)
expr_stmt|;
name|cbe
operator|.
name|setImplementedInterfaces
argument_list|(
operator|new
name|Class
index|[]
block|{
name|Scalar
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|cbe
operator|.
name|setParentClassLoader
argument_list|(
name|JaninoRexCompiler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CalciteSystemProperty
operator|.
name|DEBUG
operator|.
name|value
argument_list|()
condition|)
block|{
comment|// Add line numbers to the generated janino class
name|cbe
operator|.
name|setDebuggingInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Scalar
operator|)
name|cbe
operator|.
name|createInstance
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

