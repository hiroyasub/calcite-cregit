begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|Row
operator|.
name|RowBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Interpreter node that implements an  * {@link org.apache.calcite.rel.core.Aggregate}.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateNode
extends|extends
name|AbstractSingleNode
argument_list|<
name|Aggregate
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Grouping
argument_list|>
name|groups
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ImmutableBitSet
name|unionGroups
decl_stmt|;
specifier|private
specifier|final
name|int
name|outputRowLength
decl_stmt|;
specifier|public
name|AggregateNode
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|,
name|Aggregate
name|rel
parameter_list|)
block|{
name|super
argument_list|(
name|interpreter
argument_list|,
name|rel
argument_list|)
expr_stmt|;
name|ImmutableBitSet
name|union
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
decl_stmt|;
if|if
condition|(
name|rel
operator|.
name|getGroupSets
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ImmutableBitSet
name|group
range|:
name|rel
operator|.
name|getGroupSets
argument_list|()
control|)
block|{
name|union
operator|=
name|union
operator|.
name|union
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
operator|new
name|Grouping
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|unionGroups
operator|=
name|union
expr_stmt|;
name|this
operator|.
name|outputRowLength
operator|=
name|unionGroups
operator|.
name|cardinality
argument_list|()
operator|+
operator|(
name|rel
operator|.
name|indicator
condition|?
name|unionGroups
operator|.
name|cardinality
argument_list|()
else|:
literal|0
operator|)
operator|+
name|rel
operator|.
name|getAggCallList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Row
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|source
operator|.
name|receive
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Grouping
name|group
range|:
name|groups
control|)
block|{
name|group
operator|.
name|send
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Grouping
name|group
range|:
name|groups
control|)
block|{
name|group
operator|.
name|end
argument_list|(
name|sink
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|AccumulatorList
name|getNewAccumList
parameter_list|()
block|{
name|AccumulatorList
name|list
init|=
operator|new
name|AccumulatorList
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|call
range|:
name|rel
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|getAccumulator
argument_list|(
name|call
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|Accumulator
name|getAccumulator
parameter_list|(
specifier|final
name|AggregateCall
name|call
parameter_list|)
block|{
name|String
name|agg
init|=
name|call
operator|.
name|getAggregation
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|agg
operator|.
name|equals
argument_list|(
literal|"COUNT"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Accumulator
argument_list|()
block|{
name|long
name|cnt
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|send
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|boolean
name|notNull
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|call
operator|.
name|getArgList
argument_list|()
control|)
block|{
if|if
condition|(
name|row
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
block|{
name|notNull
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|notNull
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|end
parameter_list|()
block|{
return|return
name|cnt
return|;
block|}
block|}
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Aggregate doesn't currently support "
operator|+
literal|"the %s aggregate function."
argument_list|,
name|agg
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Internal class to track groupings    */
specifier|private
class|class
name|Grouping
block|{
specifier|private
name|ImmutableBitSet
name|grouping
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Row
argument_list|,
name|AccumulatorList
argument_list|>
name|accum
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Grouping
parameter_list|(
name|ImmutableBitSet
name|grouping
parameter_list|)
block|{
name|this
operator|.
name|grouping
operator|=
name|grouping
expr_stmt|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
comment|// TODO: fix the size of this row.
name|RowBuilder
name|builder
init|=
name|Row
operator|.
name|newBuilder
argument_list|(
name|grouping
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|grouping
control|)
block|{
name|builder
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|row
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Row
name|key
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|accum
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|accum
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|getNewAccumList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|accum
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|send
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|end
parameter_list|(
name|Sink
name|sink
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Row
argument_list|,
name|AccumulatorList
argument_list|>
name|e
range|:
name|accum
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Row
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|AccumulatorList
name|list
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|RowBuilder
name|rb
init|=
name|Row
operator|.
name|newBuilder
argument_list|(
name|outputRowLength
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|groupPos
range|:
name|unionGroups
control|)
block|{
if|if
condition|(
name|grouping
operator|.
name|get
argument_list|(
name|groupPos
argument_list|)
condition|)
block|{
name|rb
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|key
operator|.
name|getObject
argument_list|(
name|groupPos
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rel
operator|.
name|indicator
condition|)
block|{
name|rb
operator|.
name|set
argument_list|(
name|unionGroups
operator|.
name|cardinality
argument_list|()
operator|+
name|index
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// need to set false when not part of grouping set.
name|index
operator|++
expr_stmt|;
block|}
name|list
operator|.
name|end
argument_list|(
name|rb
argument_list|)
expr_stmt|;
name|sink
operator|.
name|send
argument_list|(
name|rb
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A list of accumulators used during grouping.    */
specifier|private
class|class
name|AccumulatorList
extends|extends
name|ArrayList
argument_list|<
name|Accumulator
argument_list|>
block|{
specifier|public
name|void
name|send
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
for|for
control|(
name|Accumulator
name|a
range|:
name|this
control|)
block|{
name|a
operator|.
name|send
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|end
parameter_list|(
name|RowBuilder
name|r
parameter_list|)
block|{
for|for
control|(
name|int
name|accIndex
init|=
literal|0
init|,
name|rowIndex
init|=
name|r
operator|.
name|size
argument_list|()
operator|-
name|size
argument_list|()
init|;
name|rowIndex
operator|<
name|r
operator|.
name|size
argument_list|()
condition|;
name|rowIndex
operator|++
operator|,
name|accIndex
operator|++
control|)
block|{
name|r
operator|.
name|set
argument_list|(
name|rowIndex
argument_list|,
name|get
argument_list|(
name|accIndex
argument_list|)
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Defines function implementation for    * things like {@code count()} and {@code sum()}.    */
specifier|private
interface|interface
name|Accumulator
block|{
name|void
name|send
parameter_list|(
name|Row
name|row
parameter_list|)
function_decl|;
name|Object
name|end
parameter_list|()
function_decl|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateNode.java
end_comment

end_unit

