begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Calc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|FilterTableRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|FilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Helper methods for {@link Node} and implementations for core relational  * expressions.  */
end_comment

begin_class
specifier|public
class|class
name|Nodes
block|{
comment|/** Extension to    * {@link org.apache.calcite.interpreter.Interpreter.Compiler}    * that knows how to handle the core logical    * {@link org.apache.calcite.rel.RelNode}s. */
specifier|public
specifier|static
class|class
name|CoreCompiler
extends|extends
name|Interpreter
operator|.
name|Compiler
block|{
name|CoreCompiler
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|)
block|{
name|super
argument_list|(
name|interpreter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rewrite
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|RelNode
name|input
init|=
name|project
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|project
operator|.
name|getMapping
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|RexNode
name|condition
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|input
decl_stmt|;
name|condition
operator|=
name|filter
operator|.
name|getCondition
argument_list|()
expr_stmt|;
name|input
operator|=
name|filter
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|condition
operator|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|instanceof
name|TableScan
condition|)
block|{
specifier|final
name|TableScan
name|scan
init|=
operator|(
name|TableScan
operator|)
name|input
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|ProjectableFilterableTable
name|projectableFilterableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectableFilterableTable
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FilterTableRule
operator|.
name|FilterSplit
name|filterSplit
init|=
name|FilterTableRule
operator|.
name|FilterSplit
operator|.
name|of
argument_list|(
name|projectableFilterableTable
argument_list|,
name|condition
argument_list|,
name|interpreter
operator|.
name|getDataContext
argument_list|()
argument_list|)
decl_stmt|;
name|rel
operator|=
operator|new
name|FilterScan
argument_list|(
name|project
operator|.
name|getCluster
argument_list|()
argument_list|,
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|table
argument_list|,
name|filterSplit
operator|.
name|acceptedFilters
argument_list|,
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|Mappings
operator|.
name|asList
argument_list|(
name|mapping
operator|.
name|inverse
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rel
operator|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|rel
argument_list|,
name|filterSplit
operator|.
name|rejectedFilters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rewrite
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|getInput
argument_list|()
operator|instanceof
name|TableScan
condition|)
block|{
specifier|final
name|TableScan
name|scan
init|=
operator|(
name|TableScan
operator|)
name|filter
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|ProjectableFilterableTable
name|projectableFilterableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|ProjectableFilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectableFilterableTable
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FilterTableRule
operator|.
name|FilterSplit
name|filterSplit
init|=
name|FilterTableRule
operator|.
name|FilterSplit
operator|.
name|of
argument_list|(
name|projectableFilterableTable
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|interpreter
operator|.
name|getDataContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filterSplit
operator|.
name|acceptedFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rel
operator|=
operator|new
name|FilterScan
argument_list|(
name|scan
operator|.
name|getCluster
argument_list|()
argument_list|,
name|scan
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|table
argument_list|,
name|filterSplit
operator|.
name|acceptedFilters
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rel
operator|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|rel
argument_list|,
name|filterSplit
operator|.
name|rejectedFilters
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|final
name|FilterableTable
name|filterableTable
init|=
name|table
operator|.
name|unwrap
argument_list|(
name|FilterableTable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterableTable
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FilterTableRule
operator|.
name|FilterSplit
name|filterSplit
init|=
name|FilterTableRule
operator|.
name|FilterSplit
operator|.
name|of
argument_list|(
name|filterableTable
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|interpreter
operator|.
name|getDataContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filterSplit
operator|.
name|acceptedFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rel
operator|=
operator|new
name|FilterScan
argument_list|(
name|scan
operator|.
name|getCluster
argument_list|()
argument_list|,
name|scan
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|table
argument_list|,
name|filterSplit
operator|.
name|acceptedFilters
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rel
operator|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|rel
argument_list|,
name|filterSplit
operator|.
name|rejectedFilters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|Aggregate
name|agg
parameter_list|)
block|{
name|node
operator|=
operator|new
name|AggregateNode
argument_list|(
name|interpreter
argument_list|,
name|agg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|node
operator|=
operator|new
name|FilterNode
argument_list|(
name|interpreter
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|node
operator|=
operator|new
name|ProjectNode
argument_list|(
name|interpreter
argument_list|,
name|project
argument_list|)
expr_stmt|;
block|}
comment|/** Per {@link #rewrite(RelNode)}, writes to {@link #rel}.      *      *<p>We don't handle {@link org.apache.calcite.rel.core.Calc} directly.      * Expand to a {@link org.apache.calcite.rel.core.Project}      * on {@link org.apache.calcite.rel.core.Filter} (or just a      * {@link org.apache.calcite.rel.core.Project}). */
specifier|public
name|void
name|rewrite
parameter_list|(
name|Calc
name|calc
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
argument_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|projectFilter
init|=
name|calc
operator|.
name|getProgram
argument_list|()
operator|.
name|split
argument_list|()
decl_stmt|;
name|rel
operator|=
name|calc
operator|.
name|getInput
argument_list|()
expr_stmt|;
name|rel
operator|=
name|RelOptUtil
operator|.
name|createFilter
argument_list|(
name|rel
argument_list|,
name|projectFilter
operator|.
name|right
argument_list|)
expr_stmt|;
name|rel
operator|=
name|RelOptUtil
operator|.
name|createProject
argument_list|(
name|rel
argument_list|,
name|projectFilter
operator|.
name|left
argument_list|,
name|calc
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|Values
name|value
parameter_list|)
block|{
name|node
operator|=
operator|new
name|ValuesNode
argument_list|(
name|interpreter
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
name|node
operator|=
operator|new
name|ScanNode
argument_list|(
name|interpreter
argument_list|,
name|scan
argument_list|,
name|ImmutableList
operator|.
expr|<
name|RexNode
operator|>
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|FilterScan
name|scan
parameter_list|)
block|{
name|node
operator|=
operator|new
name|ScanNode
argument_list|(
name|interpreter
argument_list|,
name|scan
argument_list|,
name|scan
operator|.
name|filters
argument_list|,
name|scan
operator|.
name|projects
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|Sort
name|sort
parameter_list|)
block|{
name|node
operator|=
operator|new
name|SortNode
argument_list|(
name|interpreter
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Table scan that applies filters and optionally projects. Only used in an    * interpreter. */
specifier|public
specifier|static
class|class
name|FilterScan
extends|extends
name|TableScan
block|{
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
decl_stmt|;
specifier|private
specifier|final
name|ImmutableIntList
name|projects
decl_stmt|;
specifier|protected
name|FilterScan
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
name|ImmutableIntList
name|projects
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
name|this
operator|.
name|projects
operator|=
name|projects
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End Nodes.java
end_comment

end_unit

