begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Interpreter node that implements a  * {@link org.apache.calcite.rel.core.Values}.  */
end_comment

begin_class
specifier|public
class|class
name|ValuesNode
implements|implements
name|Node
block|{
specifier|private
specifier|final
name|Sink
name|sink
decl_stmt|;
specifier|private
specifier|final
name|Values
name|rel
decl_stmt|;
specifier|private
specifier|final
name|int
name|fieldCount
decl_stmt|;
specifier|public
name|ValuesNode
parameter_list|(
name|Interpreter
name|interpreter
parameter_list|,
name|Values
name|rel
parameter_list|)
block|{
name|this
operator|.
name|rel
operator|=
name|rel
expr_stmt|;
name|this
operator|.
name|sink
operator|=
name|interpreter
operator|.
name|sink
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldCount
operator|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|List
argument_list|<
name|RexLiteral
argument_list|>
name|list
range|:
name|rel
operator|.
name|getTuples
argument_list|()
control|)
block|{
specifier|final
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|fieldCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexLiteral
name|rexLiteral
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|rexLiteral
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|sink
operator|.
name|send
argument_list|(
operator|new
name|Row
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sink
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ValuesNode.java
end_comment

end_unit

