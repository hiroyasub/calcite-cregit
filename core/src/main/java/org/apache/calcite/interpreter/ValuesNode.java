begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Interpreter node that implements a  * {@link org.apache.calcite.rel.core.Values}.  */
end_comment

begin_class
specifier|public
class|class
name|ValuesNode
implements|implements
name|Node
block|{
specifier|private
specifier|final
name|Sink
name|sink
decl_stmt|;
specifier|private
specifier|final
name|int
name|fieldCount
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Row
argument_list|>
name|rows
decl_stmt|;
specifier|public
name|ValuesNode
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|Values
name|rel
parameter_list|)
block|{
name|this
operator|.
name|sink
operator|=
name|compiler
operator|.
name|sink
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldCount
operator|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|createRows
argument_list|(
name|compiler
argument_list|,
name|fieldCount
argument_list|,
name|rel
operator|.
name|getTuples
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|Row
argument_list|>
name|createRows
parameter_list|(
name|Compiler
name|compiler
parameter_list|,
name|int
name|fieldCount
parameter_list|,
name|ImmutableList
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
name|tuple
range|:
name|tuples
control|)
block|{
name|nodes
operator|.
name|addAll
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Scalar
name|scalar
init|=
name|compiler
operator|.
name|compile
argument_list|(
name|nodes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|nodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
specifier|final
name|Context
name|context
init|=
name|compiler
operator|.
name|createContext
argument_list|()
decl_stmt|;
name|scalar
operator|.
name|execute
argument_list|(
name|context
argument_list|,
name|values
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Row
argument_list|>
name|rows
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Object
index|[]
name|subValues
init|=
operator|new
name|Object
index|[
name|fieldCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|,
name|n
init|=
name|tuples
operator|.
name|size
argument_list|()
init|;
name|r
operator|<
name|n
condition|;
operator|++
name|r
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
name|r
operator|*
name|fieldCount
argument_list|,
name|subValues
argument_list|,
literal|0
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|Row
operator|.
name|asCopy
argument_list|(
name|subValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rows
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|Row
name|row
range|:
name|rows
control|)
block|{
name|sink
operator|.
name|send
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|sink
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

