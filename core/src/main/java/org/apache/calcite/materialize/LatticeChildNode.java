begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/** Non-root node in a {@link Lattice}. */
end_comment

begin_class
specifier|public
class|class
name|LatticeChildNode
extends|extends
name|LatticeNode
block|{
specifier|public
specifier|final
name|LatticeNode
name|parent
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|IntPair
argument_list|>
name|link
decl_stmt|;
name|LatticeChildNode
parameter_list|(
name|LatticeSpace
name|space
parameter_list|,
name|LatticeNode
name|parent
parameter_list|,
name|MutableNode
name|mutableNode
parameter_list|)
block|{
name|super
argument_list|(
name|space
argument_list|,
name|parent
argument_list|,
name|mutableNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|requireNonNull
argument_list|(
name|parent
argument_list|,
literal|"parent"
argument_list|)
expr_stmt|;
name|this
operator|.
name|link
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|requireNonNull
argument_list|(
name|mutableNode
operator|.
name|step
argument_list|,
literal|"step"
argument_list|)
operator|.
name|keys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|use
parameter_list|(
name|List
argument_list|<
name|LatticeNode
argument_list|>
name|usedNodes
parameter_list|)
block|{
if|if
condition|(
operator|!
name|usedNodes
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|parent
operator|.
name|use
argument_list|(
name|usedNodes
argument_list|)
expr_stmt|;
name|usedNodes
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

