begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|graph
operator|.
name|AttributedDirectedGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|graph
operator|.
name|DefaultEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/** Edge in the join graph.  *  *<p>It is directed: the "parent" must be the "many" side containing the  * foreign key, and the "target" is the "one" side containing the primary  * key. For example, EMP&rarr; DEPT.  *  *<p>When created via  * {@link LatticeSpace#addEdge(LatticeTable, LatticeTable, List)}  * it is unique within the {@link LatticeSpace}. */
end_comment

begin_class
class|class
name|Step
extends|extends
name|DefaultEdge
block|{
specifier|final
name|List
argument_list|<
name|IntPair
argument_list|>
name|keys
decl_stmt|;
comment|/** String representation of {@link #keys}. Computing the string requires a    * {@link LatticeSpace}, so we pre-compute it before construction. */
specifier|final
name|String
name|keyString
decl_stmt|;
specifier|private
name|Step
parameter_list|(
name|LatticeTable
name|source
parameter_list|,
name|LatticeTable
name|target
parameter_list|,
name|List
argument_list|<
name|IntPair
argument_list|>
name|keys
parameter_list|,
name|String
name|keyString
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyString
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|keyString
argument_list|)
expr_stmt|;
assert|assert
name|IntPair
operator|.
name|ORDERING
operator|.
name|isStrictlyOrdered
argument_list|(
name|keys
argument_list|)
assert|;
comment|// ordered and unique
block|}
comment|/** Creates a Step. */
specifier|static
name|Step
name|create
parameter_list|(
name|LatticeTable
name|source
parameter_list|,
name|LatticeTable
name|target
parameter_list|,
name|List
argument_list|<
name|IntPair
argument_list|>
name|keys
parameter_list|,
name|LatticeSpace
name|space
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|IntPair
name|key
range|:
name|keys
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|space
operator|.
name|fieldName
argument_list|(
name|source
argument_list|,
name|key
operator|.
name|source
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|space
operator|.
name|fieldName
argument_list|(
name|target
argument_list|,
name|key
operator|.
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Step
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|keys
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|instanceof
name|Step
operator|&&
operator|(
operator|(
name|Step
operator|)
name|obj
operator|)
operator|.
name|source
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
operator|(
name|Step
operator|)
name|obj
operator|)
operator|.
name|target
operator|.
name|equals
argument_list|(
name|target
argument_list|)
operator|&&
operator|(
operator|(
name|Step
operator|)
name|obj
operator|)
operator|.
name|keys
operator|.
name|equals
argument_list|(
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Step("
operator|+
name|source
operator|+
literal|", "
operator|+
name|target
operator|+
literal|","
operator|+
name|keyString
operator|+
literal|")"
return|;
block|}
name|LatticeTable
name|source
parameter_list|()
block|{
return|return
operator|(
name|LatticeTable
operator|)
name|source
return|;
block|}
name|LatticeTable
name|target
parameter_list|()
block|{
return|return
operator|(
name|LatticeTable
operator|)
name|target
return|;
block|}
name|boolean
name|isBackwards
parameter_list|(
name|SqlStatisticProvider
name|statisticProvider
parameter_list|)
block|{
specifier|final
name|RelOptTable
name|sourceTable
init|=
name|source
argument_list|()
operator|.
name|t
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|sourceColumns
init|=
name|IntPair
operator|.
name|left
argument_list|(
name|keys
argument_list|)
decl_stmt|;
specifier|final
name|RelOptTable
name|targetTable
init|=
name|target
argument_list|()
operator|.
name|t
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|targetColumns
init|=
name|IntPair
operator|.
name|right
argument_list|(
name|keys
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|noDerivedSourceColumns
init|=
name|sourceColumns
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|i
lambda|->
name|i
operator|<
name|sourceTable
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|noDerivedTargetColumns
init|=
name|targetColumns
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|i
lambda|->
name|i
operator|<
name|targetTable
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|forwardForeignKey
init|=
name|noDerivedSourceColumns
operator|&&
name|noDerivedTargetColumns
operator|&&
name|statisticProvider
operator|.
name|isForeignKey
argument_list|(
name|sourceTable
argument_list|,
name|sourceColumns
argument_list|,
name|targetTable
argument_list|,
name|targetColumns
argument_list|)
operator|&&
name|statisticProvider
operator|.
name|isKey
argument_list|(
name|targetTable
argument_list|,
name|targetColumns
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|backwardForeignKey
init|=
name|noDerivedSourceColumns
operator|&&
name|noDerivedTargetColumns
operator|&&
name|statisticProvider
operator|.
name|isForeignKey
argument_list|(
name|targetTable
argument_list|,
name|targetColumns
argument_list|,
name|sourceTable
argument_list|,
name|sourceColumns
argument_list|)
operator|&&
name|statisticProvider
operator|.
name|isKey
argument_list|(
name|sourceTable
argument_list|,
name|sourceColumns
argument_list|)
decl_stmt|;
if|if
condition|(
name|backwardForeignKey
operator|!=
name|forwardForeignKey
condition|)
block|{
return|return
name|backwardForeignKey
return|;
block|}
comment|// Tie-break if it's a foreign key in neither or both directions
return|return
name|compare
argument_list|(
name|sourceTable
argument_list|,
name|sourceColumns
argument_list|,
name|targetTable
argument_list|,
name|targetColumns
argument_list|)
operator|<
literal|0
return|;
block|}
comment|/** Arbitrarily compares (table, columns). */
specifier|private
specifier|static
name|int
name|compare
parameter_list|(
name|RelOptTable
name|table1
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columns1
parameter_list|,
name|RelOptTable
name|table2
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columns2
parameter_list|)
block|{
name|int
name|c
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
operator|<
name|String
operator|>
name|lexicographical
argument_list|()
operator|.
name|compare
argument_list|(
name|table1
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|table2
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
operator|<
name|Integer
operator|>
name|lexicographical
argument_list|()
operator|.
name|compare
argument_list|(
name|columns1
argument_list|,
name|columns2
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/** Temporary method. We should use (inferred) primary keys to figure out    * the direction of steps. */
specifier|private
name|double
name|cardinality
parameter_list|(
name|SqlStatisticProvider
name|statisticProvider
parameter_list|,
name|LatticeTable
name|table
parameter_list|)
block|{
return|return
name|statisticProvider
operator|.
name|tableCardinality
argument_list|(
name|table
operator|.
name|t
argument_list|)
return|;
block|}
comment|/** Creates {@link Step} instances. */
specifier|static
class|class
name|Factory
implements|implements
name|AttributedDirectedGraph
operator|.
name|AttributedEdgeFactory
argument_list|<
name|LatticeTable
argument_list|,
name|Step
argument_list|>
block|{
specifier|private
specifier|final
name|LatticeSpace
name|space
decl_stmt|;
name|Factory
parameter_list|(
name|LatticeSpace
name|space
parameter_list|)
block|{
name|this
operator|.
name|space
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|space
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Step
name|createEdge
parameter_list|(
name|LatticeTable
name|source
parameter_list|,
name|LatticeTable
name|target
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Step
name|createEdge
parameter_list|(
name|LatticeTable
name|source
parameter_list|,
name|LatticeTable
name|target
parameter_list|,
name|Object
modifier|...
name|attributes
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|IntPair
argument_list|>
name|keys
init|=
operator|(
name|List
operator|)
name|attributes
index|[
literal|0
index|]
decl_stmt|;
return|return
name|Step
operator|.
name|create
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|keys
argument_list|,
name|space
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

