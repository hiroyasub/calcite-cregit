begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|initialization
operator|.
name|qual
operator|.
name|Initialized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/** Source relation of a lattice.  *  *<p>Relations form a tree; all relations except the root relation  * (the fact table) have precisely one parent and an equi-join  * condition on one or more pairs of columns linking to it. */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LatticeNode
block|{
specifier|public
specifier|final
name|LatticeTable
name|table
decl_stmt|;
specifier|final
name|int
name|startCol
decl_stmt|;
specifier|final
name|int
name|endCol
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|String
name|alias
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|LatticeChildNode
argument_list|>
name|children
decl_stmt|;
specifier|public
specifier|final
name|String
name|digest
decl_stmt|;
comment|/** Creates a LatticeNode.    *    *<p>The {@code parent} and {@code mutableNode} arguments are used only    * during construction. */
name|LatticeNode
parameter_list|(
name|LatticeSpace
name|space
parameter_list|,
annotation|@
name|Nullable
name|LatticeNode
name|parent
parameter_list|,
name|MutableNode
name|mutableNode
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|requireNonNull
argument_list|(
name|mutableNode
operator|.
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|startCol
operator|=
name|mutableNode
operator|.
name|startCol
expr_stmt|;
name|this
operator|.
name|endCol
operator|=
name|mutableNode
operator|.
name|endCol
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|mutableNode
operator|.
name|alias
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|startCol
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|endCol
operator|>
name|startCol
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|space
operator|.
name|simpleName
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IntPair
name|p
range|:
name|requireNonNull
argument_list|(
name|mutableNode
operator|.
name|step
argument_list|,
literal|"mutableNode.step"
argument_list|)
operator|.
name|keys
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|space
operator|.
name|fieldName
argument_list|(
name|parent
operator|.
name|table
argument_list|,
name|p
operator|.
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mutableNode
operator|.
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|children
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|LatticeChildNode
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MutableNode
name|mutableChild
range|:
name|mutableNode
operator|.
name|children
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"argument.type.incompatible"
block|,
literal|"assignment.type.incompatible"
block|}
argument_list|)
specifier|final
annotation|@
name|Initialized
name|LatticeChildNode
name|node
init|=
operator|new
name|LatticeChildNode
argument_list|(
name|space
argument_list|,
name|this
argument_list|,
name|mutableChild
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|node
operator|.
name|digest
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|children
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|digest
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|digest
return|;
block|}
specifier|public
name|RelOptTable
name|relOptTable
parameter_list|()
block|{
return|return
name|table
operator|.
name|t
return|;
block|}
specifier|abstract
name|void
name|use
parameter_list|(
name|List
argument_list|<
name|LatticeNode
argument_list|>
name|usedNodes
parameter_list|)
function_decl|;
name|void
name|flattenTo
parameter_list|(
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|LatticeNode
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|LatticeChildNode
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|flattenTo
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|createPathsRecurse
parameter_list|(
name|LatticeSpace
name|space
parameter_list|,
name|List
argument_list|<
name|Step
argument_list|>
name|steps
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|space
operator|.
name|addPath
argument_list|(
name|steps
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LatticeChildNode
name|child
range|:
name|children
control|)
block|{
name|steps
operator|.
name|add
argument_list|(
name|space
operator|.
name|addEdge
argument_list|(
name|table
argument_list|,
name|child
operator|.
name|table
argument_list|,
name|child
operator|.
name|link
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|createPathsRecurse
argument_list|(
name|space
argument_list|,
name|steps
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|steps
operator|.
name|remove
argument_list|(
name|steps
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

