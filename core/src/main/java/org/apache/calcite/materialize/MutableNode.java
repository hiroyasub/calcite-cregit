begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Mutable version of {@link LatticeNode}, used while a graph is being  * built. */
end_comment

begin_class
class|class
name|MutableNode
block|{
specifier|final
name|LatticeTable
name|table
decl_stmt|;
specifier|final
annotation|@
name|Nullable
name|MutableNode
name|parent
decl_stmt|;
specifier|final
annotation|@
name|Nullable
name|Step
name|step
decl_stmt|;
name|int
name|startCol
decl_stmt|;
name|int
name|endCol
decl_stmt|;
annotation|@
name|Nullable
name|String
name|alias
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MutableNode
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Comparator for sorting children within a parent. */
specifier|static
specifier|final
name|Ordering
argument_list|<
name|MutableNode
argument_list|>
name|ORDERING
init|=
name|Ordering
operator|.
name|from
argument_list|(
operator|new
name|Comparator
argument_list|<
name|MutableNode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|MutableNode
name|o1
parameter_list|,
name|MutableNode
name|o2
parameter_list|)
block|{
name|int
name|c
init|=
name|Ordering
operator|.
expr|<
name|String
operator|>
name|natural
argument_list|()
operator|.
name|lexicographical
argument_list|()
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|table
operator|.
name|t
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|o2
operator|.
name|table
operator|.
name|t
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
operator|&&
name|o1
operator|.
name|step
operator|!=
literal|null
operator|&&
name|o2
operator|.
name|step
operator|!=
literal|null
condition|)
block|{
comment|// The nodes have the same table. Now compare them based on the
comment|// columns they use as foreign key.
name|c
operator|=
name|Ordering
operator|.
expr|<
name|Integer
operator|>
name|natural
argument_list|()
operator|.
name|lexicographical
argument_list|()
operator|.
name|compare
argument_list|(
name|IntPair
operator|.
name|left
argument_list|(
name|o1
operator|.
name|step
operator|.
name|keys
argument_list|)
argument_list|,
name|IntPair
operator|.
name|left
argument_list|(
name|o2
operator|.
name|step
operator|.
name|keys
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/** Creates a root node. */
name|MutableNode
parameter_list|(
name|LatticeTable
name|table
parameter_list|)
block|{
name|this
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a non-root node. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"argument.type.incompatible"
argument_list|)
name|MutableNode
parameter_list|(
name|LatticeTable
name|table
parameter_list|,
annotation|@
name|Nullable
name|MutableNode
name|parent
parameter_list|,
annotation|@
name|Nullable
name|Step
name|step
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|step
operator|=
name|step
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|parent
operator|.
name|children
argument_list|,
name|ORDERING
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Populates a flattened list of mutable nodes. */
name|void
name|flatten
parameter_list|(
name|List
argument_list|<
name|MutableNode
argument_list|>
name|flatNodes
parameter_list|)
block|{
name|flatNodes
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableNode
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|flatten
argument_list|(
name|flatNodes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns whether this node is cylic, in an undirected sense; that is,    * whether the same descendant can be reached by more than one route. */
name|boolean
name|isCyclic
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|MutableNode
argument_list|>
name|descendants
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|isCyclicRecurse
argument_list|(
name|descendants
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isCyclicRecurse
parameter_list|(
name|Set
argument_list|<
name|MutableNode
argument_list|>
name|descendants
parameter_list|)
block|{
if|if
condition|(
operator|!
name|descendants
operator|.
name|add
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|MutableNode
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isCyclicRecurse
argument_list|(
name|descendants
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|void
name|addPath
parameter_list|(
name|Path
name|path
parameter_list|,
annotation|@
name|Nullable
name|String
name|alias
parameter_list|)
block|{
name|MutableNode
name|n
init|=
name|this
decl_stmt|;
for|for
control|(
name|Step
name|step1
range|:
name|path
operator|.
name|steps
control|)
block|{
name|MutableNode
name|n2
init|=
name|n
operator|.
name|findChild
argument_list|(
name|step1
argument_list|)
decl_stmt|;
if|if
condition|(
name|n2
operator|==
literal|null
condition|)
block|{
name|n2
operator|=
operator|new
name|MutableNode
argument_list|(
name|step1
operator|.
name|target
argument_list|()
argument_list|,
name|n
argument_list|,
name|step1
argument_list|)
expr_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|n2
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
block|}
name|n
operator|=
name|n2
expr_stmt|;
block|}
block|}
specifier|private
annotation|@
name|Nullable
name|MutableNode
name|findChild
parameter_list|(
name|Step
name|step
parameter_list|)
block|{
for|for
control|(
name|MutableNode
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|child
operator|.
name|table
argument_list|,
name|step
operator|.
name|target
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|child
operator|.
name|step
argument_list|,
name|step
argument_list|)
condition|)
block|{
return|return
name|child
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

