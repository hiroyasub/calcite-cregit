begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUnknownAs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlInternalOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|InferTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Sarg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlNonNullableAccessors
operator|.
name|getOperandLiteralValueOrThrow
import|;
end_import

begin_comment
comment|/** Operator that tests whether its left operand is included in the range of  * values covered by search arguments. */
end_comment

begin_class
class|class
name|SqlSearchOperator
extends|extends
name|SqlInternalOperator
block|{
name|SqlSearchOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"SEARCH"
argument_list|,
name|SqlKind
operator|.
name|SEARCH
argument_list|,
literal|30
argument_list|,
literal|true
argument_list|,
name|ReturnTypes
operator|.
name|BOOLEAN
operator|.
name|andThen
argument_list|(
name|SqlSearchOperator
operator|::
name|makeNullable
argument_list|)
argument_list|,
name|InferTypes
operator|.
name|FIRST_KNOWN
argument_list|,
name|OperandTypes
operator|.
name|COMPARABLE_UNORDERED_COMPARABLE_UNORDERED
argument_list|)
expr_stmt|;
block|}
comment|/** Sets whether a call to SEARCH should allow nulls.    *    *<p>For example, if the type of {@code x} is NOT NULL, then    * {@code SEARCH(x, Sarg[10])} will never return UNKNOWN.    * It is evident from the expansion, "x = 10", but holds for all Sarg    * values.    *    *<p>If {@link Sarg#nullAs} is TRUE or FALSE, SEARCH will never return    * UNKNOWN. For example, {@code SEARCH(x, Sarg[10; NULL AS UNKNOWN])} expands    * to {@code x = 10 OR x IS NOT NULL}, which returns {@code TRUE} if    * {@code x} is NULL, {@code TRUE} if {@code x} is 10, and {@code FALSE}    * for all other values.    */
specifier|private
specifier|static
name|RelDataType
name|makeNullable
parameter_list|(
name|SqlOperatorBinding
name|binding
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
specifier|final
name|boolean
name|nullable
init|=
name|binding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
operator|.
name|isNullable
argument_list|()
operator|&&
name|getOperandLiteralValueOrThrow
argument_list|(
name|binding
argument_list|,
literal|1
argument_list|,
name|Sarg
operator|.
name|class
argument_list|)
operator|.
name|nullAs
operator|==
name|RexUnknownAs
operator|.
name|UNKNOWN
decl_stmt|;
return|return
name|binding
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
name|nullable
argument_list|)
return|;
block|}
block|}
end_class

end_unit

