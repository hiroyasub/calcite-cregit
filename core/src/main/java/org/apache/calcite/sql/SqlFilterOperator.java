begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * An operator that applies a filter before rows are included in an aggregate  * function.  *  *<p>Operands are as follows:</p>  *  *<ul>  *<li>0: a call to an aggregate function ({@link SqlCall})  *<li>1: predicate  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|SqlFilterOperator
extends|extends
name|SqlBinaryOperator
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlFilterOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"FILTER"
argument_list|,
name|SqlKind
operator|.
name|FILTER
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_FORCE_NULLABLE
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|ANY_ANY
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|operandCount
argument_list|()
operator|==
literal|2
assert|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|SIMPLE
argument_list|)
decl_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|getLeftPrec
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|"WHERE"
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|getRightPrec
argument_list|()
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|this
assert|;
assert|assert
name|call
operator|.
name|operandCount
argument_list|()
operator|==
literal|2
assert|;
name|SqlCall
name|aggCall
init|=
name|getAggCall
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aggCall
operator|.
name|getOperator
argument_list|()
operator|.
name|isAggregator
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|aggCall
argument_list|,
name|RESOURCE
operator|.
name|filterNonAggregate
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|SqlNode
name|condition
init|=
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SqlNodeList
name|orderList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasWithinGroupCall
argument_list|(
name|call
argument_list|)
condition|)
block|{
name|SqlCall
name|withinGroupCall
init|=
name|getWithinGroupCall
argument_list|(
name|call
argument_list|)
decl_stmt|;
name|orderList
operator|=
name|withinGroupCall
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|validator
operator|.
name|validateAggregateParams
argument_list|(
name|aggCall
argument_list|,
name|condition
argument_list|,
name|orderList
argument_list|,
name|scope
argument_list|)
expr_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SqlTypeUtil
operator|.
name|inBooleanFamily
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|condition
argument_list|,
name|RESOURCE
operator|.
name|condMustBeBoolean
argument_list|(
literal|"FILTER"
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|RelDataType
name|deriveType
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
comment|// Validate type of the inner aggregate call
name|validateOperands
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
expr_stmt|;
comment|// Assume the first operand is an aggregate call and derive its type.
specifier|final
name|SqlCall
name|aggCall
init|=
name|getAggCall
argument_list|(
name|call
argument_list|)
decl_stmt|;
comment|// Pretend that group-count is 0. This tells the aggregate function that it
comment|// might be invoked with 0 rows in a group. Most aggregate functions will
comment|// return NULL in this case.
name|SqlCallBinding
name|opBinding
init|=
operator|new
name|SqlCallBinding
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|aggCall
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|getGroupCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|RelDataType
name|ret
init|=
name|aggCall
operator|.
name|getOperator
argument_list|()
operator|.
name|inferReturnType
argument_list|(
name|opBinding
argument_list|)
decl_stmt|;
comment|// Copied from validateOperands
operator|(
operator|(
name|SqlValidatorImpl
operator|)
name|validator
operator|)
operator|.
name|setValidatedNodeType
argument_list|(
name|call
argument_list|,
name|ret
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SqlValidatorImpl
operator|)
name|validator
operator|)
operator|.
name|setValidatedNodeType
argument_list|(
name|aggCall
argument_list|,
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasWithinGroupCall
argument_list|(
name|call
argument_list|)
condition|)
block|{
operator|(
operator|(
name|SqlValidatorImpl
operator|)
name|validator
operator|)
operator|.
name|setValidatedNodeType
argument_list|(
name|getWithinGroupCall
argument_list|(
name|call
argument_list|)
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|SqlCall
name|getAggCall
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FILTER
assert|;
name|call
operator|=
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|WITHIN_GROUP
condition|)
block|{
name|call
operator|=
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|call
return|;
block|}
specifier|private
specifier|static
name|SqlCall
name|getWithinGroupCall
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FILTER
assert|;
name|call
operator|=
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|WITHIN_GROUP
condition|)
block|{
return|return
name|call
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|private
specifier|static
name|boolean
name|hasWithinGroupCall
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FILTER
assert|;
name|call
operator|=
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|WITHIN_GROUP
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlFilterOperator.java
end_comment

end_unit

