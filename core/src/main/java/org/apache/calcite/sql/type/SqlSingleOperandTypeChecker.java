begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperandCountRange
import|;
end_import

begin_comment
comment|/**  * SqlSingleOperandTypeChecker is an extension of {@link SqlOperandTypeChecker}  * for implementations which are capable of checking the type of a single  * operand in isolation. This isn't meaningful for all type-checking rules (e.g.  * SameOperandTypeChecker requires two operands to have matching types, so  * checking one in isolation is meaningless).  */
end_comment

begin_interface
specifier|public
interface|interface
name|SqlSingleOperandTypeChecker
extends|extends
name|SqlOperandTypeChecker
block|{
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Checks the type of a single operand against a particular ordinal position    * within a formal operator signature. Note that the actual ordinal position    * of the operand being checked may be<em>different</em> from the position    * of the formal operand.    *    *<p>For example, when validating the actual call    *    *<blockquote>    *<pre>C(X, Y, Z)</pre>    *</blockquote>    *    *<p>the strategy for validating the operand Z might involve checking its    * type against the formal signature OP(W). In this case,    *<code>iFormalOperand</code> would be zero, even though the position of Z    * within call C is two.    *    *<p>Caution that we could not(shouldn't) implement implicit type coercion for this checker,    * implicit type coercion has side effect(modify the AST), if this single operand checker is    * subsumed in a composite rule(OR or AND), we can not make any side effect if we    * can not make sure that all the single operands type check are passed(with type coercion).    * But there is an exception: only if the call has just one operand, for this case,    * use {@link SqlOperandTypeChecker#checkOperandTypes} instead.    *    * @param callBinding    description of the call being checked; this is only    *                       provided for context when throwing an exception; the    *                       implementation should<em>NOT</em> examine the    *                       operands of the call as part of the check    * @param operand        the actual operand to be checked    * @param iFormalOperand the 0-based formal operand ordinal    * @param throwOnFailure whether to throw an exception if check fails    *                       (otherwise returns false in that case)    * @return whether check succeeded    */
name|boolean
name|checkSingleOperandType
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|SqlNode
name|operand
parameter_list|,
name|int
name|iFormalOperand
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|default
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
return|return
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|callBinding
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|throwOnFailure
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|default
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|SqlOperandCountRanges
operator|.
name|of
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/** Composes this with another single-operand checker using AND. */
specifier|default
name|SqlSingleOperandTypeChecker
name|and
parameter_list|(
name|SqlSingleOperandTypeChecker
name|checker
parameter_list|)
block|{
return|return
name|OperandTypes
operator|.
name|and
argument_list|(
name|this
argument_list|,
name|checker
argument_list|)
return|;
block|}
comment|/** Composes this with another single-operand checker using OR. */
specifier|default
name|SqlSingleOperandTypeChecker
name|or
parameter_list|(
name|SqlSingleOperandTypeChecker
name|checker
parameter_list|)
block|{
return|return
name|OperandTypes
operator|.
name|or
argument_list|(
name|this
argument_list|,
name|checker
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

