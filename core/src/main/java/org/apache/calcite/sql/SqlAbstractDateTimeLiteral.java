begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * A SQL literal representing a DATE, TIME or TIMESTAMP value.  *  *<p>Examples:  *  *<ul>  *<li>DATE '2004-10-22'</li>  *<li>TIME '14:33:44.567'</li>  *<li><code>TIMESTAMP '1969-07-21 03:15 GMT'</code></li>  *</ul>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SqlAbstractDateTimeLiteral
extends|extends
name|SqlLiteral
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|boolean
name|hasTimeZone
decl_stmt|;
specifier|protected
specifier|final
name|int
name|precision
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Constructs a datetime literal.    */
specifier|protected
name|SqlAbstractDateTimeLiteral
parameter_list|(
name|Object
name|d
parameter_list|,
name|boolean
name|tz
parameter_list|,
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|precision
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|d
argument_list|,
name|typeName
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|hasTimeZone
operator|=
name|tz
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Converts this literal to a {@link TimestampString}. */
specifier|protected
name|TimestampString
name|getTimestamp
parameter_list|()
block|{
return|return
operator|(
name|TimestampString
operator|)
name|requireNonNull
argument_list|(
name|value
argument_list|,
literal|"value"
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPrec
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
comment|/**    * Returns e.g.<code>DATE '1969-07-21'</code>.    */
annotation|@
name|Override
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|()
function_decl|;
comment|/**    * Returns e.g.<code>1969-07-21</code>.    */
specifier|public
specifier|abstract
name|String
name|toFormattedString
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|RelDataType
name|createSqlType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|getTypeName
argument_list|()
argument_list|,
name|getPrec
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|literal
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

