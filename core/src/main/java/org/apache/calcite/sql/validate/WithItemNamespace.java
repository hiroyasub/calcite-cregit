begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWithItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/** Very similar to {@link AliasNamespace}. */
end_comment

begin_class
class|class
name|WithItemNamespace
extends|extends
name|AbstractNamespace
block|{
specifier|private
specifier|final
name|SqlWithItem
name|withItem
decl_stmt|;
name|WithItemNamespace
parameter_list|(
name|SqlValidatorImpl
name|validator
parameter_list|,
name|SqlWithItem
name|withItem
parameter_list|,
name|SqlNode
name|enclosingNode
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
name|enclosingNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|withItem
operator|=
name|withItem
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|validateImpl
parameter_list|()
block|{
specifier|final
name|SqlValidatorNamespace
name|childNs
init|=
name|validator
operator|.
name|getNamespace
argument_list|(
name|withItem
operator|.
name|query
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|childNs
operator|.
name|getRowTypeSansSystemColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|withItem
operator|.
name|columnList
operator|==
literal|null
condition|)
block|{
return|return
name|rowType
return|;
block|}
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|builder
init|=
name|validator
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|SqlNode
argument_list|,
name|RelDataTypeField
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|withItem
operator|.
name|columnList
argument_list|,
name|rowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
operator|(
name|SqlIdentifier
operator|)
name|pair
operator|.
name|left
operator|)
operator|.
name|getSimple
argument_list|()
argument_list|,
name|pair
operator|.
name|right
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|SqlNode
name|getNode
parameter_list|()
block|{
return|return
name|withItem
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|translate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|withItem
operator|.
name|columnList
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
specifier|final
name|RelDataType
name|underlyingRowType
init|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|withItem
operator|.
name|query
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|underlyingRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown field '"
operator|+
name|name
operator|+
literal|"' in rowtype "
operator|+
name|underlyingRowType
argument_list|)
throw|;
block|}
block|}
end_class

begin_comment
comment|// End WithItemNamespace.java
end_comment

end_unit

