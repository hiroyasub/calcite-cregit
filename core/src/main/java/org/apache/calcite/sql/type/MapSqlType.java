begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFamily
import|;
end_import

begin_comment
comment|/**  * SQL map type.  */
end_comment

begin_class
specifier|public
class|class
name|MapSqlType
extends|extends
name|AbstractSqlType
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|RelDataType
name|keyType
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|valueType
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a MapSqlType. This constructor should only be called    * from a factory method.    */
specifier|public
name|MapSqlType
parameter_list|(
name|RelDataType
name|keyType
parameter_list|,
name|RelDataType
name|valueType
parameter_list|,
name|boolean
name|isNullable
parameter_list|)
block|{
name|super
argument_list|(
name|SqlTypeName
operator|.
name|MAP
argument_list|,
name|isNullable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
assert|assert
name|keyType
operator|!=
literal|null
assert|;
assert|assert
name|valueType
operator|!=
literal|null
assert|;
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
name|computeDigest
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|RelDataType
name|getValueType
parameter_list|()
block|{
return|return
name|valueType
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getKeyType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
comment|// implement RelDataTypeImpl
annotation|@
name|Override
specifier|protected
name|void
name|generateTypeString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|boolean
name|withDetail
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|withDetail
condition|?
name|keyType
operator|.
name|getFullTypeString
argument_list|()
else|:
name|keyType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|withDetail
condition|?
name|valueType
operator|.
name|getFullTypeString
argument_list|()
else|:
name|valueType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") MAP"
argument_list|)
expr_stmt|;
block|}
comment|// implement RelDataType
annotation|@
name|Override
specifier|public
name|RelDataTypeFamily
name|getFamily
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

