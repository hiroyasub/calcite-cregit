begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Namespace representing the row type produced by joining two relations.  */
end_comment

begin_class
class|class
name|JoinNamespace
extends|extends
name|AbstractNamespace
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlJoin
name|join
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
name|JoinNamespace
parameter_list|(
name|SqlValidatorImpl
name|validator
parameter_list|,
name|SqlJoin
name|join
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|join
operator|=
name|join
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|protected
name|RelDataType
name|validateImpl
parameter_list|(
name|RelDataType
name|targetRowType
parameter_list|)
block|{
name|RelDataType
name|leftType
init|=
name|validator
operator|.
name|getNamespaceOrThrow
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|RelDataType
name|rightType
init|=
name|validator
operator|.
name|getNamespaceOrThrow
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|validator
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
condition|)
block|{
case|case
name|LEFT
case|:
name|rightType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|rightType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
name|leftType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|leftType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|FULL
case|:
name|leftType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|leftType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rightType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|rightType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|typeFactory
operator|.
name|createJoinType
argument_list|(
name|leftType
argument_list|,
name|rightType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|SqlNode
name|getNode
parameter_list|()
block|{
return|return
name|join
return|;
block|}
block|}
end_class

end_unit

