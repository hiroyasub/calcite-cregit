begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Definition of the "FLOOR" and "CEIL" built-in SQL functions.  */
end_comment

begin_class
specifier|public
class|class
name|SqlFloorFunction
extends|extends
name|SqlMonotonicUnaryFunction
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlFloorFunction
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
name|super
argument_list|(
name|kind
operator|.
name|name
argument_list|()
argument_list|,
name|kind
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_OR_EXACT_NO_SCALE
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|NUMERIC_OR_INTERVAL
argument_list|,
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"'"
operator|+
name|kind
operator|+
literal|"(<DATE> TO<TIME_UNIT>)'\n"
operator|+
literal|"'"
operator|+
name|kind
operator|+
literal|"(<TIME> TO<TIME_UNIT>)'\n"
operator|+
literal|"'"
operator|+
name|kind
operator|+
literal|"(<TIMESTAMP> TO<TIME_UNIT>)'"
argument_list|,
name|OperandTypes
operator|.
name|DATETIME
argument_list|,
name|OperandTypes
operator|.
name|ANY
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|kind
operator|==
name|SqlKind
operator|.
name|FLOOR
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|CEIL
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|SqlOperatorBinding
name|call
parameter_list|)
block|{
comment|// Monotonic iff its first argument is, but not strict.
return|return
name|call
operator|.
name|getOperandMonotonicity
argument_list|(
literal|0
argument_list|)
operator|.
name|unstrict
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|operandCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|unparseDatetime
argument_list|(
name|writer
argument_list|,
name|call
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unparseNumeric
argument_list|(
name|writer
argument_list|,
name|call
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unparseNumeric
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endFunCall
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unparseDatetime
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
comment|// FLOOR (not CEIL) is the only function that works in most dialects
if|if
condition|(
name|kind
operator|!=
name|SqlKind
operator|.
name|FLOOR
condition|)
block|{
name|unparseDatetimeDefault
argument_list|(
name|writer
argument_list|,
name|call
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|writer
operator|.
name|getDialect
argument_list|()
operator|.
name|getDatabaseProduct
argument_list|()
condition|)
block|{
case|case
name|UNKNOWN
case|:
case|case
name|CALCITE
case|:
name|unparseDatetimeDefault
argument_list|(
name|writer
argument_list|,
name|call
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SqlLiteral
name|timeUnitNode
init|=
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TimeUnitRange
name|timeUnit
init|=
name|timeUnitNode
operator|.
name|getValueAs
argument_list|(
name|TimeUnitRange
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|writer
operator|.
name|getDialect
argument_list|()
operator|.
name|getDatabaseProduct
argument_list|()
condition|)
block|{
case|case
name|ORACLE
case|:
name|replaceTimeUnitOperand
argument_list|(
name|call
argument_list|,
name|timeUnit
operator|.
name|name
argument_list|()
argument_list|,
name|timeUnitNode
operator|.
name|getParserPosition
argument_list|()
argument_list|)
expr_stmt|;
name|unparseDatetimeFunction
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|"TRUNC"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|HSQLDB
case|:
name|String
name|translatedLit
init|=
name|convertToHsqlDb
argument_list|(
name|timeUnit
argument_list|)
decl_stmt|;
name|replaceTimeUnitOperand
argument_list|(
name|call
argument_list|,
name|translatedLit
argument_list|,
name|timeUnitNode
operator|.
name|getParserPosition
argument_list|()
argument_list|)
expr_stmt|;
name|unparseDatetimeFunction
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|"TRUNC"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|POSTGRESQL
case|:
name|replaceTimeUnitOperand
argument_list|(
name|call
argument_list|,
name|timeUnit
operator|.
name|name
argument_list|()
argument_list|,
name|timeUnitNode
operator|.
name|getParserPosition
argument_list|()
argument_list|)
expr_stmt|;
name|unparseDatetimeFunction
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|"DATE_TRUNC"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|MSSQL
case|:
name|unparseDatetimeMssql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|)
expr_stmt|;
break|break;
case|case
name|MYSQL
case|:
name|unparseDatetimeMysql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|)
expr_stmt|;
break|break;
default|default:
name|unparseDatetimeDefault
argument_list|(
name|writer
argument_list|,
name|call
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|replaceTimeUnitOperand
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|String
name|literal
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|SqlLiteral
name|literalNode
init|=
name|SqlLiteral
operator|.
name|createCharString
argument_list|(
name|literal
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|call
operator|.
name|setOperand
argument_list|(
literal|1
argument_list|,
name|literalNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Default datetime unparse method if the specific dialect was not matched.    *    * @param writer SqlWriter    * @param call SqlCall    */
specifier|private
name|void
name|unparseDatetimeDefault
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|"TO"
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endFunCall
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
comment|/**    * Most dialects that natively support datetime floor will use this.    * In those cases the call will look like TRUNC(datetime, 'year').    *    * @param writer SqlWriter    * @param call SqlCall    * @param funName Name of the sql function to call    * @param datetimeFirst Specify the order of the datetime&amp; timeUnit    * arguments    */
specifier|private
name|void
name|unparseDatetimeFunction
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|String
name|funName
parameter_list|,
name|Boolean
name|datetimeFirst
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|funName
argument_list|)
decl_stmt|;
name|int
name|firstOpIndex
init|=
name|datetimeFirst
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|int
name|secondOpIndex
init|=
name|datetimeFirst
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|call
operator|.
name|operand
argument_list|(
name|firstOpIndex
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
name|secondOpIndex
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endFunCall
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unparse datetime floor for MS SQL. There is no TRUNC function, so simulate this    * using calls to CONVERT.    *    * @param writer SqlWriter    * @param call SqlCall    */
specifier|private
name|void
name|unparseDatetimeMssql
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
name|SqlLiteral
name|node
init|=
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TimeUnitRange
name|unit
init|=
operator|(
name|TimeUnitRange
operator|)
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|YEAR
case|:
name|unparseMssql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|4
argument_list|,
literal|"-01-01"
argument_list|)
expr_stmt|;
break|break;
case|case
name|MONTH
case|:
name|unparseMssql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|7
argument_list|,
literal|"-01"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WEEK
case|:
name|writer
operator|.
name|print
argument_list|(
literal|"CONVERT(DATETIME, CONVERT(VARCHAR(10), "
operator|+
literal|"DATEADD(day, - (6 + DATEPART(weekday, "
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|")) % 7, "
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"), 126))"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DAY
case|:
name|unparseMssql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|)
expr_stmt|;
break|break;
case|case
name|HOUR
case|:
name|unparseMssql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|13
argument_list|,
literal|":00:00"
argument_list|)
expr_stmt|;
break|break;
case|case
name|MINUTE
case|:
name|unparseMssql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|16
argument_list|,
literal|":00"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SECOND
case|:
name|unparseMssql
argument_list|(
name|writer
argument_list|,
name|call
argument_list|,
literal|19
argument_list|,
literal|":00"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"MSSQL does not support FLOOR for time unit: "
operator|+
name|unit
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|unparseMssql
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|Integer
name|charLen
parameter_list|,
name|String
name|offset
parameter_list|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"CONVERT"
argument_list|)
expr_stmt|;
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"DATETIME, CONVERT(VARCHAR("
operator|+
name|charLen
operator|.
name|toString
argument_list|()
operator|+
literal|"), "
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|", 126)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"+'"
operator|+
name|offset
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|convertToHsqlDb
parameter_list|(
name|TimeUnitRange
name|unit
parameter_list|)
block|{
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|YEAR
case|:
return|return
literal|"YYYY"
return|;
case|case
name|MONTH
case|:
return|return
literal|"MM"
return|;
case|case
name|DAY
case|:
return|return
literal|"DD"
return|;
case|case
name|WEEK
case|:
return|return
literal|"WW"
return|;
case|case
name|HOUR
case|:
return|return
literal|"HH24"
return|;
case|case
name|MINUTE
case|:
return|return
literal|"MI"
return|;
case|case
name|SECOND
case|:
return|return
literal|"SS"
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"could not convert time unit to an HsqlDb equivalent: "
operator|+
name|unit
argument_list|)
throw|;
block|}
block|}
comment|/**    * Unparse datetime floor for MySQL. There is no TRUNC function, so simulate this    * using calls to DATE_FORMAT.    *    * @param writer SqlWriter    * @param call SqlCall    */
specifier|private
name|void
name|unparseDatetimeMysql
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
name|SqlLiteral
name|node
init|=
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TimeUnitRange
name|unit
init|=
operator|(
name|TimeUnitRange
operator|)
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|unit
operator|==
name|TimeUnitRange
operator|.
name|WEEK
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"STR_TO_DATE"
argument_list|)
expr_stmt|;
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"DATE_FORMAT("
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|", '%x%v-1'), '%x%v-%w'"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|format
decl_stmt|;
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|YEAR
case|:
name|format
operator|=
literal|"%Y-01-01"
expr_stmt|;
break|break;
case|case
name|MONTH
case|:
name|format
operator|=
literal|"%Y-%m-01"
expr_stmt|;
break|break;
case|case
name|DAY
case|:
name|format
operator|=
literal|"%Y-%m-%d"
expr_stmt|;
break|break;
case|case
name|HOUR
case|:
name|format
operator|=
literal|"%Y-%m-%d %k:00:00"
expr_stmt|;
break|break;
case|case
name|MINUTE
case|:
name|format
operator|=
literal|"%Y-%m-%d %k:%i:00"
expr_stmt|;
break|break;
case|case
name|SECOND
case|:
name|format
operator|=
literal|"%Y-%m-%d %k:%i:%s"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"MYSQL does not support FLOOR for time unit: "
operator|+
name|unit
argument_list|)
throw|;
block|}
name|writer
operator|.
name|print
argument_list|(
literal|"DATE_FORMAT"
argument_list|)
expr_stmt|;
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"'"
operator|+
name|format
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SqlFloorFunction.java
end_comment

end_unit

