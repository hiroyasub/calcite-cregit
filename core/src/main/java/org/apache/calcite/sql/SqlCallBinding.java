begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|CalciteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SelectScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NlsString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  *<code>SqlCallBinding</code> implements {@link SqlOperatorBinding} by  * analyzing to the operands of a {@link SqlCall} with a {@link SqlValidator}.  */
end_comment

begin_class
specifier|public
class|class
name|SqlCallBinding
extends|extends
name|SqlOperatorBinding
block|{
specifier|private
specifier|static
specifier|final
name|SqlCall
name|DEFAULT_CALL
init|=
name|SqlStdOperatorTable
operator|.
name|DEFAULT
operator|.
name|createCall
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlValidator
name|validator
decl_stmt|;
specifier|private
specifier|final
name|SqlValidatorScope
name|scope
decl_stmt|;
specifier|private
specifier|final
name|SqlCall
name|call
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a call binding.    *    * @param validator Validator    * @param scope     Scope of call    * @param call      Call node    */
specifier|public
name|SqlCallBinding
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
name|super
argument_list|(
name|validator
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|validator
operator|=
name|validator
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|int
name|getGroupCount
parameter_list|()
block|{
specifier|final
name|SelectScope
name|selectScope
init|=
name|SqlValidatorUtil
operator|.
name|getEnclosingSelectScope
argument_list|(
name|scope
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectScope
operator|==
literal|null
condition|)
block|{
comment|// Probably "VALUES expr". Treat same as "SELECT expr GROUP BY ()"
return|return
literal|0
return|;
block|}
specifier|final
name|SqlSelect
name|select
init|=
name|selectScope
operator|.
name|getNode
argument_list|()
decl_stmt|;
specifier|final
name|SqlNodeList
name|group
init|=
name|select
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SqlNode
name|groupItem
range|:
name|group
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|groupItem
operator|instanceof
name|SqlNodeList
operator|)
operator|||
operator|(
operator|(
name|SqlNodeList
operator|)
name|groupItem
operator|)
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
block|}
return|return
name|n
return|;
block|}
return|return
name|validator
operator|.
name|isAggregate
argument_list|(
name|select
argument_list|)
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the validator.    */
specifier|public
name|SqlValidator
name|getValidator
parameter_list|()
block|{
return|return
name|validator
return|;
block|}
comment|/**    * Returns the scope of the call.    */
specifier|public
name|SqlValidatorScope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
comment|/**    * Returns the call node.    */
specifier|public
name|SqlCall
name|getCall
parameter_list|()
block|{
return|return
name|call
return|;
block|}
comment|/** Returns the operands to a call permuted into the same order as the    * formal parameters of the function. */
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operands
parameter_list|()
block|{
if|if
condition|(
name|hasAssignment
argument_list|()
operator|&&
operator|!
operator|(
name|call
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlUnresolvedFunction
operator|)
condition|)
block|{
return|return
name|permutedOperands
argument_list|(
name|call
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operandList
init|=
name|call
operator|.
name|getOperandList
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlFunction
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|paramTypes
init|=
operator|(
operator|(
name|SqlFunction
operator|)
name|call
operator|.
name|getOperator
argument_list|()
operator|)
operator|.
name|getParamTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramTypes
operator|!=
literal|null
operator|&&
name|operandList
operator|.
name|size
argument_list|()
operator|<
name|paramTypes
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|operandList
argument_list|)
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|size
argument_list|()
operator|<
name|paramTypes
operator|.
name|size
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|DEFAULT_CALL
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
return|return
name|operandList
return|;
block|}
block|}
comment|/** Returns whether arguments have name assignment. */
specifier|private
name|boolean
name|hasAssignment
parameter_list|()
block|{
for|for
control|(
name|SqlNode
name|operand
range|:
name|call
operator|.
name|getOperandList
argument_list|()
control|)
block|{
if|if
condition|(
name|operand
operator|!=
literal|null
operator|&&
name|operand
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ARGUMENT_ASSIGNMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns the operands to a call permuted into the same order as the    * formal parameters of the function. */
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|permutedOperands
parameter_list|(
specifier|final
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|SqlFunction
name|operator
init|=
operator|(
name|SqlFunction
operator|)
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|operator
operator|.
name|getParamNames
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|SqlNode
argument_list|>
argument_list|()
block|{
specifier|public
name|SqlNode
name|apply
parameter_list|(
name|String
name|paramName
parameter_list|)
block|{
for|for
control|(
name|SqlNode
name|operand2
range|:
name|call
operator|.
name|getOperandList
argument_list|()
control|)
block|{
specifier|final
name|SqlCall
name|call2
init|=
operator|(
name|SqlCall
operator|)
name|operand2
decl_stmt|;
assert|assert
name|operand2
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ARGUMENT_ASSIGNMENT
assert|;
specifier|final
name|SqlIdentifier
name|id
init|=
name|call2
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|getSimple
argument_list|()
operator|.
name|equals
argument_list|(
name|paramName
argument_list|)
condition|)
block|{
return|return
name|call2
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
name|DEFAULT_CALL
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Returns a particular operand.    */
specifier|public
name|SqlNode
name|operand
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|operands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/** Returns a call that is equivalent except that arguments have been    * permuted into the logical order. Any arguments whose default value is being    * used are null. */
specifier|public
name|SqlCall
name|permutedCall
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operandList
init|=
name|operands
argument_list|()
decl_stmt|;
if|if
condition|(
name|operandList
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|createCall
argument_list|(
name|call
operator|.
name|pos
argument_list|,
name|operandList
argument_list|)
return|;
block|}
specifier|public
name|SqlMonotonicity
name|getOperandMonotonicity
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|call
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
name|ordinal
argument_list|)
operator|.
name|getMonotonicity
argument_list|(
name|scope
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStringLiteralOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|SqlNode
name|node
init|=
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|o
init|=
name|SqlLiteral
operator|.
name|value
argument_list|(
name|node
argument_list|)
decl_stmt|;
return|return
name|o
operator|instanceof
name|NlsString
condition|?
operator|(
operator|(
name|NlsString
operator|)
name|o
operator|)
operator|.
name|getValue
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIntLiteralOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|SqlNode
name|node
init|=
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|o
init|=
name|SqlLiteral
operator|.
name|value
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|BigDecimal
condition|)
block|{
name|BigDecimal
name|bd
init|=
operator|(
name|BigDecimal
operator|)
name|o
decl_stmt|;
try|try
block|{
return|return
name|bd
operator|.
name|intValueExact
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|node
operator|.
name|pos
argument_list|,
name|RESOURCE
operator|.
name|numberLiteralOutOfRange
argument_list|(
name|bd
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"should never come here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Comparable
name|getOperandLiteralValue
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|SqlNode
name|node
init|=
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
return|return
name|SqlLiteral
operator|.
name|value
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOperandNull
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|boolean
name|allowCast
parameter_list|)
block|{
return|return
name|SqlUtil
operator|.
name|isNullLiteral
argument_list|(
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
argument_list|,
name|allowCast
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOperandLiteral
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|boolean
name|allowCast
parameter_list|)
block|{
return|return
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
argument_list|,
name|allowCast
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOperandCount
parameter_list|()
block|{
return|return
name|call
operator|.
name|getOperandList
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getOperandType
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
specifier|final
name|SqlNode
name|operand
init|=
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|operand
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidatorNamespace
name|namespace
init|=
name|validator
operator|.
name|getNamespace
argument_list|(
name|operand
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
return|return
name|namespace
operator|.
name|getType
argument_list|()
return|;
block|}
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getCursorOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
specifier|final
name|SqlNode
name|operand
init|=
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SqlUtil
operator|.
name|isCallTo
argument_list|(
name|operand
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CURSOR
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|SqlCall
name|cursorCall
init|=
operator|(
name|SqlCall
operator|)
name|operand
decl_stmt|;
specifier|final
name|SqlNode
name|query
init|=
name|cursorCall
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnListParamInfo
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|String
name|paramName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnList
parameter_list|)
block|{
specifier|final
name|SqlNode
name|operand
init|=
name|call
operator|.
name|operand
argument_list|(
name|ordinal
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SqlUtil
operator|.
name|isCallTo
argument_list|(
name|operand
argument_list|,
name|SqlStdOperatorTable
operator|.
name|ROW
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|SqlNode
name|id
range|:
operator|(
operator|(
name|SqlCall
operator|)
name|operand
operator|)
operator|.
name|getOperandList
argument_list|()
control|)
block|{
name|columnList
operator|.
name|add
argument_list|(
operator|(
operator|(
name|SqlIdentifier
operator|)
name|id
operator|)
operator|.
name|getSimple
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|validator
operator|.
name|getParentCursor
argument_list|(
name|paramName
argument_list|)
return|;
block|}
specifier|public
name|CalciteException
name|newError
parameter_list|(
name|Resources
operator|.
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|e
parameter_list|)
block|{
return|return
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|/**    * Constructs a new validation signature error for the call.    *    * @return signature exception    */
specifier|public
name|CalciteException
name|newValidationSignatureError
parameter_list|()
block|{
return|return
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|RESOURCE
operator|.
name|canNotApplyOp2Type
argument_list|(
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|call
operator|.
name|getCallSignature
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|)
argument_list|,
name|getOperator
argument_list|()
operator|.
name|getAllowedSignatures
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Constructs a new validation error for the call. (Do not use this to    * construct a validation error for other nodes such as an operands.)    *    * @param ex underlying exception    * @return wrapped exception    */
specifier|public
name|CalciteException
name|newValidationError
parameter_list|(
name|Resources
operator|.
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|ex
parameter_list|)
block|{
return|return
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|ex
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlCallBinding.java
end_comment

end_unit

