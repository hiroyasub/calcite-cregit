begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJsonValueReturning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperandCountRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandCountRanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeTransforms
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * The<code>JSON_VALUE</code> function.  */
end_comment

begin_class
specifier|public
class|class
name|SqlJsonValueFunction
extends|extends
name|SqlFunction
block|{
specifier|public
name|SqlJsonValueFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
name|ReturnTypes
operator|.
name|cascade
argument_list|(
name|opBinding
lambda|->
name|explicitTypeSpec
argument_list|(
name|opBinding
argument_list|)
operator|.
name|orElse
argument_list|(
name|getDefaultType
argument_list|(
name|opBinding
argument_list|)
argument_list|)
argument_list|,
name|SqlTypeTransforms
operator|.
name|FORCE_NULLABLE
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|CHARACTER
argument_list|)
argument_list|,
name|ordinal
lambda|->
name|ordinal
operator|>
literal|1
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
expr_stmt|;
block|}
comment|/** Returns VARCHAR(2000) as default. */
specifier|private
specifier|static
name|RelDataType
name|getDefaultType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|2000
argument_list|)
return|;
block|}
comment|/**    * Returns new operand list with type specification removed.    */
specifier|public
specifier|static
name|List
argument_list|<
name|SqlNode
argument_list|>
name|removeTypeSpecOperands
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
name|List
argument_list|<
annotation|@
name|Nullable
name|SqlNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasExplicitTypeSpec
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
condition|)
block|{
name|operands
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|operands
operator|.
name|set
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|operands
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|SqlOperandCountRanges
operator|.
name|between
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/** Returns the optional explicit returning type specification. **/
specifier|private
specifier|static
name|Optional
argument_list|<
name|RelDataType
argument_list|>
name|explicitTypeSpec
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
if|if
condition|(
name|opBinding
operator|.
name|getOperandCount
argument_list|()
operator|>
literal|2
operator|&&
name|opBinding
operator|.
name|isOperandLiteral
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
operator|&&
name|opBinding
operator|.
name|getOperandLiteralValue
argument_list|(
literal|2
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|instanceof
name|SqlJsonValueReturning
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/** Returns whether there is an explicit return type specification. */
specifier|public
specifier|static
name|boolean
name|hasExplicitTypeSpec
parameter_list|(
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operands
parameter_list|)
block|{
return|return
name|operands
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|isReturningTypeSymbol
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|boolean
name|hasExplicitTypeSpec
parameter_list|(
annotation|@
name|Nullable
name|SqlNode
index|[]
name|operands
parameter_list|)
block|{
return|return
name|hasExplicitTypeSpec
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Nullness
operator|.
name|castNonNullArray
argument_list|(
name|operands
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isReturningTypeSymbol
parameter_list|(
annotation|@
name|Nullable
name|SqlNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|instanceof
name|SqlLiteral
operator|&&
operator|(
operator|(
name|SqlLiteral
operator|)
name|node
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|SqlJsonValueReturning
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|String
name|opNameToUse
parameter_list|)
block|{
return|return
literal|"JSON_VALUE(json_doc, path [RETURNING type] "
operator|+
literal|"[{NULL | ERROR | DEFAULT value} ON EMPTY] "
operator|+
literal|"[{NULL | ERROR | DEFAULT value} ON ERROR])"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|call
operator|.
name|operandCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|call
operator|.
name|operand
argument_list|(
name|i
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endFunCall
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

