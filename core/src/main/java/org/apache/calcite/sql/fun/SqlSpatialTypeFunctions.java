begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SpatialTypeFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_comment
comment|/**  * Utilities for spatial type functions.  *  *<p>Includes some table functions, and may in future include other functions  * that have dependencies beyond the {@code org.apache.calcite.runtime} package.  */
end_comment

begin_class
specifier|public
class|class
name|SqlSpatialTypeFunctions
block|{
specifier|private
name|SqlSpatialTypeFunctions
parameter_list|()
block|{
block|}
comment|// Geometry table functions =================================================
comment|/**    * Explodes the {@code geom} into multiple geometries.    *    * @see SpatialTypeFunctions ST_Explode */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"WeakerAccess"
block|,
literal|"unused"
block|}
argument_list|)
specifier|public
specifier|static
name|ScannableTable
name|ST_Explode
parameter_list|(
name|Geometry
name|geom
parameter_list|)
block|{
return|return
operator|new
name|ExplodeTable
argument_list|(
name|geom
argument_list|)
return|;
block|}
comment|/** Calculates a regular grid of polygons based on {@code geom}.    *    * @see SpatialTypeFunctions ST_MakeGrid */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"WeakerAccess"
block|,
literal|"unused"
block|}
argument_list|)
specifier|public
specifier|static
name|ScannableTable
name|ST_MakeGrid
parameter_list|(
specifier|final
name|Geometry
name|geom
parameter_list|,
specifier|final
name|BigDecimal
name|deltaX
parameter_list|,
specifier|final
name|BigDecimal
name|deltaY
parameter_list|)
block|{
return|return
operator|new
name|GridTable
argument_list|(
name|geom
argument_list|,
name|deltaX
argument_list|,
name|deltaY
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Calculates a regular grid of points based on {@code geom}.    *    * @see SpatialTypeFunctions ST_MakeGridPoints */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"WeakerAccess"
block|,
literal|"unused"
block|}
argument_list|)
specifier|public
specifier|static
name|ScannableTable
name|ST_MakeGridPoints
parameter_list|(
specifier|final
name|Geometry
name|geom
parameter_list|,
specifier|final
name|BigDecimal
name|deltaX
parameter_list|,
specifier|final
name|BigDecimal
name|deltaY
parameter_list|)
block|{
return|return
operator|new
name|GridTable
argument_list|(
name|geom
argument_list|,
name|deltaX
argument_list|,
name|deltaY
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Returns the geometries of a geometry. */
specifier|public
specifier|static
class|class
name|ExplodeTable
implements|implements
name|ScannableTable
block|{
specifier|private
specifier|final
name|Geometry
name|geometry
decl_stmt|;
specifier|public
name|ExplodeTable
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
name|this
operator|.
name|geometry
operator|=
name|geometry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Functions
operator|.
name|generate
argument_list|(
name|geometry
operator|.
name|getNumGeometries
argument_list|()
argument_list|,
name|i
lambda|->
operator|new
name|Object
index|[]
block|{
name|geometry
operator|.
name|getGeometryN
argument_list|(
name|i
argument_list|)
block|,
name|i
block|}
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"GEOM"
argument_list|,
name|SqlTypeName
operator|.
name|GEOMETRY
argument_list|)
operator|.
name|add
argument_list|(
literal|"INDEX"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|UNKNOWN
return|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|TABLE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRolledUp
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rolledUpColumnValidInsideAgg
parameter_list|(
name|String
name|column
parameter_list|,
name|SqlCall
name|call
parameter_list|,
annotation|@
name|Nullable
name|SqlNode
name|parent
parameter_list|,
annotation|@
name|Nullable
name|CalciteConnectionConfig
name|config
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Returns the points or rectangles in a grid that covers a given    * geometry. */
specifier|public
specifier|static
class|class
name|GridTable
implements|implements
name|ScannableTable
block|{
specifier|private
specifier|final
name|Geometry
name|geom
decl_stmt|;
specifier|private
specifier|final
name|BigDecimal
name|deltaX
decl_stmt|;
specifier|private
specifier|final
name|BigDecimal
name|deltaY
decl_stmt|;
specifier|private
name|boolean
name|point
decl_stmt|;
name|GridTable
parameter_list|(
name|Geometry
name|geom
parameter_list|,
name|BigDecimal
name|deltaX
parameter_list|,
name|BigDecimal
name|deltaY
parameter_list|,
name|boolean
name|point
parameter_list|)
block|{
name|this
operator|.
name|geom
operator|=
name|geom
expr_stmt|;
name|this
operator|.
name|deltaX
operator|=
name|deltaX
expr_stmt|;
name|this
operator|.
name|deltaY
operator|=
name|deltaY
expr_stmt|;
name|this
operator|.
name|point
operator|=
name|point
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
comment|// a point (for ST_MakeGridPoints) or a rectangle (for ST_MakeGrid)
operator|.
name|add
argument_list|(
literal|"THE_GEOM"
argument_list|,
name|SqlTypeName
operator|.
name|GEOMETRY
argument_list|)
comment|// in [0, width * height)
operator|.
name|add
argument_list|(
literal|"ID"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// in [1, width]
operator|.
name|add
argument_list|(
literal|"ID_COL"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// in [1, height]
operator|.
name|add
argument_list|(
literal|"ID_ROW"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// absolute column, with 0 somewhere near the origin; not standard
operator|.
name|add
argument_list|(
literal|"ABS_COL"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
comment|// absolute row, with 0 somewhere near the origin; not standard
operator|.
name|add
argument_list|(
literal|"ABS_ROW"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
if|if
condition|(
name|geom
operator|!=
literal|null
operator|&&
name|deltaX
operator|!=
literal|null
operator|&&
name|deltaY
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|deltaX
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|>
literal|0
operator|&&
name|deltaY
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|SpatialTypeFunctions
operator|.
name|GridEnumerable
argument_list|(
name|geom
operator|.
name|getEnvelopeInternal
argument_list|()
argument_list|,
name|deltaX
argument_list|,
name|deltaY
argument_list|,
name|point
argument_list|)
return|;
block|}
block|}
return|return
name|Linq4j
operator|.
name|emptyEnumerable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|of
argument_list|(
literal|100d
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|OTHER
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRolledUp
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rolledUpColumnValidInsideAgg
parameter_list|(
name|String
name|column
parameter_list|,
name|SqlCall
name|call
parameter_list|,
annotation|@
name|Nullable
name|SqlNode
name|parent
parameter_list|,
annotation|@
name|Nullable
name|CalciteConnectionConfig
name|config
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

