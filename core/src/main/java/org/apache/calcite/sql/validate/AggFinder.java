begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSyntax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlBasicVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Visitor which looks for an aggregate function inside a tree of  * {@link SqlNode} objects.  */
end_comment

begin_class
class|class
name|AggFinder
extends|extends
name|SqlBasicVisitor
argument_list|<
name|Void
argument_list|>
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlOperatorTable
name|opTab
decl_stmt|;
comment|/** Whether to find windowed aggregates. */
specifier|private
specifier|final
name|boolean
name|over
decl_stmt|;
comment|/** Whether to find regular (non-windowed) aggregates. */
specifier|private
name|boolean
name|aggregate
decl_stmt|;
comment|/** Whether to find group functions (e.g. {@code TUMBLE})    * or group auxiliary functions (e.g. {@code TUMBLE_START}). */
specifier|private
name|boolean
name|group
decl_stmt|;
specifier|private
specifier|final
name|AggFinder
name|delegate
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates an AggFinder.    *    * @param opTab Operator table    * @param over Whether to find windowed function calls {@code agg(x) OVER    *             windowSpec}    * @param aggregate Whether to find non-windowed aggregate calls    * @param group Whether to find group functions (e.g. {@code TUMBLE})    * @param delegate Finder to which to delegate when processing the arguments    */
name|AggFinder
parameter_list|(
name|SqlOperatorTable
name|opTab
parameter_list|,
name|boolean
name|over
parameter_list|,
name|boolean
name|aggregate
parameter_list|,
name|boolean
name|group
parameter_list|,
name|AggFinder
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|opTab
operator|=
name|opTab
expr_stmt|;
name|this
operator|.
name|over
operator|=
name|over
expr_stmt|;
name|this
operator|.
name|aggregate
operator|=
name|aggregate
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Finds an aggregate.    *    * @param node Parse tree to search    * @return First aggregate function in parse tree, or null if not found    */
specifier|public
name|SqlCall
name|findAgg
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
try|try
block|{
name|node
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|SqlCall
operator|)
name|e
operator|.
name|getNode
argument_list|()
return|;
block|}
block|}
specifier|public
name|SqlCall
name|findAgg
parameter_list|(
name|List
argument_list|<
name|SqlNode
argument_list|>
name|nodes
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|SqlNode
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|(
name|SqlCall
operator|)
name|e
operator|.
name|getNode
argument_list|()
return|;
block|}
block|}
specifier|public
name|Void
name|visit
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|SqlOperator
name|operator
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
comment|// If nested aggregates disallowed or found an aggregate at invalid level
if|if
condition|(
name|operator
operator|.
name|isAggregator
argument_list|()
operator|&&
operator|!
name|operator
operator|.
name|requiresOver
argument_list|()
condition|)
block|{
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|operator
operator|.
name|acceptCall
argument_list|(
name|delegate
argument_list|,
name|call
argument_list|)
return|;
block|}
if|if
condition|(
name|aggregate
condition|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|call
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|group
operator|&&
name|operator
operator|.
name|isGroup
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|call
argument_list|)
throw|;
block|}
comment|// User-defined function may not be resolved yet.
if|if
condition|(
name|operator
operator|instanceof
name|SqlFunction
condition|)
block|{
specifier|final
name|SqlFunction
name|sqlFunction
init|=
operator|(
name|SqlFunction
operator|)
name|operator
decl_stmt|;
if|if
condition|(
name|sqlFunction
operator|.
name|getFunctionType
argument_list|()
operator|.
name|isUserDefinedNotSpecificFunction
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|opTab
operator|.
name|lookupOperatorOverloads
argument_list|(
name|sqlFunction
operator|.
name|getSqlIdentifier
argument_list|()
argument_list|,
name|sqlFunction
operator|.
name|getFunctionType
argument_list|()
argument_list|,
name|SqlSyntax
operator|.
name|FUNCTION
argument_list|,
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|SqlOperator
name|operator2
range|:
name|list
control|)
block|{
if|if
condition|(
name|operator2
operator|.
name|isAggregator
argument_list|()
operator|&&
operator|!
name|operator2
operator|.
name|requiresOver
argument_list|()
condition|)
block|{
comment|// If nested aggregates disallowed or found aggregate at invalid level
if|if
condition|(
name|aggregate
condition|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|call
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|call
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|QUERY
argument_list|)
condition|)
block|{
comment|// don't traverse into queries
return|return
literal|null
return|;
block|}
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OVER
condition|)
block|{
if|if
condition|(
name|over
condition|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|call
argument_list|)
throw|;
block|}
else|else
block|{
comment|// an aggregate function over a window is not an aggregate!
return|return
literal|null
return|;
block|}
block|}
return|return
name|super
operator|.
name|visit
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End AggFinder.java
end_comment

end_unit

