begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeTransforms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|ReflectiveSqlOperatorTable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Operator table that contains only Oracle-specific functions and operators.  */
end_comment

begin_class
specifier|public
class|class
name|OracleSqlOperatorTable
extends|extends
name|ReflectiveSqlOperatorTable
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * The table of contains Oracle-specific operators.    */
specifier|private
specifier|static
name|OracleSqlOperatorTable
name|instance
decl_stmt|;
comment|/** Return type inference for {@code DECODE}. */
specifier|protected
specifier|static
specifier|final
name|SqlReturnTypeInference
name|DECODE_RETURN_TYPE
init|=
operator|new
name|SqlReturnTypeInference
argument_list|()
block|{
specifier|public
name|RelDataType
name|inferReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|n
init|=
name|opBinding
operator|.
name|getOperandCount
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|n
operator|-
literal|1
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|opBinding
operator|.
name|getOperandType
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|leastRestrictive
argument_list|(
name|list
argument_list|)
decl_stmt|;
if|if
condition|(
name|opBinding
operator|.
name|getOperandCount
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|type
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
block|}
decl_stmt|;
comment|/** The "DECODE(v, v1, result1, [v2, result2, ...], resultN)" function. */
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DECODE
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"DECODE"
argument_list|,
name|SqlKind
operator|.
name|DECODE
argument_list|,
name|DECODE_RETURN_TYPE
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|VARIADIC
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
comment|/** The "NVL(value, value)" function. */
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|NVL
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"NVL"
argument_list|,
name|SqlKind
operator|.
name|NVL
argument_list|,
name|ReturnTypes
operator|.
name|cascade
argument_list|(
name|ReturnTypes
operator|.
name|LEAST_RESTRICTIVE
argument_list|,
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE_ALL
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|SAME_SAME
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
comment|/** The "LTRIM(string)" function. */
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|LTRIM
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"LTRIM"
argument_list|,
name|SqlKind
operator|.
name|LTRIM
argument_list|,
name|ReturnTypes
operator|.
name|cascade
argument_list|(
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|,
name|SqlTypeTransforms
operator|.
name|TO_VARYING
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "RTRIM(string)" function. */
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|RTRIM
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"RTRIM"
argument_list|,
name|SqlKind
operator|.
name|RTRIM
argument_list|,
name|ReturnTypes
operator|.
name|cascade
argument_list|(
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|,
name|SqlTypeTransforms
operator|.
name|TO_VARYING
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "GREATEST(value, value)" function. */
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|GREATEST
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"GREATEST"
argument_list|,
name|SqlKind
operator|.
name|GREATEST
argument_list|,
name|ReturnTypes
operator|.
name|cascade
argument_list|(
name|ReturnTypes
operator|.
name|LEAST_RESTRICTIVE
argument_list|,
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|SAME_VARIADIC
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
comment|/** The "LEAST(value, value)" function. */
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|LEAST
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"LEAST"
argument_list|,
name|SqlKind
operator|.
name|LEAST
argument_list|,
name|ReturnTypes
operator|.
name|cascade
argument_list|(
name|ReturnTypes
operator|.
name|LEAST_RESTRICTIVE
argument_list|,
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|SAME_VARIADIC
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
comment|/**    * Returns the Oracle operator table, creating it if necessary.    */
specifier|public
specifier|static
specifier|synchronized
name|OracleSqlOperatorTable
name|instance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
comment|// Creates and initializes the standard operator table.
comment|// Uses two-phase construction, because we can't initialize the
comment|// table until the constructor of the sub-class has completed.
name|instance
operator|=
operator|new
name|OracleSqlOperatorTable
argument_list|()
expr_stmt|;
name|instance
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
block|}
end_class

begin_comment
comment|// End OracleSqlOperatorTable.java
end_comment

end_unit

