begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util14
operator|.
name|DateTimeUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Represents an INTERVAL qualifier.  *  *<p>INTERVAL qualifier is defined as follows:  *  *<blockquote><code>  *  *&lt;interval qualifier&gt; ::=<br>  *&nbsp;&nbsp;&lt;start field&gt; TO&lt;end field&gt;<br>  *&nbsp;&nbsp;|&lt;single datetime field&gt;<br>  *&lt;start field&gt; ::=<br>  *&nbsp;&nbsp;&lt;non-second primary datetime field&gt;<br>  *&nbsp;&nbsp; [&lt;left paren&gt;&lt;interval leading field precision&gt;  *&lt;right paren&gt; ]<br>  *&lt;end field&gt; ::=<br>  *&nbsp;&nbsp;&lt;non-second primary datetime field&gt;<br>  *&nbsp;&nbsp;| SECOND [&lt;left paren&gt;  *&lt;interval fractional seconds precision&gt;&lt;right paren&gt; ]<br>  *&lt;single datetime field&gt; ::=<br>  *&nbsp;&nbsp;&lt;non-second primary datetime field&gt;<br>  *&nbsp;&nbsp;[&lt;left paren&gt;&lt;interval leading field precision&gt;  *&lt;right paren&gt; ]<br>  *&nbsp;&nbsp;| SECOND [&lt;left paren&gt;  *&lt;interval leading field precision&gt;<br>  *&nbsp;&nbsp;[&lt;comma&gt;&lt;interval fractional seconds precision&gt; ]  *&lt;right paren&gt; ]<br>  *&lt;primary datetime field&gt; ::=<br>  *&nbsp;&nbsp;&lt;non-second primary datetime field&gt;<br>  *&nbsp;&nbsp;| SECOND<br>  *&lt;non-second primary datetime field&gt; ::= YEAR | MONTH | DAY | HOUR  * | MINUTE<br>  *&lt;interval fractional seconds precision&gt; ::=  *&lt;unsigned integer&gt;<br>  *&lt;interval leading field precision&gt; ::=&lt;unsigned integer&gt;  *  *</code></blockquote>  *  *<p>Examples include:  *  *<ul>  *<li><code>INTERVAL '1:23:45.678' HOUR TO SECOND</code></li>  *<li><code>INTERVAL '1 2:3:4' DAY TO SECOND</code></li>  *<li><code>INTERVAL '1 2:3:4' DAY(4) TO SECOND(4)</code></li>  *</ul>  *  * An instance of this class is immutable.  */
end_comment

begin_class
specifier|public
class|class
name|SqlIntervalQualifier
extends|extends
name|SqlNode
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|ZERO
init|=
name|BigDecimal
operator|.
name|ZERO
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|THOUSAND
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|INT_MAX_VALUE_PLUS_ONE
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|add
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
decl_stmt|;
comment|//~ Enums ------------------------------------------------------------------
comment|/**    * Enumeration of time units used to construct an interval.    */
specifier|public
enum|enum
name|TimeUnit
implements|implements
name|SqlLiteral
operator|.
name|SqlSymbol
block|{
name|YEAR
argument_list|(
literal|true
argument_list|,
literal|' '
argument_list|,
literal|12
comment|/* months */
argument_list|,
literal|null
argument_list|)
block|,
name|MONTH
argument_list|(
literal|true
argument_list|,
literal|'-'
argument_list|,
literal|1
comment|/* months */
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
argument_list|)
block|,
name|DAY
argument_list|(
literal|false
argument_list|,
literal|'-'
argument_list|,
name|DateTimeUtil
operator|.
name|MILLIS_PER_DAY
argument_list|,
literal|null
argument_list|)
block|,
name|HOUR
argument_list|(
literal|false
argument_list|,
literal|' '
argument_list|,
name|DateTimeUtil
operator|.
name|MILLIS_PER_HOUR
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|24
argument_list|)
argument_list|)
block|,
name|MINUTE
argument_list|(
literal|false
argument_list|,
literal|':'
argument_list|,
name|DateTimeUtil
operator|.
name|MILLIS_PER_MINUTE
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|60
argument_list|)
argument_list|)
block|,
name|SECOND
argument_list|(
literal|false
argument_list|,
literal|':'
argument_list|,
name|DateTimeUtil
operator|.
name|MILLIS_PER_SECOND
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|60
argument_list|)
argument_list|)
block|;
specifier|public
specifier|final
name|boolean
name|yearMonth
decl_stmt|;
specifier|public
specifier|final
name|char
name|separator
decl_stmt|;
specifier|public
specifier|final
name|long
name|multiplier
decl_stmt|;
specifier|private
specifier|final
name|BigDecimal
name|limit
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeUnit
index|[]
name|CACHED_VALUES
init|=
name|values
argument_list|()
decl_stmt|;
specifier|private
name|TimeUnit
parameter_list|(
name|boolean
name|yearMonth
parameter_list|,
name|char
name|separator
parameter_list|,
name|long
name|multiplier
parameter_list|,
name|BigDecimal
name|limit
parameter_list|)
block|{
name|this
operator|.
name|yearMonth
operator|=
name|yearMonth
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
comment|/**      * Returns the TimeUnit associated with an ordinal. The value returned      * is null if the ordinal is not a member of the TimeUnit enumeration.      */
specifier|public
specifier|static
name|TimeUnit
name|getValue
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|ordinal
operator|<
literal|0
operator|||
name|ordinal
operator|>=
name|CACHED_VALUES
operator|.
name|length
condition|?
literal|null
else|:
name|CACHED_VALUES
index|[
name|ordinal
index|]
return|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|GET_VALUE_METHOD_NAME
init|=
literal|"getValue"
decl_stmt|;
comment|/**      * Returns whether a given value is valid for a field of this time unit.      *      * @param field Field value      * @return Whether value      */
specifier|public
name|boolean
name|isValidValue
parameter_list|(
name|BigDecimal
name|field
parameter_list|)
block|{
return|return
name|field
operator|.
name|compareTo
argument_list|(
name|ZERO
argument_list|)
operator|>=
literal|0
operator|&&
operator|(
name|limit
operator|==
literal|null
operator|||
name|field
operator|.
name|compareTo
argument_list|(
name|limit
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
block|}
specifier|private
enum|enum
name|TimeUnitRange
block|{
name|YEAR
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|,
literal|null
argument_list|)
block|,
name|YEAR_TO_MONTH
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|)
block|,
name|MONTH
argument_list|(
name|TimeUnit
operator|.
name|MONTH
argument_list|,
literal|null
argument_list|)
block|,
name|DAY
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
literal|null
argument_list|)
block|,
name|DAY_TO_HOUR
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|)
block|,
name|DAY_TO_MINUTE
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
block|,
name|DAY_TO_SECOND
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
block|,
name|HOUR
argument_list|(
name|TimeUnit
operator|.
name|HOUR
argument_list|,
literal|null
argument_list|)
block|,
name|HOUR_TO_MINUTE
argument_list|(
name|TimeUnit
operator|.
name|HOUR
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
block|,
name|HOUR_TO_SECOND
argument_list|(
name|TimeUnit
operator|.
name|HOUR
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
block|,
name|MINUTE
argument_list|(
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
literal|null
argument_list|)
block|,
name|MINUTE_TO_SECOND
argument_list|(
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
block|,
name|SECOND
argument_list|(
name|TimeUnit
operator|.
name|SECOND
argument_list|,
literal|null
argument_list|)
block|;
specifier|private
specifier|final
name|TimeUnit
name|startUnit
decl_stmt|;
specifier|private
specifier|final
name|TimeUnit
name|endUnit
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Pair
argument_list|<
name|TimeUnit
argument_list|,
name|TimeUnit
argument_list|>
argument_list|,
name|TimeUnitRange
argument_list|>
name|MAP
decl_stmt|;
static|static
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|TimeUnit
argument_list|,
name|TimeUnit
argument_list|>
argument_list|,
name|TimeUnitRange
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|TimeUnitRange
name|value
range|:
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|value
operator|.
name|startUnit
argument_list|,
name|value
operator|.
name|endUnit
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|MAP
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a TimeUnitRange.      *      * @param startUnit Start time unit      * @param endUnit   End time unit      */
name|TimeUnitRange
parameter_list|(
name|TimeUnit
name|startUnit
parameter_list|,
name|TimeUnit
name|endUnit
parameter_list|)
block|{
assert|assert
name|startUnit
operator|!=
literal|null
assert|;
name|this
operator|.
name|startUnit
operator|=
name|startUnit
expr_stmt|;
name|this
operator|.
name|endUnit
operator|=
name|endUnit
expr_stmt|;
block|}
comment|/**      * Returns a TimeUnitRange with a given start and end unit.      *      * @param startUnit Start unit      * @param endUnit   End unit      * @return Time unit range, or null if not valid      */
specifier|public
specifier|static
name|TimeUnitRange
name|of
parameter_list|(
name|TimeUnit
name|startUnit
parameter_list|,
name|TimeUnit
name|endUnit
parameter_list|)
block|{
return|return
name|MAP
operator|.
name|get
argument_list|(
operator|new
name|Pair
argument_list|<
name|TimeUnit
argument_list|,
name|TimeUnit
argument_list|>
argument_list|(
name|startUnit
argument_list|,
name|endUnit
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|int
name|startPrecision
decl_stmt|;
specifier|private
specifier|final
name|TimeUnitRange
name|timeUnitRange
decl_stmt|;
specifier|private
specifier|final
name|int
name|fractionalSecondPrecision
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlIntervalQualifier
parameter_list|(
name|TimeUnit
name|startUnit
parameter_list|,
name|int
name|startPrecision
parameter_list|,
name|TimeUnit
name|endUnit
parameter_list|,
name|int
name|fractionalSecondPrecision
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeUnitRange
operator|=
name|TimeUnitRange
operator|.
name|of
argument_list|(
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|startUnit
argument_list|)
argument_list|,
name|endUnit
argument_list|)
expr_stmt|;
name|this
operator|.
name|startPrecision
operator|=
name|startPrecision
expr_stmt|;
name|this
operator|.
name|fractionalSecondPrecision
operator|=
name|fractionalSecondPrecision
expr_stmt|;
block|}
specifier|public
name|SqlIntervalQualifier
parameter_list|(
name|TimeUnit
name|startUnit
parameter_list|,
name|TimeUnit
name|endUnit
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|startUnit
argument_list|,
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
argument_list|,
name|endUnit
argument_list|,
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlTypeName
name|typeName
parameter_list|()
block|{
return|return
name|isYearMonth
argument_list|()
condition|?
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
else|:
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
return|;
block|}
specifier|public
name|SqlFunctions
operator|.
name|TimeUnitRange
name|foo
parameter_list|()
block|{
return|return
name|SqlFunctions
operator|.
name|TimeUnitRange
operator|.
name|valueOf
argument_list|(
name|timeUnitRange
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
name|validator
operator|.
name|validateIntervalQualifier
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equalsDeep
parameter_list|(
name|SqlNode
name|node
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
specifier|final
name|String
name|thisString
init|=
name|this
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|thatString
init|=
name|node
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|thisString
operator|.
name|equals
argument_list|(
name|thatString
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|fail
operator|:
name|this
operator|+
literal|"!="
operator|+
name|node
assert|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getStartPrecision
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|)
block|{
if|if
condition|(
name|startPrecision
operator|==
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
condition|)
block|{
return|return
name|typeSystem
operator|.
name|getDefaultPrecision
argument_list|(
name|typeName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|startPrecision
return|;
block|}
block|}
specifier|public
name|int
name|getStartPrecisionPreservingDefault
parameter_list|()
block|{
return|return
name|startPrecision
return|;
block|}
specifier|private
name|boolean
name|useDefaultStartPrecision
parameter_list|()
block|{
return|return
name|startPrecision
operator|==
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
return|;
block|}
specifier|public
specifier|static
name|int
name|combineStartPrecisionPreservingDefault
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|SqlIntervalQualifier
name|qual1
parameter_list|,
name|SqlIntervalQualifier
name|qual2
parameter_list|)
block|{
specifier|final
name|int
name|start1
init|=
name|qual1
operator|.
name|getStartPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
specifier|final
name|int
name|start2
init|=
name|qual2
operator|.
name|getStartPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
if|if
condition|(
name|start1
operator|>
name|start2
condition|)
block|{
comment|// qual1 is more precise, but if it has the default indicator
comment|// set, we need to return that indicator so result will also
comment|// use default
return|return
name|qual1
operator|.
name|getStartPrecisionPreservingDefault
argument_list|()
return|;
block|}
if|else if
condition|(
name|start1
operator|<
name|start2
condition|)
block|{
comment|// qual2 is more precise, but if it has the default indicator
comment|// set, we need to return that indicator so result will also
comment|// use default
return|return
name|qual2
operator|.
name|getStartPrecisionPreservingDefault
argument_list|()
return|;
block|}
else|else
block|{
comment|// they are equal.  return default if both are default,
comment|// otherwise return exact precision
if|if
condition|(
name|qual1
operator|.
name|useDefaultStartPrecision
argument_list|()
operator|&&
name|qual2
operator|.
name|useDefaultStartPrecision
argument_list|()
condition|)
block|{
return|return
name|qual1
operator|.
name|getStartPrecisionPreservingDefault
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|start1
return|;
block|}
block|}
block|}
specifier|public
name|int
name|getFractionalSecondPrecision
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|)
block|{
if|if
condition|(
name|fractionalSecondPrecision
operator|==
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
condition|)
block|{
return|return
name|typeName
argument_list|()
operator|.
name|getDefaultScale
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|fractionalSecondPrecision
return|;
block|}
block|}
specifier|public
name|int
name|getFractionalSecondPrecisionPreservingDefault
parameter_list|()
block|{
if|if
condition|(
name|useDefaultFractionalSecondPrecision
argument_list|()
condition|)
block|{
return|return
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
return|;
block|}
else|else
block|{
return|return
name|startPrecision
return|;
block|}
block|}
specifier|private
name|boolean
name|useDefaultFractionalSecondPrecision
parameter_list|()
block|{
return|return
name|fractionalSecondPrecision
operator|==
name|RelDataType
operator|.
name|PRECISION_NOT_SPECIFIED
return|;
block|}
specifier|public
specifier|static
name|int
name|combineFractionalSecondPrecisionPreservingDefault
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|SqlIntervalQualifier
name|qual1
parameter_list|,
name|SqlIntervalQualifier
name|qual2
parameter_list|)
block|{
specifier|final
name|int
name|p1
init|=
name|qual1
operator|.
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
specifier|final
name|int
name|p2
init|=
name|qual2
operator|.
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|>
name|p2
condition|)
block|{
comment|// qual1 is more precise, but if it has the default indicator
comment|// set, we need to return that indicator so result will also
comment|// use default
return|return
name|qual1
operator|.
name|getFractionalSecondPrecisionPreservingDefault
argument_list|()
return|;
block|}
if|else if
condition|(
name|p1
operator|<
name|p2
condition|)
block|{
comment|// qual2 is more precise, but if it has the default indicator
comment|// set, we need to return that indicator so result will also
comment|// use default
return|return
name|qual2
operator|.
name|getFractionalSecondPrecisionPreservingDefault
argument_list|()
return|;
block|}
else|else
block|{
comment|// they are equal.  return default if both are default,
comment|// otherwise return exact precision
if|if
condition|(
name|qual1
operator|.
name|useDefaultFractionalSecondPrecision
argument_list|()
operator|&&
name|qual2
operator|.
name|useDefaultFractionalSecondPrecision
argument_list|()
condition|)
block|{
return|return
name|qual1
operator|.
name|getFractionalSecondPrecisionPreservingDefault
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|p1
return|;
block|}
block|}
block|}
specifier|public
name|TimeUnit
name|getStartUnit
parameter_list|()
block|{
return|return
name|timeUnitRange
operator|.
name|startUnit
return|;
block|}
specifier|public
name|TimeUnit
name|getEndUnit
parameter_list|()
block|{
return|return
name|timeUnitRange
operator|.
name|endUnit
return|;
block|}
specifier|public
name|SqlNode
name|clone
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
operator|new
name|SqlIntervalQualifier
argument_list|(
name|timeUnitRange
operator|.
name|startUnit
argument_list|,
name|startPrecision
argument_list|,
name|timeUnitRange
operator|.
name|endUnit
argument_list|,
name|fractionalSecondPrecision
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|unparse
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|SqlWriter
name|writer
parameter_list|)
block|{
specifier|final
name|String
name|start
init|=
name|timeUnitRange
operator|.
name|startUnit
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fractionalSecondPrecision
init|=
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startPrecision
init|=
name|getStartPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeUnitRange
operator|.
name|startUnit
operator|==
name|TimeUnit
operator|.
name|SECOND
condition|)
block|{
if|if
condition|(
operator|!
name|useDefaultFractionalSecondPrecision
argument_list|()
condition|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|startPrecision
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|useDefaultStartPrecision
argument_list|()
condition|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|startPrecision
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|keyword
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|useDefaultStartPrecision
argument_list|()
condition|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|startPrecision
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|keyword
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|timeUnitRange
operator|.
name|endUnit
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"TO"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|end
init|=
name|timeUnitRange
operator|.
name|endUnit
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|TimeUnit
operator|.
name|SECOND
operator|==
name|timeUnitRange
operator|.
name|endUnit
operator|)
operator|&&
operator|(
operator|!
name|useDefaultFractionalSecondPrecision
argument_list|()
operator|)
condition|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startFunCall
argument_list|(
name|end
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|fractionalSecondPrecision
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|keyword
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Does this interval have a single datetime field    *    * Return true not of form unit TO unit.    */
specifier|public
name|boolean
name|isSingleDatetimeField
parameter_list|()
block|{
return|return
name|timeUnitRange
operator|.
name|endUnit
operator|==
literal|null
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isYearMonth
parameter_list|()
block|{
return|return
name|timeUnitRange
operator|.
name|startUnit
operator|.
name|yearMonth
return|;
block|}
comment|/**    * @return 1 or -1    */
specifier|private
name|int
name|getIntervalSign
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|sign
init|=
literal|1
decl_stmt|;
comment|// positive until proven otherwise
if|if
condition|(
operator|!
name|Util
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
literal|'-'
operator|==
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|sign
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Negative
block|}
block|}
return|return
name|sign
return|;
block|}
specifier|private
name|String
name|stripLeadingSign
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|String
name|unsignedValue
init|=
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
literal|'-'
operator|==
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|||
operator|(
literal|'+'
operator|==
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|)
condition|)
block|{
name|unsignedValue
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|unsignedValue
return|;
block|}
specifier|private
name|boolean
name|isLeadFieldInRange
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|BigDecimal
name|value
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
comment|// we should never get handed a negative field value
assert|assert
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO
argument_list|)
operator|>=
literal|0
assert|;
comment|// Leading fields are only restricted by startPrecision.
specifier|final
name|int
name|startPrecision
init|=
name|getStartPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
return|return
name|startPrecision
operator|<
name|POWERS10
operator|.
name|length
condition|?
name|value
operator|.
name|compareTo
argument_list|(
name|POWERS10
index|[
name|startPrecision
index|]
argument_list|)
operator|<
literal|0
else|:
name|value
operator|.
name|compareTo
argument_list|(
name|INT_MAX_VALUE_PLUS_ONE
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|private
name|void
name|checkLeadFieldInRange
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|BigDecimal
name|value
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|value
argument_list|,
name|unit
argument_list|)
condition|)
block|{
throw|throw
name|fieldExceedsPrecisionException
argument_list|(
name|pos
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|unit
argument_list|,
name|getStartPrecision
argument_list|(
name|typeSystem
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|BigDecimal
index|[]
name|POWERS10
init|=
block|{
name|ZERO
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|10000
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|100000
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000000
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|10000000
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|100000000
argument_list|)
block|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000000000
argument_list|)
block|,   }
decl_stmt|;
specifier|private
name|boolean
name|isFractionalSecondFieldInRange
parameter_list|(
name|BigDecimal
name|field
parameter_list|)
block|{
comment|// we should never get handed a negative field value
assert|assert
name|field
operator|.
name|compareTo
argument_list|(
name|ZERO
argument_list|)
operator|>=
literal|0
assert|;
comment|// Fractional second fields are only restricted by precision, which
comment|// has already been checked for using pattern matching.
comment|// Therefore, always return true
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isSecondaryFieldInRange
parameter_list|(
name|BigDecimal
name|field
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
comment|// we should never get handed a negative field value
assert|assert
name|field
operator|.
name|compareTo
argument_list|(
name|ZERO
argument_list|)
operator|>=
literal|0
assert|;
comment|// YEAR and DAY can never be secondary units,
comment|// nor can unit be null.
assert|assert
name|unit
operator|!=
literal|null
assert|;
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|YEAR
case|:
case|case
name|DAY
case|:
default|default:
throw|throw
name|Util
operator|.
name|unexpected
argument_list|(
name|unit
argument_list|)
throw|;
comment|// Secondary field limits, as per section 4.6.3 of SQL2003 spec
case|case
name|MONTH
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
return|return
name|unit
operator|.
name|isValidValue
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
specifier|private
name|BigDecimal
name|normalizeSecondFraction
parameter_list|(
name|String
name|secondFracStr
parameter_list|)
block|{
comment|// Decimal value can be more than 3 digits. So just get
comment|// the millisecond part.
return|return
operator|new
name|BigDecimal
argument_list|(
literal|"0."
operator|+
name|secondFracStr
argument_list|)
operator|.
name|multiply
argument_list|(
name|THOUSAND
argument_list|)
return|;
block|}
specifier|private
name|int
index|[]
name|fillIntervalValueArray
parameter_list|(
name|int
name|sign
parameter_list|,
name|BigDecimal
name|year
parameter_list|,
name|BigDecimal
name|month
parameter_list|)
block|{
name|int
index|[]
name|ret
init|=
operator|new
name|int
index|[
literal|3
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|sign
expr_stmt|;
name|ret
index|[
literal|1
index|]
operator|=
name|year
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|ret
index|[
literal|2
index|]
operator|=
name|month
operator|.
name|intValue
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|int
index|[]
name|fillIntervalValueArray
parameter_list|(
name|int
name|sign
parameter_list|,
name|BigDecimal
name|day
parameter_list|,
name|BigDecimal
name|hour
parameter_list|,
name|BigDecimal
name|minute
parameter_list|,
name|BigDecimal
name|second
parameter_list|,
name|BigDecimal
name|secondFrac
parameter_list|)
block|{
name|int
index|[]
name|ret
init|=
operator|new
name|int
index|[
literal|6
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|sign
expr_stmt|;
name|ret
index|[
literal|1
index|]
operator|=
name|day
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|ret
index|[
literal|2
index|]
operator|=
name|hour
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|ret
index|[
literal|3
index|]
operator|=
name|minute
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|ret
index|[
literal|4
index|]
operator|=
name|second
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|ret
index|[
literal|5
index|]
operator|=
name|secondFrac
operator|.
name|intValue
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Validates an INTERVAL literal against a YEAR interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsYear
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|year
decl_stmt|;
comment|// validate as YEAR(startPrecision), e.g. 'YY'
name|String
name|intervalPattern
init|=
literal|"(\\d+)"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|year
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|year
argument_list|,
name|TimeUnit
operator|.
name|YEAR
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|year
argument_list|,
name|ZERO
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against a YEAR TO MONTH interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsYearToMonth
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|year
decl_stmt|;
name|BigDecimal
name|month
decl_stmt|;
comment|// validate as YEAR(startPrecision) TO MONTH, e.g. 'YY-DD'
name|String
name|intervalPattern
init|=
literal|"(\\d+)-(\\d{1,2})"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|year
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|month
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|year
argument_list|,
name|TimeUnit
operator|.
name|YEAR
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|month
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|year
argument_list|,
name|month
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against a MONTH interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsMonth
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|month
decl_stmt|;
comment|// validate as MONTH(startPrecision), e.g. 'MM'
name|String
name|intervalPattern
init|=
literal|"(\\d+)"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|month
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|month
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|ZERO
argument_list|,
name|month
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against a DAY interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsDay
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|day
decl_stmt|;
comment|// validate as DAY(startPrecision), e.g. 'DD'
name|String
name|intervalPattern
init|=
literal|"(\\d+)"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|day
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|day
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|day
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against a DAY TO HOUR interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsDayToHour
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|day
decl_stmt|;
name|BigDecimal
name|hour
decl_stmt|;
comment|// validate as DAY(startPrecision) TO HOUR, e.g. 'DD HH'
name|String
name|intervalPattern
init|=
literal|"(\\d+) (\\d{1,2})"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|day
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hour
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|day
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|hour
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against a DAY TO MINUTE interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsDayToMinute
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|day
decl_stmt|;
name|BigDecimal
name|hour
decl_stmt|;
name|BigDecimal
name|minute
decl_stmt|;
comment|// validate as DAY(startPrecision) TO MINUTE, e.g. 'DD HH:MM'
name|String
name|intervalPattern
init|=
literal|"(\\d+) (\\d{1,2}):(\\d{1,2})"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|day
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hour
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|minute
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|day
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|hour
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|)
operator|)
operator|||
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|minute
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against a DAY TO SECOND interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsDayToSecond
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|day
decl_stmt|;
name|BigDecimal
name|hour
decl_stmt|;
name|BigDecimal
name|minute
decl_stmt|;
name|BigDecimal
name|second
decl_stmt|;
name|BigDecimal
name|secondFrac
decl_stmt|;
name|boolean
name|hasFractionalSecond
decl_stmt|;
comment|// validate as DAY(startPrecision) TO MINUTE,
comment|// e.g. 'DD HH:MM:SS' or 'DD HH:MM:SS.SSS'
comment|// Note: must check two patterns, since fractional second is optional
specifier|final
name|int
name|fractionalSecondPrecision
init|=
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
name|String
name|intervalPatternWithFracSec
init|=
literal|"(\\d+) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})\\.(\\d{1,"
operator|+
name|fractionalSecondPrecision
operator|+
literal|"})"
decl_stmt|;
name|String
name|intervalPatternWithoutFracSec
init|=
literal|"(\\d+) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|hasFractionalSecond
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithoutFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hasFractionalSecond
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|day
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hour
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|minute
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|second
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasFractionalSecond
condition|)
block|{
name|secondFrac
operator|=
name|normalizeSecondFraction
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secondFrac
operator|=
name|ZERO
expr_stmt|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|day
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|hour
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|)
operator|)
operator|||
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|minute
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
operator|)
operator|||
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|second
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
operator|)
operator|||
operator|!
operator|(
name|isFractionalSecondFieldInRange
argument_list|(
name|secondFrac
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|,
name|secondFrac
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against an HOUR interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsHour
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|hour
decl_stmt|;
comment|// validate as HOUR(startPrecision), e.g. 'HH'
name|String
name|intervalPattern
init|=
literal|"(\\d+)"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|hour
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|hour
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|ZERO
argument_list|,
name|hour
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against an HOUR TO MINUTE interval    * qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsHourToMinute
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|hour
decl_stmt|;
name|BigDecimal
name|minute
decl_stmt|;
comment|// validate as HOUR(startPrecision) TO MINUTE, e.g. 'HH:MM'
name|String
name|intervalPattern
init|=
literal|"(\\d+):(\\d{1,2})"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|hour
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|minute
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|hour
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|minute
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|ZERO
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against an HOUR TO SECOND interval    * qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsHourToSecond
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|hour
decl_stmt|;
name|BigDecimal
name|minute
decl_stmt|;
name|BigDecimal
name|second
decl_stmt|;
name|BigDecimal
name|secondFrac
decl_stmt|;
name|boolean
name|hasFractionalSecond
decl_stmt|;
comment|// validate as HOUR(startPrecision) TO SECOND,
comment|// e.g. 'HH:MM:SS' or 'HH:MM:SS.SSS'
comment|// Note: must check two patterns, since fractional second is optional
specifier|final
name|int
name|fractionalSecondPrecision
init|=
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
name|String
name|intervalPatternWithFracSec
init|=
literal|"(\\d+):(\\d{1,2}):(\\d{1,2})\\.(\\d{1,"
operator|+
name|fractionalSecondPrecision
operator|+
literal|"})"
decl_stmt|;
name|String
name|intervalPatternWithoutFracSec
init|=
literal|"(\\d+):(\\d{1,2}):(\\d{1,2})"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|hasFractionalSecond
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithoutFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hasFractionalSecond
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|hour
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|minute
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|second
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasFractionalSecond
condition|)
block|{
name|secondFrac
operator|=
name|normalizeSecondFraction
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secondFrac
operator|=
name|ZERO
expr_stmt|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|hour
argument_list|,
name|TimeUnit
operator|.
name|HOUR
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|minute
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
operator|)
operator|||
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|second
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
operator|)
operator|||
operator|!
operator|(
name|isFractionalSecondFieldInRange
argument_list|(
name|secondFrac
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|ZERO
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|,
name|secondFrac
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against an MINUTE interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsMinute
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|minute
decl_stmt|;
comment|// validate as MINUTE(startPrecision), e.g. 'MM'
name|String
name|intervalPattern
init|=
literal|"(\\d+)"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|minute
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|minute
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|minute
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against an MINUTE TO SECOND interval    * qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsMinuteToSecond
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|minute
decl_stmt|;
name|BigDecimal
name|second
decl_stmt|;
name|BigDecimal
name|secondFrac
decl_stmt|;
name|boolean
name|hasFractionalSecond
decl_stmt|;
comment|// validate as MINUTE(startPrecision) TO SECOND,
comment|// e.g. 'MM:SS' or 'MM:SS.SSS'
comment|// Note: must check two patterns, since fractional second is optional
specifier|final
name|int
name|fractionalSecondPrecision
init|=
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
name|String
name|intervalPatternWithFracSec
init|=
literal|"(\\d+):(\\d{1,2})\\.(\\d{1,"
operator|+
name|fractionalSecondPrecision
operator|+
literal|"})"
decl_stmt|;
name|String
name|intervalPatternWithoutFracSec
init|=
literal|"(\\d+):(\\d{1,2})"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|hasFractionalSecond
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithoutFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hasFractionalSecond
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|minute
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|second
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasFractionalSecond
condition|)
block|{
name|secondFrac
operator|=
name|normalizeSecondFraction
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secondFrac
operator|=
name|ZERO
expr_stmt|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|minute
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isSecondaryFieldInRange
argument_list|(
name|second
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|)
operator|)
operator|||
operator|!
operator|(
name|isFractionalSecondFieldInRange
argument_list|(
name|secondFrac
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|minute
argument_list|,
name|second
argument_list|,
name|secondFrac
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal against an SECOND interval qualifier.    *    * @throws EigenbaseContextException if the interval value is illegal.    */
specifier|private
name|int
index|[]
name|evaluateIntervalLiteralAsSecond
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|originalValue
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|BigDecimal
name|second
decl_stmt|;
name|BigDecimal
name|secondFrac
decl_stmt|;
name|boolean
name|hasFractionalSecond
decl_stmt|;
comment|// validate as SECOND(startPrecision, fractionalSecondPrecision)
comment|// e.g. 'SS' or 'SS.SSS'
comment|// Note: must check two patterns, since fractional second is optional
specifier|final
name|int
name|fractionalSecondPrecision
init|=
name|getFractionalSecondPrecision
argument_list|(
name|typeSystem
argument_list|)
decl_stmt|;
name|String
name|intervalPatternWithFracSec
init|=
literal|"(\\d+)\\.(\\d{1,"
operator|+
name|fractionalSecondPrecision
operator|+
literal|"})"
decl_stmt|;
name|String
name|intervalPatternWithoutFracSec
init|=
literal|"(\\d+)"
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|hasFractionalSecond
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|intervalPatternWithoutFracSec
argument_list|)
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hasFractionalSecond
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Break out  field values
try|try
block|{
name|second
operator|=
name|parseField
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasFractionalSecond
condition|)
block|{
name|secondFrac
operator|=
name|normalizeSecondFraction
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secondFrac
operator|=
name|ZERO
expr_stmt|;
block|}
comment|// Validate individual fields
name|checkLeadFieldInRange
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|second
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isFractionalSecondFieldInRange
argument_list|(
name|secondFrac
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
comment|// package values up for return
return|return
name|fillIntervalValueArray
argument_list|(
name|sign
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|ZERO
argument_list|,
name|second
argument_list|,
name|secondFrac
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|originalValue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates an INTERVAL literal according to the rules specified by the    * interval qualifier. The assumption is made that the interval qualifier has    * been validated prior to calling this method. Evaluating against an    * invalid qualifier could lead to strange results.    *    * @return field values, never null    * @throws EigenbaseContextException if the interval value is illegal    */
specifier|public
name|int
index|[]
name|evaluateIntervalLiteral
parameter_list|(
name|String
name|value
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
name|RelDataTypeSystem
name|typeSystem
parameter_list|)
block|{
comment|// save original value for if we have to throw
specifier|final
name|String
name|value0
init|=
name|value
decl_stmt|;
comment|// First strip off any leading whitespace
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// check if the sign was explicitly specified.  Record
comment|// the explicit or implicit sign, and strip it off to
comment|// simplify pattern matching later.
specifier|final
name|int
name|sign
init|=
name|getIntervalSign
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|value
operator|=
name|stripLeadingSign
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// If we have an empty or null literal at this point,
comment|// it's illegal.  Complain and bail out.
if|if
condition|(
name|Util
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|value0
argument_list|)
throw|;
block|}
comment|// Validate remaining string according to the pattern
comment|// that corresponds to the start and end units as
comment|// well as explicit or implicit precision and range.
switch|switch
condition|(
name|timeUnitRange
condition|)
block|{
case|case
name|YEAR
case|:
return|return
name|evaluateIntervalLiteralAsYear
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|YEAR_TO_MONTH
case|:
return|return
name|evaluateIntervalLiteralAsYearToMonth
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|MONTH
case|:
return|return
name|evaluateIntervalLiteralAsMonth
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|DAY
case|:
return|return
name|evaluateIntervalLiteralAsDay
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|DAY_TO_HOUR
case|:
return|return
name|evaluateIntervalLiteralAsDayToHour
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|DAY_TO_MINUTE
case|:
return|return
name|evaluateIntervalLiteralAsDayToMinute
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|DAY_TO_SECOND
case|:
return|return
name|evaluateIntervalLiteralAsDayToSecond
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|HOUR
case|:
return|return
name|evaluateIntervalLiteralAsHour
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|HOUR_TO_MINUTE
case|:
return|return
name|evaluateIntervalLiteralAsHourToMinute
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|HOUR_TO_SECOND
case|:
return|return
name|evaluateIntervalLiteralAsHourToSecond
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|MINUTE
case|:
return|return
name|evaluateIntervalLiteralAsMinute
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|MINUTE_TO_SECOND
case|:
return|return
name|evaluateIntervalLiteralAsMinuteToSecond
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
case|case
name|SECOND
case|:
return|return
name|evaluateIntervalLiteralAsSecond
argument_list|(
name|typeSystem
argument_list|,
name|sign
argument_list|,
name|value
argument_list|,
name|value0
argument_list|,
name|pos
argument_list|)
return|;
default|default:
throw|throw
name|invalidValueException
argument_list|(
name|pos
argument_list|,
name|value0
argument_list|)
throw|;
block|}
block|}
specifier|private
name|BigDecimal
name|parseField
parameter_list|(
name|Matcher
name|m
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|m
operator|.
name|group
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|EigenbaseContextException
name|invalidValueException
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|RESOURCE
operator|.
name|unsupportedIntervalLiteral
argument_list|(
literal|"'"
operator|+
name|value
operator|+
literal|"'"
argument_list|,
literal|"INTERVAL "
operator|+
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|EigenbaseContextException
name|fieldExceedsPrecisionException
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|int
name|sign
parameter_list|,
name|BigDecimal
name|value
parameter_list|,
name|TimeUnit
name|type
parameter_list|,
name|int
name|precision
parameter_list|)
block|{
if|if
condition|(
name|sign
operator|==
operator|-
literal|1
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|negate
argument_list|()
expr_stmt|;
block|}
return|return
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|RESOURCE
operator|.
name|intervalFieldExceedsPrecision
argument_list|(
name|value
argument_list|,
name|type
operator|.
name|name
argument_list|()
operator|+
literal|"("
operator|+
name|precision
operator|+
literal|")"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlIntervalQualifier.java
end_comment

end_unit

