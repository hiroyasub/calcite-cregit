begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|CalciteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *<code>SqlOperatorBinding</code> represents the binding of an  * {@link SqlOperator} to actual operands, along with any additional information  * required to validate those operands if needed.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SqlOperatorBinding
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|RelDataTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|SqlOperator
name|sqlOperator
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SqlOperatorBinding.    *    * @param typeFactory Type factory    * @param sqlOperator Operator which is subject of this call    */
specifier|protected
name|SqlOperatorBinding
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|SqlOperator
name|sqlOperator
parameter_list|)
block|{
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|sqlOperator
operator|=
name|sqlOperator
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * If the operator call occurs in an aggregate query, returns the number of    * columns in the GROUP BY clause. For example, for "SELECT count(*) FROM emp    * GROUP BY deptno, gender", returns 2.    *    *<p>Returns 0 if the query is implicitly "GROUP BY ()" because of an    * aggregate expression. For example, "SELECT sum(sal) FROM emp".</p>    *    *<p>Returns -1 if the query is not an aggregate query.</p>    */
specifier|public
name|int
name|getGroupCount
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns whether the operator is an aggregate function with a filter.    */
specifier|public
name|boolean
name|hasFilter
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/** Returns the bound operator. */
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|sqlOperator
return|;
block|}
comment|/** Returns the factory for type creation. */
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
comment|/**    * Gets the string value of a string literal operand.    *    * @param ordinal zero-based ordinal of operand of interest    * @return string value    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|String
name|getStringLiteralOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Gets the integer value of a numeric literal operand.    *    * @param ordinal zero-based ordinal of operand of interest    * @return integer value    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|int
name|getIntLiteralOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Gets the value of a literal operand.    *    *<p>Cases:    *<ul>    *<li>If the operand is not a literal, the value is null.    *    *<li>If the operand is a string literal,    * the value will be of type {@link org.apache.calcite.util.NlsString}.    *    *<li>If the operand is a numeric literal,    * the value will be of type {@link java.math.BigDecimal}.    *    *<li>If the operand is an interval qualifier,    * the value will be of type {@link SqlIntervalQualifier}</li>    *    *<li>Otherwise the type is undefined, and the value may be null.    *</ul>    *    * @param ordinal zero-based ordinal of operand of interest    * @param clazz Desired valued type    *    * @return value of operand    */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getOperandLiteralValue
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Gets the value of a literal operand as a Calcite type.    *    * @param ordinal zero-based ordinal of operand of interest    * @param type Desired valued type    *    * @return value of operand    */
specifier|public
name|Object
name|getOperandLiteralValue
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|Comparable
name|getOperandLiteralValue
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|getOperandLiteralValue
argument_list|(
name|ordinal
argument_list|,
name|Comparable
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Determines whether a bound operand is NULL.    *    *<p>This is only relevant for SQL validation.    *    * @param ordinal   zero-based ordinal of operand of interest    * @param allowCast whether to regard CAST(constant) as a constant    * @return whether operand is null; false for everything except SQL    * validation    */
specifier|public
name|boolean
name|isOperandNull
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|boolean
name|allowCast
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Determines whether an operand is a literal.    *    * @param ordinal   zero-based ordinal of operand of interest    * @param allowCast whether to regard CAST(literal) as a literal    * @return whether operand is literal    */
specifier|public
name|boolean
name|isOperandLiteral
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|boolean
name|allowCast
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** Returns the number of bound operands. */
specifier|public
specifier|abstract
name|int
name|getOperandCount
parameter_list|()
function_decl|;
comment|/**    * Gets the type of a bound operand.    *    * @param ordinal zero-based ordinal of operand of interest    * @return bound operand type    */
specifier|public
specifier|abstract
name|RelDataType
name|getOperandType
parameter_list|(
name|int
name|ordinal
parameter_list|)
function_decl|;
comment|/**    * Gets the monotonicity of a bound operand.    *    * @param ordinal zero-based ordinal of operand of interest    * @return monotonicity of operand    */
specifier|public
name|SqlMonotonicity
name|getOperandMonotonicity
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
return|;
block|}
comment|/**    * Collects the types of the bound operands into a list.    *    * @return collected list    */
specifier|public
name|List
argument_list|<
name|RelDataType
argument_list|>
name|collectOperandTypes
parameter_list|()
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
block|{
specifier|public
name|RelDataType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getOperandType
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|getOperandCount
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns the rowtype of the<code>ordinal</code>th operand, which is a    * cursor.    *    *<p>This is only implemented for {@link SqlCallBinding}.    *    * @param ordinal Ordinal of the operand    * @return Rowtype of the query underlying the cursor    */
specifier|public
name|RelDataType
name|getCursorOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Retrieves information about a column list parameter.    *    * @param ordinal    ordinal position of the column list parameter    * @param paramName  name of the column list parameter    * @param columnList returns a list of the column names that are referenced    *                   in the column list parameter    * @return the name of the parent cursor referenced by the column list    * parameter if it is a column list parameter; otherwise, null is returned    */
specifier|public
name|String
name|getColumnListParamInfo
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|String
name|paramName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnList
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Wraps a validation error with context appropriate to this operator call.    *    * @param e Validation error, not null    * @return Error wrapped, if possible, with positional information    */
specifier|public
specifier|abstract
name|CalciteException
name|newError
parameter_list|(
name|Resources
operator|.
name|ExInst
argument_list|<
name|SqlValidatorException
argument_list|>
name|e
parameter_list|)
function_decl|;
block|}
end_class

end_unit

