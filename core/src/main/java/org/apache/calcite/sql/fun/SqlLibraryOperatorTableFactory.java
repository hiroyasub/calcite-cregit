begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|ListSqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlOperatorTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * Factory that creates operator tables that consist of functions and operators  * for particular named libraries. For example, the following code will return  * an operator table that contains operators for both Oracle and MySQL:  *  *<blockquote>  *<pre>SqlOperatorTable opTab =  *     SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(  *         EnumSet.of(SqlLibrary.ORACLE, SqlLibrary.MYSQL))</pre>  *</blockquote>  *  *<p>To define a new library, add a value to enum {@link SqlLibrary}.  *  *<p>To add functions to a library, add the {@link LibraryOperator} annotation  * to fields that of type {@link SqlOperator}, and the library name to its  * {@link LibraryOperator#libraries()} field.  */
end_comment

begin_class
specifier|public
class|class
name|SqlLibraryOperatorTableFactory
block|{
comment|/** List of classes to scan for operators. */
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Class
argument_list|>
name|classes
decl_stmt|;
comment|/** The singleton instance. */
specifier|public
specifier|static
specifier|final
name|SqlLibraryOperatorTableFactory
name|INSTANCE
init|=
operator|new
name|SqlLibraryOperatorTableFactory
argument_list|(
name|SqlLibraryOperators
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SqlLibraryOperatorTableFactory
parameter_list|(
name|Class
modifier|...
name|classes
parameter_list|)
block|{
name|this
operator|.
name|classes
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|classes
argument_list|)
expr_stmt|;
block|}
comment|//~ Instance fields --------------------------------------------------------
comment|/** A cache that returns an operator table for a given library (or set of    * libraries). */
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|ImmutableSet
argument_list|<
name|SqlLibrary
argument_list|>
argument_list|,
name|SqlOperatorTable
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|this
operator|::
name|create
argument_list|)
argument_list|)
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/** Creates an operator table that contains operators in the given set of    * libraries. */
specifier|private
name|SqlOperatorTable
name|create
parameter_list|(
name|ImmutableSet
argument_list|<
name|SqlLibrary
argument_list|>
name|librarySet
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|SqlOperator
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|boolean
name|custom
init|=
literal|false
decl_stmt|;
name|boolean
name|standard
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SqlLibrary
name|library
range|:
name|librarySet
control|)
block|{
switch|switch
condition|(
name|library
condition|)
block|{
case|case
name|STANDARD
case|:
name|standard
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SPATIAL
case|:
name|list
operator|.
name|addAll
argument_list|(
name|SqlOperatorTables
operator|.
name|spatialInstance
argument_list|()
operator|.
name|getOperatorList
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|custom
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Use reflection to register the expressions stored in public fields.
comment|// Skip if the only libraries asked for are "standard" or "spatial".
if|if
condition|(
name|custom
condition|)
block|{
for|for
control|(
name|Class
name|aClass
range|:
name|classes
control|)
block|{
for|for
control|(
name|Field
name|field
range|:
name|aClass
operator|.
name|getFields
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|SqlOperator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|SqlOperator
name|op
init|=
operator|(
name|SqlOperator
operator|)
name|field
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|operatorIsInLibrary
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|field
argument_list|,
name|librarySet
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|SqlOperatorTable
name|operatorTable
init|=
operator|new
name|ListSqlOperatorTable
argument_list|(
name|list
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|standard
condition|)
block|{
name|operatorTable
operator|=
name|SqlOperatorTables
operator|.
name|chain
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|operatorTable
argument_list|)
expr_stmt|;
block|}
return|return
name|operatorTable
return|;
block|}
comment|/** Returns whether an operator is in one or more of the given libraries. */
specifier|private
name|boolean
name|operatorIsInLibrary
parameter_list|(
name|String
name|operatorName
parameter_list|,
name|Field
name|field
parameter_list|,
name|Set
argument_list|<
name|SqlLibrary
argument_list|>
name|seekLibrarySet
parameter_list|)
block|{
name|LibraryOperator
name|libraryOperator
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|LibraryOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|libraryOperator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Operator must have annotation: "
operator|+
name|operatorName
argument_list|)
throw|;
block|}
name|SqlLibrary
index|[]
name|librarySet
init|=
name|libraryOperator
operator|.
name|libraries
argument_list|()
decl_stmt|;
if|if
condition|(
name|librarySet
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Operator must belong to at least one library: "
operator|+
name|operatorName
argument_list|)
throw|;
block|}
for|for
control|(
name|SqlLibrary
name|library
range|:
name|librarySet
control|)
block|{
if|if
condition|(
name|seekLibrarySet
operator|.
name|contains
argument_list|(
name|library
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns a SQL operator table that contains operators in the given library    * or libraries. */
specifier|public
name|SqlOperatorTable
name|getOperatorTable
parameter_list|(
name|SqlLibrary
modifier|...
name|libraries
parameter_list|)
block|{
return|return
name|getOperatorTable
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|libraries
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns a SQL operator table that contains operators in the given set of    * libraries. */
specifier|public
name|SqlOperatorTable
name|getOperatorTable
parameter_list|(
name|Iterable
argument_list|<
name|SqlLibrary
argument_list|>
name|librarySet
parameter_list|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|librarySet
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"populating SqlOperatorTable for library "
operator|+
name|librarySet
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

