begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperandCountRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Operand type-checking strategy which checks operands for inclusion in type  * families.  */
end_comment

begin_class
specifier|public
class|class
name|FamilyOperandTypeChecker
implements|implements
name|SqlSingleOperandTypeChecker
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|ImmutableList
argument_list|<
name|SqlTypeFamily
argument_list|>
name|families
decl_stmt|;
specifier|protected
specifier|final
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|optional
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Package private. Create using {@link OperandTypes#family}.    */
name|FamilyOperandTypeChecker
parameter_list|(
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|families
parameter_list|,
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|optional
parameter_list|)
block|{
name|this
operator|.
name|families
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|families
argument_list|)
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|boolean
name|isOptional
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|optional
operator|.
name|test
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkSingleOperandType
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|SqlNode
name|node
parameter_list|,
name|int
name|iFormalOperand
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
name|SqlTypeFamily
name|family
init|=
name|families
operator|.
name|get
argument_list|(
name|iFormalOperand
argument_list|)
decl_stmt|;
if|if
condition|(
name|family
operator|==
name|SqlTypeFamily
operator|.
name|ANY
condition|)
block|{
comment|// no need to check
return|return
literal|true
return|;
block|}
if|if
condition|(
name|SqlUtil
operator|.
name|isNullLiteral
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|getValidator
argument_list|()
operator|.
name|newValidationError
argument_list|(
name|node
argument_list|,
name|RESOURCE
operator|.
name|nullIllegal
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|RelDataType
name|type
init|=
name|callBinding
operator|.
name|getValidator
argument_list|()
operator|.
name|deriveType
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|SqlTypeName
name|typeName
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
comment|// Pass type checking for operators if it's of type 'ANY'.
if|if
condition|(
name|typeName
operator|.
name|getFamily
argument_list|()
operator|==
name|SqlTypeFamily
operator|.
name|ANY
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|family
operator|.
name|getTypeNames
argument_list|()
operator|.
name|contains
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
if|if
condition|(
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|newValidationSignatureError
argument_list|()
throw|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
if|if
condition|(
name|families
operator|.
name|size
argument_list|()
operator|!=
name|callBinding
operator|.
name|getOperandCount
argument_list|()
condition|)
block|{
comment|// assume this is an inapplicable sub-rule of a composite rule;
comment|// don't throw
return|return
literal|false
return|;
block|}
for|for
control|(
name|Ord
argument_list|<
name|SqlNode
argument_list|>
name|op
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|callBinding
operator|.
name|operands
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|op
operator|.
name|e
argument_list|,
name|op
operator|.
name|i
argument_list|,
name|throwOnFailure
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
specifier|final
name|int
name|max
init|=
name|families
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|max
decl_stmt|;
while|while
condition|(
name|min
operator|>
literal|0
operator|&&
name|optional
operator|.
name|test
argument_list|(
name|min
operator|-
literal|1
argument_list|)
condition|)
block|{
operator|--
name|min
expr_stmt|;
block|}
return|return
name|SqlOperandCountRanges
operator|.
name|between
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
return|return
name|SqlUtil
operator|.
name|getAliasedSignature
argument_list|(
name|op
argument_list|,
name|opName
argument_list|,
name|families
argument_list|)
return|;
block|}
specifier|public
name|Consistency
name|getConsistency
parameter_list|()
block|{
return|return
name|Consistency
operator|.
name|NONE
return|;
block|}
block|}
end_class

begin_comment
comment|// End FamilyOperandTypeChecker.java
end_comment

end_unit

