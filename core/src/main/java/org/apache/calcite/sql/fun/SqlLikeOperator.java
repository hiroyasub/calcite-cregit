begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperandCountRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSpecialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|InferTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandCountRanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_comment
comment|/**  * An operator describing the<code>LIKE</code> and<code>SIMILAR</code>  * operators.  *  *<p>Syntax of the two operators:  *  *<ul>  *<li><code>src-value [NOT] LIKE pattern-value [ESCAPE  * escape-value]</code></li>  *<li><code>src-value [NOT] SIMILAR pattern-value [ESCAPE  * escape-value]</code></li>  *</ul>  *  *<p><b>NOTE</b> If the<code>NOT</code> clause is present the  * {@link org.apache.calcite.sql.parser.SqlParser parser} will generate a  * equivalent to<code>NOT (src LIKE pattern ...)</code>  */
end_comment

begin_class
specifier|public
class|class
name|SqlLikeOperator
extends|extends
name|SqlSpecialOperator
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|boolean
name|negated
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SqlLikeOperator.    *    * @param name        Operator name    * @param kind        Kind    * @param negated     Whether this is 'NOT LIKE'    * @param caseSensitive Whether this operator ignores the case of its operands    */
name|SqlLikeOperator
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlKind
name|kind
parameter_list|,
name|boolean
name|negated
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
comment|// LIKE is right-associative, because that makes it easier to capture
comment|// dangling ESCAPE clauses: "a like b like c escape d" becomes
comment|// "a like (b like c escape d)".
name|super
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|32
argument_list|,
literal|false
argument_list|,
name|ReturnTypes
operator|.
name|BOOLEAN_NULLABLE
argument_list|,
name|InferTypes
operator|.
name|FIRST_KNOWN
argument_list|,
name|OperandTypes
operator|.
name|STRING_SAME_SAME_SAME
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
operator|&&
name|kind
operator|!=
name|SqlKind
operator|.
name|LIKE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only (possibly negated) "
operator|+
name|SqlKind
operator|.
name|LIKE
operator|+
literal|" can be made case-insensitive, not "
operator|+
name|kind
argument_list|)
throw|;
block|}
name|this
operator|.
name|negated
operator|=
name|negated
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Returns whether this is the 'NOT LIKE' operator.    *    * @return whether this is 'NOT LIKE'    *    * @see #not()    */
specifier|public
name|boolean
name|isNegated
parameter_list|()
block|{
return|return
name|negated
return|;
block|}
comment|/**    * Returns whether this operator matches the case of its operands.    * For example, returns true for {@code LIKE} and false for {@code ILIKE}.    *    * @return whether this operator matches the case of its operands    */
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|caseSensitive
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperator
name|not
parameter_list|()
block|{
return|return
name|of
argument_list|(
name|kind
argument_list|,
operator|!
name|negated
argument_list|,
name|caseSensitive
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SqlOperator
name|of
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|boolean
name|negated
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|SIMILAR
case|:
return|return
name|negated
condition|?
name|SqlStdOperatorTable
operator|.
name|NOT_SIMILAR_TO
else|:
name|SqlStdOperatorTable
operator|.
name|SIMILAR_TO
return|;
case|case
name|LIKE
case|:
if|if
condition|(
name|caseSensitive
condition|)
block|{
return|return
name|negated
condition|?
name|SqlStdOperatorTable
operator|.
name|NOT_LIKE
else|:
name|SqlStdOperatorTable
operator|.
name|LIKE
return|;
block|}
else|else
block|{
return|return
name|negated
condition|?
name|SqlLibraryOperators
operator|.
name|NOT_ILIKE
else|:
name|SqlLibraryOperators
operator|.
name|ILIKE
return|;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|SqlOperandCountRanges
operator|.
name|between
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
switch|switch
condition|(
name|callBinding
operator|.
name|getOperandCount
argument_list|()
condition|)
block|{
case|case
literal|2
case|:
if|if
condition|(
operator|!
name|OperandTypes
operator|.
name|STRING_SAME_SAME
operator|.
name|checkOperandTypes
argument_list|(
name|callBinding
argument_list|,
name|throwOnFailure
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
operator|!
name|OperandTypes
operator|.
name|STRING_SAME_SAME_SAME
operator|.
name|checkOperandTypes
argument_list|(
name|callBinding
argument_list|,
name|throwOnFailure
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// calc implementation should
comment|// enforce the escape character length to be 1
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected number of args to "
operator|+
name|callBinding
operator|.
name|getCall
argument_list|()
operator|+
literal|": "
operator|+
name|callBinding
operator|.
name|getOperandCount
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|SqlTypeUtil
operator|.
name|isCharTypeComparable
argument_list|(
name|callBinding
argument_list|,
name|callBinding
operator|.
name|operands
argument_list|()
argument_list|,
name|throwOnFailure
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
name|super
operator|.
name|validateCall
argument_list|(
name|call
argument_list|,
name|validator
argument_list|,
name|scope
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|validRexOperands
parameter_list|(
name|int
name|count
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
if|if
condition|(
name|negated
condition|)
block|{
name|litmus
operator|.
name|fail
argument_list|(
literal|"unsupported negated operator {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|validRexOperands
argument_list|(
name|count
argument_list|,
name|litmus
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|getLeftPrec
argument_list|()
argument_list|,
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sep
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|getLeftPrec
argument_list|()
argument_list|,
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|call
operator|.
name|operandCount
argument_list|()
operator|==
literal|3
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ESCAPE"
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|2
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|getLeftPrec
argument_list|()
argument_list|,
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReduceResult
name|reduceExpr
parameter_list|(
specifier|final
name|int
name|opOrdinal
parameter_list|,
name|TokenSequence
name|list
parameter_list|)
block|{
comment|// Example:
comment|//   a LIKE b || c ESCAPE d || e AND f
comment|// |  |    |      |      |      |
comment|//  exp0    exp1          exp2
name|SqlNode
name|exp0
init|=
name|list
operator|.
name|node
argument_list|(
name|opOrdinal
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SqlOperator
name|op
init|=
name|list
operator|.
name|op
argument_list|(
name|opOrdinal
argument_list|)
decl_stmt|;
assert|assert
name|op
operator|instanceof
name|SqlLikeOperator
assert|;
name|SqlNode
name|exp1
init|=
name|SqlParserUtil
operator|.
name|toTreeEx
argument_list|(
name|list
argument_list|,
name|opOrdinal
operator|+
literal|1
argument_list|,
name|getRightPrec
argument_list|()
argument_list|,
name|SqlKind
operator|.
name|ESCAPE
argument_list|)
decl_stmt|;
name|SqlNode
name|exp2
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|opOrdinal
operator|+
literal|2
operator|)
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|isOp
argument_list|(
name|opOrdinal
operator|+
literal|2
argument_list|)
condition|)
block|{
specifier|final
name|SqlOperator
name|op2
init|=
name|list
operator|.
name|op
argument_list|(
name|opOrdinal
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|op2
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ESCAPE
condition|)
block|{
name|exp2
operator|=
name|SqlParserUtil
operator|.
name|toTreeEx
argument_list|(
name|list
argument_list|,
name|opOrdinal
operator|+
literal|3
argument_list|,
name|getRightPrec
argument_list|()
argument_list|,
name|SqlKind
operator|.
name|ESCAPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|SqlNode
index|[]
name|operands
decl_stmt|;
specifier|final
name|int
name|end
decl_stmt|;
if|if
condition|(
name|exp2
operator|!=
literal|null
condition|)
block|{
name|operands
operator|=
operator|new
name|SqlNode
index|[]
block|{
name|exp0
block|,
name|exp1
block|,
name|exp2
block|}
expr_stmt|;
name|end
operator|=
name|opOrdinal
operator|+
literal|4
expr_stmt|;
block|}
else|else
block|{
name|operands
operator|=
operator|new
name|SqlNode
index|[]
block|{
name|exp0
block|,
name|exp1
block|}
expr_stmt|;
name|end
operator|=
name|opOrdinal
operator|+
literal|2
expr_stmt|;
block|}
name|SqlCall
name|call
init|=
name|createCall
argument_list|(
name|SqlParserPos
operator|.
name|sum
argument_list|(
name|operands
argument_list|)
argument_list|,
name|operands
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReduceResult
argument_list|(
name|opOrdinal
operator|-
literal|1
argument_list|,
name|end
argument_list|,
name|call
argument_list|)
return|;
block|}
block|}
end_class

end_unit

