begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SameOperandTypeChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlSingleOperandTypeChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeTransform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeTransforms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Optionality
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *<code>LEAD</code> and<code>LAG</code> aggregate functions  * return the value of given expression evaluated at given offset.  */
end_comment

begin_class
specifier|public
class|class
name|SqlLeadLagAggFunction
extends|extends
name|SqlAggFunction
block|{
specifier|private
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|OPERAND_TYPES
init|=
name|OperandTypes
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|ANY
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|and
argument_list|(
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
argument_list|,
comment|// Arguments 1 and 3 must have same type
operator|new
name|SameOperandTypeChecker
argument_list|(
literal|3
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Integer
argument_list|>
name|getOperandList
parameter_list|(
name|int
name|operandCount
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlReturnTypeInference
name|RETURN_TYPE
init|=
name|ReturnTypes
operator|.
name|ARG0
operator|.
name|andThen
argument_list|(
name|SqlLeadLagAggFunction
operator|::
name|transformType
argument_list|)
decl_stmt|;
specifier|public
name|SqlLeadLagAggFunction
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
name|super
argument_list|(
name|kind
operator|.
name|name
argument_list|()
argument_list|,
literal|null
argument_list|,
name|kind
argument_list|,
name|RETURN_TYPE
argument_list|,
literal|null
argument_list|,
name|OPERAND_TYPES
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Optionality
operator|.
name|FORBIDDEN
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|kind
operator|==
name|SqlKind
operator|.
name|LEAD
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|LAG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|SqlLeadLagAggFunction
parameter_list|(
name|boolean
name|isLead
parameter_list|)
block|{
name|this
argument_list|(
name|isLead
condition|?
name|SqlKind
operator|.
name|LEAD
else|:
name|SqlKind
operator|.
name|LAG
argument_list|)
expr_stmt|;
block|}
comment|// Result is NOT NULL if NOT NULL default value is provided
specifier|private
specifier|static
name|RelDataType
name|transformType
parameter_list|(
name|SqlOperatorBinding
name|binding
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|SqlTypeTransform
name|transform
init|=
name|binding
operator|.
name|getOperandCount
argument_list|()
operator|<
literal|3
operator|||
name|binding
operator|.
name|getOperandType
argument_list|(
literal|2
argument_list|)
operator|.
name|isNullable
argument_list|()
condition|?
name|SqlTypeTransforms
operator|.
name|FORCE_NULLABLE
else|:
name|SqlTypeTransforms
operator|.
name|TO_NOT_NULLABLE
decl_stmt|;
return|return
name|transform
operator|.
name|transformType
argument_list|(
name|binding
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowsFraming
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowsNullTreatment
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

