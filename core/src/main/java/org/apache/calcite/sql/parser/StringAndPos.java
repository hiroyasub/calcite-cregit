begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Contains a string, the offset of a token within the string, and a parser  * position containing the beginning and end line number.  */
end_comment

begin_class
specifier|public
class|class
name|StringAndPos
block|{
specifier|public
specifier|final
name|String
name|sql
decl_stmt|;
specifier|public
specifier|final
name|int
name|cursor
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|SqlParserPos
name|pos
decl_stmt|;
specifier|private
name|StringAndPos
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|cursor
parameter_list|,
annotation|@
name|Nullable
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|cursor
operator|=
name|cursor
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
comment|/**    * Looks for one or two carets in a SQL string, and if present, converts    * them into a parser position.    *    *<p>Examples:    *    *<ul>    *<li>of("xxx^yyy") yields {"xxxyyy", position 3, line 1 column 4}    *<li>of("xxxyyy") yields {"xxxyyy", null}    *<li>of("xxx^yy^y") yields {"xxxyyy", position 3, line 4 column 4    * through line 1 column 6}    *</ul>    */
specifier|public
specifier|static
name|StringAndPos
name|of
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|int
name|firstCaret
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstCaret
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|StringAndPos
argument_list|(
name|sql
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|int
name|secondCaret
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|,
name|firstCaret
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondCaret
operator|==
name|firstCaret
operator|+
literal|1
condition|)
block|{
comment|// If SQL contains "^^", it does not contain error positions; convert each
comment|// "^^" to a single "^".
return|return
operator|new
name|StringAndPos
argument_list|(
name|sql
operator|.
name|replace
argument_list|(
literal|"^^"
argument_list|,
literal|"^"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|else if
condition|(
name|secondCaret
operator|<
literal|0
condition|)
block|{
name|String
name|sqlSansCaret
init|=
name|sql
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstCaret
argument_list|)
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|firstCaret
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|start
init|=
name|SqlParserUtil
operator|.
name|indexToLineCol
argument_list|(
name|sql
argument_list|,
name|firstCaret
argument_list|)
decl_stmt|;
name|SqlParserPos
name|pos
init|=
operator|new
name|SqlParserPos
argument_list|(
name|start
index|[
literal|0
index|]
argument_list|,
name|start
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringAndPos
argument_list|(
name|sqlSansCaret
argument_list|,
name|firstCaret
argument_list|,
name|pos
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|sqlSansCaret
init|=
name|sql
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstCaret
argument_list|)
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|firstCaret
operator|+
literal|1
argument_list|,
name|secondCaret
argument_list|)
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|secondCaret
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|start
init|=
name|SqlParserUtil
operator|.
name|indexToLineCol
argument_list|(
name|sql
argument_list|,
name|firstCaret
argument_list|)
decl_stmt|;
comment|// subtract 1 because the col position needs to be inclusive
operator|--
name|secondCaret
expr_stmt|;
name|int
index|[]
name|end
init|=
name|SqlParserUtil
operator|.
name|indexToLineCol
argument_list|(
name|sql
argument_list|,
name|secondCaret
argument_list|)
decl_stmt|;
comment|// if second caret is on same line as first, decrement its column,
comment|// because first caret pushed the string out
if|if
condition|(
name|start
index|[
literal|0
index|]
operator|==
name|end
index|[
literal|0
index|]
condition|)
block|{
operator|--
name|end
index|[
literal|1
index|]
expr_stmt|;
block|}
name|SqlParserPos
name|pos
init|=
operator|new
name|SqlParserPos
argument_list|(
name|start
index|[
literal|0
index|]
argument_list|,
name|start
index|[
literal|1
index|]
argument_list|,
name|end
index|[
literal|0
index|]
argument_list|,
name|end
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringAndPos
argument_list|(
name|sqlSansCaret
argument_list|,
name|firstCaret
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|addCarets
parameter_list|()
block|{
return|return
name|pos
operator|==
literal|null
condition|?
name|sql
else|:
name|SqlParserUtil
operator|.
name|addCarets
argument_list|(
name|sql
argument_list|,
name|pos
operator|.
name|getLineNum
argument_list|()
argument_list|,
name|pos
operator|.
name|getColumnNum
argument_list|()
argument_list|,
name|pos
operator|.
name|getEndLineNum
argument_list|()
argument_list|,
name|pos
operator|.
name|getEndColumnNum
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

