begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
import|;
end_import

begin_comment
comment|/**  * Enumeration of built-in SQL compatibility modes.  */
end_comment

begin_enum
specifier|public
enum|enum
name|SqlConformanceEnum
implements|implements
name|SqlConformance
block|{
comment|/** Calcite's default SQL behavior. */
name|DEFAULT
block|,
comment|/** Conformance value that allows just about everything supported by    * Calcite. */
name|LENIENT
block|,
comment|/** Conformance value that allows anything supported by any dialect.    * Even more liberal than {@link #LENIENT}. */
name|BABEL
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics strictly    * consistent with the SQL:92 standard. */
name|STRICT_92
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics strictly    * consistent with the SQL:99 standard. */
name|STRICT_99
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with the SQL:99 standard, but ignoring its more    * inconvenient or controversial dicta. */
name|PRAGMATIC_99
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with BigQuery. */
name|BIG_QUERY
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with MySQL version 5.x. */
name|MYSQL_5
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with Oracle version 10. */
name|ORACLE_10
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with Oracle version 12.    *    *<p>As {@link #ORACLE_10} except for {@link #isApplyAllowed()}. */
name|ORACLE_12
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics strictly    * consistent with the SQL:2003 standard. */
name|STRICT_2003
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with the SQL:2003 standard, but ignoring its more    * inconvenient or controversial dicta. */
name|PRAGMATIC_2003
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with Presto. */
name|PRESTO
block|,
comment|/** Conformance value that instructs Calcite to use SQL semantics    * consistent with Microsoft SQL Server version 2008. */
name|SQL_SERVER_2008
block|;
annotation|@
name|Override
specifier|public
name|boolean
name|isLiberal
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowCharLiteralAlias
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|BIG_QUERY
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
case|case
name|SQL_SERVER_2008
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGroupByAlias
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|BIG_QUERY
case|:
case|case
name|MYSQL_5
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGroupByOrdinal
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|BIG_QUERY
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isHavingAlias
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|BIG_QUERY
case|:
case|case
name|MYSQL_5
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSortByOrdinal
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DEFAULT
case|:
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|BIG_QUERY
case|:
case|case
name|MYSQL_5
case|:
case|case
name|ORACLE_10
case|:
case|case
name|ORACLE_12
case|:
case|case
name|STRICT_92
case|:
case|case
name|PRAGMATIC_99
case|:
case|case
name|PRAGMATIC_2003
case|:
case|case
name|SQL_SERVER_2008
case|:
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSortByAlias
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DEFAULT
case|:
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|BIG_QUERY
case|:
case|case
name|MYSQL_5
case|:
case|case
name|ORACLE_10
case|:
case|case
name|ORACLE_12
case|:
case|case
name|STRICT_92
case|:
case|case
name|SQL_SERVER_2008
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSortByAliasObscures
parameter_list|()
block|{
return|return
name|this
operator|==
name|SqlConformanceEnum
operator|.
name|STRICT_92
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFromRequired
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ORACLE_10
case|:
case|case
name|ORACLE_12
case|:
case|case
name|STRICT_92
case|:
case|case
name|STRICT_99
case|:
case|case
name|STRICT_2003
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|splitQuotedTableName
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BIG_QUERY
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowHyphenInUnquotedTableName
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BIG_QUERY
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBangEqualAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|LENIENT
case|:
case|case
name|BABEL
case|:
case|case
name|MYSQL_5
case|:
case|case
name|ORACLE_10
case|:
case|case
name|ORACLE_12
case|:
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMinusAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|ORACLE_10
case|:
case|case
name|ORACLE_12
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPercentRemainderAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplyAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|SQL_SERVER_2008
case|:
case|case
name|ORACLE_12
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInsertSubsetColumnsAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|PRAGMATIC_99
case|:
case|case
name|PRAGMATIC_2003
case|:
case|case
name|BIG_QUERY
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowNiladicParentheses
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
case|case
name|BIG_QUERY
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowExplicitRowValueConstructor
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DEFAULT
case|:
case|case
name|LENIENT
case|:
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowExtend
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLimitStartCountAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOffsetLimitAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowGeometry
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
case|case
name|SQL_SERVER_2008
case|:
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldConvertRaggedUnionTypesToVarying
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|PRAGMATIC_99
case|:
case|case
name|PRAGMATIC_2003
case|:
case|case
name|BIG_QUERY
case|:
case|case
name|MYSQL_5
case|:
case|case
name|ORACLE_10
case|:
case|case
name|ORACLE_12
case|:
case|case
name|SQL_SERVER_2008
case|:
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowExtendedTrim
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
case|case
name|SQL_SERVER_2008
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowPluralTimeUnits
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowQualifyingCommonColumn
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ORACLE_10
case|:
case|case
name|ORACLE_12
case|:
case|case
name|STRICT_92
case|:
case|case
name|STRICT_99
case|:
case|case
name|STRICT_2003
case|:
case|case
name|PRESTO
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowAliasUnnestItems
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|PRESTO
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValueAllowed
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
case|case
name|LENIENT
case|:
case|case
name|MYSQL_5
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SqlLibrary
name|semantics
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BIG_QUERY
case|:
return|return
name|SqlLibrary
operator|.
name|BIG_QUERY
return|;
case|case
name|MYSQL_5
case|:
return|return
name|SqlLibrary
operator|.
name|MYSQL
return|;
case|case
name|ORACLE_12
case|:
case|case
name|ORACLE_10
case|:
return|return
name|SqlLibrary
operator|.
name|ORACLE
return|;
default|default:
return|return
name|SqlLibrary
operator|.
name|STANDARD
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowCoercionStringToArray
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|BABEL
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_enum

end_unit

