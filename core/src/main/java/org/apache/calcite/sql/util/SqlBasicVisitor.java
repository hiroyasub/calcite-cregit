begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDataTypeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDynamicParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_comment
comment|/**  * Basic implementation of {@link SqlVisitor} which does nothing at each node.  *  *<p>This class is useful as a base class for classes which implement the  * {@link SqlVisitor} interface. The derived class can override whichever  * methods it chooses.  *  * @param<R> Return type  */
end_comment

begin_class
specifier|public
class|class
name|SqlBasicVisitor
parameter_list|<
name|R
parameter_list|>
implements|implements
name|SqlVisitor
argument_list|<
name|R
argument_list|>
block|{
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|R
name|visit
parameter_list|(
name|SqlLiteral
name|literal
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|visit
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
return|return
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|acceptCall
argument_list|(
name|this
argument_list|,
name|call
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|visit
parameter_list|(
name|SqlNodeList
name|nodeList
parameter_list|)
block|{
name|R
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|node
init|=
name|nodeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result
operator|=
name|node
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|visit
parameter_list|(
name|SqlIdentifier
name|id
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|visit
parameter_list|(
name|SqlDataTypeSpec
name|type
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|visit
parameter_list|(
name|SqlDynamicParam
name|param
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|visit
parameter_list|(
name|SqlIntervalQualifier
name|intervalQualifier
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|//~ Inner Interfaces -------------------------------------------------------
comment|/** Argument handler.    *    * @param<R> result type */
specifier|public
interface|interface
name|ArgHandler
parameter_list|<
name|R
parameter_list|>
block|{
comment|/** Returns the result of visiting all children of a call to an operator,      * then the call itself.      *      *<p>Typically the result will be the result of the last child visited, or      * (if R is {@link Boolean}) whether all children were visited      * successfully. */
name|R
name|result
parameter_list|()
function_decl|;
comment|/** Visits a particular operand of a call, using a given visitor. */
name|R
name|visitChild
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|,
name|SqlNode
name|expr
parameter_list|,
name|int
name|i
parameter_list|,
name|SqlNode
name|operand
parameter_list|)
function_decl|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**    * Default implementation of {@link ArgHandler} which merely calls    * {@link SqlNode#accept} on each operand.    *    * @param<R> result type    */
specifier|public
specifier|static
class|class
name|ArgHandlerImpl
parameter_list|<
name|R
parameter_list|>
implements|implements
name|ArgHandler
argument_list|<
name|R
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ArgHandler
name|INSTANCE
init|=
operator|new
name|ArgHandlerImpl
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|>
name|ArgHandler
argument_list|<
name|R
argument_list|>
name|instance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|result
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|R
name|visitChild
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|,
name|SqlNode
name|expr
parameter_list|,
name|int
name|i
parameter_list|,
name|SqlNode
name|operand
parameter_list|)
block|{
if|if
condition|(
name|operand
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|operand
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

