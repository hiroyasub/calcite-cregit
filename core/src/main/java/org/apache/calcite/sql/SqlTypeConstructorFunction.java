begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ExplicitOperandTypeChecker
import|;
end_import

begin_comment
comment|/**  * Type Constructor function.  *  *<p>Created by the parser, then it is rewritten to proper SqlFunction by  * the validator to a function defined in a Calcite schema.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SqlTypeConstructorFunction
extends|extends
name|SqlFunction
block|{
specifier|private
name|RelDataType
name|type
decl_stmt|;
comment|/**    * Creates a constructor function for types.    *    * @param identifier possibly qualified identifier for function    * @param type type of data    */
specifier|public
name|SqlTypeConstructorFunction
parameter_list|(
name|SqlIdentifier
name|identifier
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|identifier
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ExplicitOperandTypeChecker
argument_list|(
name|type
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|inferReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

