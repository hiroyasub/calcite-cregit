begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|implicit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlInsert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Default implementation of Calcite implicit type cast.  */
end_comment

begin_class
specifier|public
class|class
name|TypeCoercionImpl
extends|extends
name|AbstractTypeCoercion
block|{
specifier|public
name|TypeCoercionImpl
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|SqlValidator
name|validator
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|,
name|validator
argument_list|)
expr_stmt|;
block|}
comment|/**    * Widen a SqlNode's field type to common type,    * mainly used for set operations like UNION, INTERSECT and EXCEPT.    *    *<p>Rules:    *<pre>    *    *       type1, type2  type3       select a, b, c from t1    *          \      \      \    *         type4  type5  type6              UNION    *          /      /      /    *       type7  type8  type9       select d, e, f from t2    *</pre>    * For struct type (type1, type2, type3) union type (type4, type5, type6),    * infer the first result column type type7 as the wider type of type1 and type4,    * the second column type as the wider type of type2 and type5 and so on.    *    * @param scope       Validator scope    * @param query       Query node to update the field type for    * @param columnIndex Target column index    * @param targetType  Target type to cast to    */
specifier|public
name|boolean
name|rowTypeCoercion
parameter_list|(
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlNode
name|query
parameter_list|,
name|int
name|columnIndex
parameter_list|,
name|RelDataType
name|targetType
parameter_list|)
block|{
specifier|final
name|SqlKind
name|kind
init|=
name|query
operator|.
name|getKind
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|SELECT
case|:
name|SqlSelect
name|selectNode
init|=
operator|(
name|SqlSelect
operator|)
name|query
decl_stmt|;
name|SqlValidatorScope
name|scope1
init|=
name|validator
operator|.
name|getSelectScope
argument_list|(
name|selectNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|coerceColumnType
argument_list|(
name|scope1
argument_list|,
name|selectNode
operator|.
name|getSelectList
argument_list|()
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|updateInferredColumnType
argument_list|(
name|scope1
argument_list|,
name|query
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|VALUES
case|:
for|for
control|(
name|SqlNode
name|rowConstructor
range|:
operator|(
operator|(
name|SqlCall
operator|)
name|query
operator|)
operator|.
name|getOperandList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|coerceOperandType
argument_list|(
name|scope
argument_list|,
operator|(
name|SqlCall
operator|)
name|rowConstructor
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|updateInferredColumnType
argument_list|(
name|scope
argument_list|,
name|query
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|WITH
case|:
name|SqlNode
name|body
init|=
operator|(
operator|(
name|SqlWith
operator|)
name|query
operator|)
operator|.
name|body
decl_stmt|;
return|return
name|rowTypeCoercion
argument_list|(
name|validator
operator|.
name|getOverScope
argument_list|(
name|query
argument_list|)
argument_list|,
name|body
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
return|;
case|case
name|UNION
case|:
case|case
name|INTERSECT
case|:
case|case
name|EXCEPT
case|:
comment|// Set operations are binary for now.
specifier|final
name|SqlCall
name|operand0
init|=
operator|(
operator|(
name|SqlCall
operator|)
name|query
operator|)
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SqlCall
name|operand1
init|=
operator|(
operator|(
name|SqlCall
operator|)
name|query
operator|)
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|coerced
init|=
name|rowTypeCoercion
argument_list|(
name|scope
argument_list|,
name|operand0
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
operator|&&
name|rowTypeCoercion
argument_list|(
name|scope
argument_list|,
name|operand1
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
decl_stmt|;
comment|// Update the nested SET operator node type.
if|if
condition|(
name|coerced
condition|)
block|{
name|updateInferredColumnType
argument_list|(
name|scope
argument_list|,
name|query
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
expr_stmt|;
block|}
return|return
name|coerced
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Coerces operands in binary arithmetic expressions to NUMERIC types.    *    *<p>For binary arithmetic operators like [+, -, *, /, %]:    * If the operand is VARCHAR,    * coerce it to data type of the other operand if its data type is NUMERIC;    * If the other operand is DECIMAL,    * coerce the STRING operand to max precision/scale DECIMAL.    */
specifier|public
name|boolean
name|binaryArithmeticCoercion
parameter_list|(
name|SqlCallBinding
name|binding
parameter_list|)
block|{
comment|// Assume the operator has NUMERIC family operand type checker.
name|SqlOperator
name|operator
init|=
name|binding
operator|.
name|getOperator
argument_list|()
decl_stmt|;
name|SqlKind
name|kind
init|=
name|operator
operator|.
name|getKind
argument_list|()
decl_stmt|;
name|boolean
name|coerced
init|=
literal|false
decl_stmt|;
comment|// Binary operator
if|if
condition|(
name|binding
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
condition|)
block|{
specifier|final
name|RelDataType
name|type1
init|=
name|binding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type2
init|=
name|binding
operator|.
name|getOperandType
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Special case for datetime + interval or datetime - interval
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|PLUS
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|MINUS
condition|)
block|{
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isInterval
argument_list|(
name|type1
argument_list|)
operator|||
name|SqlTypeUtil
operator|.
name|isInterval
argument_list|(
name|type2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Binary arithmetic operator like: + - * / %
if|if
condition|(
name|kind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|BINARY_ARITHMETIC
argument_list|)
condition|)
block|{
name|coerced
operator|=
name|binaryArithmeticWithStrings
argument_list|(
name|binding
argument_list|,
name|type1
argument_list|,
name|type2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|coerced
return|;
block|}
comment|/**    * For NUMERIC and STRING operands, cast STRING to data type of the other operand.    **/
specifier|protected
name|boolean
name|binaryArithmeticWithStrings
parameter_list|(
name|SqlCallBinding
name|binding
parameter_list|,
name|RelDataType
name|left
parameter_list|,
name|RelDataType
name|right
parameter_list|)
block|{
comment|// For expression "NUMERIC<OP> CHARACTER",
comment|// PostgreSQL and MS-SQL coerce the CHARACTER operand to NUMERIC,
comment|// i.e. for '9':VARCHAR(1) / 2: INT, '9' would be coerced to INTEGER,
comment|// while for '9':VARCHAR(1) / 3.3: DOUBLE, '9' would be coerced to DOUBLE.
comment|// They do not allow both CHARACTER operands for binary arithmetic operators.
comment|// MySQL and Oracle would coerce all the string operands to DOUBLE.
comment|// Keep sync with PostgreSQL and MS-SQL because their behaviors are more in
comment|// line with the SQL standard.
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isString
argument_list|(
name|left
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|isNumeric
argument_list|(
name|right
argument_list|)
condition|)
block|{
comment|// If the numeric operand is DECIMAL type, coerce the STRING operand to
comment|// max precision/scale DECIMAL.
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isDecimal
argument_list|(
name|right
argument_list|)
condition|)
block|{
name|right
operator|=
name|SqlTypeUtil
operator|.
name|getMaxPrecisionScaleDecimal
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|coerceOperandType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
literal|0
argument_list|,
name|right
argument_list|)
return|;
block|}
if|else if
condition|(
name|SqlTypeUtil
operator|.
name|isNumeric
argument_list|(
name|left
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|isString
argument_list|(
name|right
argument_list|)
condition|)
block|{
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isDecimal
argument_list|(
name|left
argument_list|)
condition|)
block|{
name|left
operator|=
name|SqlTypeUtil
operator|.
name|getMaxPrecisionScaleDecimal
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|coerceOperandType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
literal|1
argument_list|,
name|left
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Coerces operands in binary comparison expressions.    *    *<p>Rules:</p>    *<ul>    *<li>For EQUALS(=) operator: 1. If operands are BOOLEAN and NUMERIC, evaluate    *   `1=true` and `0=false` all to be true; 2. If operands are datetime and string,    *   do nothing because the SqlToRelConverter already makes the type coercion;</li>    *<li>For binary comparision [=,&gt;,&gt;=,&lt;,&lt;=]: try to find the common type,    *   i.e. "1&gt; '1'" will be converted to "1&gt; 1";</li>    *<li>For BETWEEN operator, find the common comparison data type of all the operands,    *   the common type is deduced from left to right, i.e. for expression "A between B and C",    *   finds common comparison type D between A and B    *   then common comparison type E between D and C as the final common type.</li>    *</ul>    */
specifier|public
name|boolean
name|binaryComparisonCoercion
parameter_list|(
name|SqlCallBinding
name|binding
parameter_list|)
block|{
name|SqlOperator
name|operator
init|=
name|binding
operator|.
name|getOperator
argument_list|()
decl_stmt|;
name|SqlKind
name|kind
init|=
name|operator
operator|.
name|getKind
argument_list|()
decl_stmt|;
name|int
name|operandCnt
init|=
name|binding
operator|.
name|getOperandCount
argument_list|()
decl_stmt|;
name|boolean
name|coerced
init|=
literal|false
decl_stmt|;
comment|// Binary operator
if|if
condition|(
name|operandCnt
operator|==
literal|2
condition|)
block|{
specifier|final
name|RelDataType
name|type1
init|=
name|binding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type2
init|=
name|binding
operator|.
name|getOperandType
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// EQUALS(=) NOT_EQUALS(<>)
if|if
condition|(
name|kind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|BINARY_EQUALITY
argument_list|)
condition|)
block|{
comment|// STRING and datetime
name|coerced
operator|=
name|dateTimeStringEquality
argument_list|(
name|binding
argument_list|,
name|type1
argument_list|,
name|type2
argument_list|)
operator|||
name|coerced
expr_stmt|;
comment|// BOOLEAN and NUMERIC
comment|// BOOLEAN and literal
name|coerced
operator|=
name|booleanEquality
argument_list|(
name|binding
argument_list|,
name|type1
argument_list|,
name|type2
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
comment|// Binary comparision operator like: =>>=<<=
if|if
condition|(
name|kind
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|BINARY_COMPARISON
argument_list|)
condition|)
block|{
specifier|final
name|RelDataType
name|commonType
init|=
name|commonTypeForBinaryComparison
argument_list|(
name|type1
argument_list|,
name|type2
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|commonType
condition|)
block|{
name|coerced
operator|=
name|coerceOperandsType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
name|commonType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Infix operator like: BETWEEN
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|BETWEEN
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|operandTypes
init|=
name|Util
operator|.
name|range
argument_list|(
name|operandCnt
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|binding
operator|::
name|getOperandType
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|commonType
init|=
name|commonTypeForComparison
argument_list|(
name|operandTypes
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|commonType
condition|)
block|{
name|coerced
operator|=
name|coerceOperandsType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
name|commonType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|coerced
return|;
block|}
comment|/**    * Finds the common type for binary comparison    * when the size of operands {@code dataTypes} is more than 2.    * If there are N(more than 2) operands,    * finds the common type between two operands from left to right:    *    *<p>Rules:</p>    *<pre>    *   type1     type2    type3    *    |         |        |    *    +- type4 -+        |    *         |             |    *         +--- type5 ---+    *</pre>    * For operand data types (type1, type2, type3), deduce the common type type4    * from type1 and type2, then common type type5 from type4 and type3.    */
specifier|protected
name|RelDataType
name|commonTypeForComparison
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|dataTypes
parameter_list|)
block|{
assert|assert
name|dataTypes
operator|.
name|size
argument_list|()
operator|>
literal|2
assert|;
specifier|final
name|RelDataType
name|type1
init|=
name|dataTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type2
init|=
name|dataTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// No need to do type coercion if all the data types have the same type name.
name|boolean
name|allWithSameName
init|=
name|SqlTypeUtil
operator|.
name|sameNamedType
argument_list|(
name|type1
argument_list|,
name|type2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|dataTypes
operator|.
name|size
argument_list|()
operator|&&
name|allWithSameName
condition|;
name|i
operator|++
control|)
block|{
name|allWithSameName
operator|=
name|SqlTypeUtil
operator|.
name|sameNamedType
argument_list|(
name|dataTypes
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|dataTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allWithSameName
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RelDataType
name|commonType
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|sameNamedType
argument_list|(
name|type1
argument_list|,
name|type2
argument_list|)
condition|)
block|{
name|commonType
operator|=
name|factory
operator|.
name|leastRestrictive
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|type1
argument_list|,
name|type2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonType
operator|=
name|commonTypeForBinaryComparison
argument_list|(
name|type1
argument_list|,
name|type2
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|dataTypes
operator|.
name|size
argument_list|()
operator|&&
name|commonType
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|SqlTypeUtil
operator|.
name|sameNamedType
argument_list|(
name|commonType
argument_list|,
name|dataTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|commonType
operator|=
name|factory
operator|.
name|leastRestrictive
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|commonType
argument_list|,
name|dataTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonType
operator|=
name|commonTypeForBinaryComparison
argument_list|(
name|commonType
argument_list|,
name|dataTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|commonType
return|;
block|}
comment|/**    * Datetime and STRING equality: cast STRING type to datetime type, SqlToRelConverter already    * makes the conversion but we still keep this interface overridable    * so user can have their custom implementation.    */
specifier|protected
name|boolean
name|dateTimeStringEquality
parameter_list|(
name|SqlCallBinding
name|binding
parameter_list|,
name|RelDataType
name|left
parameter_list|,
name|RelDataType
name|right
parameter_list|)
block|{
comment|// REVIEW Danny 2018-05-23 we do not need to coerce type for EQUALS
comment|// because SqlToRelConverter already does this.
comment|// REVIEW Danny 2019-09-23, we should unify the coercion rules in TypeCoercion
comment|// instead of SqlToRelConverter.
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isCharacter
argument_list|(
name|left
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|isDatetime
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|coerceOperandType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
literal|0
argument_list|,
name|right
argument_list|)
return|;
block|}
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isCharacter
argument_list|(
name|right
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|isDatetime
argument_list|(
name|left
argument_list|)
condition|)
block|{
return|return
name|coerceOperandType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
literal|1
argument_list|,
name|left
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Casts "BOOLEAN = NUMERIC" to "NUMERIC = NUMERIC". Expressions like 1=`expr` and    * 0=`expr` can be simplified to `expr` and `not expr`, but this better happens    * in {@link org.apache.calcite.rex.RexSimplify}.    *    *<p>There are 2 cases that need type coercion here:    *<ol>    *<li>Case1: `boolean expr1` = 1 or `boolean expr1` = 0, replace the numeric literal with    *   `true` or `false` boolean literal.</li>    *<li>Case2: `boolean expr1` = `numeric expr2`, replace expr1 to `1` or `0` numeric    *   literal.</li>    *</ol>    * For case2, wrap the operand in a cast operator, during sql-to-rel conversion    * we would convert expression `cast(expr1 as right)` to `case when expr1 then 1 else 0.`    */
specifier|protected
name|boolean
name|booleanEquality
parameter_list|(
name|SqlCallBinding
name|binding
parameter_list|,
name|RelDataType
name|left
parameter_list|,
name|RelDataType
name|right
parameter_list|)
block|{
name|SqlNode
name|lNode
init|=
name|binding
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SqlNode
name|rNode
init|=
name|binding
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isNumeric
argument_list|(
name|left
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|isBoolean
argument_list|(
name|right
argument_list|)
condition|)
block|{
comment|// Case1: numeric literal and boolean
if|if
condition|(
name|lNode
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
name|BigDecimal
name|val
init|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|lNode
operator|)
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
operator|==
literal|0
condition|)
block|{
name|SqlNode
name|lNode1
init|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|binding
operator|.
name|getCall
argument_list|()
operator|.
name|setOperand
argument_list|(
literal|0
argument_list|,
name|lNode1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|SqlNode
name|lNode1
init|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|binding
operator|.
name|getCall
argument_list|()
operator|.
name|setOperand
argument_list|(
literal|0
argument_list|,
name|lNode1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// Case2: boolean and numeric
return|return
name|coerceOperandType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
literal|1
argument_list|,
name|left
argument_list|)
return|;
block|}
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isNumeric
argument_list|(
name|right
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|isBoolean
argument_list|(
name|left
argument_list|)
condition|)
block|{
comment|// Case1: literal numeric + boolean
if|if
condition|(
name|rNode
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
name|BigDecimal
name|val
init|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|rNode
operator|)
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
operator|==
literal|0
condition|)
block|{
name|SqlNode
name|rNode1
init|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|binding
operator|.
name|getCall
argument_list|()
operator|.
name|setOperand
argument_list|(
literal|1
argument_list|,
name|rNode1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|SqlNode
name|rNode1
init|=
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|binding
operator|.
name|getCall
argument_list|()
operator|.
name|setOperand
argument_list|(
literal|1
argument_list|,
name|rNode1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// Case2: boolean + numeric
return|return
name|coerceOperandType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
literal|0
argument_list|,
name|right
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * CASE and COALESCE type coercion, collect all the branches types including then    * operands and else operands to find a common type, then cast the operands to the common type    * when needed.    */
specifier|public
name|boolean
name|caseWhenCoercion
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|)
block|{
comment|// For sql statement like:
comment|// `case when ... then (a, b, c) when ... then (d, e, f) else (g, h, i)`
comment|// an exception throws when entering this method.
name|SqlCase
name|caseCall
init|=
operator|(
name|SqlCase
operator|)
name|callBinding
operator|.
name|getCall
argument_list|()
decl_stmt|;
name|SqlNodeList
name|thenList
init|=
name|caseCall
operator|.
name|getThenOperands
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlNode
name|node
range|:
name|thenList
control|)
block|{
name|argTypes
operator|.
name|add
argument_list|(
name|validator
operator|.
name|deriveType
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SqlNode
name|elseOp
init|=
name|caseCall
operator|.
name|getElseOperand
argument_list|()
decl_stmt|;
name|RelDataType
name|elseOpType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|caseCall
operator|.
name|getElseOperand
argument_list|()
argument_list|)
decl_stmt|;
name|argTypes
operator|.
name|add
argument_list|(
name|elseOpType
argument_list|)
expr_stmt|;
comment|// Entering this method means we have already got a wider type, recompute it here
comment|// just to make the interface more clear.
name|RelDataType
name|widerType
init|=
name|getWiderTypeFor
argument_list|(
name|argTypes
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|widerType
condition|)
block|{
name|boolean
name|coerced
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thenList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|coerced
operator|=
name|coerceColumnType
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|thenList
argument_list|,
name|i
argument_list|,
name|widerType
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
if|if
condition|(
name|needToCast
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|elseOp
argument_list|,
name|widerType
argument_list|)
condition|)
block|{
name|coerced
operator|=
name|coerceOperandType
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|caseCall
argument_list|,
literal|3
argument_list|,
name|widerType
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
return|return
name|coerced
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * {@inheritDoc}    *    *<p>STRATEGIES    *    *<p>With(Without) sub-query:    *    *<ul>    *    *<li>With sub-query: find the common type through comparing the left hand    * side (LHS) expression types with corresponding right hand side (RHS)    * expression derived from the sub-query expression's row type. Wrap the    * fields of the LHS and RHS in CAST operators if it is needed.    *    *<li>Without sub-query: convert the nodes of the RHS to the common type by    * checking all the argument types and find out the minimum common type that    * all the arguments can be cast to.    *    *</ul>    *    *<p>How to find the common type:    *    *<ul>    *    *<li>For both struct sql types (LHS and RHS), find the common type of every    * LHS and RHS fields pair:    *    *<pre>    * (field1, field2, field3)    (field4, field5, field6)    *    |        |       |          |       |       |    *    +--------+---type1----------+       |       |    *             |       |                  |       |    *             +-------+----type2---------+       |    *                     |                          |    *                     +-------------type3--------+    *</pre>    *<li>For both basic sql types(LHS and RHS),    *   find the common type of LHS and RHS nodes.    *</ul>    */
specifier|public
name|boolean
name|inOperationCoercion
parameter_list|(
name|SqlCallBinding
name|binding
parameter_list|)
block|{
name|SqlOperator
name|operator
init|=
name|binding
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|IN
operator|||
name|operator
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|NOT_IN
condition|)
block|{
assert|assert
name|binding
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
assert|;
specifier|final
name|RelDataType
name|type1
init|=
name|binding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type2
init|=
name|binding
operator|.
name|getOperandType
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|node1
init|=
name|binding
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|node2
init|=
name|binding
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidatorScope
name|scope
init|=
name|binding
operator|.
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|type1
operator|.
name|isStruct
argument_list|()
operator|&&
name|type2
operator|.
name|isStruct
argument_list|()
operator|&&
name|type1
operator|.
name|getFieldCount
argument_list|()
operator|!=
name|type2
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|colCount
init|=
name|type1
operator|.
name|isStruct
argument_list|()
condition|?
name|type1
operator|.
name|getFieldCount
argument_list|()
else|:
literal|1
decl_stmt|;
name|RelDataType
index|[]
name|argTypes
init|=
operator|new
name|RelDataType
index|[
literal|2
index|]
decl_stmt|;
name|argTypes
index|[
literal|0
index|]
operator|=
name|type1
expr_stmt|;
name|argTypes
index|[
literal|1
index|]
operator|=
name|type2
expr_stmt|;
name|boolean
name|coerced
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RelDataType
argument_list|>
name|widenTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|i2
init|=
name|i
decl_stmt|;
name|List
argument_list|<
name|RelDataType
argument_list|>
name|columnIthTypes
init|=
operator|new
name|AbstractList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
block|{
specifier|public
name|RelDataType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|argTypes
index|[
name|index
index|]
operator|.
name|isStruct
argument_list|()
condition|?
name|argTypes
index|[
name|index
index|]
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i2
argument_list|)
operator|.
name|getType
argument_list|()
else|:
name|argTypes
index|[
name|index
index|]
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|argTypes
operator|.
name|length
return|;
block|}
block|}
decl_stmt|;
name|RelDataType
name|widenType
init|=
name|commonTypeForBinaryComparison
argument_list|(
name|columnIthTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|columnIthTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|widenType
operator|==
literal|null
condition|)
block|{
name|widenType
operator|=
name|getTightestCommonType
argument_list|(
name|columnIthTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|columnIthTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|widenType
operator|==
literal|null
condition|)
block|{
comment|// Can not find any common type, just return early.
return|return
literal|false
return|;
block|}
name|widenTypes
operator|.
name|add
argument_list|(
name|widenType
argument_list|)
expr_stmt|;
block|}
comment|// Find all the common type for RSH and LSH columns.
assert|assert
name|widenTypes
operator|.
name|size
argument_list|()
operator|==
name|colCount
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widenTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelDataType
name|desired
init|=
name|widenTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// LSH maybe a row values or single node.
if|if
condition|(
name|node1
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ROW
condition|)
block|{
assert|assert
name|node1
operator|instanceof
name|SqlCall
assert|;
if|if
condition|(
name|coerceOperandType
argument_list|(
name|scope
argument_list|,
operator|(
name|SqlCall
operator|)
name|node1
argument_list|,
name|i
argument_list|,
name|desired
argument_list|)
condition|)
block|{
name|updateInferredColumnType
argument_list|(
name|scope
argument_list|,
name|node1
argument_list|,
name|i
argument_list|,
name|widenTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|coerced
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|coerced
operator|=
name|coerceOperandType
argument_list|(
name|scope
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
literal|0
argument_list|,
name|desired
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
comment|// RHS may be a row values expression or sub-query.
if|if
condition|(
name|node2
operator|instanceof
name|SqlNodeList
condition|)
block|{
specifier|final
name|SqlNodeList
name|node3
init|=
operator|(
name|SqlNodeList
operator|)
name|node2
decl_stmt|;
name|boolean
name|listCoerced
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|type2
operator|.
name|isStruct
argument_list|()
condition|)
block|{
for|for
control|(
name|SqlNode
name|node
range|:
operator|(
name|SqlNodeList
operator|)
name|node2
control|)
block|{
assert|assert
name|node
operator|instanceof
name|SqlCall
assert|;
name|listCoerced
operator|=
name|coerceOperandType
argument_list|(
name|scope
argument_list|,
operator|(
name|SqlCall
operator|)
name|node
argument_list|,
name|i
argument_list|,
name|desired
argument_list|)
operator|||
name|listCoerced
expr_stmt|;
block|}
if|if
condition|(
name|listCoerced
condition|)
block|{
name|updateInferredColumnType
argument_list|(
name|scope
argument_list|,
name|node2
argument_list|,
name|i
argument_list|,
name|desired
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
operator|(
name|SqlNodeList
operator|)
name|node2
operator|)
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|listCoerced
operator|=
name|coerceColumnType
argument_list|(
name|scope
argument_list|,
name|node3
argument_list|,
name|j
argument_list|,
name|desired
argument_list|)
operator|||
name|listCoerced
expr_stmt|;
block|}
if|if
condition|(
name|listCoerced
condition|)
block|{
name|updateInferredType
argument_list|(
name|node2
argument_list|,
name|desired
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Another sub-query.
name|SqlValidatorScope
name|scope1
init|=
name|node2
operator|instanceof
name|SqlSelect
condition|?
name|validator
operator|.
name|getSelectScope
argument_list|(
operator|(
name|SqlSelect
operator|)
name|node2
argument_list|)
else|:
name|scope
decl_stmt|;
name|coerced
operator|=
name|rowTypeCoercion
argument_list|(
name|scope1
argument_list|,
name|node2
argument_list|,
name|i
argument_list|,
name|desired
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
block|}
return|return
name|coerced
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|builtinFunctionCoercion
parameter_list|(
name|SqlCallBinding
name|binding
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|operandTypes
parameter_list|,
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|expectedFamilies
parameter_list|)
block|{
assert|assert
name|binding
operator|.
name|getOperandCount
argument_list|()
operator|==
name|operandTypes
operator|.
name|size
argument_list|()
assert|;
if|if
condition|(
operator|!
name|canImplicitTypeCast
argument_list|(
name|operandTypes
argument_list|,
name|expectedFamilies
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|coerced
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelDataType
name|implicitType
init|=
name|implicitCast
argument_list|(
name|operandTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|expectedFamilies
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|coerced
operator|=
literal|null
operator|!=
name|implicitType
operator|&&
name|operandTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|implicitType
operator|&&
name|coerceOperandType
argument_list|(
name|binding
operator|.
name|getScope
argument_list|()
argument_list|,
name|binding
operator|.
name|getCall
argument_list|()
argument_list|,
name|i
argument_list|,
name|implicitType
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
return|return
name|coerced
return|;
block|}
comment|/**    * Type coercion for user defined functions(UDFs).    */
specifier|public
name|boolean
name|userDefinedFunctionCoercion
parameter_list|(
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|SqlFunction
name|function
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|paramTypes
init|=
name|function
operator|.
name|getParamTypes
argument_list|()
decl_stmt|;
assert|assert
name|paramTypes
operator|!=
literal|null
assert|;
name|boolean
name|coerced
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|call
operator|.
name|operandCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|operand
init|=
name|call
operator|.
name|operand
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|ARGUMENT_ASSIGNMENT
condition|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operandList
init|=
operator|(
operator|(
name|SqlCall
operator|)
name|operand
operator|)
operator|.
name|getOperandList
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
operator|(
name|SqlIdentifier
operator|)
name|operandList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getSimple
argument_list|()
decl_stmt|;
name|int
name|formalIndex
init|=
name|function
operator|.
name|getParamNames
argument_list|()
operator|.
name|indexOf
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|formalIndex
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Column list operand type is not supported now.
name|coerced
operator|=
name|coerceOperandType
argument_list|(
name|scope
argument_list|,
operator|(
name|SqlCall
operator|)
name|operand
argument_list|,
literal|0
argument_list|,
name|paramTypes
operator|.
name|get
argument_list|(
name|formalIndex
argument_list|)
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
else|else
block|{
name|coerced
operator|=
name|coerceOperandType
argument_list|(
name|scope
argument_list|,
name|call
argument_list|,
name|i
argument_list|,
name|paramTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
block|}
return|return
name|coerced
return|;
block|}
specifier|public
name|boolean
name|querySourceCoercion
parameter_list|(
name|SqlValidatorScope
name|scope
parameter_list|,
name|RelDataType
name|sourceRowType
parameter_list|,
name|RelDataType
name|targetRowType
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|sourceFields
init|=
name|sourceRowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|targetFields
init|=
name|targetRowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|sourceCount
init|=
name|sourceFields
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceCount
condition|;
name|i
operator|++
control|)
block|{
name|RelDataType
name|sourceType
init|=
name|sourceFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|targetType
init|=
name|targetFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SqlTypeUtil
operator|.
name|equalSansNullability
argument_list|(
name|validator
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|sourceType
argument_list|,
name|targetType
argument_list|)
operator|&&
operator|!
name|SqlTypeUtil
operator|.
name|canCastFrom
argument_list|(
name|targetType
argument_list|,
name|sourceType
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Returns early if types not equals and can not do type coercion.
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|coerced
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelDataType
name|targetType
init|=
name|targetFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|coerced
operator|=
name|coerceSourceRowType
argument_list|(
name|scope
argument_list|,
name|query
argument_list|,
name|i
argument_list|,
name|targetType
argument_list|)
operator|||
name|coerced
expr_stmt|;
block|}
return|return
name|coerced
return|;
block|}
comment|/**    * Coerces the field expression at index {@code columnIndex} of source    * in an INSERT or UPDATE query to target type.    *    * @param sourceScope  Query source scope    * @param query        Query    * @param columnIndex  Source column index to coerce type    * @param targetType   Target type    */
specifier|private
name|boolean
name|coerceSourceRowType
parameter_list|(
name|SqlValidatorScope
name|sourceScope
parameter_list|,
name|SqlNode
name|query
parameter_list|,
name|int
name|columnIndex
parameter_list|,
name|RelDataType
name|targetType
parameter_list|)
block|{
switch|switch
condition|(
name|query
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INSERT
case|:
name|SqlInsert
name|insert
init|=
operator|(
name|SqlInsert
operator|)
name|query
decl_stmt|;
return|return
name|coerceSourceRowType
argument_list|(
name|sourceScope
argument_list|,
name|insert
operator|.
name|getSource
argument_list|()
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
return|;
case|case
name|UPDATE
case|:
name|SqlUpdate
name|update
init|=
operator|(
name|SqlUpdate
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|update
operator|.
name|getSourceExpressionList
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SqlNodeList
name|sourceExpressionList
init|=
name|update
operator|.
name|getSourceExpressionList
argument_list|()
decl_stmt|;
return|return
name|coerceColumnType
argument_list|(
name|sourceScope
argument_list|,
name|sourceExpressionList
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|coerceSourceRowType
argument_list|(
name|sourceScope
argument_list|,
name|update
operator|.
name|getSourceSelect
argument_list|()
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
return|;
block|}
default|default:
return|return
name|rowTypeCoercion
argument_list|(
name|sourceScope
argument_list|,
name|query
argument_list|,
name|columnIndex
argument_list|,
name|targetType
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

