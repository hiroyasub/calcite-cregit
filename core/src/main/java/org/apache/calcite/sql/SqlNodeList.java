begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * A<code>SqlNodeList</code> is a list of {@link SqlNode}s. It is also a  * {@link SqlNode}, so may appear in a parse tree.  *  * @see SqlNode#toList()  */
end_comment

begin_class
specifier|public
class|class
name|SqlNodeList
extends|extends
name|SqlNode
implements|implements
name|List
argument_list|<
name|SqlNode
argument_list|>
implements|,
name|RandomAccess
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * An immutable, empty SqlNodeList.    */
specifier|public
specifier|static
specifier|final
name|SqlNodeList
name|EMPTY
init|=
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
comment|/**    * A SqlNodeList that has a single element that is an empty list.    */
specifier|public
specifier|static
specifier|final
name|SqlNodeList
name|SINGLETON_EMPTY
init|=
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|EMPTY
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
comment|/**    * A SqlNodeList that has a single element that is a star identifier.    */
specifier|public
specifier|static
specifier|final
name|SqlNodeList
name|SINGLETON_STAR
init|=
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlIdentifier
operator|.
name|STAR
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a SqlNodeList with a given backing list.    *    *<p>Because SqlNodeList implements {@link RandomAccess}, the backing list    * should allow O(1) access to elements. */
specifier|private
name|SqlNodeList
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a SqlNodeList that is initially empty.    */
specifier|public
name|SqlNodeList
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|pos
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a<code>SqlNodeList</code> containing the nodes in<code>    * list</code>. The list is copied, but the nodes in it are not.    */
specifier|public
name|SqlNodeList
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|collection
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|pos
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a SqlNodeList with a given backing list.    * Does not copy the list.    */
specifier|public
specifier|static
name|SqlNodeList
name|of
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|SqlNodeList
argument_list|(
name|pos
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|// List, Collection and Iterable methods
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|==
name|o
operator|||
name|o
operator|instanceof
name|SqlNodeList
operator|&&
name|list
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SqlNodeList
operator|)
name|o
operator|)
operator|.
name|list
argument_list|)
operator|||
name|o
operator|instanceof
name|List
operator|&&
name|list
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|list
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|SqlNode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|SqlNode
argument_list|>
name|listIterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|listIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|SqlNode
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|listIterator
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
return|return
name|list
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|get
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|set
parameter_list|(
name|int
name|n
parameter_list|,
name|SqlNode
name|node
parameter_list|)
block|{
return|return
name|list
operator|.
name|set
argument_list|(
name|n
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|list
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|list
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|list
operator|.
name|indexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|list
operator|.
name|lastIndexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nonnull
name|Object
index|[]
name|toArray
parameter_list|()
block|{
comment|// Per JDK specification, must return an Object[] not SqlNode[]; see e.g.
comment|// https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652
return|return
name|list
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nonnull
argument_list|<
name|T
argument_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
name|list
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
return|return
name|list
operator|.
name|add
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|SqlNode
name|element
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|list
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|list
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|list
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|list
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|list
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|// SqlNodeList-specific methods
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNodeList
name|clone
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|SqlWriter
operator|.
name|FrameTypeEnum
name|frameType
init|=
operator|(
name|leftPrec
operator|>
literal|0
operator|||
name|rightPrec
operator|>
literal|0
operator|)
condition|?
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|PARENTHESES
else|:
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|SIMPLE
decl_stmt|;
name|writer
operator|.
name|list
argument_list|(
name|frameType
argument_list|,
name|SqlWriter
operator|.
name|COMMA
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
name|void
name|commaList
parameter_list|(
name|SqlWriter
name|writer
parameter_list|)
block|{
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
name|void
name|andOrList
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlBinaryOperator
name|sepOp
parameter_list|)
block|{
name|writer
operator|.
name|list
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|WHERE_LIST
argument_list|,
name|sepOp
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
for|for
control|(
name|SqlNode
name|child
range|:
name|list
control|)
block|{
name|child
operator|.
name|validate
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalsDeep
parameter_list|(
name|SqlNode
name|node
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|SqlNodeList
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
name|SqlNodeList
name|that
init|=
operator|(
name|SqlNodeList
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|size
argument_list|()
operator|!=
name|that
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|thisChild
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|thatChild
init|=
name|that
operator|.
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|thisChild
operator|.
name|equalsDeep
argument_list|(
name|thatChild
argument_list|,
name|litmus
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
return|return
name|litmus
operator|.
name|succeed
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isEmptyList
parameter_list|(
specifier|final
name|SqlNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|instanceof
name|SqlNodeList
operator|&&
operator|(
operator|(
name|SqlNodeList
operator|)
name|node
operator|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|SqlNodeList
name|of
parameter_list|(
name|SqlNode
name|node1
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node1
argument_list|)
expr_stmt|;
return|return
operator|new
name|SqlNodeList
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNodeList
name|of
parameter_list|(
name|SqlNode
name|node1
parameter_list|,
name|SqlNode
name|node2
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
return|return
operator|new
name|SqlNodeList
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNodeList
name|of
parameter_list|(
name|SqlNode
name|node1
parameter_list|,
name|SqlNode
name|node2
parameter_list|,
name|SqlNode
modifier|...
name|nodes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|length
operator|+
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|list
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
operator|new
name|SqlNodeList
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|,
name|list
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateExpr
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
comment|// While a SqlNodeList is not always a valid expression, this
comment|// implementation makes that assumption. It just validates the members
comment|// of the list.
comment|//
comment|// One example where this is valid is the IN operator. The expression
comment|//
comment|//    empno IN (10, 20)
comment|//
comment|// results in a call with operands
comment|//
comment|//    {  SqlIdentifier({"empno"}),
comment|//       SqlNodeList(SqlLiteral(10), SqlLiteral(20))  }
for|for
control|(
name|SqlNode
name|node
range|:
name|list
control|)
block|{
name|node
operator|.
name|validateExpr
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

