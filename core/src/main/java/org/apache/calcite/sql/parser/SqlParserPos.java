begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * SqlParserPos represents the position of a parsed token within SQL statement  * text.  */
end_comment

begin_class
specifier|public
class|class
name|SqlParserPos
implements|implements
name|Serializable
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * SqlParserPos representing line one, character one. Use this if the node    * doesn't correspond to a position in piece of SQL text.    */
specifier|public
specifier|static
specifier|final
name|SqlParserPos
name|ZERO
init|=
operator|new
name|SqlParserPos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|int
name|lineNumber
decl_stmt|;
specifier|private
specifier|final
name|int
name|columnNumber
decl_stmt|;
specifier|private
specifier|final
name|int
name|endLineNumber
decl_stmt|;
specifier|private
specifier|final
name|int
name|endColumnNumber
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a new parser position.    */
specifier|public
name|SqlParserPos
parameter_list|(
name|int
name|lineNumber
parameter_list|,
name|int
name|columnNumber
parameter_list|)
block|{
name|this
operator|.
name|lineNumber
operator|=
name|lineNumber
expr_stmt|;
name|this
operator|.
name|columnNumber
operator|=
name|columnNumber
expr_stmt|;
name|this
operator|.
name|endLineNumber
operator|=
name|lineNumber
expr_stmt|;
name|this
operator|.
name|endColumnNumber
operator|=
name|columnNumber
expr_stmt|;
block|}
comment|/**    * Creates a new parser range.    */
specifier|public
name|SqlParserPos
parameter_list|(
name|int
name|startLineNumber
parameter_list|,
name|int
name|startColumnNumber
parameter_list|,
name|int
name|endLineNumber
parameter_list|,
name|int
name|endColumnNumber
parameter_list|)
block|{
name|this
operator|.
name|lineNumber
operator|=
name|startLineNumber
expr_stmt|;
name|this
operator|.
name|columnNumber
operator|=
name|startColumnNumber
expr_stmt|;
name|this
operator|.
name|endLineNumber
operator|=
name|endLineNumber
expr_stmt|;
name|this
operator|.
name|endColumnNumber
operator|=
name|endColumnNumber
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|lineNumber
argument_list|,
name|columnNumber
argument_list|,
name|endLineNumber
argument_list|,
name|endColumnNumber
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
operator|||
name|o
operator|instanceof
name|SqlParserPos
operator|&&
name|this
operator|.
name|lineNumber
operator|==
operator|(
operator|(
name|SqlParserPos
operator|)
name|o
operator|)
operator|.
name|lineNumber
operator|&&
name|this
operator|.
name|columnNumber
operator|==
operator|(
operator|(
name|SqlParserPos
operator|)
name|o
operator|)
operator|.
name|columnNumber
operator|&&
name|this
operator|.
name|endLineNumber
operator|==
operator|(
operator|(
name|SqlParserPos
operator|)
name|o
operator|)
operator|.
name|endLineNumber
operator|&&
name|this
operator|.
name|endColumnNumber
operator|==
operator|(
operator|(
name|SqlParserPos
operator|)
name|o
operator|)
operator|.
name|endColumnNumber
return|;
block|}
comment|/**    * @return 1-based starting line number    */
specifier|public
name|int
name|getLineNum
parameter_list|()
block|{
return|return
name|lineNumber
return|;
block|}
comment|/**    * @return 1-based starting column number    */
specifier|public
name|int
name|getColumnNum
parameter_list|()
block|{
return|return
name|columnNumber
return|;
block|}
comment|/**    * @return 1-based end line number (same as starting line number if the    * ParserPos is a point, not a range)    */
specifier|public
name|int
name|getEndLineNum
parameter_list|()
block|{
return|return
name|endLineNumber
return|;
block|}
comment|/**    * @return 1-based end column number (same as starting column number if the    * ParserPos is a point, not a range)    */
specifier|public
name|int
name|getEndColumnNum
parameter_list|()
block|{
return|return
name|endColumnNumber
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|RESOURCE
operator|.
name|parserContext
argument_list|(
name|lineNumber
argument_list|,
name|columnNumber
argument_list|)
operator|.
name|str
argument_list|()
return|;
block|}
comment|/**    * Combines this parser position with another to create a    * position that spans from the first point in the first to the last point    * in the other.    */
specifier|public
name|SqlParserPos
name|plus
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
operator|new
name|SqlParserPos
argument_list|(
name|getLineNum
argument_list|()
argument_list|,
name|getColumnNum
argument_list|()
argument_list|,
name|pos
operator|.
name|getEndLineNum
argument_list|()
argument_list|,
name|pos
operator|.
name|getEndColumnNum
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Combines this parser position with an array of positions to create a    * position that spans from the first point in the first to the last point    * in the other.    */
specifier|public
name|SqlParserPos
name|plusAll
parameter_list|(
name|SqlNode
index|[]
name|nodes
parameter_list|)
block|{
return|return
name|plusAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodes
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Combines this parser position with a list of positions.    */
specifier|public
name|SqlParserPos
name|plusAll
parameter_list|(
name|Collection
argument_list|<
name|SqlNode
argument_list|>
name|nodeList
parameter_list|)
block|{
name|int
name|line
init|=
name|getLineNum
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|getColumnNum
argument_list|()
decl_stmt|;
name|int
name|endLine
init|=
name|getEndLineNum
argument_list|()
decl_stmt|;
name|int
name|endColumn
init|=
name|getEndColumnNum
argument_list|()
decl_stmt|;
return|return
name|sum
argument_list|(
name|toPos
argument_list|(
name|nodeList
argument_list|)
argument_list|,
name|line
argument_list|,
name|column
argument_list|,
name|endLine
argument_list|,
name|endColumn
argument_list|)
return|;
block|}
comment|/**    * Combines the parser positions of an array of nodes to create a position    * which spans from the beginning of the first to the end of the last.    */
specifier|public
specifier|static
name|SqlParserPos
name|sum
parameter_list|(
name|SqlNode
index|[]
name|nodes
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|SqlParserPos
argument_list|>
name|poses
init|=
name|toPos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodes
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|sum
argument_list|(
name|poses
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|SqlParserPos
argument_list|>
name|toPos
parameter_list|(
name|Iterable
argument_list|<
name|SqlNode
argument_list|>
name|nodes
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|nodes
argument_list|,
operator|new
name|Function
argument_list|<
name|SqlNode
argument_list|,
name|SqlParserPos
argument_list|>
argument_list|()
block|{
specifier|public
name|SqlParserPos
name|apply
parameter_list|(
name|SqlNode
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getParserPosition
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Combines the parser positions of a list of nodes to create a position    * which spans from the beginning of the first to the end of the last.    */
specifier|public
specifier|static
name|SqlParserPos
name|sum
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|nodes
parameter_list|)
block|{
return|return
name|sum
argument_list|(
name|nodes
operator|.
name|toArray
argument_list|(
operator|new
name|SqlNode
index|[
name|nodes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Combines an array of parser positions to create a position which spans    * from the beginning of the first to the end of the last.    */
specifier|public
specifier|static
name|SqlParserPos
name|sum
parameter_list|(
name|Iterable
argument_list|<
name|SqlParserPos
argument_list|>
name|poses
parameter_list|)
block|{
return|return
name|sum
argument_list|(
name|poses
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Computes the parser position which is the sum of an array of parser    * positions and of a parser position represented by (line, column, endLine,    * endColumn).    *    * @param poses     Array of parser positions    * @param line      Start line    * @param column    Start column    * @param endLine   End line    * @param endColumn End column    * @return Sum of parser positions    */
specifier|private
specifier|static
name|SqlParserPos
name|sum
parameter_list|(
name|Iterable
argument_list|<
name|SqlParserPos
argument_list|>
name|poses
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|endLine
parameter_list|,
name|int
name|endColumn
parameter_list|)
block|{
name|int
name|testLine
decl_stmt|;
name|int
name|testColumn
decl_stmt|;
for|for
control|(
name|SqlParserPos
name|pos
range|:
name|poses
control|)
block|{
if|if
condition|(
name|pos
operator|==
literal|null
operator|||
name|pos
operator|.
name|equals
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|testLine
operator|=
name|pos
operator|.
name|getLineNum
argument_list|()
expr_stmt|;
name|testColumn
operator|=
name|pos
operator|.
name|getColumnNum
argument_list|()
expr_stmt|;
if|if
condition|(
name|testLine
operator|<
name|line
operator|||
name|testLine
operator|==
name|line
operator|&&
name|testColumn
operator|<
name|column
condition|)
block|{
name|line
operator|=
name|testLine
expr_stmt|;
name|column
operator|=
name|testColumn
expr_stmt|;
block|}
name|testLine
operator|=
name|pos
operator|.
name|getEndLineNum
argument_list|()
expr_stmt|;
name|testColumn
operator|=
name|pos
operator|.
name|getEndColumnNum
argument_list|()
expr_stmt|;
if|if
condition|(
name|testLine
operator|>
name|endLine
operator|||
name|testLine
operator|==
name|endLine
operator|&&
name|testColumn
operator|>
name|endColumn
condition|)
block|{
name|endLine
operator|=
name|testLine
expr_stmt|;
name|endColumn
operator|=
name|testColumn
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SqlParserPos
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
name|endLine
argument_list|,
name|endColumn
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|overlaps
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|startsBefore
argument_list|(
name|pos
argument_list|)
operator|&&
name|endsAfter
argument_list|(
name|pos
argument_list|)
operator|||
name|pos
operator|.
name|startsBefore
argument_list|(
name|this
argument_list|)
operator|&&
name|pos
operator|.
name|endsAfter
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|startsBefore
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|lineNumber
operator|<
name|pos
operator|.
name|lineNumber
operator|||
name|lineNumber
operator|==
name|pos
operator|.
name|lineNumber
operator|&&
name|columnNumber
operator|<=
name|pos
operator|.
name|columnNumber
return|;
block|}
specifier|private
name|boolean
name|endsAfter
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|endLineNumber
operator|>
name|pos
operator|.
name|endLineNumber
operator|||
name|endLineNumber
operator|==
name|pos
operator|.
name|endLineNumber
operator|&&
name|endColumnNumber
operator|>=
name|pos
operator|.
name|endColumnNumber
return|;
block|}
specifier|public
name|boolean
name|startsAt
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|lineNumber
operator|==
name|pos
operator|.
name|lineNumber
operator|&&
name|columnNumber
operator|==
name|pos
operator|.
name|columnNumber
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlParserPos.java
end_comment

end_unit

