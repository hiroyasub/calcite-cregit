begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlBinaryOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperandCountRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|InferTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_comment
comment|/**  * Infix cast operator, "::", as used in PostgreSQL.  *  *<p>This operator is not enabled in the default operator table; it is  * registered for various dialects via {@link SqlLibraryOperators#INFIX_CAST}.  *  *<p>The {@link #kind} is {@link SqlKind#CAST}, the same as the built-in  * {@code CAST} function, {@link SqlCastFunction}. Be sure to use {@code kind}  * rather than {@code instanceof} if you would like your code to apply to both  * operators.  *  *<p>Unlike {@code SqlCastFunction}, it can only be used for  * {@link org.apache.calcite.sql.SqlCall SqlCall};  * {@link org.apache.calcite.rex.RexCall RexCall} must use  * {@code SqlCastFunction}.  */
end_comment

begin_class
class|class
name|SqlCastOperator
extends|extends
name|SqlBinaryOperator
block|{
name|SqlCastOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"::"
argument_list|,
name|SqlKind
operator|.
name|CAST
argument_list|,
literal|94
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|InferTypes
operator|.
name|FIRST_KNOWN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|inferReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
return|return
name|SqlStdOperatorTable
operator|.
name|CAST
operator|.
name|inferReturnType
argument_list|(
name|opBinding
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
return|return
name|SqlStdOperatorTable
operator|.
name|CAST
operator|.
name|checkOperandTypes
argument_list|(
name|callBinding
argument_list|,
name|throwOnFailure
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|SqlStdOperatorTable
operator|.
name|CAST
operator|.
name|getOperandCountRange
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|SqlOperatorBinding
name|call
parameter_list|)
block|{
return|return
name|SqlStdOperatorTable
operator|.
name|CAST
operator|.
name|getMonotonicity
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
end_class

end_unit

