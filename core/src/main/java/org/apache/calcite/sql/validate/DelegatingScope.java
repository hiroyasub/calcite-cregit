begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|DynamicRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|StructKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|CustomColumnResolvingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * A scope which delegates all requests to its parent scope. Use this as a base  * class for defining nested scopes.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DelegatingScope
implements|implements
name|SqlValidatorScope
block|{
comment|//~ Instance fields --------------------------------------------------------
comment|/**    * Parent scope. This is where to look next to resolve an identifier; it is    * not always the parent object in the parse tree.    *    *<p>This is never null: at the top of the tree, it is an    * {@link EmptyScope}.    */
specifier|protected
specifier|final
name|SqlValidatorScope
name|parent
decl_stmt|;
specifier|protected
specifier|final
name|SqlValidatorImpl
name|validator
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a<code>DelegatingScope</code>.    *    * @param parent Parent scope    */
name|DelegatingScope
parameter_list|(
name|SqlValidatorScope
name|parent
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
assert|assert
name|parent
operator|!=
literal|null
assert|;
name|this
operator|.
name|validator
operator|=
operator|(
name|SqlValidatorImpl
operator|)
name|parent
operator|.
name|getValidator
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|addChild
parameter_list|(
name|SqlValidatorNamespace
name|ns
parameter_list|,
name|String
name|alias
parameter_list|,
name|boolean
name|nullable
parameter_list|)
block|{
comment|// By default, you cannot add to a scope. Derived classes can
comment|// override.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|resolve
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|SqlNameMatcher
name|nameMatcher
parameter_list|,
name|boolean
name|deep
parameter_list|,
name|Resolved
name|resolved
parameter_list|)
block|{
name|parent
operator|.
name|resolve
argument_list|(
name|names
argument_list|,
name|nameMatcher
argument_list|,
name|deep
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
comment|/** If a record type allows implicit references to fields, recursively looks    * into the fields. Otherwise returns immediately. */
name|void
name|resolveInNamespace
parameter_list|(
name|SqlValidatorNamespace
name|ns
parameter_list|,
name|boolean
name|nullable
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|SqlNameMatcher
name|nameMatcher
parameter_list|,
name|Path
name|path
parameter_list|,
name|Resolved
name|resolved
parameter_list|)
block|{
if|if
condition|(
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resolved
operator|.
name|found
argument_list|(
name|ns
argument_list|,
name|nullable
argument_list|,
name|this
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|RelDataType
name|rowType
init|=
name|ns
operator|.
name|getRowType
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowType
operator|.
name|isStruct
argument_list|()
condition|)
block|{
name|SqlValidatorTable
name|validatorTable
init|=
name|ns
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|validatorTable
operator|instanceof
name|Prepare
operator|.
name|PreparingTable
condition|)
block|{
name|Table
name|t
init|=
operator|(
operator|(
name|Prepare
operator|.
name|PreparingTable
operator|)
name|validatorTable
operator|)
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|CustomColumnResolvingTable
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
operator|(
operator|(
name|CustomColumnResolvingTable
operator|)
name|t
operator|)
operator|.
name|resolveColumn
argument_list|(
name|rowType
argument_list|,
name|validator
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|names
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|remainder
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|SqlValidatorNamespace
name|ns2
init|=
operator|new
name|FieldNamespace
argument_list|(
name|validator
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Step
name|path2
init|=
name|path
operator|.
name|plus
argument_list|(
name|rowType
argument_list|,
name|field
operator|.
name|getIndex
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|StructKind
operator|.
name|FULLY_QUALIFIED
argument_list|)
decl_stmt|;
name|resolveInNamespace
argument_list|(
name|ns2
argument_list|,
name|nullable
argument_list|,
name|remainder
argument_list|,
name|nameMatcher
argument_list|,
name|path2
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
specifier|final
name|String
name|name
init|=
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|field0
init|=
name|nameMatcher
operator|.
name|field
argument_list|(
name|rowType
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|field0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SqlValidatorNamespace
name|ns2
init|=
name|ns
operator|.
name|lookupChild
argument_list|(
name|field0
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Step
name|path2
init|=
name|path
operator|.
name|plus
argument_list|(
name|rowType
argument_list|,
name|field0
operator|.
name|getIndex
argument_list|()
argument_list|,
name|field0
operator|.
name|getName
argument_list|()
argument_list|,
name|StructKind
operator|.
name|FULLY_QUALIFIED
argument_list|)
decl_stmt|;
name|resolveInNamespace
argument_list|(
name|ns2
argument_list|,
name|nullable
argument_list|,
name|names
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|nameMatcher
argument_list|,
name|path2
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getStructKind
argument_list|()
condition|)
block|{
case|case
name|PEEK_FIELDS
case|:
case|case
name|PEEK_FIELDS_DEFAULT
case|:
case|case
name|PEEK_FIELDS_NO_EXPAND
case|:
specifier|final
name|Step
name|path2
init|=
name|path
operator|.
name|plus
argument_list|(
name|rowType
argument_list|,
name|field
operator|.
name|getIndex
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getStructKind
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidatorNamespace
name|ns2
init|=
name|ns
operator|.
name|lookupChild
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|resolveInNamespace
argument_list|(
name|ns2
argument_list|,
name|nullable
argument_list|,
name|names
argument_list|,
name|nameMatcher
argument_list|,
name|path2
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|addColumnNames
parameter_list|(
name|SqlValidatorNamespace
name|ns
parameter_list|,
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|colNames
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
try|try
block|{
name|rowType
operator|=
name|ns
operator|.
name|getRowType
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
comment|// namespace is not good - bail out.
return|return;
block|}
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
operator|new
name|SqlMonikerImpl
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|SqlMonikerType
operator|.
name|COLUMN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|findAllColumnNames
parameter_list|(
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|result
parameter_list|)
block|{
name|parent
operator|.
name|findAllColumnNames
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|findAliases
parameter_list|(
name|Collection
argument_list|<
name|SqlMoniker
argument_list|>
name|result
parameter_list|)
block|{
name|parent
operator|.
name|findAliases
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|Pair
argument_list|<
name|String
argument_list|,
name|SqlValidatorNamespace
argument_list|>
name|findQualifyingTableName
parameter_list|(
name|String
name|columnName
parameter_list|,
name|SqlNode
name|ctx
parameter_list|)
block|{
comment|//noinspection deprecation
return|return
name|parent
operator|.
name|findQualifyingTableName
argument_list|(
name|columnName
argument_list|,
name|ctx
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ScopeChild
argument_list|>
name|findQualifyingTableNames
parameter_list|(
name|String
name|columnName
parameter_list|,
name|SqlNode
name|ctx
parameter_list|,
name|SqlNameMatcher
name|nameMatcher
parameter_list|)
block|{
return|return
name|parent
operator|.
name|findQualifyingTableNames
argument_list|(
name|columnName
argument_list|,
name|ctx
argument_list|,
name|nameMatcher
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|resolveColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlNode
name|ctx
parameter_list|)
block|{
return|return
name|parent
operator|.
name|resolveColumn
argument_list|(
name|name
argument_list|,
name|ctx
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|nullifyType
parameter_list|(
name|SqlNode
name|node
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
return|return
name|parent
operator|.
name|nullifyType
argument_list|(
name|node
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|SqlValidatorNamespace
name|getTableNamespace
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getTableNamespace
argument_list|(
name|names
argument_list|)
return|;
block|}
specifier|public
name|void
name|resolveTable
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|SqlNameMatcher
name|nameMatcher
parameter_list|,
name|Path
name|path
parameter_list|,
name|Resolved
name|resolved
parameter_list|)
block|{
name|parent
operator|.
name|resolveTable
argument_list|(
name|names
argument_list|,
name|nameMatcher
argument_list|,
name|path
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlValidatorScope
name|getOperandScope
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|instanceof
name|SqlSelect
condition|)
block|{
return|return
name|validator
operator|.
name|getSelectScope
argument_list|(
operator|(
name|SqlSelect
operator|)
name|call
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|SqlValidator
name|getValidator
parameter_list|()
block|{
return|return
name|validator
return|;
block|}
comment|/**    * Converts an identifier into a fully-qualified identifier. For example,    * the "empno" in "select empno from emp natural join dept" becomes    * "emp.empno".    *    *<p>If the identifier cannot be resolved, throws. Never returns null.    */
specifier|public
name|SqlQualified
name|fullyQualify
parameter_list|(
name|SqlIdentifier
name|identifier
parameter_list|)
block|{
if|if
condition|(
name|identifier
operator|.
name|isStar
argument_list|()
condition|)
block|{
return|return
name|SqlQualified
operator|.
name|create
argument_list|(
name|this
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|identifier
argument_list|)
return|;
block|}
specifier|final
name|SqlIdentifier
name|previous
init|=
name|identifier
decl_stmt|;
specifier|final
name|SqlNameMatcher
name|nameMatcher
init|=
name|validator
operator|.
name|catalogReader
operator|.
name|nameMatcher
argument_list|()
decl_stmt|;
name|String
name|columnName
decl_stmt|;
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|final
name|SqlValidatorNamespace
name|namespace
decl_stmt|;
switch|switch
condition|(
name|identifier
operator|.
name|names
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
block|{
name|columnName
operator|=
name|identifier
operator|.
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScopeChild
argument_list|>
name|map
init|=
name|findQualifyingTableNames
argument_list|(
name|columnName
argument_list|,
name|identifier
argument_list|,
name|nameMatcher
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|map
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|nameMatcher
operator|.
name|isCaseSensitive
argument_list|()
condition|)
block|{
specifier|final
name|SqlNameMatcher
name|liberalMatcher
init|=
name|SqlNameMatchers
operator|.
name|liberal
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScopeChild
argument_list|>
name|map2
init|=
name|findQualifyingTableNames
argument_list|(
name|columnName
argument_list|,
name|identifier
argument_list|,
name|liberalMatcher
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScopeChild
name|entry
range|:
name|map2
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|liberalMatcher
operator|.
name|field
argument_list|(
name|entry
operator|.
name|namespace
operator|.
name|getRowType
argument_list|()
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|identifier
argument_list|,
name|RESOURCE
operator|.
name|columnNotFoundDidYouMean
argument_list|(
name|columnName
argument_list|,
name|Util
operator|.
name|sepList
argument_list|(
name|list
argument_list|,
literal|"', '"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|identifier
argument_list|,
name|RESOURCE
operator|.
name|columnNotFound
argument_list|(
name|columnName
argument_list|)
argument_list|)
throw|;
case|case
literal|1
case|:
name|tableName
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|namespace
operator|=
name|map
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|namespace
expr_stmt|;
break|break;
default|default:
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|identifier
argument_list|,
name|RESOURCE
operator|.
name|columnAmbiguous
argument_list|(
name|columnName
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|ResolvedImpl
name|resolved
init|=
operator|new
name|ResolvedImpl
argument_list|()
decl_stmt|;
name|resolveInNamespace
argument_list|(
name|namespace
argument_list|,
literal|false
argument_list|,
name|identifier
operator|.
name|names
argument_list|,
name|nameMatcher
argument_list|,
name|Path
operator|.
name|EMPTY
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
specifier|final
name|RelDataTypeField
name|field
init|=
name|nameMatcher
operator|.
name|field
argument_list|(
name|namespace
operator|.
name|getRowType
argument_list|()
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hasAmbiguousField
argument_list|(
name|namespace
operator|.
name|getRowType
argument_list|()
argument_list|,
name|field
argument_list|,
name|columnName
argument_list|,
name|nameMatcher
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|identifier
argument_list|,
name|RESOURCE
operator|.
name|columnAmbiguous
argument_list|(
name|columnName
argument_list|)
argument_list|)
throw|;
block|}
name|columnName
operator|=
name|field
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// use resolved field name
block|}
comment|// todo: do implicit collation here
specifier|final
name|SqlParserPos
name|pos
init|=
name|identifier
operator|.
name|getParserPosition
argument_list|()
decl_stmt|;
name|identifier
operator|=
operator|new
name|SqlIdentifier
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|tableName
argument_list|,
name|columnName
argument_list|)
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fall through
default|default:
block|{
name|SqlValidatorNamespace
name|fromNs
init|=
literal|null
decl_stmt|;
name|Path
name|fromPath
init|=
literal|null
decl_stmt|;
name|RelDataType
name|fromRowType
init|=
literal|null
decl_stmt|;
specifier|final
name|ResolvedImpl
name|resolved
init|=
operator|new
name|ResolvedImpl
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|identifier
operator|.
name|names
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|size
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|SqlIdentifier
name|prefix
init|=
name|identifier
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|resolved
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resolve
argument_list|(
name|prefix
operator|.
name|names
argument_list|,
name|nameMatcher
argument_list|,
literal|false
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolved
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Resolve
name|resolve
init|=
name|resolved
operator|.
name|only
argument_list|()
decl_stmt|;
name|fromNs
operator|=
name|resolve
operator|.
name|namespace
expr_stmt|;
name|fromPath
operator|=
name|resolve
operator|.
name|path
expr_stmt|;
name|fromRowType
operator|=
name|resolve
operator|.
name|rowType
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// Look for a table alias that is the wrong case.
if|if
condition|(
name|nameMatcher
operator|.
name|isCaseSensitive
argument_list|()
condition|)
block|{
specifier|final
name|SqlNameMatcher
name|liberalMatcher
init|=
name|SqlNameMatchers
operator|.
name|liberal
argument_list|()
decl_stmt|;
name|resolved
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resolve
argument_list|(
name|prefix
operator|.
name|names
argument_list|,
name|liberalMatcher
argument_list|,
literal|false
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolved
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Step
name|lastStep
init|=
name|Util
operator|.
name|last
argument_list|(
name|resolved
operator|.
name|only
argument_list|()
operator|.
name|path
operator|.
name|steps
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|prefix
argument_list|,
name|RESOURCE
operator|.
name|tableNameNotFoundDidYouMean
argument_list|(
name|prefix
operator|.
name|toString
argument_list|()
argument_list|,
name|lastStep
operator|.
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|fromNs
operator|==
literal|null
operator|||
name|fromNs
operator|instanceof
name|SchemaNamespace
condition|)
block|{
comment|// Look for a column not qualified by a table alias.
name|columnName
operator|=
name|identifier
operator|.
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScopeChild
argument_list|>
name|map
init|=
name|findQualifyingTableNames
argument_list|(
name|columnName
argument_list|,
name|identifier
argument_list|,
name|nameMatcher
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|map
operator|.
name|size
argument_list|()
condition|)
block|{
default|default:
specifier|final
name|SqlIdentifier
name|prefix1
init|=
name|identifier
operator|.
name|skipLast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|prefix1
argument_list|,
name|RESOURCE
operator|.
name|tableNameNotFound
argument_list|(
name|prefix1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
case|case
literal|1
case|:
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ScopeChild
argument_list|>
name|entry
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|tableName2
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|fromNs
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|namespace
expr_stmt|;
name|fromPath
operator|=
name|Path
operator|.
name|EMPTY
expr_stmt|;
comment|// Adding table name is for RecordType column with StructKind.PEEK_FIELDS or
comment|// StructKind.PEEK_FIELDS only. Access to a field in a RecordType column of
comment|// other StructKind should always be qualified with table name.
specifier|final
name|RelDataTypeField
name|field
init|=
name|nameMatcher
operator|.
name|field
argument_list|(
name|fromNs
operator|.
name|getRowType
argument_list|()
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getStructKind
argument_list|()
condition|)
block|{
case|case
name|PEEK_FIELDS
case|:
case|case
name|PEEK_FIELDS_DEFAULT
case|:
case|case
name|PEEK_FIELDS_NO_EXPAND
case|:
name|columnName
operator|=
name|field
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// use resolved field name
name|resolve
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|tableName2
argument_list|)
argument_list|,
name|nameMatcher
argument_list|,
literal|false
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolved
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Resolve
name|resolve
init|=
name|resolved
operator|.
name|only
argument_list|()
decl_stmt|;
name|fromNs
operator|=
name|resolve
operator|.
name|namespace
expr_stmt|;
name|fromPath
operator|=
name|resolve
operator|.
name|path
expr_stmt|;
name|fromRowType
operator|=
name|resolve
operator|.
name|rowType
argument_list|()
expr_stmt|;
name|identifier
operator|=
name|identifier
operator|.
name|setName
argument_list|(
literal|0
argument_list|,
name|columnName
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|tableName2
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
operator|++
name|size
expr_stmt|;
block|}
break|break;
default|default:
comment|// Throw an error if the table was not found.
comment|// If one or more of the child namespaces allows peeking
comment|// (e.g. if they are Phoenix column families) then we relax the SQL
comment|// standard requirement that record fields are qualified by table alias.
specifier|final
name|SqlIdentifier
name|prefix
init|=
name|identifier
operator|.
name|skipLast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|prefix
argument_list|,
name|RESOURCE
operator|.
name|tableNameNotFound
argument_list|(
name|prefix
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// If a table alias is part of the identifier, make sure that the table
comment|// alias uses the same case as it was defined. For example, in
comment|//
comment|//    SELECT e.empno FROM Emp as E
comment|//
comment|// change "e.empno" to "E.empno".
if|if
condition|(
name|fromNs
operator|.
name|getEnclosingNode
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|this
operator|instanceof
name|MatchRecognizeScope
operator|)
condition|)
block|{
name|String
name|alias
init|=
name|SqlValidatorUtil
operator|.
name|getAlias
argument_list|(
name|fromNs
operator|.
name|getEnclosingNode
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
operator|&&
name|i
operator|>
literal|0
operator|&&
operator|!
name|alias
operator|.
name|equals
argument_list|(
name|identifier
operator|.
name|names
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|identifier
operator|=
name|identifier
operator|.
name|setName
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPath
operator|.
name|stepCount
argument_list|()
operator|>
literal|1
condition|)
block|{
assert|assert
name|fromRowType
operator|!=
literal|null
assert|;
for|for
control|(
name|Step
name|p
range|:
name|fromPath
operator|.
name|steps
argument_list|()
control|)
block|{
name|fromRowType
operator|=
name|fromRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|i
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
specifier|final
name|SqlIdentifier
name|suffix
init|=
name|identifier
operator|.
name|getComponent
argument_list|(
name|i
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|resolved
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resolveInNamespace
argument_list|(
name|fromNs
argument_list|,
literal|false
argument_list|,
name|suffix
operator|.
name|names
argument_list|,
name|nameMatcher
argument_list|,
name|Path
operator|.
name|EMPTY
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path
decl_stmt|;
switch|switch
condition|(
name|resolved
operator|.
name|count
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// Maybe the last component was correct, just wrong case
if|if
condition|(
name|nameMatcher
operator|.
name|isCaseSensitive
argument_list|()
condition|)
block|{
name|SqlNameMatcher
name|liberalMatcher
init|=
name|SqlNameMatchers
operator|.
name|liberal
argument_list|()
decl_stmt|;
name|resolved
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resolveInNamespace
argument_list|(
name|fromNs
argument_list|,
literal|false
argument_list|,
name|suffix
operator|.
name|names
argument_list|,
name|liberalMatcher
argument_list|,
name|Path
operator|.
name|EMPTY
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolved
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|k
init|=
name|size
operator|-
literal|1
decl_stmt|;
specifier|final
name|SqlIdentifier
name|prefix
init|=
name|identifier
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|final
name|SqlIdentifier
name|suffix3
init|=
name|identifier
operator|.
name|getComponent
argument_list|(
name|i
argument_list|,
name|k
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Step
name|step
init|=
name|Util
operator|.
name|last
argument_list|(
name|resolved
operator|.
name|resolves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|path
operator|.
name|steps
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|suffix3
argument_list|,
name|RESOURCE
operator|.
name|columnNotFoundInTableDidYouMean
argument_list|(
name|suffix3
operator|.
name|toString
argument_list|()
argument_list|,
name|prefix
operator|.
name|toString
argument_list|()
argument_list|,
name|step
operator|.
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Find the shortest suffix that also fails. Suppose we cannot resolve
comment|// "a.b.c"; we find we cannot resolve "a.b" but can resolve "a". So,
comment|// the error will be "Column 'a.b' not found".
name|int
name|k
init|=
name|size
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|k
operator|>
name|i
condition|;
operator|--
name|k
control|)
block|{
name|SqlIdentifier
name|suffix2
init|=
name|identifier
operator|.
name|getComponent
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|resolved
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resolveInNamespace
argument_list|(
name|fromNs
argument_list|,
literal|false
argument_list|,
name|suffix2
operator|.
name|names
argument_list|,
name|nameMatcher
argument_list|,
name|Path
operator|.
name|EMPTY
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolved
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
specifier|final
name|SqlIdentifier
name|prefix
init|=
name|identifier
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|final
name|SqlIdentifier
name|suffix3
init|=
name|identifier
operator|.
name|getComponent
argument_list|(
name|i
argument_list|,
name|k
operator|+
literal|1
argument_list|)
decl_stmt|;
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|suffix3
argument_list|,
name|RESOURCE
operator|.
name|columnNotFoundInTable
argument_list|(
name|suffix3
operator|.
name|toString
argument_list|()
argument_list|,
name|prefix
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
case|case
literal|1
case|:
name|path
operator|=
name|resolved
operator|.
name|only
argument_list|()
operator|.
name|path
expr_stmt|;
break|break;
default|default:
specifier|final
name|Comparator
argument_list|<
name|Resolve
argument_list|>
name|c
init|=
operator|new
name|Comparator
argument_list|<
name|Resolve
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Resolve
name|o1
parameter_list|,
name|Resolve
name|o2
parameter_list|)
block|{
comment|// Name resolution that uses fewer implicit steps wins.
name|int
name|c
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|worstKind
argument_list|(
name|o1
operator|.
name|path
argument_list|)
argument_list|,
name|worstKind
argument_list|(
name|o2
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
comment|// Shorter path wins
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|path
operator|.
name|stepCount
argument_list|()
argument_list|,
name|o2
operator|.
name|path
operator|.
name|stepCount
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|worstKind
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|int
name|kind
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|path
operator|.
name|steps
argument_list|()
control|)
block|{
name|kind
operator|=
name|Math
operator|.
name|max
argument_list|(
name|kind
argument_list|,
name|step
operator|.
name|kind
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|kind
return|;
block|}
block|}
decl_stmt|;
name|resolved
operator|.
name|resolves
operator|.
name|sort
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|compare
argument_list|(
name|resolved
operator|.
name|resolves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|resolved
operator|.
name|resolves
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|suffix
argument_list|,
name|RESOURCE
operator|.
name|columnAmbiguous
argument_list|(
name|suffix
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|path
operator|=
name|resolved
operator|.
name|resolves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|path
expr_stmt|;
block|}
comment|// Normalize case to match definition, make elided fields explicit,
comment|// and check that references to dynamic stars ("**") are unambiguous.
name|int
name|k
init|=
name|i
decl_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|path
operator|.
name|steps
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|identifier
operator|.
name|names
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|step
operator|.
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|identifier
argument_list|,
name|RESOURCE
operator|.
name|columnNotFound
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|RelDataTypeField
name|field0
init|=
name|step
operator|.
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|step
operator|.
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|field0
operator|.
name|getName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|step
operator|.
name|kind
condition|)
block|{
case|case
name|PEEK_FIELDS
case|:
case|case
name|PEEK_FIELDS_DEFAULT
case|:
case|case
name|PEEK_FIELDS_NO_EXPAND
case|:
name|identifier
operator|=
name|identifier
operator|.
name|add
argument_list|(
name|k
argument_list|,
name|fieldName
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
operator|!
name|fieldName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|identifier
operator|=
name|identifier
operator|.
name|setName
argument_list|(
name|k
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAmbiguousField
argument_list|(
name|step
operator|.
name|rowType
argument_list|,
name|field0
argument_list|,
name|name
argument_list|,
name|nameMatcher
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|identifier
argument_list|,
name|RESOURCE
operator|.
name|columnAmbiguous
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
operator|++
name|k
expr_stmt|;
block|}
comment|// Multiple name components may have been resolved as one step by
comment|// CustomResolvingTable.
if|if
condition|(
name|identifier
operator|.
name|names
operator|.
name|size
argument_list|()
operator|>
name|k
condition|)
block|{
name|identifier
operator|=
name|identifier
operator|.
name|getComponent
argument_list|(
literal|0
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
comment|// Simplify overqualified identifiers.
comment|// For example, schema.emp.deptno becomes emp.deptno.
comment|//
comment|// It is safe to convert schema.emp or database.schema.emp to emp
comment|// because it would not have resolved if the FROM item had an alias. The
comment|// following query is invalid:
comment|//   SELECT schema.emp.deptno FROM schema.emp AS e
name|identifier
operator|=
name|identifier
operator|.
name|getComponent
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|identifier
operator|.
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|previous
operator|.
name|equals
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
name|validator
operator|.
name|setOriginal
argument_list|(
name|identifier
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
return|return
name|SqlQualified
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|i
argument_list|,
name|fromNs
argument_list|,
name|identifier
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
name|void
name|validateExpr
parameter_list|(
name|SqlNode
name|expr
parameter_list|)
block|{
comment|// Do not delegate to parent. An expression valid in this scope may not
comment|// be valid in the parent scope.
block|}
specifier|public
name|SqlWindow
name|lookupWindow
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|lookupWindow
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|SqlNode
name|expr
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getMonotonicity
argument_list|(
name|expr
argument_list|)
return|;
block|}
specifier|public
name|SqlNodeList
name|getOrderList
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getOrderList
argument_list|()
return|;
block|}
comment|/** Returns whether {@code rowType} contains more than one star column or    * fields with the same name, which implies ambiguous column. */
specifier|private
name|boolean
name|hasAmbiguousField
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeField
name|field
parameter_list|,
name|String
name|columnName
parameter_list|,
name|SqlNameMatcher
name|nameMatcher
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|isDynamicStar
argument_list|()
operator|&&
operator|!
name|DynamicRecordType
operator|.
name|isDynamicStarColName
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|possibleStar
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
if|if
condition|(
name|possibleStar
operator|.
name|isDynamicStar
argument_list|()
condition|)
block|{
if|if
condition|(
operator|++
name|count
operator|>
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// check if there are fields with the same name
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|f
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
if|if
condition|(
name|Util
operator|.
name|matches
argument_list|(
name|nameMatcher
operator|.
name|isCaseSensitive
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|columnName
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns the parent scope of this<code>DelegatingScope</code>.    */
specifier|public
name|SqlValidatorScope
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
block|}
end_class

begin_comment
comment|// End DelegatingScope.java
end_comment

end_unit

