begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/** Type that applies generic type to type parameters. */
end_comment

begin_class
specifier|abstract
class|class
name|ApplySqlType
extends|extends
name|AbstractSqlType
block|{
specifier|protected
specifier|final
name|ImmutableList
argument_list|<
name|?
extends|extends
name|RelDataType
argument_list|>
name|types
decl_stmt|;
name|ApplySqlType
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|boolean
name|isNullable
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|RelDataType
argument_list|>
name|types
parameter_list|)
block|{
name|super
argument_list|(
name|typeName
argument_list|,
name|isNullable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * {@inheritDoc}    *    *<p>Generate, for example, {@code MEASURE<INTEGER>}.    */
annotation|@
name|Override
specifier|protected
name|void
name|generateTypeString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|boolean
name|withDetail
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|typeName
argument_list|)
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|Ord
operator|.
name|forEach
argument_list|(
name|types
argument_list|,
parameter_list|(
name|type
parameter_list|,
name|i
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withDetail
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|type
operator|.
name|getFullTypeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

