begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Builder for {@link SqlParserPos}.  *  *<p>Because it is mutable, it is convenient for keeping track of the  * positions of the tokens that go into a non-terminal. It can be passed  * into methods, which can add the positions of tokens consumed to it.  *  *<p>Some patterns:  *  *<ul>  *<li>{@code final Span s;} declaration of a Span at the top of a production  *<li>{@code s = span();} initializes s to a Span that includes the token we  *   just saw; very often occurs immediately after the first token in the  *   production  *<li>{@code s.end(this);} adds the most recent token to span s and evaluates  *   to a SqlParserPosition that spans from beginning to end; commonly used  *   when making a call to a function  *<li>{@code s.pos()} returns a position spanning all tokens in the list  *<li>{@code s.add(node);} adds a SqlNode's parser position to a span  *<li>{@code s.addAll(nodeList);} adds several SqlNodes' parser positions to  *   a span  *<li>{@code s = Span.of();} initializes s to an empty Span, not even  *   including the most recent token; rarely used  *</ul>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Span
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|SqlParserPos
argument_list|>
name|posList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Use one of the {@link #of} methods. */
specifier|private
name|Span
parameter_list|()
block|{
block|}
comment|/** Creates an empty Span. */
specifier|public
specifier|static
name|Span
name|of
parameter_list|()
block|{
return|return
operator|new
name|Span
argument_list|()
return|;
block|}
comment|/** Creates a Span with one position. */
specifier|public
specifier|static
name|Span
name|of
parameter_list|(
name|SqlParserPos
name|p
parameter_list|)
block|{
return|return
operator|new
name|Span
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/** Creates a Span of one node. */
specifier|public
specifier|static
name|Span
name|of
parameter_list|(
name|SqlNode
name|n
parameter_list|)
block|{
return|return
operator|new
name|Span
argument_list|()
operator|.
name|add
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/** Creates a Span between two nodes. */
specifier|public
specifier|static
name|Span
name|of
parameter_list|(
name|SqlNode
name|n0
parameter_list|,
name|SqlNode
name|n1
parameter_list|)
block|{
return|return
operator|new
name|Span
argument_list|()
operator|.
name|add
argument_list|(
name|n0
argument_list|)
operator|.
name|add
argument_list|(
name|n1
argument_list|)
return|;
block|}
comment|/** Creates a Span of a list of nodes. */
specifier|public
specifier|static
name|Span
name|of
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|nodes
parameter_list|)
block|{
return|return
operator|new
name|Span
argument_list|()
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
return|;
block|}
comment|/** Creates a Span of a node list. */
specifier|public
specifier|static
name|Span
name|of
parameter_list|(
name|SqlNodeList
name|nodeList
parameter_list|)
block|{
comment|// SqlNodeList has its own position, so just that position, not all of the
comment|// constituent nodes.
return|return
operator|new
name|Span
argument_list|()
operator|.
name|add
argument_list|(
name|nodeList
argument_list|)
return|;
block|}
comment|/** Adds a node's position to the list,    * and returns this Span. */
specifier|public
name|Span
name|add
parameter_list|(
name|SqlNode
name|n
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|n
operator|.
name|getParserPosition
argument_list|()
argument_list|)
return|;
block|}
comment|/** Adds a node's position to the list if the node is not null,    * and returns this Span. */
specifier|public
name|Span
name|addIf
parameter_list|(
name|SqlNode
name|n
parameter_list|)
block|{
return|return
name|n
operator|==
literal|null
condition|?
name|this
else|:
name|add
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/** Adds a position to the list,    * and returns this Span. */
specifier|public
name|Span
name|add
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|posList
operator|.
name|add
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Adds the positions of a collection of nodes to the list,    * and returns this Span. */
specifier|public
name|Span
name|addAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|SqlNode
name|node
range|:
name|nodes
control|)
block|{
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/** Adds the position of the last token emitted by a parser to the list,    * and returns this Span. */
specifier|public
name|Span
name|add
parameter_list|(
name|SqlAbstractParserImpl
name|parser
parameter_list|)
block|{
try|try
block|{
specifier|final
name|SqlParserPos
name|pos
init|=
name|parser
operator|.
name|getPos
argument_list|()
decl_stmt|;
return|return
name|add
argument_list|(
name|pos
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// getPos does not really throw an exception
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Returns a position spanning the earliest position to the latest.    * Does not assume that the positions are sorted.    * Throws if the list is empty. */
specifier|public
name|SqlParserPos
name|pos
parameter_list|()
block|{
switch|switch
condition|(
name|posList
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
case|case
literal|1
case|:
return|return
name|posList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
return|return
name|SqlParserPos
operator|.
name|sum
argument_list|(
name|posList
argument_list|)
return|;
block|}
block|}
comment|/** Adds the position of the last token emitted by a parser to the list,    * and returns a position that covers the whole range. */
specifier|public
name|SqlParserPos
name|end
parameter_list|(
name|SqlAbstractParserImpl
name|parser
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|parser
argument_list|)
operator|.
name|pos
argument_list|()
return|;
block|}
comment|/** Adds a node's position to the list,    * and returns a position that covers the whole range. */
specifier|public
name|SqlParserPos
name|end
parameter_list|(
name|SqlNode
name|n
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|n
argument_list|)
operator|.
name|pos
argument_list|()
return|;
block|}
comment|/** Clears the contents of this Span, and returns this Span. */
specifier|public
name|Span
name|clear
parameter_list|()
block|{
name|posList
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

