begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Parameter type-checking strategy where all operand types except last one must be the same.  */
end_comment

begin_class
specifier|public
class|class
name|SameOperandTypeExceptLastOperandChecker
extends|extends
name|SameOperandTypeChecker
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|String
name|lastOperandTypeName
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SameOperandTypeExceptLastOperandChecker
parameter_list|(
name|int
name|nOperands
parameter_list|,
name|String
name|lastOperandTypeName
parameter_list|)
block|{
name|super
argument_list|(
name|nOperands
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastOperandTypeName
operator|=
name|lastOperandTypeName
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|protected
name|boolean
name|checkOperandTypesImpl
parameter_list|(
name|SqlOperatorBinding
name|operatorBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|,
name|SqlCallBinding
name|callBinding
parameter_list|)
block|{
name|int
name|nOperandsActual
init|=
name|nOperands
decl_stmt|;
if|if
condition|(
name|nOperandsActual
operator|==
operator|-
literal|1
condition|)
block|{
name|nOperandsActual
operator|=
name|operatorBinding
operator|.
name|getOperandCount
argument_list|()
expr_stmt|;
block|}
assert|assert
operator|!
operator|(
name|throwOnFailure
operator|&&
operator|(
name|callBinding
operator|==
literal|null
operator|)
operator|)
assert|;
name|RelDataType
index|[]
name|types
init|=
operator|new
name|RelDataType
index|[
name|nOperandsActual
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|operandList
init|=
name|getOperandList
argument_list|(
name|operatorBinding
operator|.
name|getOperandCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|operandList
control|)
block|{
if|if
condition|(
name|operatorBinding
operator|.
name|isOperandNull
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|callBinding
operator|.
name|isTypeCoercionEnabled
argument_list|()
condition|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|operatorBinding
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|getValidator
argument_list|()
operator|.
name|newValidationError
argument_list|(
name|callBinding
operator|.
name|operand
argument_list|(
name|i
argument_list|)
argument_list|,
name|RESOURCE
operator|.
name|nullIllegal
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|types
index|[
name|i
index|]
operator|=
name|operatorBinding
operator|.
name|getOperandType
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|prev
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|operandList
control|)
block|{
if|if
condition|(
name|prev
operator|>=
literal|0
operator|&&
name|i
operator|!=
name|operandList
operator|.
name|get
argument_list|(
name|operandList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|SqlTypeUtil
operator|.
name|isComparable
argument_list|(
name|types
index|[
name|i
index|]
argument_list|,
name|types
index|[
name|prev
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|throwOnFailure
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// REVIEW jvs 5-June-2005: Why don't we use
comment|// newValidationSignatureError() here?  It gives more
comment|// specific diagnostics.
throw|throw
name|callBinding
operator|.
name|newValidationError
argument_list|(
name|RESOURCE
operator|.
name|needSameTypeParameter
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|prev
operator|=
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
specifier|final
name|String
name|typeName
init|=
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nOperands
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|SqlUtil
operator|.
name|getAliasedSignature
argument_list|(
name|op
argument_list|,
name|opName
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|typeName
argument_list|,
name|typeName
argument_list|,
literal|"..."
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|nOperands
operator|-
literal|1
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|lastOperandTypeName
argument_list|)
expr_stmt|;
return|return
name|SqlUtil
operator|.
name|getAliasedSignature
argument_list|(
name|op
argument_list|,
name|opName
argument_list|,
name|types
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

