begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlBasicVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An operator describing a query. (Not a query itself.)  *  *<p>Operands are:</p>  *  *<ul>  *<li>0: distinct ({@link SqlLiteral})</li>  *<li>1: selectClause ({@link SqlNodeList})</li>  *<li>2: fromClause ({@link SqlCall} to "join" operator)</li>  *<li>3: whereClause ({@link SqlNode})</li>  *<li>4: havingClause ({@link SqlNode})</li>  *<li>5: groupClause ({@link SqlNode})</li>  *<li>6: windowClause ({@link SqlNodeList})</li>  *<li>7: orderClause ({@link SqlNode})</li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|SqlSelectOperator
extends|extends
name|SqlOperator
block|{
specifier|public
specifier|static
specifier|final
name|SqlSelectOperator
name|INSTANCE
init|=
operator|new
name|SqlSelectOperator
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|SqlSelectOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"SELECT"
argument_list|,
name|SqlKind
operator|.
name|SELECT
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|ReturnTypes
operator|.
name|SCOPE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlSyntax
name|getSyntax
parameter_list|()
block|{
return|return
name|SqlSyntax
operator|.
name|SPECIAL
return|;
block|}
specifier|public
name|SqlCall
name|createCall
parameter_list|(
name|SqlLiteral
name|functionQualifier
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
name|SqlNode
modifier|...
name|operands
parameter_list|)
block|{
assert|assert
name|functionQualifier
operator|==
literal|null
assert|;
return|return
operator|new
name|SqlSelect
argument_list|(
name|pos
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|0
index|]
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|1
index|]
argument_list|,
name|operands
index|[
literal|2
index|]
argument_list|,
name|operands
index|[
literal|3
index|]
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|4
index|]
argument_list|,
name|operands
index|[
literal|5
index|]
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|6
index|]
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|7
index|]
argument_list|,
name|operands
index|[
literal|8
index|]
argument_list|,
name|operands
index|[
literal|9
index|]
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|10
index|]
argument_list|)
return|;
block|}
comment|/**    * Creates a call to the<code>SELECT</code> operator.    *    * @param keywordList List of keywords such DISTINCT and ALL, or null    * @param selectList  The SELECT clause, or null if empty    * @param fromClause  The FROM clause    * @param whereClause The WHERE clause, or null if not present    * @param groupBy     The GROUP BY clause, or null if not present    * @param having      The HAVING clause, or null if not present    * @param windowDecls The WINDOW clause, or null if not present    * @param orderBy     The ORDER BY clause, or null if not present    * @param offset      Expression for number of rows to discard before    *                    returning first row    * @param fetch       Expression for number of rows to fetch    * @param pos         The parser position, or    *                    {@link org.apache.calcite.sql.parser.SqlParserPos#ZERO}    *                    if not specified; must not be null.    * @return A {@link SqlSelect}, never null    */
specifier|public
name|SqlSelect
name|createCall
parameter_list|(
name|SqlNodeList
name|keywordList
parameter_list|,
name|SqlNodeList
name|selectList
parameter_list|,
name|SqlNode
name|fromClause
parameter_list|,
name|SqlNode
name|whereClause
parameter_list|,
name|SqlNodeList
name|groupBy
parameter_list|,
name|SqlNode
name|having
parameter_list|,
name|SqlNodeList
name|windowDecls
parameter_list|,
name|SqlNodeList
name|orderBy
parameter_list|,
name|SqlNode
name|offset
parameter_list|,
name|SqlNode
name|fetch
parameter_list|,
name|SqlNodeList
name|hints
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
operator|new
name|SqlSelect
argument_list|(
name|pos
argument_list|,
name|keywordList
argument_list|,
name|selectList
argument_list|,
name|fromClause
argument_list|,
name|whereClause
argument_list|,
name|groupBy
argument_list|,
name|having
argument_list|,
name|windowDecls
argument_list|,
name|orderBy
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|,
name|hints
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|acceptCall
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|boolean
name|onlyExpressions
parameter_list|,
name|SqlBasicVisitor
operator|.
name|ArgHandler
argument_list|<
name|R
argument_list|>
name|argHandler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|onlyExpressions
condition|)
block|{
comment|// None of the arguments to the SELECT operator are expressions.
name|super
operator|.
name|acceptCall
argument_list|(
name|visitor
argument_list|,
name|call
argument_list|,
name|onlyExpressions
argument_list|,
name|argHandler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|SqlSelect
name|select
init|=
operator|(
name|SqlSelect
operator|)
name|call
decl_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|selectFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|SELECT
argument_list|)
decl_stmt|;
name|writer
operator|.
name|sep
argument_list|(
literal|"SELECT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|.
name|hasHints
argument_list|()
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"/*+"
argument_list|)
expr_stmt|;
name|select
operator|.
name|hints
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"*/"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newlineAndIndent
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|select
operator|.
name|keywordList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SqlNode
name|keyword
init|=
name|select
operator|.
name|keywordList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|keyword
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|topN
argument_list|(
name|select
operator|.
name|fetch
argument_list|,
name|select
operator|.
name|offset
argument_list|)
expr_stmt|;
specifier|final
name|SqlNodeList
name|selectClause
init|=
name|select
operator|.
name|selectList
operator|!=
literal|null
condition|?
name|select
operator|.
name|selectList
else|:
name|SqlNodeList
operator|.
name|of
argument_list|(
name|SqlIdentifier
operator|.
name|star
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|list
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|SELECT_LIST
argument_list|,
name|SqlWriter
operator|.
name|COMMA
argument_list|,
name|selectClause
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|.
name|from
operator|!=
literal|null
condition|)
block|{
comment|// Calcite SQL requires FROM but MySQL does not.
name|writer
operator|.
name|sep
argument_list|(
literal|"FROM"
argument_list|)
expr_stmt|;
comment|// for FROM clause, use precedence just below join operator to make
comment|// sure that an un-joined nested select will be properly
comment|// parenthesized
specifier|final
name|SqlWriter
operator|.
name|Frame
name|fromFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|FROM_LIST
argument_list|)
decl_stmt|;
name|select
operator|.
name|from
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|SqlJoin
operator|.
name|OPERATOR
operator|.
name|getLeftPrec
argument_list|()
operator|-
literal|1
argument_list|,
name|SqlJoin
operator|.
name|OPERATOR
operator|.
name|getRightPrec
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|fromFrame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|select
operator|.
name|where
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"WHERE"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writer
operator|.
name|isAlwaysUseParentheses
argument_list|()
condition|)
block|{
name|SqlNode
name|node
init|=
name|select
operator|.
name|where
decl_stmt|;
comment|// decide whether to split on ORs or ANDs
name|SqlBinaryOperator
name|whereSep
init|=
name|SqlStdOperatorTable
operator|.
name|AND
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|instanceof
name|SqlCall
operator|)
operator|&&
name|node
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
condition|)
block|{
name|whereSep
operator|=
name|SqlStdOperatorTable
operator|.
name|OR
expr_stmt|;
block|}
comment|// unroll whereClause
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|getKind
argument_list|()
operator|==
name|whereSep
operator|.
name|kind
condition|)
block|{
assert|assert
name|node
operator|instanceof
name|SqlCall
assert|;
specifier|final
name|SqlCall
name|call1
init|=
operator|(
name|SqlCall
operator|)
name|node
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|call1
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
name|call1
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// unparse in a WHERE_LIST frame
name|writer
operator|.
name|list
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|WHERE_LIST
argument_list|,
name|whereSep
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|select
operator|.
name|where
operator|.
name|getParserPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|select
operator|.
name|where
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|select
operator|.
name|groupBy
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"GROUP BY"
argument_list|)
expr_stmt|;
specifier|final
name|SqlNodeList
name|groupBy
init|=
name|select
operator|.
name|groupBy
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
name|SqlNodeList
operator|.
name|SINGLETON_EMPTY
else|:
name|select
operator|.
name|groupBy
decl_stmt|;
name|writer
operator|.
name|list
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|GROUP_BY_LIST
argument_list|,
name|SqlWriter
operator|.
name|COMMA
argument_list|,
name|groupBy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|select
operator|.
name|having
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"HAVING"
argument_list|)
expr_stmt|;
name|select
operator|.
name|having
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|select
operator|.
name|windowDecls
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"WINDOW"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|list
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|WINDOW_DECL_LIST
argument_list|,
name|SqlWriter
operator|.
name|COMMA
argument_list|,
name|select
operator|.
name|windowDecls
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|select
operator|.
name|orderBy
operator|!=
literal|null
operator|&&
name|select
operator|.
name|orderBy
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ORDER BY"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|list
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|ORDER_BY_LIST
argument_list|,
name|SqlWriter
operator|.
name|COMMA
argument_list|,
name|select
operator|.
name|orderBy
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|fetchOffset
argument_list|(
name|select
operator|.
name|fetch
argument_list|,
name|select
operator|.
name|offset
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|selectFrame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|argumentMustBeScalar
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|ordinal
operator|==
name|SqlSelect
operator|.
name|WHERE_OPERAND
return|;
block|}
block|}
end_class

end_unit

