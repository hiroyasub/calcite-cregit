begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSplittableAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandTypeChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Optionality
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Definition of the<code>MIN</code> and<code>MAX</code> aggregate functions,  * returning the returns the smallest/largest of the values which go into it.  *  *<p>There are 3 forms:  *  *<dl>  *<dt>sum(<em>primitive type</em>)  *<dd>values are compared using '&lt;'  *  *<dt>sum({@link java.lang.Comparable})  *<dd>values are compared using {@link java.lang.Comparable#compareTo}  *  *<dt>sum({@link java.util.Comparator}, {@link java.lang.Object})  *<dd>the {@link java.util.Comparator#compare} method of the comparator is used  * to compare pairs of objects. The comparator is a startup argument, and must  * therefore be constant for the duration of the aggregation.  *</dl>  */
end_comment

begin_class
specifier|public
class|class
name|SqlMinMaxAggFunction
extends|extends
name|SqlAggFunction
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_INVALID
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_PRIMITIVE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_COMPARABLE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MINMAX_COMPARATOR
init|=
literal|2
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argTypes
decl_stmt|;
specifier|private
specifier|final
name|int
name|minMaxKind
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Creates a SqlMinMaxAggFunction. */
specifier|public
name|SqlMinMaxAggFunction
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
name|this
argument_list|(
name|kind
operator|.
name|name
argument_list|()
argument_list|,
name|kind
argument_list|,
name|OperandTypes
operator|.
name|COMPARABLE_ORDERED
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a SqlMinMaxAggFunction. */
specifier|public
name|SqlMinMaxAggFunction
parameter_list|(
name|String
name|funcName
parameter_list|,
name|SqlKind
name|kind
parameter_list|,
name|SqlOperandTypeChecker
name|inputTypeChecker
parameter_list|)
block|{
name|super
argument_list|(
name|funcName
argument_list|,
literal|null
argument_list|,
name|kind
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_IF_EMPTY
argument_list|,
literal|null
argument_list|,
name|inputTypeChecker
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Optionality
operator|.
name|FORBIDDEN
argument_list|)
expr_stmt|;
name|this
operator|.
name|argTypes
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|this
operator|.
name|minMaxKind
operator|=
name|MINMAX_COMPARABLE
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|kind
operator|==
name|SqlKind
operator|.
name|MIN
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|MAX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|SqlMinMaxAggFunction
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|argTypes
parameter_list|,
name|boolean
name|isMin
parameter_list|,
name|int
name|minMaxKind
parameter_list|)
block|{
name|this
argument_list|(
name|isMin
condition|?
name|SqlKind
operator|.
name|MIN
else|:
name|SqlKind
operator|.
name|MAX
argument_list|)
expr_stmt|;
assert|assert
name|argTypes
operator|.
name|isEmpty
argument_list|()
assert|;
assert|assert
name|minMaxKind
operator|==
name|MINMAX_COMPARABLE
assert|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|boolean
name|isMin
parameter_list|()
block|{
return|return
name|kind
operator|==
name|SqlKind
operator|.
name|MIN
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|int
name|getMinMaxKind
parameter_list|()
block|{
return|return
name|minMaxKind
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optionality
name|getDistinctOptionality
parameter_list|()
block|{
return|return
name|Optionality
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RelDataType
argument_list|>
name|getParameterTypes
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
switch|switch
condition|(
name|minMaxKind
condition|)
block|{
case|case
name|MINMAX_PRIMITIVE
case|:
case|case
name|MINMAX_COMPARABLE
case|:
return|return
name|argTypes
return|;
case|case
name|MINMAX_COMPARATOR
case|:
return|return
name|argTypes
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad kind: "
operator|+
name|minMaxKind
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|RelDataType
name|getReturnType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
switch|switch
condition|(
name|minMaxKind
condition|)
block|{
case|case
name|MINMAX_PRIMITIVE
case|:
case|case
name|MINMAX_COMPARABLE
case|:
return|return
name|argTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|MINMAX_COMPARATOR
case|:
return|return
name|argTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad kind: "
operator|+
name|minMaxKind
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|SqlSplittableAggFunction
operator|.
name|class
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|SqlSplittableAggFunction
operator|.
name|SelfSplitter
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

