begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeComparability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperandCountRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * Strategies for checking operand types.  *  *<p>This class defines singleton instances of strategy objects for operand  * type-checking. {@link org.apache.calcite.sql.type.ReturnTypes}  * and {@link org.apache.calcite.sql.type.InferTypes} provide similar strategies  * for operand type inference and operator return type inference.  *  *<p>Note to developers: avoid anonymous inner classes here except for unique,  * non-generalizable strategies; anything else belongs in a reusable top-level  * class. If you find yourself copying and pasting an existing strategy's  * anonymous inner class, you're making a mistake.  *  * @see org.apache.calcite.sql.type.SqlOperandTypeChecker  * @see org.apache.calcite.sql.type.ReturnTypes  * @see org.apache.calcite.sql.type.InferTypes  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|OperandTypes
block|{
specifier|private
name|OperandTypes
parameter_list|()
block|{
block|}
comment|/**    * Creates a checker that passes if each operand is a member of a    * corresponding family.    */
specifier|public
specifier|static
name|FamilyOperandTypeChecker
name|family
parameter_list|(
name|SqlTypeFamily
modifier|...
name|families
parameter_list|)
block|{
return|return
operator|new
name|FamilyOperandTypeChecker
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|families
argument_list|)
argument_list|,
name|i
lambda|->
literal|false
argument_list|)
return|;
block|}
comment|/**    * Creates a checker that passes if each operand is a member of a    * corresponding family, and allows specified parameters to be optional.    */
specifier|public
specifier|static
name|FamilyOperandTypeChecker
name|family
parameter_list|(
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|families
parameter_list|,
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|optional
parameter_list|)
block|{
return|return
operator|new
name|FamilyOperandTypeChecker
argument_list|(
name|families
argument_list|,
name|optional
argument_list|)
return|;
block|}
comment|/**    * Creates a checker that passes if each operand is a member of a    * corresponding family.    */
specifier|public
specifier|static
name|FamilyOperandTypeChecker
name|family
parameter_list|(
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|families
parameter_list|)
block|{
return|return
name|family
argument_list|(
name|families
argument_list|,
name|i
lambda|->
literal|false
argument_list|)
return|;
block|}
comment|/**    * Creates a checker for user-defined functions (including user-defined    * aggregate functions, table functions, and table macros).    *    *<p>Unlike built-in functions, there is a fixed number of parameters,    * and the parameters have names. You can ask for the type of a parameter    * without providing a particular call (and with it actual arguments) but you    * do need to provide a type factory, and therefore the types are only good    * for the duration of the current statement.    */
specifier|public
specifier|static
name|SqlOperandMetadata
name|operandMetadata
parameter_list|(
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|families
parameter_list|,
name|Function
argument_list|<
name|RelDataTypeFactory
argument_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
argument_list|>
name|typesFactory
parameter_list|,
name|IntFunction
argument_list|<
name|String
argument_list|>
name|operandName
parameter_list|,
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|optional
parameter_list|)
block|{
return|return
operator|new
name|OperandMetadataImpl
argument_list|(
name|families
argument_list|,
name|typesFactory
argument_list|,
name|operandName
argument_list|,
name|optional
argument_list|)
return|;
block|}
comment|/**    * Creates a checker that passes if any one of the rules passes.    */
specifier|public
specifier|static
name|SqlOperandTypeChecker
name|or
parameter_list|(
name|SqlOperandTypeChecker
modifier|...
name|rules
parameter_list|)
block|{
return|return
name|composite
argument_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
operator|.
name|OR
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a checker that passes if all of the rules pass.    */
specifier|public
specifier|static
name|SqlOperandTypeChecker
name|and
parameter_list|(
name|SqlOperandTypeChecker
modifier|...
name|rules
parameter_list|)
block|{
return|return
name|and_
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SqlOperandTypeChecker
name|and_
parameter_list|(
name|Iterable
argument_list|<
name|SqlOperandTypeChecker
argument_list|>
name|rules
parameter_list|)
block|{
return|return
name|composite
argument_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
operator|.
name|AND
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a single-operand checker that passes if any one of the rules    * passes.    */
specifier|public
specifier|static
name|SqlSingleOperandTypeChecker
name|or
parameter_list|(
name|SqlSingleOperandTypeChecker
modifier|...
name|rules
parameter_list|)
block|{
return|return
name|compositeSingle
argument_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
operator|.
name|OR
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a single-operand checker that passes if all of the rules    * pass.    */
specifier|public
specifier|static
name|SqlSingleOperandTypeChecker
name|and
parameter_list|(
name|SqlSingleOperandTypeChecker
modifier|...
name|rules
parameter_list|)
block|{
return|return
name|compositeSingle
argument_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
operator|.
name|AND
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Creates a CompositeSingleOperandTypeChecker. Outside this package, use    * {@link SqlSingleOperandTypeChecker#and(SqlSingleOperandTypeChecker)},    * {@link OperandTypes#and}, {@link OperandTypes#or} and similar. */
specifier|private
specifier|static
name|SqlSingleOperandTypeChecker
name|compositeSingle
parameter_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
name|composition
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|SqlSingleOperandTypeChecker
argument_list|>
name|allowedRules
parameter_list|,
annotation|@
name|Nullable
name|String
name|allowedSignatures
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlSingleOperandTypeChecker
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allowedRules
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|composition
condition|)
block|{
default|default:
break|break;
case|case
name|AND
case|:
case|case
name|OR
case|:
name|flatten
argument_list|(
name|list
argument_list|,
name|c
lambda|->
name|c
operator|instanceof
name|CompositeSingleOperandTypeChecker
operator|&&
operator|(
operator|(
name|CompositeSingleOperandTypeChecker
operator|)
name|c
operator|)
operator|.
name|composition
operator|==
name|composition
condition|?
operator|(
operator|(
name|CompositeSingleOperandTypeChecker
operator|)
name|c
operator|)
operator|.
name|getRules
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
operator|new
name|CompositeSingleOperandTypeChecker
argument_list|(
name|composition
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
argument_list|,
name|allowedSignatures
argument_list|)
return|;
block|}
comment|/**    * Creates an operand checker from a sequence of single-operand checkers.    */
specifier|public
specifier|static
name|SqlOperandTypeChecker
name|sequence
parameter_list|(
name|String
name|allowedSignatures
parameter_list|,
name|SqlSingleOperandTypeChecker
modifier|...
name|rules
parameter_list|)
block|{
return|return
operator|new
name|CompositeOperandTypeChecker
argument_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
operator|.
name|SEQUENCE
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
argument_list|,
name|allowedSignatures
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a checker that passes if all of the rules pass for each operand,    * using a given operand count strategy.    */
specifier|public
specifier|static
name|SqlOperandTypeChecker
name|repeat
parameter_list|(
name|SqlOperandCountRange
name|range
parameter_list|,
name|SqlSingleOperandTypeChecker
modifier|...
name|rules
parameter_list|)
block|{
return|return
operator|new
name|CompositeOperandTypeChecker
argument_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
operator|.
name|REPEAT
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|range
argument_list|)
return|;
block|}
comment|/**    * Creates an operand checker that applies a single-operand checker to    * the {@code ordinal}th operand.    */
specifier|public
specifier|static
name|SqlOperandTypeChecker
name|nth
parameter_list|(
name|int
name|ordinal
parameter_list|,
name|int
name|operandCount
parameter_list|,
name|SqlSingleOperandTypeChecker
name|rule
parameter_list|)
block|{
name|SqlSingleOperandTypeChecker
index|[]
name|rules
init|=
operator|new
name|SqlSingleOperandTypeChecker
index|[
name|operandCount
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|rules
argument_list|,
name|ANY
argument_list|)
expr_stmt|;
name|rules
index|[
name|ordinal
index|]
operator|=
name|rule
expr_stmt|;
return|return
name|sequence
argument_list|(
literal|""
argument_list|,
name|rules
argument_list|)
return|;
block|}
comment|/** Creates a CompositeOperandTypeChecker. Outside this package, use    * {@link SqlSingleOperandTypeChecker#and(SqlSingleOperandTypeChecker)},    * {@link OperandTypes#and}, {@link OperandTypes#or} and similar. */
specifier|static
name|SqlOperandTypeChecker
name|composite
parameter_list|(
name|CompositeOperandTypeChecker
operator|.
name|Composition
name|composition
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|SqlOperandTypeChecker
argument_list|>
name|allowedRules
parameter_list|,
annotation|@
name|Nullable
name|String
name|allowedSignatures
parameter_list|,
annotation|@
name|Nullable
name|BiFunction
argument_list|<
name|SqlOperator
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|signatureGenerator
parameter_list|,
annotation|@
name|Nullable
name|SqlOperandCountRange
name|range
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlOperandTypeChecker
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allowedRules
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|composition
condition|)
block|{
default|default:
break|break;
case|case
name|AND
case|:
case|case
name|OR
case|:
name|flatten
argument_list|(
name|list
argument_list|,
name|c
lambda|->
name|c
operator|instanceof
name|CompositeOperandTypeChecker
operator|&&
operator|(
operator|(
name|CompositeOperandTypeChecker
operator|)
name|c
operator|)
operator|.
name|composition
operator|==
name|composition
condition|?
operator|(
operator|(
name|CompositeOperandTypeChecker
operator|)
name|c
operator|)
operator|.
name|getRules
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
operator|new
name|CompositeOperandTypeChecker
argument_list|(
name|composition
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
argument_list|,
name|allowedSignatures
argument_list|,
name|signatureGenerator
argument_list|,
name|range
argument_list|)
return|;
block|}
comment|/** Helper for {@link #compositeSingle} and {@link #composite}. */
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|void
name|flatten
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|,
name|Function
argument_list|<
name|E
argument_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|expander
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
annotation|@
name|Nullable
name|List
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|list2
init|=
name|expander
operator|.
name|apply
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list2
operator|==
literal|null
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|i
argument_list|,
name|list2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ----------------------------------------------------------------------
comment|// SqlOperandTypeChecker definitions
comment|// ----------------------------------------------------------------------
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * Operand type-checking strategy for an operator which takes no operands.    */
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NILADIC
init|=
name|family
argument_list|()
decl_stmt|;
comment|/**    * Operand type-checking strategy for an operator with no restrictions on    * number or type of operands.    */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|VARIADIC
init|=
name|variadic
argument_list|(
name|SqlOperandCountRanges
operator|.
name|any
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Operand type-checking strategy that allows one or more operands. */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|ONE_OR_MORE
init|=
name|variadic
argument_list|(
name|SqlOperandCountRanges
operator|.
name|from
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|SqlOperandTypeChecker
name|variadic
parameter_list|(
specifier|final
name|SqlOperandCountRange
name|range
parameter_list|)
block|{
return|return
operator|new
name|SqlOperandTypeChecker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
return|return
name|range
operator|.
name|isValidCount
argument_list|(
name|callBinding
operator|.
name|getOperandCount
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|range
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
return|return
name|opName
operator|+
literal|"(...)"
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|BOOLEAN
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|BOOLEAN_BOOLEAN
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|BOOLEAN
argument_list|,
name|SqlTypeFamily
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|INTEGER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NUMERIC_OPTIONAL_INTEGER
init|=
name|family
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
argument_list|,
comment|// Second operand optional (operand index 0, 1)
name|number
lambda|->
name|number
operator|==
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NUMERIC_INTEGER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NUMERIC_NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|EXACT_NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|EXACT_NUMERIC_EXACT_NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|BINARY
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|BINARY
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FamilyOperandTypeChecker
name|STRING_STRING
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FamilyOperandTypeChecker
name|STRING_STRING_STRING
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FamilyOperandTypeChecker
name|STRING_STRING_OPTIONAL_STRING
init|=
name|family
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|)
argument_list|,
comment|// Third operand optional (operand index 0, 1, 2)
name|number
lambda|->
name|number
operator|==
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|CHARACTER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|CHARACTER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|DATETIME
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|DATE
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|TIMESTAMP
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|TIMESTAMP
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|INTERVAL
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|CHARACTER_CHARACTER_DATETIME
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|CHARACTER
argument_list|,
name|SqlTypeFamily
operator|.
name|CHARACTER
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|PERIOD
init|=
operator|new
name|PeriodOperandTypeChecker
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|PERIOD_OR_DATETIME
init|=
name|PERIOD
operator|.
name|or
argument_list|(
name|DATETIME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FamilyOperandTypeChecker
name|INTERVAL_INTERVAL
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|MULTISET
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|MULTISET
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|ARRAY
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
comment|/** Checks that returns whether a value is a multiset or an array.    * Cf Java, where list and set are collections but a map is not. */
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|COLLECTION
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|MULTISET
argument_list|)
operator|.
name|or
argument_list|(
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ARRAY
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|COLLECTION_OR_MAP
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|MULTISET
argument_list|)
operator|.
name|or
argument_list|(
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ARRAY
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|MAP
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Operand type-checking strategy where type must be a literal or NULL.    */
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NULLABLE_LITERAL
init|=
operator|new
name|LiteralOperandTypeChecker
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/**    * Operand type-checking strategy type must be a non-NULL literal.    */
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|LITERAL
init|=
operator|new
name|LiteralOperandTypeChecker
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**    * Operand type-checking strategy type must be a positive integer non-NULL    * literal.    */
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|POSITIVE_INTEGER_LITERAL
init|=
operator|new
name|FamilyOperandTypeChecker
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
argument_list|,
name|i
lambda|->
literal|false
argument_list|)
block|{         @
name|Override
specifier|public
name|boolean
name|checkSingleOperandType
argument_list|(
name|SqlCallBinding
name|callBinding
argument_list|,
name|SqlNode
name|node
argument_list|,
name|int
name|iFormalOperand
argument_list|,
name|boolean
name|throwOnFailure
argument_list|)
block|{
if|if
condition|(
operator|!
name|LITERAL
operator|.
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|,
name|iFormalOperand
argument_list|,
name|throwOnFailure
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block_content|}
block|if (!super.checkSingleOperandType(               callBinding
operator|,
name|node
operator|,
name|iFormalOperand
operator|,
name|throwOnFailure
block|))
block|{
return|return
literal|false
return|;
block|}
name|final
name|SqlLiteral
name|arg
operator|=
operator|(
name|SqlLiteral
operator|)
name|node
block|;
name|final
name|BigDecimal
name|value
operator|=
name|arg
operator|.
name|getValueAs
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
block|;
if|if
condition|(
name|value
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
operator|||
name|hasFractionalPart
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|newError
argument_list|(
name|RESOURCE
operator|.
name|argumentMustBePositiveInteger
argument_list|(
name|callBinding
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block_content|}
block|return false
empty_stmt|;
block_content|}
block|if (value.compareTo(BigDecimal.valueOf(Integer.MAX_VALUE
block|))
operator|>
literal|0
init|)
block|{
if|if
condition|(
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|newError
argument_list|(
name|RESOURCE
operator|.
name|numberLiteralOutOfRange
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_class

begin_comment
comment|/** Returns whether a number has any fractional part.          *          * @see BigDecimal#longValueExact() */
end_comment

begin_function
specifier|private
name|boolean
name|hasFractionalPart
parameter_list|(
name|BigDecimal
name|bd
parameter_list|)
block|{
return|return
name|bd
operator|.
name|precision
argument_list|()
operator|-
name|bd
operator|.
name|scale
argument_list|()
operator|<=
literal|0
return|;
block|}
end_function

begin_comment
unit|};
comment|/**    * Operand type-checking strategy type must be a numeric non-NULL    * literal in the range 0 and 1 inclusive.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|UNIT_INTERVAL_NUMERIC_LITERAL
init|=
operator|new
name|FamilyOperandTypeChecker
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
argument_list|,
name|i
lambda|->
literal|false
argument_list|)
block|{         @
name|Override
specifier|public
name|boolean
name|checkSingleOperandType
argument_list|(
name|SqlCallBinding
name|callBinding
argument_list|,
name|SqlNode
name|node
argument_list|,
name|int
name|iFormalOperand
argument_list|,
name|boolean
name|throwOnFailure
argument_list|)
block|{
if|if
condition|(
operator|!
name|LITERAL
operator|.
name|checkSingleOperandType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|,
name|iFormalOperand
argument_list|,
name|throwOnFailure
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block_content|}
block|if (!super.checkSingleOperandType(               callBinding
operator|,
name|node
operator|,
name|iFormalOperand
operator|,
name|throwOnFailure
block|))
block|{
return|return
literal|false
return|;
block|}
name|final
name|SqlLiteral
name|arg
operator|=
operator|(
name|SqlLiteral
operator|)
name|node
block|;
name|final
name|BigDecimal
name|value
operator|=
name|arg
operator|.
name|getValueAs
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
block|;
if|if
condition|(
name|value
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
operator|||
name|value
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|newError
argument_list|(
name|RESOURCE
operator|.
name|argumentMustBeNumericLiteralInRange
argument_list|(
name|callBinding
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
throw|;
block_content|}
block|return false
empty_stmt|;
block_content|}
block|return true
empty_stmt|;
block|}
end_decl_stmt

begin_comment
unit|};
comment|/**    * Operand type-checking strategy where two operands must both be in the    * same type family.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|SAME_SAME
init|=
operator|new
name|SameOperandTypeChecker
argument_list|(
literal|2
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|SAME_SAME_INTEGER
init|=
operator|new
name|SameOperandTypeExceptLastOperandChecker
argument_list|(
literal|3
argument_list|,
literal|"INTEGER"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where three operands must all be in the    * same type family.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|SAME_SAME_SAME
init|=
operator|new
name|SameOperandTypeChecker
argument_list|(
literal|3
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where any number of operands must all be    * in the same type family.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|SAME_VARIADIC
init|=
operator|new
name|SameOperandTypeChecker
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where any positive number of operands must all be    * in the same type family.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|AT_LEAST_ONE_SAME_VARIADIC
init|=
operator|new
name|SameOperandTypeChecker
argument_list|(
operator|-
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|SqlOperandCountRanges
operator|.
name|from
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where a given list of operands must all    * have the same type.    */
end_comment

begin_function
specifier|public
specifier|static
name|SqlSingleOperandTypeChecker
name|same
parameter_list|(
name|int
name|operandCount
parameter_list|,
name|int
modifier|...
name|ordinals
parameter_list|)
block|{
specifier|final
name|ImmutableIntList
name|ordinalList
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|ordinals
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|ordinalList
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|ordinalList
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SameOperandTypeChecker
argument_list|(
name|operandCount
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Integer
argument_list|>
name|getOperandList
parameter_list|(
name|int
name|operandCount
parameter_list|)
block|{
return|return
name|ordinalList
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**    * Operand type-checking strategy where operand types must allow ordered    * comparisons.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|COMPARABLE_ORDERED_COMPARABLE_ORDERED
init|=
operator|new
name|ComparableOperandTypeChecker
argument_list|(
literal|2
argument_list|,
name|RelDataTypeComparability
operator|.
name|ALL
argument_list|,
name|SqlOperandTypeChecker
operator|.
name|Consistency
operator|.
name|COMPARE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where operand type must allow ordered    * comparisons. Used when instance comparisons are made on single operand    * functions    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|COMPARABLE_ORDERED
init|=
operator|new
name|ComparableOperandTypeChecker
argument_list|(
literal|1
argument_list|,
name|RelDataTypeComparability
operator|.
name|ALL
argument_list|,
name|SqlOperandTypeChecker
operator|.
name|Consistency
operator|.
name|NONE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where operand types must allow unordered    * comparisons.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|COMPARABLE_UNORDERED_COMPARABLE_UNORDERED
init|=
operator|new
name|ComparableOperandTypeChecker
argument_list|(
literal|2
argument_list|,
name|RelDataTypeComparability
operator|.
name|UNORDERED
argument_list|,
name|SqlOperandTypeChecker
operator|.
name|Consistency
operator|.
name|LEAST_RESTRICTIVE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where two operands must both be in the    * same string type family.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_SAME_SAME
init|=
name|STRING_STRING
operator|.
name|and
argument_list|(
name|SAME_SAME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where three operands must all be in the    * same string type family.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_SAME_SAME_SAME
init|=
name|STRING_STRING_STRING
operator|.
name|and
argument_list|(
name|SAME_SAME_SAME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_STRING_INTEGER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_STRING_INTEGER_INTEGER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_INTEGER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_INTEGER_INTEGER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_INTEGER_OPTIONAL_INTEGER
init|=
name|family
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
argument_list|,
name|i
lambda|->
name|i
operator|==
literal|2
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_NUMERIC_NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Operand type-checking strategy where the first operand is a character or    * binary string (CHAR, VARCHAR, BINARY or VARBINARY), and the second operand    * is INTEGER. */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|CBSTRING_INTEGER
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
operator|.
name|or
argument_list|(
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|BINARY
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy where two operands must both be in the    * same string type family and last type is INTEGER.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_SAME_SAME_INTEGER
init|=
name|STRING_STRING_INTEGER
operator|.
name|and
argument_list|(
name|SAME_SAME_INTEGER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|STRING_SAME_SAME_OR_ARRAY_SAME_SAME
init|=
name|or
argument_list|(
name|STRING_SAME_SAME
argument_list|,
name|and
argument_list|(
name|OperandTypes
operator|.
name|SAME_SAME
argument_list|,
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ARRAY
argument_list|,
name|SqlTypeFamily
operator|.
name|ARRAY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|ANY
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|ANY_ANY
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|ANY_IGNORE
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|IGNORE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|IGNORE_ANY
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|IGNORE
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|ANY_NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|ANY_NUMERIC_ANY
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|ANY_STRING_STRING
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|,
name|SqlTypeFamily
operator|.
name|STRING
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|CURSOR
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|CURSOR
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Parameter type-checking strategy where type must a nullable time interval,    * nullable time interval.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|INTERVAL_SAME_SAME
init|=
name|INTERVAL_INTERVAL
operator|.
name|and
argument_list|(
name|SAME_SAME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NUMERIC_INTERVAL
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|INTERVAL_NUMERIC
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|TIME_INTERVAL
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|TIME
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|TIMESTAMP_INTERVAL
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|TIMESTAMP
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|DATETIME_INTERVAL
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|DATETIME_INTERVAL_INTERVAL
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|DATETIME_INTERVAL_INTERVAL_TIME
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|,
name|SqlTypeFamily
operator|.
name|TIME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|DATETIME_INTERVAL_TIME
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|,
name|SqlTypeFamily
operator|.
name|TIME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|INTERVAL_DATETIME
init|=
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|INTERVALINTERVAL_INTERVALDATETIME
init|=
name|INTERVAL_SAME_SAME
operator|.
name|or
argument_list|(
name|INTERVAL_DATETIME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// TODO: datetime+interval checking missing
end_comment

begin_comment
comment|// TODO: interval+datetime checking missing
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|PLUS_OPERATOR
init|=
name|NUMERIC_NUMERIC
operator|.
name|or
argument_list|(
name|INTERVAL_SAME_SAME
argument_list|)
operator|.
name|or
argument_list|(
name|DATETIME_INTERVAL
argument_list|)
operator|.
name|or
argument_list|(
name|INTERVAL_DATETIME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Type-checking strategy for the "*" operator.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|MULTIPLY_OPERATOR
init|=
name|NUMERIC_NUMERIC
operator|.
name|or
argument_list|(
name|INTERVAL_NUMERIC
argument_list|)
operator|.
name|or
argument_list|(
name|NUMERIC_INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Type-checking strategy for the "/" operator.    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|DIVISION_OPERATOR
init|=
name|NUMERIC_NUMERIC
operator|.
name|or
argument_list|(
name|INTERVAL_NUMERIC
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|MINUS_OPERATOR
init|=
comment|// TODO:  compatibility check
name|NUMERIC_NUMERIC
operator|.
name|or
argument_list|(
name|INTERVAL_SAME_SAME
argument_list|)
operator|.
name|or
argument_list|(
name|DATETIME_INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|FamilyOperandTypeChecker
name|MINUS_DATE_OPERATOR
init|=
operator|new
name|FamilyOperandTypeChecker
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME_INTERVAL
argument_list|)
argument_list|,
name|i
lambda|->
literal|false
argument_list|)
block|{         @
name|Override
specifier|public
name|boolean
name|checkOperandTypes
argument_list|(
name|SqlCallBinding
name|callBinding
argument_list|,
name|boolean
name|throwOnFailure
argument_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|checkOperandTypes
argument_list|(
name|callBinding
argument_list|,
name|throwOnFailure
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block_content|}
block|return SAME_SAME.checkOperandTypes(callBinding
operator|,
name|throwOnFailure
block|)
block|;         }
end_decl_stmt

begin_decl_stmt
unit|};
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NUMERIC_OR_INTERVAL
init|=
name|NUMERIC
operator|.
name|or
argument_list|(
name|INTERVAL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|NUMERIC_OR_STRING
init|=
name|NUMERIC
operator|.
name|or
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Checker that returns whether a value is a multiset of records or an    * array of records.    *    * @see #COLLECTION */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|RECORD_COLLECTION
init|=
operator|new
name|RecordTypeWithOneFieldChecker
argument_list|(
name|sqlTypeName
lambda|->
name|sqlTypeName
operator|!=
name|SqlTypeName
operator|.
name|ARRAY
operator|&&
name|sqlTypeName
operator|!=
name|SqlTypeName
operator|.
name|MULTISET
argument_list|)
block|{          @
name|Override
specifier|public
name|String
name|getAllowedSignatures
argument_list|(
name|SqlOperator
name|op
argument_list|,
name|String
name|opName
argument_list|)
block|{
return|return
literal|"UNNEST(<MULTISET>)"
return|;
block|}
expr|}
block|;
comment|/**    * Checker for record just has one field.    */
specifier|private
specifier|abstract
specifier|static
name|class
name|RecordTypeWithOneFieldChecker
expr|implements
name|SqlSingleOperandTypeChecker
block|{
specifier|private
name|final
name|Predicate
argument_list|<
name|SqlTypeName
argument_list|>
name|typeNamePredicate
block|;
specifier|private
name|RecordTypeWithOneFieldChecker
argument_list|(
name|Predicate
argument_list|<
name|SqlTypeName
argument_list|>
name|predicate
argument_list|)
block|{
name|this
operator|.
name|typeNamePredicate
operator|=
name|predicate
block|;     }
expr|@
name|Override
specifier|public
name|boolean
name|checkSingleOperandType
argument_list|(
name|SqlCallBinding
name|callBinding
argument_list|,
name|SqlNode
name|node
argument_list|,
name|int
name|iFormalOperand
argument_list|,
name|boolean
name|throwOnFailure
argument_list|)
block|{
assert|assert
literal|0
operator|==
name|iFormalOperand
assert|;
name|RelDataType
name|type
operator|=
name|SqlTypeUtil
operator|.
name|deriveType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|)
block|;
name|boolean
name|validationError
operator|=
literal|false
block|;
if|if
condition|(
operator|!
name|type
operator|.
name|isStruct
argument_list|()
condition|)
block|{
name|validationError
operator|=
literal|true
expr_stmt|;
block_content|}
block|else if (type.getFieldList(
block|)
operator|.
name|size
argument_list|()
operator|!=
literal|1
block|)
block|{
name|validationError
operator|=
literal|true
block|;       }
else|else
block|{
name|SqlTypeName
name|typeName
init|=
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeNamePredicate
operator|.
name|test
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|validationError
operator|=
literal|true
expr_stmt|;
block_content|}
block|}        if (validationError&& throwOnFailure
block_content|)
block|{
throw|throw
name|callBinding
operator|.
name|newValidationSignatureError
argument_list|()
throw|;
block_content|}
block|return !validationError
empty_stmt|;
block|}
end_decl_stmt

begin_comment
unit|}
comment|/** Checker that returns whether a value is a collection (multiset or array)    * of scalar or record values. */
end_comment

begin_decl_stmt
unit|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|SCALAR_OR_RECORD_COLLECTION
init|=
name|COLLECTION
operator|.
name|or
argument_list|(
name|RECORD_COLLECTION
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlSingleOperandTypeChecker
name|SCALAR_OR_RECORD_COLLECTION_OR_MAP
init|=
name|COLLECTION_OR_MAP
operator|.
name|or
argument_list|(
operator|new
name|RecordTypeWithOneFieldChecker
argument_list|(
name|sqlTypeName
lambda|->
name|sqlTypeName
operator|!=
name|SqlTypeName
operator|.
name|MULTISET
operator|&&
name|sqlTypeName
operator|!=
name|SqlTypeName
operator|.
name|ARRAY
operator|&&
name|sqlTypeName
operator|!=
name|SqlTypeName
operator|.
name|MAP
argument_list|)
block|{            @
name|Override
specifier|public
name|String
name|getAllowedSignatures
argument_list|(
name|SqlOperator
name|op
argument_list|,
name|String
name|opName
argument_list|)
block|{
return|return
literal|"UNNEST(<MULTISET>)\nUNNEST(<ARRAY>)\nUNNEST(<MAP>)"
return|;
block|}
expr|}
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|MULTISET_MULTISET
init|=
operator|new
name|MultisetOperandTypeChecker
argument_list|()
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Operand type-checking strategy for a set operator (UNION, INTERSECT,    * EXCEPT).    */
end_comment

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|SET_OP
init|=
operator|new
name|SetopOperandTypeChecker
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeChecker
name|RECORD_TO_SCALAR
init|=
operator|new
name|SqlSingleOperandTypeChecker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkSingleOperandType
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|SqlNode
name|node
parameter_list|,
name|int
name|iFormalOperand
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
assert|assert
literal|0
operator|==
name|iFormalOperand
assert|;
name|RelDataType
name|type
init|=
name|SqlTypeUtil
operator|.
name|deriveType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|boolean
name|validationError
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|isStruct
argument_list|()
condition|)
block|{
name|validationError
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|validationError
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|validationError
operator|&&
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|newValidationSignatureError
argument_list|()
throw|;
block|}
return|return
operator|!
name|validationError
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
return|return
name|SqlUtil
operator|.
name|getAliasedSignature
argument_list|(
name|op
argument_list|,
name|opName
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"RECORDTYPE(SINGLE FIELD)"
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Operand type-checker that accepts period types. Examples:    *    *<ul>    *<li>PERIOD (DATETIME, DATETIME)    *<li>PERIOD (DATETIME, INTERVAL)    *<li>[ROW] (DATETIME, DATETIME)    *<li>[ROW] (DATETIME, INTERVAL)    *</ul> */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|PeriodOperandTypeChecker
implements|implements
name|SqlSingleOperandTypeChecker
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkSingleOperandType
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|SqlNode
name|node
parameter_list|,
name|int
name|iFormalOperand
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
assert|assert
literal|0
operator|==
name|iFormalOperand
assert|;
name|RelDataType
name|type
init|=
name|SqlTypeUtil
operator|.
name|deriveType
argument_list|(
name|callBinding
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isStruct
argument_list|()
operator|&&
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
specifier|final
name|RelDataType
name|t0
init|=
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|t1
init|=
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isDatetime
argument_list|(
name|t0
argument_list|)
condition|)
block|{
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isDatetime
argument_list|(
name|t1
argument_list|)
condition|)
block|{
comment|// t0 must be comparable with t1; (DATE, TIMESTAMP) is not valid
if|if
condition|(
name|SqlTypeUtil
operator|.
name|sameNamedType
argument_list|(
name|t0
argument_list|,
name|t1
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SqlTypeUtil
operator|.
name|isInterval
argument_list|(
name|t1
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|valid
operator|&&
name|throwOnFailure
condition|)
block|{
throw|throw
name|callBinding
operator|.
name|newValidationSignatureError
argument_list|()
throw|;
block|}
return|return
name|valid
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
return|return
name|SqlUtil
operator|.
name|getAliasedSignature
argument_list|(
name|op
argument_list|,
name|opName
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"PERIOD (DATETIME, INTERVAL)"
argument_list|,
literal|"PERIOD (DATETIME, DATETIME)"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

