begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSpecialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableNullableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Parse tree for {@code UNIQUE}, {@code PRIMARY KEY} constraints.  *  *<p>And {@code FOREIGN KEY}, when we support it.  */
end_comment

begin_class
specifier|public
class|class
name|SqlKeyConstraint
extends|extends
name|SqlCall
block|{
specifier|private
specifier|static
specifier|final
name|SqlSpecialOperator
name|UNIQUE
init|=
operator|new
name|SqlSpecialOperator
argument_list|(
literal|"UNIQUE"
argument_list|,
name|SqlKind
operator|.
name|UNIQUE
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|SqlSpecialOperator
name|PRIMARY
init|=
operator|new
name|SqlSpecialOperator
argument_list|(
literal|"PRIMARY KEY"
argument_list|,
name|SqlKind
operator|.
name|PRIMARY_KEY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|SqlIdentifier
name|name
decl_stmt|;
specifier|private
specifier|final
name|SqlNodeList
name|columnList
decl_stmt|;
comment|/** Creates a SqlKeyConstraint. */
name|SqlKeyConstraint
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
annotation|@
name|Nullable
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|columnList
operator|=
name|columnList
expr_stmt|;
block|}
comment|/** Creates a UNIQUE constraint. */
specifier|public
specifier|static
name|SqlKeyConstraint
name|unique
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|)
block|{
return|return
operator|new
name|SqlKeyConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|)
return|;
block|}
comment|/** Creates a PRIMARY KEY constraint. */
specifier|public
specifier|static
name|SqlKeyConstraint
name|primary
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|)
block|{
return|return
operator|new
name|SqlKeyConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|PRIMARY
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|UNIQUE
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nullness"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getOperandList
parameter_list|()
block|{
return|return
name|ImmutableNullableList
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|columnList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"CONSTRAINT"
argument_list|)
expr_stmt|;
name|name
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|keyword
argument_list|(
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// "UNIQUE" or "PRIMARY KEY"
name|columnList
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

