begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandTypeChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_comment
comment|/**  * The<code>TIMESTAMPDIFF</code> function, which calculates the difference  * between two timestamps.  *  *<p>The SQL syntax is  *  *<blockquote>  *<code>TIMESTAMPDIFF(<i>timestamp interval</i>,<i>timestamp</i>,  *<i>timestamp</i>)</code>  *</blockquote>  *  *<p>The interval time unit can one of the following literals:<ul>  *<li>NANOSECOND (and synonym SQL_TSI_FRAC_SECOND)  *<li>MICROSECOND (and synonyms SQL_TSI_MICROSECOND, FRAC_SECOND)  *<li>SECOND (and synonym SQL_TSI_SECOND)  *<li>MINUTE (and synonym  SQL_TSI_MINUTE)  *<li>HOUR (and synonym  SQL_TSI_HOUR)  *<li>DAY (and synonym SQL_TSI_DAY)  *<li>WEEK (and synonym  SQL_TSI_WEEK)  *<li>MONTH (and synonym SQL_TSI_MONTH)  *<li>QUARTER (and synonym SQL_TSI_QUARTER)  *<li>YEAR (and synonym  SQL_TSI_YEAR)  *</ul>  *  *<p>Returns difference between two timestamps in indicated timestamp  * interval.  */
end_comment

begin_class
class|class
name|SqlTimestampDiffFunction
extends|extends
name|SqlFunction
block|{
specifier|private
specifier|static
name|RelDataType
name|inferReturnType2
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|TimeUnit
name|timeUnit
decl_stmt|;
specifier|final
name|RelDataType
name|type1
decl_stmt|;
specifier|final
name|RelDataType
name|type2
decl_stmt|;
if|if
condition|(
name|opBinding
operator|.
name|isOperandLiteral
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|type1
operator|=
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|type2
operator|=
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|timeUnit
operator|=
name|opBinding
operator|.
name|getOperandLiteralValue
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeUnit
operator|=
name|opBinding
operator|.
name|getOperandLiteralValue
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
expr_stmt|;
name|type1
operator|=
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|type2
operator|=
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|SqlTypeName
name|sqlTypeName
init|=
name|timeUnit
operator|==
name|TimeUnit
operator|.
name|NANOSECOND
condition|?
name|SqlTypeName
operator|.
name|BIGINT
else|:
name|SqlTypeName
operator|.
name|INTEGER
decl_stmt|;
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|)
argument_list|,
name|type1
operator|.
name|isNullable
argument_list|()
operator|||
name|type2
operator|.
name|isNullable
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates a SqlTimestampDiffFunction. */
name|SqlTimestampDiffFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlOperandTypeChecker
name|operandTypeChecker
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|SqlKind
operator|.
name|TIMESTAMP_DIFF
argument_list|,
name|SqlTimestampDiffFunction
operator|::
name|inferReturnType2
argument_list|,
literal|null
argument_list|,
name|operandTypeChecker
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
name|super
operator|.
name|validateCall
argument_list|(
name|call
argument_list|,
name|validator
argument_list|,
name|scope
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
comment|// This is either a time unit or a time frame:
comment|//
comment|//  * In "TIMESTAMPDIFF(YEAR, timestamp1, timestamp2)" operand 0 is a
comment|//    SqlIntervalQualifier with startUnit = YEAR and timeFrameName = null.
comment|//    The same is true for BigQuery's TIMESTAMP_DIFF(), however the
comment|//    SqlIntervalQualifier is operand 2 due to differing parameter orders.
comment|//
comment|//  * In "TIMESTAMP_ADD(MINUTE15, timestamp1, timestamp2) operand 0 is a
comment|//    SqlIntervalQualifier with startUnit = EPOCH and timeFrameName =
comment|//    'MINUTE15'. As above, for BigQuery's TIMESTAMP_DIFF() the
comment|//    SqlIntervalQualifier is found in operand 2 instead.
comment|//
comment|// If the latter, check that timeFrameName is valid.
if|if
condition|(
name|call
operator|.
name|operand
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|SqlIntervalQualifier
condition|)
block|{
name|validator
operator|.
name|validateTimeFrame
argument_list|(
name|call
operator|.
name|operand
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validator
operator|.
name|validateTimeFrame
argument_list|(
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

