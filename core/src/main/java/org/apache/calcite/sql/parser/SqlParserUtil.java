begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Casing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|CalciteContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlBinaryOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDateLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNumericLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlPostfixOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlPrefixOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSpecialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlTimeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlTimestampLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|PrecedenceClimbingParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimeString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Utility methods relating to parsing SQL.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SqlParserUtil
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getParserTracer
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|SqlParserUtil
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Returns the character-set prefix of a SQL string literal; returns null if    * there is none. */
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|getCharacterSet
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|'N'
condition|)
block|{
return|return
name|CalciteSystemProperty
operator|.
name|DEFAULT_NATIONAL_CHARSET
operator|.
name|value
argument_list|()
return|;
block|}
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"'"
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
return|;
comment|// skip prefixed '_'
block|}
comment|/**    * Converts the contents of an sql quoted string literal into the    * corresponding Java string representation (removing leading and trailing    * quotes and unescaping internal doubled quotes).    */
specifier|public
specifier|static
name|String
name|parseString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"'"
argument_list|)
decl_stmt|;
comment|// start of body
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|strip
argument_list|(
name|s
argument_list|,
literal|"'"
argument_list|,
literal|"'"
argument_list|,
literal|"''"
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|parseDecimal
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|parseInteger
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|// CHECKSTYLE: IGNORE 1
comment|/** @deprecated this method is not localized for Farrago standards */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Date
name|parseDate
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|// CHECKSTYLE: IGNORE 1
comment|/** @deprecated Does not parse SQL:99 milliseconds */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Time
name|parseTime
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|// CHECKSTYLE: IGNORE 1
comment|/** @deprecated this method is not localized for Farrago standards */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|parseTimestamp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlDateLiteral
name|parseDateLiteral
parameter_list|(
name|String
name|s
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
specifier|final
name|Calendar
name|cal
init|=
name|DateTimeUtils
operator|.
name|parseDateFormat
argument_list|(
name|s
argument_list|,
name|Format
operator|.
name|get
argument_list|()
operator|.
name|date
argument_list|,
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cal
operator|==
literal|null
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|RESOURCE
operator|.
name|illegalLiteral
argument_list|(
literal|"DATE"
argument_list|,
name|s
argument_list|,
name|RESOURCE
operator|.
name|badFormat
argument_list|(
name|DateTimeUtils
operator|.
name|DATE_FORMAT_STRING
argument_list|)
operator|.
name|str
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|DateString
name|d
init|=
name|DateString
operator|.
name|fromCalendarFields
argument_list|(
name|cal
argument_list|)
decl_stmt|;
return|return
name|SqlLiteral
operator|.
name|createDate
argument_list|(
name|d
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTimeLiteral
name|parseTimeLiteral
parameter_list|(
name|String
name|s
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
specifier|final
name|DateTimeUtils
operator|.
name|PrecisionTime
name|pt
init|=
name|DateTimeUtils
operator|.
name|parsePrecisionDateTimeLiteral
argument_list|(
name|s
argument_list|,
name|Format
operator|.
name|get
argument_list|()
operator|.
name|time
argument_list|,
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|pt
operator|==
literal|null
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|RESOURCE
operator|.
name|illegalLiteral
argument_list|(
literal|"TIME"
argument_list|,
name|s
argument_list|,
name|RESOURCE
operator|.
name|badFormat
argument_list|(
name|DateTimeUtils
operator|.
name|TIME_FORMAT_STRING
argument_list|)
operator|.
name|str
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|TimeString
name|t
init|=
name|TimeString
operator|.
name|fromCalendarFields
argument_list|(
name|pt
operator|.
name|getCalendar
argument_list|()
argument_list|)
operator|.
name|withFraction
argument_list|(
name|pt
operator|.
name|getFraction
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SqlLiteral
operator|.
name|createTime
argument_list|(
name|t
argument_list|,
name|pt
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlTimestampLiteral
name|parseTimestampLiteral
parameter_list|(
name|String
name|s
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
specifier|final
name|Format
name|format
init|=
name|Format
operator|.
name|get
argument_list|()
decl_stmt|;
name|DateTimeUtils
operator|.
name|PrecisionTime
name|pt
init|=
literal|null
decl_stmt|;
comment|// Allow timestamp literals with and without time fields (as does
comment|// PostgreSQL); TODO: require time fields except in Babel's lenient mode
specifier|final
name|DateFormat
index|[]
name|dateFormats
init|=
block|{
name|format
operator|.
name|timestamp
block|,
name|format
operator|.
name|date
block|}
decl_stmt|;
for|for
control|(
name|DateFormat
name|dateFormat
range|:
name|dateFormats
control|)
block|{
name|pt
operator|=
name|DateTimeUtils
operator|.
name|parsePrecisionDateTimeLiteral
argument_list|(
name|s
argument_list|,
name|dateFormat
argument_list|,
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|pt
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|pt
operator|==
literal|null
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|RESOURCE
operator|.
name|illegalLiteral
argument_list|(
literal|"TIMESTAMP"
argument_list|,
name|s
argument_list|,
name|RESOURCE
operator|.
name|badFormat
argument_list|(
name|DateTimeUtils
operator|.
name|TIMESTAMP_FORMAT_STRING
argument_list|)
operator|.
name|str
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|TimestampString
name|ts
init|=
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|pt
operator|.
name|getCalendar
argument_list|()
argument_list|)
operator|.
name|withFraction
argument_list|(
name|pt
operator|.
name|getFraction
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|SqlLiteral
operator|.
name|createTimestamp
argument_list|(
name|ts
argument_list|,
name|pt
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlIntervalLiteral
name|parseIntervalLiteral
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|int
name|sign
parameter_list|,
name|String
name|s
parameter_list|,
name|SqlIntervalQualifier
name|intervalQualifier
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
name|SqlUtil
operator|.
name|newContextException
argument_list|(
name|pos
argument_list|,
name|RESOURCE
operator|.
name|illegalIntervalLiteral
argument_list|(
name|s
operator|+
literal|" "
operator|+
name|intervalQualifier
operator|.
name|toString
argument_list|()
argument_list|,
name|pos
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|SqlLiteral
operator|.
name|createInterval
argument_list|(
name|sign
argument_list|,
name|s
argument_list|,
name|intervalQualifier
argument_list|,
name|pos
argument_list|)
return|;
block|}
comment|/**    * Checks if the date/time format is valid, throws if not.    *    * @param pattern {@link SimpleDateFormat}  pattern    */
specifier|public
specifier|static
name|void
name|checkDateFormat
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|pattern
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|df
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts the interval value into a millisecond representation.    *    * @param interval Interval    * @return a long value that represents millisecond equivalent of the    * interval value.    */
specifier|public
specifier|static
name|long
name|intervalToMillis
parameter_list|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
name|interval
parameter_list|)
block|{
return|return
name|intervalToMillis
argument_list|(
name|interval
operator|.
name|getIntervalLiteral
argument_list|()
argument_list|,
name|interval
operator|.
name|getIntervalQualifier
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|intervalToMillis
parameter_list|(
name|String
name|literal
parameter_list|,
name|SqlIntervalQualifier
name|intervalQualifier
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|intervalQualifier
operator|.
name|isYearMonth
argument_list|()
argument_list|,
literal|"interval must be day time"
argument_list|)
expr_stmt|;
name|int
index|[]
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|intervalQualifier
operator|.
name|evaluateIntervalLiteral
argument_list|(
name|literal
argument_list|,
name|intervalQualifier
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
assert|assert
name|ret
operator|!=
literal|null
assert|;
block|}
catch|catch
parameter_list|(
name|CalciteContextException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while parsing day-to-second interval "
operator|+
name|literal
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|long
name|l
init|=
literal|0
decl_stmt|;
name|long
index|[]
name|conv
init|=
operator|new
name|long
index|[
literal|5
index|]
decl_stmt|;
name|conv
index|[
literal|4
index|]
operator|=
literal|1
expr_stmt|;
comment|// millisecond
name|conv
index|[
literal|3
index|]
operator|=
name|conv
index|[
literal|4
index|]
operator|*
literal|1000
expr_stmt|;
comment|// second
name|conv
index|[
literal|2
index|]
operator|=
name|conv
index|[
literal|3
index|]
operator|*
literal|60
expr_stmt|;
comment|// minute
name|conv
index|[
literal|1
index|]
operator|=
name|conv
index|[
literal|2
index|]
operator|*
literal|60
expr_stmt|;
comment|// hour
name|conv
index|[
literal|0
index|]
operator|=
name|conv
index|[
literal|1
index|]
operator|*
literal|24
expr_stmt|;
comment|// day
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|+=
name|conv
index|[
name|i
operator|-
literal|1
index|]
operator|*
name|ret
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|ret
index|[
literal|0
index|]
operator|*
name|l
return|;
block|}
comment|/**    * Converts the interval value into a months representation.    *    * @param interval Interval    * @return a long value that represents months equivalent of the interval    * value.    */
specifier|public
specifier|static
name|long
name|intervalToMonths
parameter_list|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
name|interval
parameter_list|)
block|{
return|return
name|intervalToMonths
argument_list|(
name|interval
operator|.
name|getIntervalLiteral
argument_list|()
argument_list|,
name|interval
operator|.
name|getIntervalQualifier
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|intervalToMonths
parameter_list|(
name|String
name|literal
parameter_list|,
name|SqlIntervalQualifier
name|intervalQualifier
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|intervalQualifier
operator|.
name|isYearMonth
argument_list|()
argument_list|,
literal|"interval must be year month"
argument_list|)
expr_stmt|;
name|int
index|[]
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|intervalQualifier
operator|.
name|evaluateIntervalLiteral
argument_list|(
name|literal
argument_list|,
name|intervalQualifier
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
assert|assert
name|ret
operator|!=
literal|null
assert|;
block|}
catch|catch
parameter_list|(
name|CalciteContextException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while parsing year-to-month interval "
operator|+
name|literal
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|long
name|l
init|=
literal|0
decl_stmt|;
name|long
index|[]
name|conv
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
name|conv
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
comment|// months
name|conv
index|[
literal|0
index|]
operator|=
name|conv
index|[
literal|1
index|]
operator|*
literal|12
expr_stmt|;
comment|// years
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|+=
name|conv
index|[
name|i
operator|-
literal|1
index|]
operator|*
name|ret
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|ret
index|[
literal|0
index|]
operator|*
name|l
return|;
block|}
comment|/**    * Parses a positive int. All characters have to be digits.    *    * @see Integer#parseInt(String)    * @throws java.lang.NumberFormatException if invalid number or leading '-'    */
specifier|public
specifier|static
name|int
name|parsePositiveInt
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
name|value
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Parses a Binary string. SQL:99 defines a binary string as a hexstring    * with EVEN nbr of hex digits.    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|byte
index|[]
name|parseBinaryString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|"\t"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|"\r"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|"\f"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
assert|assert
operator|(
name|s
operator|.
name|length
argument_list|()
operator|&
literal|1
operator|)
operator|==
literal|0
assert|;
comment|// must be even nbr of hex digits
specifier|final
name|int
name|lengthToBe
init|=
name|s
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
name|s
operator|=
literal|"ff"
operator|+
name|s
expr_stmt|;
name|BigInteger
name|bigInt
init|=
operator|new
name|BigInteger
argument_list|(
name|s
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|lengthToBe
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bigInt
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Converts a quoted identifier, unquoted identifier, or quoted string to a    * string of its contents.    *    *<p>First, if {@code startQuote} is provided, {@code endQuote} and    * {@code escape} must also be provided, and this method removes quotes.    *    *<p>Finally, converts the string to the provided casing.    */
specifier|public
specifier|static
name|String
name|strip
parameter_list|(
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|String
name|startQuote
parameter_list|,
annotation|@
name|Nullable
name|String
name|endQuote
parameter_list|,
annotation|@
name|Nullable
name|String
name|escape
parameter_list|,
name|Casing
name|casing
parameter_list|)
block|{
if|if
condition|(
name|startQuote
operator|!=
literal|null
condition|)
block|{
return|return
name|stripQuotes
argument_list|(
name|s
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|startQuote
argument_list|,
literal|"startQuote"
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|endQuote
argument_list|,
literal|"endQuote"
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|escape
argument_list|,
literal|"escape"
argument_list|)
argument_list|,
name|casing
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|toCase
argument_list|(
name|s
argument_list|,
name|casing
argument_list|)
return|;
block|}
block|}
comment|/**    * Unquotes a quoted string, using different quotes for beginning and end.    */
specifier|public
specifier|static
name|String
name|stripQuotes
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|startQuote
parameter_list|,
name|String
name|endQuote
parameter_list|,
name|String
name|escape
parameter_list|,
name|Casing
name|casing
parameter_list|)
block|{
assert|assert
name|startQuote
operator|.
name|length
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|endQuote
operator|.
name|length
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|s
operator|.
name|startsWith
argument_list|(
name|startQuote
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
name|endQuote
argument_list|)
operator|:
name|s
assert|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
name|escape
argument_list|,
name|endQuote
argument_list|)
expr_stmt|;
return|return
name|toCase
argument_list|(
name|s
argument_list|,
name|casing
argument_list|)
return|;
block|}
comment|/**    * Converts an identifier to a particular casing.    */
specifier|public
specifier|static
name|String
name|toCase
parameter_list|(
name|String
name|s
parameter_list|,
name|Casing
name|casing
parameter_list|)
block|{
switch|switch
condition|(
name|casing
condition|)
block|{
case|case
name|TO_UPPER
case|:
return|return
name|s
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
case|case
name|TO_LOWER
case|:
return|return
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
default|default:
return|return
name|s
return|;
block|}
block|}
comment|/**    * Trims a string for given characters from left and right. E.g.    * {@code trim("aBaac123AabC","abBcC")} returns {@code "123A"}.    */
specifier|public
specifier|static
name|String
name|trim
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|chars
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|start
decl_stmt|;
for|for
control|(
name|start
operator|=
literal|0
init|;
name|start
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|start
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|chars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|int
name|stop
decl_stmt|;
for|for
control|(
name|stop
operator|=
name|s
operator|.
name|length
argument_list|()
init|;
name|stop
operator|>
name|start
condition|;
name|stop
operator|--
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|stop
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|chars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|start
operator|>=
name|stop
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|stop
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|StringAndPos
name|findPos
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|StringAndPos
operator|.
name|of
argument_list|(
name|sql
argument_list|)
return|;
block|}
comment|/**    * Returns the (1-based) line and column corresponding to a particular    * (0-based) offset in a string.    *    *<p>Converse of {@link #lineColToIndex(String, int, int)}.    */
specifier|public
specifier|static
name|int
index|[]
name|indexToLineCol
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|int
name|line
init|=
literal|0
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|prevj
init|=
name|j
decl_stmt|;
name|j
operator|=
name|nextLine
argument_list|(
name|sql
argument_list|,
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|j
operator|<
literal|0
operator|)
operator|||
operator|(
name|j
operator|>
name|i
operator|)
condition|)
block|{
return|return
operator|new
name|int
index|[]
block|{
name|line
operator|+
literal|1
block|,
name|i
operator|-
name|prevj
operator|+
literal|1
block|}
return|;
block|}
operator|++
name|line
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|nextLine
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|rn
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"\r\n"
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|int
name|r
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"\r"
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|<
literal|0
operator|)
operator|&&
operator|(
name|n
operator|<
literal|0
operator|)
condition|)
block|{
assert|assert
name|rn
operator|<
literal|0
assert|;
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
operator|(
name|rn
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|rn
operator|<
name|n
operator|)
operator|&&
operator|(
name|rn
operator|<=
name|r
operator|)
condition|)
block|{
return|return
name|rn
operator|+
literal|2
return|;
comment|// looking at "\r\n"
block|}
if|else if
condition|(
operator|(
name|r
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|r
operator|<
name|n
operator|)
condition|)
block|{
return|return
name|r
operator|+
literal|1
return|;
comment|// looking at "\r"
block|}
else|else
block|{
return|return
name|n
operator|+
literal|1
return|;
comment|// looking at "\n"
block|}
block|}
comment|/**    * Finds the position (0-based) in a string which corresponds to a given    * line and column (1-based).    *    *<p>Converse of {@link #indexToLineCol(String, int)}.    */
specifier|public
specifier|static
name|int
name|lineColToIndex
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|)
block|{
operator|--
name|line
expr_stmt|;
operator|--
name|column
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|line
operator|--
operator|>
literal|0
condition|)
block|{
name|i
operator|=
name|nextLine
argument_list|(
name|sql
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|i
operator|+
name|column
return|;
block|}
comment|/**    * Converts a string to a string with one or two carets in it. For example,    *<code>addCarets("values (foo)", 1, 9, 1, 12)</code> yields "values    * (^foo^)".    */
specifier|public
specifier|static
name|String
name|addCarets
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|col
parameter_list|,
name|int
name|endLine
parameter_list|,
name|int
name|endCol
parameter_list|)
block|{
name|String
name|sqlWithCarets
decl_stmt|;
name|int
name|cut
init|=
name|lineColToIndex
argument_list|(
name|sql
argument_list|,
name|line
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|sqlWithCarets
operator|=
name|sql
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cut
argument_list|)
operator|+
literal|"^"
operator|+
name|sql
operator|.
name|substring
argument_list|(
name|cut
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|col
operator|!=
name|endCol
operator|)
operator|||
operator|(
name|line
operator|!=
name|endLine
operator|)
condition|)
block|{
name|cut
operator|=
name|lineColToIndex
argument_list|(
name|sqlWithCarets
argument_list|,
name|endLine
argument_list|,
name|endCol
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|==
name|endLine
condition|)
block|{
operator|++
name|cut
expr_stmt|;
comment|// for caret
block|}
if|if
condition|(
name|cut
operator|<
name|sqlWithCarets
operator|.
name|length
argument_list|()
condition|)
block|{
name|sqlWithCarets
operator|=
name|sqlWithCarets
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cut
argument_list|)
operator|+
literal|"^"
operator|+
name|sqlWithCarets
operator|.
name|substring
argument_list|(
name|cut
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sqlWithCarets
operator|+=
literal|"^"
expr_stmt|;
block|}
block|}
return|return
name|sqlWithCarets
return|;
block|}
specifier|public
specifier|static
annotation|@
name|Nullable
name|String
name|getTokenVal
parameter_list|(
name|String
name|token
parameter_list|)
block|{
comment|// We don't care about the token which are not string
if|if
condition|(
operator|!
name|token
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Remove the quote from the token
name|int
name|startIndex
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|"\""
argument_list|)
decl_stmt|;
name|int
name|endIndex
init|=
name|token
operator|.
name|lastIndexOf
argument_list|(
literal|"\""
argument_list|)
decl_stmt|;
name|String
name|tokenVal
init|=
name|token
operator|.
name|substring
argument_list|(
name|startIndex
operator|+
literal|1
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|char
name|c
init|=
name|tokenVal
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|tokenVal
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Extracts the values from a collation name.    *    *<p>Collation names are on the form<i>charset$locale$strength</i>.    *    * @param in The collation name    * @return A {@link ParsedCollation}    */
specifier|public
specifier|static
name|ParsedCollation
name|parseCollation
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|in
argument_list|,
literal|"$"
argument_list|)
decl_stmt|;
name|String
name|charsetStr
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|localeStr
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|strength
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|strength
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|strength
operator|=
name|CalciteSystemProperty
operator|.
name|DEFAULT_COLLATION_STRENGTH
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|SqlUtil
operator|.
name|getCharset
argument_list|(
name|charsetStr
argument_list|)
decl_stmt|;
name|String
index|[]
name|localeParts
init|=
name|localeStr
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|Locale
name|locale
decl_stmt|;
if|if
condition|(
literal|1
operator|==
name|localeParts
operator|.
name|length
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|localeParts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|2
operator|==
name|localeParts
operator|.
name|length
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|localeParts
index|[
literal|0
index|]
argument_list|,
name|localeParts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|3
operator|==
name|localeParts
operator|.
name|length
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|localeParts
index|[
literal|0
index|]
argument_list|,
name|localeParts
index|[
literal|1
index|]
argument_list|,
name|localeParts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|RESOURCE
operator|.
name|illegalLocaleFormat
argument_list|(
name|localeStr
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
operator|new
name|ParsedCollation
argument_list|(
name|charset
argument_list|,
name|locale
argument_list|,
name|strength
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|String
index|[]
name|toStringArray
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
index|[]
name|toNodeArray
parameter_list|(
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|SqlNode
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
index|[]
name|toNodeArray
parameter_list|(
name|SqlNodeList
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|SqlNode
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/** Converts "ROW (1, 2)" to "(1, 2)"    * and "3" to "(3)". */
specifier|public
specifier|static
name|SqlNodeList
name|stripRow
parameter_list|(
name|SqlNode
name|n
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|list
decl_stmt|;
switch|switch
condition|(
name|n
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|ROW
case|:
name|list
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|n
operator|)
operator|.
name|getOperandList
argument_list|()
expr_stmt|;
break|break;
default|default:
name|list
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SqlNodeList
argument_list|(
name|list
argument_list|,
name|n
operator|.
name|getParserPosition
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
specifier|static
name|String
name|rightTrim
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|int
name|stop
decl_stmt|;
for|for
control|(
name|stop
operator|=
name|s
operator|.
name|length
argument_list|()
init|;
name|stop
operator|>
literal|0
condition|;
name|stop
operator|--
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|stop
operator|-
literal|1
argument_list|)
operator|!=
name|c
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|stop
operator|>
literal|0
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|stop
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Replaces a range of elements in a list with a single element. For    * example, if list contains<code>{A, B, C, D, E}</code> then<code>    * replaceSublist(list, X, 1, 4)</code> returns<code>{A, X, E}</code>.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|replaceSublist
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|T
name|o
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|list
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|start
operator|<
name|end
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|end
operator|-
literal|1
init|;
name|i
operator|>
name|start
condition|;
operator|--
name|i
control|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|set
argument_list|(
name|start
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts a list of {expression, operator, expression, ...} into a tree,    * taking operator precedence and associativity into account.    */
specifier|public
specifier|static
annotation|@
name|Nullable
name|SqlNode
name|toTree
parameter_list|(
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|SqlNode
condition|)
block|{
comment|// Short-cut for the simple common case
return|return
operator|(
name|SqlNode
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Attempting to reduce {}"
argument_list|,
name|list
argument_list|)
expr_stmt|;
specifier|final
name|OldTokenSequenceImpl
name|tokenSequence
init|=
operator|new
name|OldTokenSequenceImpl
argument_list|(
name|list
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|node
init|=
name|toTreeEx
argument_list|(
name|tokenSequence
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SqlKind
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Reduced {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/**    * Converts a list of {expression, operator, expression, ...} into a tree,    * taking operator precedence and associativity into account.    *    * @param list        List of operands and operators. This list is modified as    *                    expressions are reduced.    * @param start       Position of first operand in the list. Anything to the    *                    left of this (besides the immediately preceding operand)    *                    is ignored. Generally use value 1.    * @param minPrec     Minimum precedence to consider. If the method encounters    *                    an operator of lower precedence, it doesn't reduce any    *                    further.    * @param stopperKind If not {@link SqlKind#OTHER}, stop reading the list if    *                    we encounter a token of this kind.    * @return the root node of the tree which the list condenses into    */
specifier|public
specifier|static
name|SqlNode
name|toTreeEx
parameter_list|(
name|SqlSpecialOperator
operator|.
name|TokenSequence
name|list
parameter_list|,
name|int
name|start
parameter_list|,
specifier|final
name|int
name|minPrec
parameter_list|,
specifier|final
name|SqlKind
name|stopperKind
parameter_list|)
block|{
name|PrecedenceClimbingParser
name|parser
init|=
name|list
operator|.
name|parser
argument_list|(
name|start
argument_list|,
name|token
lambda|->
block|{
if|if
condition|(
name|token
operator|instanceof
name|PrecedenceClimbingParser
operator|.
name|Op
condition|)
block|{
name|PrecedenceClimbingParser
operator|.
name|Op
name|tokenOp
init|=
operator|(
name|PrecedenceClimbingParser
operator|.
name|Op
operator|)
name|token
decl_stmt|;
specifier|final
name|SqlOperator
name|op
init|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|tokenOp
operator|.
name|o
argument_list|()
operator|)
operator|.
name|op
decl_stmt|;
return|return
name|stopperKind
operator|!=
name|SqlKind
operator|.
name|OTHER
operator|&&
name|op
operator|.
name|kind
operator|==
name|stopperKind
operator|||
name|minPrec
operator|>
literal|0
operator|&&
name|op
operator|.
name|getLeftPrec
argument_list|()
operator|<
name|minPrec
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|int
name|beforeSize
init|=
name|parser
operator|.
name|all
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|parser
operator|.
name|partialParse
argument_list|()
expr_stmt|;
specifier|final
name|int
name|afterSize
init|=
name|parser
operator|.
name|all
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|node
init|=
name|convert
argument_list|(
name|parser
operator|.
name|all
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|replaceSublist
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|beforeSize
operator|-
name|afterSize
operator|+
literal|1
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
specifier|static
name|SqlNode
name|convert
parameter_list|(
name|PrecedenceClimbingParser
operator|.
name|Token
name|token
parameter_list|)
block|{
switch|switch
condition|(
name|token
operator|.
name|type
condition|)
block|{
case|case
name|ATOM
case|:
return|return
name|requireNonNull
argument_list|(
operator|(
name|SqlNode
operator|)
name|token
operator|.
name|o
argument_list|)
return|;
case|case
name|CALL
case|:
specifier|final
name|PrecedenceClimbingParser
operator|.
name|Call
name|call
init|=
operator|(
name|PrecedenceClimbingParser
operator|.
name|Call
operator|)
name|token
decl_stmt|;
specifier|final
name|List
argument_list|<
annotation|@
name|Nullable
name|SqlNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrecedenceClimbingParser
operator|.
name|Token
name|arg
range|:
name|call
operator|.
name|args
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ToTreeListItem
name|item
init|=
operator|(
name|ToTreeListItem
operator|)
name|call
operator|.
name|op
operator|.
name|o
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|SqlNode
name|firstItem
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|op
operator|==
name|SqlStdOperatorTable
operator|.
name|UNARY_MINUS
operator|&&
name|firstItem
operator|instanceof
name|SqlNumericLiteral
condition|)
block|{
return|return
name|SqlLiteral
operator|.
name|createNegative
argument_list|(
operator|(
name|SqlNumericLiteral
operator|)
name|firstItem
argument_list|,
name|item
operator|.
name|pos
operator|.
name|plusAll
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|item
operator|.
name|op
operator|==
name|SqlStdOperatorTable
operator|.
name|UNARY_PLUS
operator|&&
name|firstItem
operator|instanceof
name|SqlNumericLiteral
condition|)
block|{
return|return
name|firstItem
return|;
block|}
block|}
return|return
name|item
operator|.
name|op
operator|.
name|createCall
argument_list|(
name|item
operator|.
name|pos
operator|.
name|plusAll
argument_list|(
name|list
argument_list|)
argument_list|,
name|list
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|token
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks a UESCAPE string for validity, and returns the escape character if    * no exception is thrown.    *    * @param s UESCAPE string to check    * @return validated escape character    */
specifier|public
specifier|static
name|char
name|checkUnicodeEscapeChar
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|unicodeEscapeCharLength
argument_list|(
name|s
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
operator|||
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
operator|||
operator|(
name|c
operator|==
literal|'+'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'"'
operator|)
operator|||
operator|(
operator|(
name|c
operator|>=
literal|'a'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'f'
operator|)
operator|)
operator|||
operator|(
operator|(
name|c
operator|>=
literal|'A'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'F'
operator|)
operator|)
condition|)
block|{
throw|throw
name|RESOURCE
operator|.
name|unicodeEscapeCharIllegal
argument_list|(
name|s
argument_list|)
operator|.
name|ex
argument_list|()
throw|;
block|}
return|return
name|c
return|;
block|}
comment|/**    * Returns whether the reported ParseException tokenImage    * allows SQL identifier.    *    * @param tokenImage The allowed tokens from the ParseException    * @param expectedTokenSequences Expected token sequences    *    * @return true if SQL identifier is allowed    */
specifier|public
specifier|static
name|boolean
name|allowsIdentifier
parameter_list|(
name|String
index|[]
name|tokenImage
parameter_list|,
name|int
index|[]
index|[]
name|expectedTokenSequences
parameter_list|)
block|{
comment|// Compares from tailing tokens first because the<IDENTIFIER>
comment|// was very probably at the tail.
for|for
control|(
name|int
name|i
init|=
name|expectedTokenSequences
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|int
index|[]
name|expectedTokenSequence
init|=
name|expectedTokenSequences
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|expectedTokenSequence
operator|.
name|length
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|--
control|)
block|{
if|if
condition|(
name|tokenImage
index|[
name|expectedTokenSequence
index|[
name|j
index|]
index|]
operator|.
name|equals
argument_list|(
literal|"<IDENTIFIER>"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/** The components of a collation definition, per the SQL standard. */
specifier|public
specifier|static
class|class
name|ParsedCollation
block|{
specifier|private
specifier|final
name|Charset
name|charset
decl_stmt|;
specifier|private
specifier|final
name|Locale
name|locale
decl_stmt|;
specifier|private
specifier|final
name|String
name|strength
decl_stmt|;
specifier|public
name|ParsedCollation
parameter_list|(
name|Charset
name|charset
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|String
name|strength
parameter_list|)
block|{
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
name|this
operator|.
name|strength
operator|=
name|strength
expr_stmt|;
block|}
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
return|return
name|charset
return|;
block|}
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|locale
return|;
block|}
specifier|public
name|String
name|getStrength
parameter_list|()
block|{
return|return
name|strength
return|;
block|}
block|}
comment|/**    * Class that holds a {@link SqlOperator} and a {@link SqlParserPos}. Used    * by {@link SqlSpecialOperator#reduceExpr} and the parser to associate a    * parsed operator with a parser position.    */
specifier|public
specifier|static
class|class
name|ToTreeListItem
block|{
specifier|private
specifier|final
name|SqlOperator
name|op
decl_stmt|;
specifier|private
specifier|final
name|SqlParserPos
name|pos
decl_stmt|;
specifier|public
name|ToTreeListItem
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|op
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|op
return|;
block|}
specifier|public
name|SqlParserPos
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
block|}
comment|/** Implementation of    * {@link org.apache.calcite.sql.SqlSpecialOperator.TokenSequence}    * based on an existing parser. */
specifier|private
specifier|static
class|class
name|TokenSequenceImpl
implements|implements
name|SqlSpecialOperator
operator|.
name|TokenSequence
block|{
specifier|final
name|List
argument_list|<
name|PrecedenceClimbingParser
operator|.
name|Token
argument_list|>
name|list
decl_stmt|;
specifier|final
name|PrecedenceClimbingParser
name|parser
decl_stmt|;
specifier|private
name|TokenSequenceImpl
parameter_list|(
name|PrecedenceClimbingParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|parser
operator|.
name|all
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PrecedenceClimbingParser
name|parser
parameter_list|(
name|int
name|start
parameter_list|,
name|Predicate
argument_list|<
name|PrecedenceClimbingParser
operator|.
name|Token
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|parser
operator|.
name|copy
argument_list|(
name|start
argument_list|,
name|predicate
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperator
name|op
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|ToTreeListItem
name|o
init|=
operator|(
name|ToTreeListItem
operator|)
name|requireNonNull
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|o
argument_list|,
parameter_list|()
lambda|->
literal|"list.get("
operator|+
name|i
operator|+
literal|").o is null in "
operator|+
name|list
argument_list|)
decl_stmt|;
return|return
name|o
operator|.
name|getOperator
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|SqlParserPos
name|pos
parameter_list|(
name|PrecedenceClimbingParser
operator|.
name|Token
name|token
parameter_list|)
block|{
switch|switch
condition|(
name|token
operator|.
name|type
condition|)
block|{
case|case
name|ATOM
case|:
return|return
name|requireNonNull
argument_list|(
operator|(
name|SqlNode
operator|)
name|token
operator|.
name|o
argument_list|,
literal|"token.o"
argument_list|)
operator|.
name|getParserPosition
argument_list|()
return|;
case|case
name|CALL
case|:
specifier|final
name|PrecedenceClimbingParser
operator|.
name|Call
name|call
init|=
operator|(
name|PrecedenceClimbingParser
operator|.
name|Call
operator|)
name|token
decl_stmt|;
name|SqlParserPos
name|pos
init|=
operator|(
operator|(
name|ToTreeListItem
operator|)
name|call
operator|.
name|op
operator|.
name|o
argument_list|()
operator|)
operator|.
name|pos
decl_stmt|;
for|for
control|(
name|PrecedenceClimbingParser
operator|.
name|Token
name|arg
range|:
name|call
operator|.
name|args
control|)
block|{
name|pos
operator|=
name|pos
operator|.
name|plus
argument_list|(
name|pos
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pos
return|;
default|default:
return|return
name|requireNonNull
argument_list|(
operator|(
name|ToTreeListItem
operator|)
name|token
operator|.
name|o
argument_list|,
literal|"token.o"
argument_list|)
operator|.
name|getPos
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SqlParserPos
name|pos
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|pos
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOp
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|o
operator|instanceof
name|ToTreeListItem
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|node
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|replaceSublist
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|SqlNode
name|e
parameter_list|)
block|{
name|SqlParserUtil
operator|.
name|replaceSublist
argument_list|(
name|list
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|parser
operator|.
name|atom
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implementation of    * {@link org.apache.calcite.sql.SqlSpecialOperator.TokenSequence}. */
specifier|private
specifier|static
class|class
name|OldTokenSequenceImpl
implements|implements
name|SqlSpecialOperator
operator|.
name|TokenSequence
block|{
specifier|final
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
argument_list|>
name|list
decl_stmt|;
specifier|private
name|OldTokenSequenceImpl
parameter_list|(
name|List
argument_list|<
annotation|@
name|Nullable
name|Object
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PrecedenceClimbingParser
name|parser
parameter_list|(
name|int
name|start
parameter_list|,
name|Predicate
argument_list|<
name|PrecedenceClimbingParser
operator|.
name|Token
argument_list|>
name|predicate
parameter_list|)
block|{
specifier|final
name|PrecedenceClimbingParser
operator|.
name|Builder
name|builder
init|=
operator|new
name|PrecedenceClimbingParser
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|Util
operator|.
name|skip
argument_list|(
name|list
argument_list|,
name|start
argument_list|)
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|ToTreeListItem
condition|)
block|{
specifier|final
name|ToTreeListItem
name|item
init|=
operator|(
name|ToTreeListItem
operator|)
name|o
decl_stmt|;
specifier|final
name|SqlOperator
name|op
init|=
name|item
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|SqlPrefixOperator
condition|)
block|{
name|builder
operator|.
name|prefix
argument_list|(
name|item
argument_list|,
name|op
operator|.
name|getLeftPrec
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|op
operator|instanceof
name|SqlPostfixOperator
condition|)
block|{
name|builder
operator|.
name|postfix
argument_list|(
name|item
argument_list|,
name|op
operator|.
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|op
operator|instanceof
name|SqlBinaryOperator
condition|)
block|{
name|builder
operator|.
name|infix
argument_list|(
name|item
argument_list|,
name|op
operator|.
name|getLeftPrec
argument_list|()
argument_list|,
name|op
operator|.
name|getLeftPrec
argument_list|()
operator|<
name|op
operator|.
name|getRightPrec
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|op
operator|instanceof
name|SqlSpecialOperator
condition|)
block|{
name|builder
operator|.
name|special
argument_list|(
name|item
argument_list|,
name|op
operator|.
name|getLeftPrec
argument_list|()
argument_list|,
name|op
operator|.
name|getRightPrec
argument_list|()
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|op2
parameter_list|)
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|PrecedenceClimbingParser
operator|.
name|Token
argument_list|>
name|tokens
init|=
name|parser
operator|.
name|all
argument_list|()
decl_stmt|;
specifier|final
name|SqlSpecialOperator
name|op1
init|=
operator|(
name|SqlSpecialOperator
operator|)
name|requireNonNull
argument_list|(
operator|(
name|ToTreeListItem
operator|)
name|op2
operator|.
name|o
argument_list|,
literal|"op2.o"
argument_list|)
operator|.
name|op
decl_stmt|;
name|SqlSpecialOperator
operator|.
name|ReduceResult
name|r
init|=
name|op1
operator|.
name|reduceExpr
argument_list|(
name|tokens
operator|.
name|indexOf
argument_list|(
name|op2
argument_list|)
argument_list|,
operator|new
name|TokenSequenceImpl
argument_list|(
name|parser
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrecedenceClimbingParser
operator|.
name|Result
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|r
operator|.
name|startOrdinal
argument_list|)
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
name|r
operator|.
name|endOrdinal
operator|-
literal|1
argument_list|)
argument_list|,
name|parser
operator|.
name|atom
argument_list|(
name|r
operator|.
name|node
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|atom
argument_list|(
name|requireNonNull
argument_list|(
name|o
argument_list|,
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperator
name|op
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|ToTreeListItem
name|item
init|=
operator|(
name|ToTreeListItem
operator|)
name|requireNonNull
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"list.get("
operator|+
name|i
operator|+
literal|")"
argument_list|)
decl_stmt|;
return|return
name|item
operator|.
name|op
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlParserPos
name|pos
parameter_list|(
name|int
name|i
parameter_list|)
block|{
specifier|final
name|Object
name|o
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|o
operator|instanceof
name|ToTreeListItem
condition|?
operator|(
operator|(
name|ToTreeListItem
operator|)
name|o
operator|)
operator|.
name|pos
else|:
name|requireNonNull
argument_list|(
operator|(
name|SqlNode
operator|)
name|o
argument_list|,
parameter_list|()
lambda|->
literal|"item "
operator|+
name|i
operator|+
literal|" is null in "
operator|+
name|list
argument_list|)
operator|.
name|getParserPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOp
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|ToTreeListItem
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|node
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|requireNonNull
argument_list|(
operator|(
name|SqlNode
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|replaceSublist
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|SqlNode
name|e
parameter_list|)
block|{
name|SqlParserUtil
operator|.
name|replaceSublist
argument_list|(
name|list
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Pre-initialized {@link DateFormat} objects, to be used within the current    * thread, because {@code DateFormat} is not thread-safe. */
specifier|private
specifier|static
class|class
name|Format
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
annotation|@
name|Nullable
name|Format
argument_list|>
name|PER_THREAD
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|Format
operator|::
operator|new
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Format
name|get
parameter_list|()
block|{
return|return
name|requireNonNull
argument_list|(
name|PER_THREAD
operator|.
name|get
argument_list|()
argument_list|,
literal|"PER_THREAD.get()"
argument_list|)
return|;
block|}
specifier|final
name|DateFormat
name|timestamp
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DateTimeUtils
operator|.
name|TIMESTAMP_FORMAT_STRING
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|time
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DateTimeUtils
operator|.
name|TIME_FORMAT_STRING
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|DateFormat
name|date
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DateTimeUtils
operator|.
name|DATE_FORMAT_STRING
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

