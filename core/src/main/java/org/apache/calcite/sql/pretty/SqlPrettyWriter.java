begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|pretty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Spaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|AnsiSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Unsafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Pretty printer for SQL statements.  *  *<p>There are several options to control the format.  *  *<table>  *<caption>Formatting options</caption>  *<tr>  *<th>Option</th>  *<th>Description</th>  *<th>Default</th>  *</tr>  *<tr>  *<td>{@link #setSelectListItemsOnSeparateLines SelectListItemsOnSeparateLines}  *</td>  *<td>Whether each item in the select clause is on its own line</td>  *<td>false</td>  *</tr>  *<tr>  *<td>{@link #setCaseClausesOnNewLines CaseClausesOnNewLines}</td>  *<td>Whether the WHEN, THEN and ELSE clauses of a CASE expression appear at  * the start of a new line.</td>  *<td>false</td>  *</tr>  *<tr>  *<td>{@link #setIndentation Indentation}</td>  *<td>Number of spaces to indent</td>  *<td>4</td>  *</tr>  *<tr>  *<td>{@link #setKeywordsLowerCase KeywordsLowerCase}</td>  *<td>Whether to print keywords (SELECT, AS, etc.) in lower-case.</td>  *<td>false</td>  *</tr>  *<tr>  *<td>{@link #isAlwaysUseParentheses ParenthesizeAllExprs}</td>  *<td>Whether to enclose all expressions in parentheses, even if the operator  * has high enough precedence that the parentheses are not required.  *  *<p>For example, the parentheses are required in the expression<code>(a + b)  * c</code> because the '*' operator has higher precedence than the '+'  * operator, and so without the parentheses, the expression would be equivalent  * to<code>a + (b * c)</code>. The fully-parenthesized expression,<code>((a +  * b) * c)</code> is unambiguous even if you don't know the precedence of every  * operator.</td>  *<td></td>  *</tr>  *<tr>  *<td>{@link #setQuoteAllIdentifiers QuoteAllIdentifiers}</td>  *<td>Whether to quote all identifiers, even those which would be correct  * according to the rules of the {@link SqlDialect} if quotation marks were  * omitted.</td>  *<td>true</td>  *</tr>  *<tr>  *<td>{@link #setSelectListItemsOnSeparateLines SelectListItemsOnSeparateLines}  *</td>  *<td>Whether each item in the select clause is on its own line.</td>  *<td>false</td>  *</tr>  *<tr>  *<td>{@link #setSubQueryStyle SubQueryStyle}</td>  *<td>Style for formatting sub-queries. Values are:  * {@link org.apache.calcite.sql.SqlWriter.SubQueryStyle#HYDE Hyde},  * {@link org.apache.calcite.sql.SqlWriter.SubQueryStyle#BLACK Black}.</td>  *  *<td>{@link org.apache.calcite.sql.SqlWriter.SubQueryStyle#HYDE Hyde}</td>  *</tr>  *<tr>  *<td>{@link #setLineLength LineLength}</td>  *<td>Set the desired maximum length for lines (to look nice in editors,  * printouts, etc.).</td>  *<td>0</td>  *</tr>  *</table>  */
end_comment

begin_class
specifier|public
class|class
name|SqlPrettyWriter
implements|implements
name|SqlWriter
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|protected
specifier|static
specifier|final
name|CalciteLogger
name|LOGGER
init|=
operator|new
name|CalciteLogger
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.calcite.sql.pretty.SqlPrettyWriter"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Bean holding the default property values.    */
specifier|private
specifier|static
specifier|final
name|Bean
name|DEFAULT_BEAN
init|=
operator|new
name|SqlPrettyWriter
argument_list|(
name|AnsiSqlDialect
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getBean
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|NL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlDialect
name|dialect
decl_stmt|;
specifier|private
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|PrintWriter
name|pw
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|FrameImpl
argument_list|>
name|listStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|dynamicParameters
decl_stmt|;
specifier|protected
name|FrameImpl
name|frame
decl_stmt|;
specifier|private
name|boolean
name|needWhitespace
decl_stmt|;
specifier|protected
name|String
name|nextWhitespace
decl_stmt|;
specifier|protected
name|boolean
name|alwaysUseParentheses
decl_stmt|;
specifier|private
name|boolean
name|keywordsLowerCase
decl_stmt|;
specifier|private
name|Bean
name|bean
decl_stmt|;
specifier|private
name|boolean
name|quoteAllIdentifiers
decl_stmt|;
specifier|private
name|int
name|indentation
decl_stmt|;
specifier|private
name|boolean
name|clauseStartsLine
decl_stmt|;
specifier|private
name|boolean
name|selectListItemsOnSeparateLines
decl_stmt|;
specifier|private
name|boolean
name|selectListExtraIndentFlag
decl_stmt|;
specifier|private
name|int
name|currentIndent
decl_stmt|;
specifier|private
name|boolean
name|windowDeclListNewline
decl_stmt|;
specifier|private
name|boolean
name|updateSetListNewline
decl_stmt|;
specifier|private
name|boolean
name|windowNewline
decl_stmt|;
specifier|private
name|SubQueryStyle
name|subQueryStyle
decl_stmt|;
specifier|private
name|boolean
name|whereListItemsOnSeparateLines
decl_stmt|;
specifier|private
name|boolean
name|caseClausesOnNewLines
decl_stmt|;
specifier|private
name|int
name|lineLength
decl_stmt|;
specifier|private
name|int
name|charCount
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlPrettyWriter
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|,
name|boolean
name|alwaysUseParentheses
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
block|{
if|if
condition|(
name|pw
operator|==
literal|null
condition|)
block|{
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pw
operator|=
name|pw
expr_stmt|;
name|this
operator|.
name|dialect
operator|=
name|dialect
expr_stmt|;
name|this
operator|.
name|alwaysUseParentheses
operator|=
name|alwaysUseParentheses
expr_stmt|;
name|resetSettings
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SqlPrettyWriter
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|,
name|boolean
name|alwaysUseParentheses
parameter_list|)
block|{
name|this
argument_list|(
name|dialect
argument_list|,
name|alwaysUseParentheses
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlPrettyWriter
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|)
block|{
name|this
argument_list|(
name|dialect
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Sets whether the WHEN, THEN and ELSE clauses of a CASE expression appear    * at the start of a new line. The default is false.    */
specifier|public
name|void
name|setCaseClausesOnNewLines
parameter_list|(
name|boolean
name|caseClausesOnNewLines
parameter_list|)
block|{
name|this
operator|.
name|caseClausesOnNewLines
operator|=
name|caseClausesOnNewLines
expr_stmt|;
block|}
comment|/**    * Sets the sub-query style. Default is    * {@link org.apache.calcite.sql.SqlWriter.SubQueryStyle#HYDE}.    */
specifier|public
name|void
name|setSubQueryStyle
parameter_list|(
name|SubQueryStyle
name|subQueryStyle
parameter_list|)
block|{
name|this
operator|.
name|subQueryStyle
operator|=
name|subQueryStyle
expr_stmt|;
block|}
specifier|public
name|void
name|setWindowNewline
parameter_list|(
name|boolean
name|windowNewline
parameter_list|)
block|{
name|this
operator|.
name|windowNewline
operator|=
name|windowNewline
expr_stmt|;
block|}
specifier|public
name|void
name|setWindowDeclListNewline
parameter_list|(
name|boolean
name|windowDeclListNewline
parameter_list|)
block|{
name|this
operator|.
name|windowDeclListNewline
operator|=
name|windowDeclListNewline
expr_stmt|;
block|}
specifier|public
name|int
name|getIndentation
parameter_list|()
block|{
return|return
name|indentation
return|;
block|}
specifier|public
name|boolean
name|isAlwaysUseParentheses
parameter_list|()
block|{
return|return
name|alwaysUseParentheses
return|;
block|}
specifier|public
name|boolean
name|inQuery
parameter_list|()
block|{
return|return
operator|(
name|frame
operator|==
literal|null
operator|)
operator|||
operator|(
name|frame
operator|.
name|frameType
operator|==
name|FrameTypeEnum
operator|.
name|ORDER_BY
operator|)
operator|||
operator|(
name|frame
operator|.
name|frameType
operator|==
name|FrameTypeEnum
operator|.
name|WITH
operator|)
operator|||
operator|(
name|frame
operator|.
name|frameType
operator|==
name|FrameTypeEnum
operator|.
name|SETOP
operator|)
return|;
block|}
specifier|public
name|boolean
name|isQuoteAllIdentifiers
parameter_list|()
block|{
return|return
name|quoteAllIdentifiers
return|;
block|}
specifier|public
name|boolean
name|isClauseStartsLine
parameter_list|()
block|{
return|return
name|clauseStartsLine
return|;
block|}
specifier|public
name|boolean
name|isSelectListItemsOnSeparateLines
parameter_list|()
block|{
return|return
name|selectListItemsOnSeparateLines
return|;
block|}
specifier|public
name|boolean
name|isWhereListItemsOnSeparateLines
parameter_list|()
block|{
return|return
name|whereListItemsOnSeparateLines
return|;
block|}
specifier|public
name|boolean
name|isSelectListExtraIndentFlag
parameter_list|()
block|{
return|return
name|selectListExtraIndentFlag
return|;
block|}
specifier|public
name|boolean
name|isKeywordsLowerCase
parameter_list|()
block|{
return|return
name|keywordsLowerCase
return|;
block|}
specifier|public
name|int
name|getLineLength
parameter_list|()
block|{
return|return
name|lineLength
return|;
block|}
specifier|public
name|void
name|resetSettings
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|indentation
operator|=
literal|4
expr_stmt|;
name|clauseStartsLine
operator|=
literal|true
expr_stmt|;
name|selectListItemsOnSeparateLines
operator|=
literal|false
expr_stmt|;
name|selectListExtraIndentFlag
operator|=
literal|true
expr_stmt|;
name|keywordsLowerCase
operator|=
literal|false
expr_stmt|;
name|quoteAllIdentifiers
operator|=
literal|true
expr_stmt|;
name|windowDeclListNewline
operator|=
literal|true
expr_stmt|;
name|updateSetListNewline
operator|=
literal|true
expr_stmt|;
name|windowNewline
operator|=
literal|false
expr_stmt|;
name|subQueryStyle
operator|=
name|SubQueryStyle
operator|.
name|HYDE
expr_stmt|;
name|alwaysUseParentheses
operator|=
literal|false
expr_stmt|;
name|whereListItemsOnSeparateLines
operator|=
literal|false
expr_stmt|;
name|lineLength
operator|=
literal|0
expr_stmt|;
name|charCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Unsafe
operator|.
name|clear
argument_list|(
name|sw
argument_list|)
expr_stmt|;
name|dynamicParameters
operator|=
literal|null
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nextWhitespace
operator|=
literal|" "
expr_stmt|;
block|}
comment|/**    * Returns an object which encapsulates each property as a get/set method.    */
specifier|private
name|Bean
name|getBean
parameter_list|()
block|{
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
block|{
name|bean
operator|=
operator|new
name|Bean
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|bean
return|;
block|}
comment|/**    * Sets the number of spaces indentation.    *    * @see #getIndentation()    */
specifier|public
name|void
name|setIndentation
parameter_list|(
name|int
name|indentation
parameter_list|)
block|{
name|this
operator|.
name|indentation
operator|=
name|indentation
expr_stmt|;
block|}
comment|/**    * Prints the property settings of this pretty-writer to a writer.    *    * @param pw           Writer    * @param omitDefaults Whether to omit properties whose value is the same as    *                     the default    */
specifier|public
name|void
name|describe
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|boolean
name|omitDefaults
parameter_list|)
block|{
specifier|final
name|Bean
name|properties
init|=
name|getBean
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|propertyNames
init|=
name|properties
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|propertyNames
control|)
block|{
specifier|final
name|Object
name|value
init|=
name|bean
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|defaultValue
init|=
name|DEFAULT_BEAN
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|defaultValue
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|count
operator|++
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
name|key
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets settings from a properties object.    */
specifier|public
name|void
name|setSettings
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|resetSettings
argument_list|()
expr_stmt|;
specifier|final
name|Bean
name|bean
init|=
name|getBean
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|propertyNames
init|=
name|bean
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|propertyName
range|:
name|propertyNames
control|)
block|{
specifier|final
name|String
name|value
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|bean
operator|.
name|set
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sets whether a clause (FROM, WHERE, GROUP BY, HAVING, WINDOW, ORDER BY)    * starts a new line. Default is true. SELECT is always at the start of a    * line.    */
specifier|public
name|void
name|setClauseStartsLine
parameter_list|(
name|boolean
name|clauseStartsLine
parameter_list|)
block|{
name|this
operator|.
name|clauseStartsLine
operator|=
name|clauseStartsLine
expr_stmt|;
block|}
comment|/**    * Sets whether each item in a SELECT list, GROUP BY list, or ORDER BY list    * is on its own line. Default false.    */
specifier|public
name|void
name|setSelectListItemsOnSeparateLines
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|selectListItemsOnSeparateLines
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Sets whether to use a fix for SELECT list indentations.    *    *<ul>    *<li>If set to "false":    *    *<blockquote><pre>    * SELECT    *     A as A    *         B as B    *         C as C    *     D    *</pre></blockquote>    *    *<li>If set to "true":    *    *<blockquote><pre>    * SELECT    *     A as A    *     B as B    *     C as C    *     D    *</pre></blockquote>    *</ul>    */
specifier|public
name|void
name|setSelectListExtraIndentFlag
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|selectListExtraIndentFlag
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Sets whether to print keywords (SELECT, AS, etc.) in lower-case. The    * default is false: keywords are printed in upper-case.    */
specifier|public
name|void
name|setKeywordsLowerCase
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|keywordsLowerCase
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Sets whether to print a newline before each AND or OR (whichever is    * higher level) in WHERE clauses. NOTE:<i>Ignored when    * alwaysUseParentheses is set to true.</i>    */
specifier|public
name|void
name|setWhereListItemsOnSeparateLines
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|whereListItemsOnSeparateLines
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setAlwaysUseParentheses
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|alwaysUseParentheses
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|newlineAndIndent
parameter_list|()
block|{
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|charCount
operator|=
literal|0
expr_stmt|;
name|indent
argument_list|(
name|currentIndent
argument_list|)
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// no further whitespace necessary
block|}
name|void
name|indent
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
if|if
condition|(
name|indent
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"negative indent "
operator|+
name|indent
argument_list|)
throw|;
block|}
name|Spaces
operator|.
name|append
argument_list|(
name|pw
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|charCount
operator|+=
name|indent
expr_stmt|;
block|}
comment|/**    * Sets whether to quote all identifiers, even those which would be correct    * according to the rules of the {@link SqlDialect} if quotation marks were    * omitted.    *    *<p>Default true.    */
specifier|public
name|void
name|setQuoteAllIdentifiers
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|quoteAllIdentifiers
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Creates a list frame.    *    *<p>Derived classes should override this method to specify the indentation    * of the list.    *    * @param frameType What type of list    * @param keyword   The keyword to be printed at the start of the list    * @param open      The string to print at the start of the list    * @param close     The string to print at the end of the list    * @return A frame    */
specifier|protected
name|FrameImpl
name|createListFrame
parameter_list|(
name|FrameType
name|frameType
parameter_list|,
name|String
name|keyword
parameter_list|,
name|String
name|open
parameter_list|,
name|String
name|close
parameter_list|)
block|{
name|int
name|indentation
init|=
name|getIndentation
argument_list|()
decl_stmt|;
if|if
condition|(
name|frameType
operator|instanceof
name|FrameTypeEnum
condition|)
block|{
name|FrameTypeEnum
name|frameTypeEnum
init|=
operator|(
name|FrameTypeEnum
operator|)
name|frameType
decl_stmt|;
switch|switch
condition|(
name|frameTypeEnum
condition|)
block|{
case|case
name|WINDOW_DECL_LIST
case|:
case|case
name|VALUES
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|indentation
argument_list|,
name|windowDeclListNewline
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|UPDATE_SET_LIST
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
name|updateSetListNewline
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|SELECT_LIST
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|selectListExtraIndentFlag
condition|?
name|indentation
else|:
literal|0
argument_list|,
name|selectListItemsOnSeparateLines
argument_list|,
literal|false
argument_list|,
name|indentation
argument_list|,
name|selectListItemsOnSeparateLines
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|ORDER_BY_LIST
case|:
case|case
name|GROUP_BY_LIST
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
name|selectListItemsOnSeparateLines
argument_list|,
literal|false
argument_list|,
name|indentation
argument_list|,
name|selectListItemsOnSeparateLines
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|SUB_QUERY
case|:
switch|switch
condition|(
name|subQueryStyle
condition|)
block|{
case|case
name|BLACK
case|:
comment|// Generate, e.g.:
comment|//
comment|// WHERE foo = bar IN
comment|// (   SELECT ...
name|open
operator|=
name|Spaces
operator|.
name|padRight
argument_list|(
literal|"("
argument_list|,
name|indentation
argument_list|)
expr_stmt|;
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|void
name|_before
parameter_list|()
block|{
name|newlineAndIndent
argument_list|()
expr_stmt|;
block|}
block|}
return|;
case|case
name|HYDE
case|:
comment|// Generate, e.g.:
comment|//
comment|// WHERE foo IN (
comment|//     SELECT ...
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|void
name|_before
parameter_list|()
block|{
name|nextWhitespace
operator|=
name|NL
expr_stmt|;
block|}
block|}
return|;
default|default:
throw|throw
name|Util
operator|.
name|unexpected
argument_list|(
name|subQueryStyle
argument_list|)
throw|;
block|}
case|case
name|ORDER_BY
case|:
case|case
name|OFFSET
case|:
case|case
name|FETCH
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|SELECT
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
name|isClauseStartsLine
argument_list|()
argument_list|,
comment|// newline before FROM, WHERE etc.
literal|0
argument_list|,
comment|// all clauses appear below SELECT
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|SETOP
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
name|isClauseStartsLine
argument_list|()
argument_list|,
comment|// newline before UNION, EXCEPT
literal|0
argument_list|,
comment|// all clauses appear below SELECT
name|isClauseStartsLine
argument_list|()
argument_list|,
comment|// newline after UNION, EXCEPT
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|WINDOW
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
name|windowNewline
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|FUN_CALL
case|:
name|setNeedWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|IDENTIFIER
case|:
case|case
name|SIMPLE
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|WHERE_LIST
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
name|whereListItemsOnSeparateLines
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|FROM_LIST
case|:
case|case
name|JOIN
case|:
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
literal|false
argument_list|,
name|isClauseStartsLine
argument_list|()
argument_list|,
comment|// newline before UNION, EXCEPT
literal|0
argument_list|,
comment|// all clauses appear below SELECT
name|isClauseStartsLine
argument_list|()
argument_list|,
comment|// newline after UNION, EXCEPT
literal|false
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|void
name|sep
parameter_list|(
name|boolean
name|printFirst
parameter_list|,
name|String
name|sep
parameter_list|)
block|{
name|boolean
name|newlineBefore
init|=
name|newlineBeforeSep
operator|&&
operator|!
name|sep
operator|.
name|equals
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|boolean
name|newlineAfter
init|=
name|newlineAfterSep
operator|&&
name|sep
operator|.
name|equals
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|itemCount
operator|>
literal|0
operator|)
operator|||
name|printFirst
condition|)
block|{
if|if
condition|(
name|newlineBefore
operator|&&
operator|(
name|itemCount
operator|>
literal|0
operator|)
condition|)
block|{
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|charCount
operator|=
literal|0
expr_stmt|;
name|indent
argument_list|(
name|currentIndent
operator|+
name|sepIndent
argument_list|)
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|keyword
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|nextWhitespace
operator|=
name|newlineAfter
condition|?
name|NL
else|:
literal|" "
expr_stmt|;
block|}
operator|++
name|itemCount
expr_stmt|;
block|}
block|}
return|;
default|default:
comment|// fall through
block|}
block|}
name|boolean
name|newlineAfterOpen
init|=
literal|false
decl_stmt|;
name|boolean
name|newlineBeforeSep
init|=
literal|false
decl_stmt|;
name|boolean
name|newlineBeforeClose
init|=
literal|false
decl_stmt|;
name|int
name|sepIndent
init|=
name|indentation
decl_stmt|;
if|if
condition|(
name|frameType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CASE"
argument_list|)
condition|)
block|{
if|if
condition|(
name|caseClausesOnNewLines
condition|)
block|{
name|newlineAfterOpen
operator|=
literal|true
expr_stmt|;
name|newlineBeforeSep
operator|=
literal|true
expr_stmt|;
name|newlineBeforeClose
operator|=
literal|true
expr_stmt|;
name|sepIndent
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FrameImpl
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|,
name|indentation
argument_list|,
name|newlineAfterOpen
argument_list|,
name|newlineBeforeSep
argument_list|,
name|sepIndent
argument_list|,
literal|false
argument_list|,
name|newlineBeforeClose
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Starts a list.    *    * @param frameType Type of list. For example, a SELECT list will be    *                  governed according to SELECT-list formatting preferences.    * @param open      String to print at the start of the list; typically "(" or    *                  the empty string.    * @param close     String to print at the end of the list.    */
specifier|protected
name|Frame
name|startList
parameter_list|(
name|FrameType
name|frameType
parameter_list|,
name|String
name|keyword
parameter_list|,
name|String
name|open
parameter_list|,
name|String
name|close
parameter_list|)
block|{
assert|assert
name|frameType
operator|!=
literal|null
assert|;
if|if
condition|(
name|frame
operator|!=
literal|null
condition|)
block|{
operator|++
name|frame
operator|.
name|itemCount
expr_stmt|;
comment|// REVIEW jvs 9-June-2006:  This is part of the fix for FRG-149
comment|// (extra frame for identifier was leading to extra indentation,
comment|// causing select list to come out raggedy with identifiers
comment|// deeper than literals); are there other frame types
comment|// for which extra indent should be suppressed?
if|if
condition|(
name|frameType
operator|.
name|needsIndent
argument_list|()
condition|)
block|{
name|currentIndent
operator|+=
name|frame
operator|.
name|extraIndent
expr_stmt|;
block|}
assert|assert
operator|!
name|listStack
operator|.
name|contains
argument_list|(
name|frame
argument_list|)
assert|;
name|listStack
operator|.
name|push
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
name|frame
operator|=
name|createListFrame
argument_list|(
name|frameType
argument_list|,
name|keyword
argument_list|,
name|open
argument_list|,
name|close
argument_list|)
expr_stmt|;
name|frame
operator|.
name|before
argument_list|()
expr_stmt|;
return|return
name|frame
return|;
block|}
specifier|public
name|void
name|endList
parameter_list|(
name|Frame
name|frame
parameter_list|)
block|{
name|FrameImpl
name|endedFrame
init|=
operator|(
name|FrameImpl
operator|)
name|frame
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|frame
operator|==
name|this
operator|.
name|frame
argument_list|,
literal|"Frame does not match current frame"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|frame
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No list started"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|frame
operator|.
name|open
operator|.
name|equals
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|frame
operator|.
name|close
operator|.
name|equals
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected ')'"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|frame
operator|.
name|newlineBeforeClose
condition|)
block|{
name|newlineAndIndent
argument_list|()
expr_stmt|;
block|}
name|keyword
argument_list|(
name|this
operator|.
name|frame
operator|.
name|close
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|frame
operator|.
name|newlineAfterClose
condition|)
block|{
name|newlineAndIndent
argument_list|()
expr_stmt|;
block|}
comment|// Pop the frame, and move to the previous indentation level.
if|if
condition|(
name|listStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|frame
operator|=
literal|null
expr_stmt|;
assert|assert
name|currentIndent
operator|==
literal|0
operator|:
name|currentIndent
assert|;
block|}
else|else
block|{
name|this
operator|.
name|frame
operator|=
name|listStack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|endedFrame
operator|.
name|frameType
operator|.
name|needsIndent
argument_list|()
condition|)
block|{
name|currentIndent
operator|-=
name|this
operator|.
name|frame
operator|.
name|extraIndent
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|format
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
assert|assert
name|frame
operator|==
literal|null
assert|;
name|node
operator|.
name|unparse
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
assert|assert
name|frame
operator|==
literal|null
assert|;
return|return
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|SqlString
name|toSqlString
parameter_list|()
block|{
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|dynamicParameters
init|=
name|this
operator|.
name|dynamicParameters
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|dynamicParameters
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|SqlString
argument_list|(
name|dialect
argument_list|,
name|toString
argument_list|()
argument_list|,
name|dynamicParameters
argument_list|)
return|;
block|}
specifier|public
name|SqlDialect
name|getDialect
parameter_list|()
block|{
return|return
name|dialect
return|;
block|}
specifier|public
name|void
name|literal
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|keyword
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|maybeWhitespace
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|isKeywordsLowerCase
argument_list|()
condition|?
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
else|:
name|s
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|charCount
operator|+=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|setNeedWhitespace
argument_list|(
name|needWhitespaceAfter
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|maybeWhitespace
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|tooLong
argument_list|(
name|s
argument_list|)
operator|||
operator|(
name|needWhitespace
operator|&&
name|needWhitespaceBefore
argument_list|(
name|s
argument_list|)
operator|)
condition|)
block|{
name|whiteSpace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|needWhitespaceBefore
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|!
operator|(
name|s
operator|.
name|equals
argument_list|(
literal|","
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|")"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"["
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"]"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|needWhitespaceAfter
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|!
operator|(
name|s
operator|.
name|equals
argument_list|(
literal|"("
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"["
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|void
name|whiteSpace
parameter_list|()
block|{
if|if
condition|(
name|needWhitespace
condition|)
block|{
if|if
condition|(
name|nextWhitespace
operator|.
name|equals
argument_list|(
name|NL
argument_list|)
condition|)
block|{
name|newlineAndIndent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|print
argument_list|(
name|nextWhitespace
argument_list|)
expr_stmt|;
name|charCount
operator|+=
name|nextWhitespace
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|nextWhitespace
operator|=
literal|" "
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|tooLong
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|boolean
name|result
init|=
name|lineLength
operator|>
literal|0
operator|&&
operator|(
name|charCount
operator|>
name|currentIndent
operator|)
operator|&&
operator|(
operator|(
name|charCount
operator|+
name|s
operator|.
name|length
argument_list|()
operator|)
operator|>=
name|lineLength
operator|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|nextWhitespace
operator|=
name|NL
expr_stmt|;
block|}
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Token is '{}'; result is {}"
argument_list|,
name|s
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|maybeWhitespace
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|charCount
operator|+=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|maybeWhitespace
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|charCount
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|identifier
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|quoted
parameter_list|)
block|{
name|String
name|qName
init|=
name|name
decl_stmt|;
comment|// If configured globally or the original identifier is quoted,
comment|// then quotes the identifier.
if|if
condition|(
name|isQuoteAllIdentifiers
argument_list|()
operator|||
name|quoted
condition|)
block|{
name|qName
operator|=
name|dialect
operator|.
name|quoteIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|maybeWhitespace
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|charCount
operator|+=
name|qName
operator|.
name|length
argument_list|()
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dynamicParam
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|dynamicParameters
operator|==
literal|null
condition|)
block|{
name|dynamicParameters
operator|=
name|ImmutableList
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
name|dynamicParameters
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fetchOffset
parameter_list|(
name|SqlNode
name|fetch
parameter_list|,
name|SqlNode
name|offset
parameter_list|)
block|{
if|if
condition|(
name|fetch
operator|==
literal|null
operator|&&
name|offset
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|dialect
operator|.
name|unparseOffsetFetch
argument_list|(
name|this
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Frame
name|startFunCall
parameter_list|(
name|String
name|funName
parameter_list|)
block|{
name|keyword
argument_list|(
name|funName
argument_list|)
expr_stmt|;
name|setNeedWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|startList
argument_list|(
name|FrameTypeEnum
operator|.
name|FUN_CALL
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
return|;
block|}
specifier|public
name|void
name|endFunCall
parameter_list|(
name|Frame
name|frame
parameter_list|)
block|{
name|endList
argument_list|(
name|this
operator|.
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Frame
name|startList
parameter_list|(
name|String
name|open
parameter_list|,
name|String
name|close
parameter_list|)
block|{
return|return
name|startList
argument_list|(
name|FrameTypeEnum
operator|.
name|SIMPLE
argument_list|,
literal|null
argument_list|,
name|open
argument_list|,
name|close
argument_list|)
return|;
block|}
specifier|public
name|Frame
name|startList
parameter_list|(
name|FrameTypeEnum
name|frameType
parameter_list|)
block|{
assert|assert
name|frameType
operator|!=
literal|null
assert|;
return|return
name|startList
argument_list|(
name|frameType
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
name|Frame
name|startList
parameter_list|(
name|FrameType
name|frameType
parameter_list|,
name|String
name|open
parameter_list|,
name|String
name|close
parameter_list|)
block|{
assert|assert
name|frameType
operator|!=
literal|null
assert|;
return|return
name|startList
argument_list|(
name|frameType
argument_list|,
literal|null
argument_list|,
name|open
argument_list|,
name|close
argument_list|)
return|;
block|}
specifier|public
name|void
name|sep
parameter_list|(
name|String
name|sep
parameter_list|)
block|{
name|sep
argument_list|(
name|sep
argument_list|,
operator|!
operator|(
name|sep
operator|.
name|equals
argument_list|(
literal|","
argument_list|)
operator|||
name|sep
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sep
parameter_list|(
name|String
name|sep
parameter_list|,
name|boolean
name|printFirst
parameter_list|)
block|{
if|if
condition|(
name|frame
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No list started"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sep
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
operator|||
name|sep
operator|.
name|endsWith
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Separator must not contain whitespace"
argument_list|)
throw|;
block|}
name|frame
operator|.
name|sep
argument_list|(
name|printFirst
argument_list|,
name|sep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNeedWhitespace
parameter_list|(
name|boolean
name|needWhitespace
parameter_list|)
block|{
name|this
operator|.
name|needWhitespace
operator|=
name|needWhitespace
expr_stmt|;
block|}
specifier|public
name|void
name|setLineLength
parameter_list|(
name|int
name|lineLength
parameter_list|)
block|{
name|this
operator|.
name|lineLength
operator|=
name|lineLength
expr_stmt|;
block|}
specifier|public
name|void
name|setFormatOptions
parameter_list|(
name|SqlFormatOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|setAlwaysUseParentheses
argument_list|(
name|options
operator|.
name|isAlwaysUseParentheses
argument_list|()
argument_list|)
expr_stmt|;
name|setCaseClausesOnNewLines
argument_list|(
name|options
operator|.
name|isCaseClausesOnNewLines
argument_list|()
argument_list|)
expr_stmt|;
name|setClauseStartsLine
argument_list|(
name|options
operator|.
name|isClauseStartsLine
argument_list|()
argument_list|)
expr_stmt|;
name|setKeywordsLowerCase
argument_list|(
name|options
operator|.
name|isKeywordsLowercase
argument_list|()
argument_list|)
expr_stmt|;
name|setQuoteAllIdentifiers
argument_list|(
name|options
operator|.
name|isQuoteAllIdentifiers
argument_list|()
argument_list|)
expr_stmt|;
name|setSelectListItemsOnSeparateLines
argument_list|(
name|options
operator|.
name|isSelectListItemsOnSeparateLines
argument_list|()
argument_list|)
expr_stmt|;
name|setWhereListItemsOnSeparateLines
argument_list|(
name|options
operator|.
name|isWhereListItemsOnSeparateLines
argument_list|()
argument_list|)
expr_stmt|;
name|setWindowNewline
argument_list|(
name|options
operator|.
name|isWindowDeclarationStartsLine
argument_list|()
argument_list|)
expr_stmt|;
name|setWindowDeclListNewline
argument_list|(
name|options
operator|.
name|isWindowListItemsOnSeparateLines
argument_list|()
argument_list|)
expr_stmt|;
name|setIndentation
argument_list|(
name|options
operator|.
name|getIndentation
argument_list|()
argument_list|)
expr_stmt|;
name|setLineLength
argument_list|(
name|options
operator|.
name|getLineLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**    * Implementation of {@link org.apache.calcite.sql.SqlWriter.Frame}.    */
specifier|protected
class|class
name|FrameImpl
implements|implements
name|Frame
block|{
specifier|final
name|FrameType
name|frameType
decl_stmt|;
specifier|final
name|String
name|keyword
decl_stmt|;
specifier|final
name|String
name|open
decl_stmt|;
specifier|final
name|String
name|close
decl_stmt|;
comment|/**      * Indent of sub-frame with respect to this one.      */
specifier|final
name|int
name|extraIndent
decl_stmt|;
comment|/**      * Indent of separators with respect to this frame's indent. Typically      * zero.      */
specifier|final
name|int
name|sepIndent
decl_stmt|;
comment|/**      * Number of items which have been printed in this list so far.      */
name|int
name|itemCount
decl_stmt|;
comment|/**      * Whether to print a newline before each separator.      */
specifier|public
specifier|final
name|boolean
name|newlineBeforeSep
decl_stmt|;
comment|/**      * Whether to print a newline after each separator.      */
specifier|public
specifier|final
name|boolean
name|newlineAfterSep
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|newlineBeforeClose
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|newlineAfterClose
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|newlineAfterOpen
decl_stmt|;
name|FrameImpl
parameter_list|(
name|FrameType
name|frameType
parameter_list|,
name|String
name|keyword
parameter_list|,
name|String
name|open
parameter_list|,
name|String
name|close
parameter_list|,
name|int
name|extraIndent
parameter_list|,
name|boolean
name|newlineAfterOpen
parameter_list|,
name|boolean
name|newlineBeforeSep
parameter_list|,
name|int
name|sepIndent
parameter_list|,
name|boolean
name|newlineAfterSep
parameter_list|,
name|boolean
name|newlineBeforeClose
parameter_list|,
name|boolean
name|newlineAfterClose
parameter_list|)
block|{
name|this
operator|.
name|frameType
operator|=
name|frameType
expr_stmt|;
name|this
operator|.
name|keyword
operator|=
name|keyword
expr_stmt|;
name|this
operator|.
name|open
operator|=
name|open
expr_stmt|;
name|this
operator|.
name|close
operator|=
name|close
expr_stmt|;
name|this
operator|.
name|extraIndent
operator|=
name|extraIndent
expr_stmt|;
name|this
operator|.
name|newlineAfterOpen
operator|=
name|newlineAfterOpen
expr_stmt|;
name|this
operator|.
name|newlineBeforeSep
operator|=
name|newlineBeforeSep
expr_stmt|;
name|this
operator|.
name|newlineAfterSep
operator|=
name|newlineAfterSep
expr_stmt|;
name|this
operator|.
name|newlineBeforeClose
operator|=
name|newlineBeforeClose
expr_stmt|;
name|this
operator|.
name|newlineAfterClose
operator|=
name|newlineAfterClose
expr_stmt|;
name|this
operator|.
name|sepIndent
operator|=
name|sepIndent
expr_stmt|;
block|}
specifier|protected
name|void
name|before
parameter_list|()
block|{
if|if
condition|(
operator|(
name|open
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|open
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|keyword
argument_list|(
name|open
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|after
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|sep
parameter_list|(
name|boolean
name|printFirst
parameter_list|,
name|String
name|sep
parameter_list|)
block|{
if|if
condition|(
operator|(
name|newlineBeforeSep
operator|&&
operator|(
name|itemCount
operator|>
literal|0
operator|)
operator|)
operator|||
operator|(
name|newlineAfterOpen
operator|&&
operator|(
name|itemCount
operator|==
literal|0
operator|)
operator|)
condition|)
block|{
name|newlineAndIndent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|itemCount
operator|>
literal|0
operator|)
operator|||
name|printFirst
condition|)
block|{
name|keyword
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|nextWhitespace
operator|=
name|newlineAfterSep
condition|?
name|NL
else|:
literal|" "
expr_stmt|;
block|}
operator|++
name|itemCount
expr_stmt|;
block|}
block|}
comment|/**    * Helper class which exposes the get/set methods of an object as    * properties.    */
specifier|private
specifier|static
class|class
name|Bean
block|{
specifier|private
specifier|final
name|SqlPrettyWriter
name|o
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|getterMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|setterMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Bean
parameter_list|(
name|SqlPrettyWriter
name|o
parameter_list|)
block|{
name|this
operator|.
name|o
operator|=
name|o
expr_stmt|;
comment|// Figure out the getter/setter methods for each attribute.
for|for
control|(
name|Method
name|method
range|:
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|class
operator|)
operator|&&
operator|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|)
condition|)
block|{
name|String
name|attributeName
init|=
name|stripPrefix
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|setterMethods
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Void
operator|.
name|class
operator|)
operator|&&
operator|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|String
name|attributeName
init|=
name|stripPrefix
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|getterMethods
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Boolean
operator|.
name|class
operator|)
operator|&&
operator|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|String
name|attributeName
init|=
name|stripPrefix
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|getterMethods
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|stripPrefix
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
specifier|final
name|Method
name|method
init|=
name|setterMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Method
name|method
init|=
name|getterMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
index|[]
name|getPropertyNames
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|getterMethods
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|setterMethods
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlPrettyWriter.java
end_comment

end_unit

