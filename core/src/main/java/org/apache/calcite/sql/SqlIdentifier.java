begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|DynamicRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlQualified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|dataflow
operator|.
name|qual
operator|.
name|Pure
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A<code>SqlIdentifier</code> is an identifier, possibly compound.  */
end_comment

begin_class
specifier|public
class|class
name|SqlIdentifier
extends|extends
name|SqlNode
block|{
comment|/** An identifier for star, "*".    *    * @see SqlNodeList#SINGLETON_STAR */
specifier|public
specifier|static
specifier|final
name|SqlIdentifier
name|STAR
init|=
name|star
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/**    * Array of the components of this compound identifier.    *    *<p>The empty string represents the wildcard "*",    * to distinguish it from a real "*" (presumably specified using quotes).    *    *<p>It's convenient to have this member public, and it's convenient to    * have this member not-final, but it's a shame it's public and not-final.    * If you assign to this member, please use    * {@link #setNames(java.util.List, java.util.List)}.    * And yes, we'd like to make identifiers immutable one day.    */
specifier|public
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
comment|/**    * This identifier's collation (if any).    */
specifier|final
annotation|@
name|Nullable
name|SqlCollation
name|collation
decl_stmt|;
comment|/**    * A list of the positions of the components of compound identifiers.    */
specifier|protected
annotation|@
name|Nullable
name|ImmutableList
argument_list|<
name|SqlParserPos
argument_list|>
name|componentPositions
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a compound identifier, for example<code>foo.bar</code>.    *    * @param names Parts of the identifier, length&ge; 1    */
specifier|public
name|SqlIdentifier
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
annotation|@
name|Nullable
name|SqlCollation
name|collation
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|SqlParserPos
argument_list|>
name|componentPositions
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|this
operator|.
name|collation
operator|=
name|collation
expr_stmt|;
name|this
operator|.
name|componentPositions
operator|=
name|componentPositions
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|componentPositions
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
block|}
block|}
specifier|public
name|SqlIdentifier
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|names
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a simple identifier, for example<code>foo</code>, with a    * collation.    */
specifier|public
name|SqlIdentifier
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|SqlCollation
name|collation
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|name
argument_list|)
argument_list|,
name|collation
argument_list|,
name|pos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a simple identifier, for example<code>foo</code>.    */
specifier|public
name|SqlIdentifier
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|name
argument_list|)
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an identifier that is a singleton wildcard star. */
specifier|public
specifier|static
name|SqlIdentifier
name|star
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|star
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|""
argument_list|)
argument_list|,
name|pos
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|pos
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates an identifier that ends in a wildcard star. */
specifier|public
specifier|static
name|SqlIdentifier
name|star
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
name|List
argument_list|<
name|SqlParserPos
argument_list|>
name|componentPositions
parameter_list|)
block|{
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|Util
operator|.
name|transform
argument_list|(
name|names
argument_list|,
name|s
lambda|->
name|s
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|?
literal|""
else|:
name|s
argument_list|)
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|,
name|componentPositions
argument_list|)
return|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|SqlKind
name|getKind
parameter_list|()
block|{
return|return
name|SqlKind
operator|.
name|IDENTIFIER
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|clone
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|names
argument_list|,
name|collation
argument_list|,
name|pos
argument_list|,
name|componentPositions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getString
argument_list|(
name|names
argument_list|)
return|;
block|}
comment|/** Converts a list of strings to a qualified identifier. */
specifier|public
specifier|static
name|String
name|getString
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|Util
operator|.
name|sepList
argument_list|(
name|toStar
argument_list|(
name|names
argument_list|)
argument_list|,
literal|"."
argument_list|)
return|;
block|}
comment|/** Converts empty strings in a list of names to stars. */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|toStar
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|Util
operator|.
name|transform
argument_list|(
name|names
argument_list|,
name|s
lambda|->
name|s
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|?
literal|"*"
else|:
name|s
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|?
literal|"\"*\""
else|:
name|s
argument_list|)
return|;
block|}
comment|/**    * Modifies the components of this identifier and their positions.    *    * @param names Names of components    * @param poses Positions of components    */
specifier|public
name|void
name|setNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|SqlParserPos
argument_list|>
name|poses
parameter_list|)
block|{
name|this
operator|.
name|names
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentPositions
operator|=
name|poses
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|poses
argument_list|)
expr_stmt|;
block|}
comment|/** Returns an identifier that is the same as this except one modified name.    * Does not modify this identifier. */
specifier|public
name|SqlIdentifier
name|setName
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
index|[]
name|nameArray
init|=
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|nameArray
index|[
name|i
index|]
operator|=
name|name
expr_stmt|;
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|nameArray
argument_list|)
argument_list|,
name|collation
argument_list|,
name|pos
argument_list|,
name|componentPositions
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
comment|/** Returns an identifier that is the same as this except with a component    * added at a given position. Does not modify this identifier. */
specifier|public
name|SqlIdentifier
name|add
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|name
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|names2
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|name
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SqlParserPos
argument_list|>
name|pos2
decl_stmt|;
if|if
condition|(
name|componentPositions
operator|==
literal|null
condition|)
block|{
name|pos2
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|pos2
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|componentPositions
argument_list|)
expr_stmt|;
name|pos2
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|names2
argument_list|,
name|collation
argument_list|,
name|pos
argument_list|,
name|pos2
argument_list|)
return|;
block|}
comment|/**    * Returns the position of the<code>i</code>th component of a compound    * identifier, or the position of the whole identifier if that information    * is not present.    *    * @param i Ordinal of component.    * @return Position of i'th component    */
specifier|public
name|SqlParserPos
name|getComponentParserPosition
parameter_list|(
name|int
name|i
parameter_list|)
block|{
assert|assert
operator|(
name|i
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
operator|)
assert|;
return|return
operator|(
name|componentPositions
operator|==
literal|null
operator|)
condition|?
name|getParserPosition
argument_list|()
else|:
name|componentPositions
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**    * Copies names and components from another identifier. Does not modify the    * cross-component parser position.    *    * @param other identifier from which to copy    */
specifier|public
name|void
name|assignNamesFrom
parameter_list|(
name|SqlIdentifier
name|other
parameter_list|)
block|{
name|setNames
argument_list|(
name|other
operator|.
name|names
argument_list|,
name|other
operator|.
name|componentPositions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an identifier which contains only the<code>ordinal</code>th    * component of this compound identifier. It will have the correct    * {@link SqlParserPos}, provided that detailed position information is    * available.    */
specifier|public
name|SqlIdentifier
name|getComponent
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
name|ordinal
argument_list|,
name|ordinal
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
name|SqlIdentifier
name|getComponent
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
specifier|final
name|SqlParserPos
name|pos
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|SqlParserPos
argument_list|>
name|pos2
decl_stmt|;
if|if
condition|(
name|componentPositions
operator|==
literal|null
condition|)
block|{
name|pos2
operator|=
literal|null
expr_stmt|;
name|pos
operator|=
name|this
operator|.
name|pos
expr_stmt|;
block|}
else|else
block|{
name|pos2
operator|=
name|componentPositions
operator|.
name|subList
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|pos
operator|=
name|SqlParserPos
operator|.
name|sum
argument_list|(
name|pos2
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|names
operator|.
name|subList
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|,
name|collation
argument_list|,
name|pos
argument_list|,
name|pos2
argument_list|)
return|;
block|}
comment|/**    * Creates an identifier that consists of this identifier plus a name segment.    * Does not modify this identifier.    */
specifier|public
name|SqlIdentifier
name|plus
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|names
argument_list|)
operator|.
name|add
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|SqlParserPos
argument_list|>
name|componentPositions
decl_stmt|;
specifier|final
name|SqlParserPos
name|pos2
decl_stmt|;
name|ImmutableList
argument_list|<
name|SqlParserPos
argument_list|>
name|thisComponentPositions
init|=
name|this
operator|.
name|componentPositions
decl_stmt|;
if|if
condition|(
name|thisComponentPositions
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|SqlParserPos
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|componentPositions
operator|=
name|builder
operator|.
name|addAll
argument_list|(
name|thisComponentPositions
argument_list|)
operator|.
name|add
argument_list|(
name|pos
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|pos2
operator|=
name|SqlParserPos
operator|.
name|sum
argument_list|(
name|builder
operator|.
name|add
argument_list|(
name|this
operator|.
name|pos
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|componentPositions
operator|=
literal|null
expr_stmt|;
name|pos2
operator|=
name|pos
expr_stmt|;
block|}
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|names
argument_list|,
name|collation
argument_list|,
name|pos2
argument_list|,
name|componentPositions
argument_list|)
return|;
block|}
comment|/**    * Creates an identifier that consists of this identifier plus a wildcard star.    * Does not modify this identifier.    */
specifier|public
name|SqlIdentifier
name|plusStar
parameter_list|()
block|{
specifier|final
name|SqlIdentifier
name|id
init|=
name|this
operator|.
name|plus
argument_list|(
literal|"*"
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
return|return
operator|new
name|SqlIdentifier
argument_list|(
name|id
operator|.
name|names
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|?
literal|""
else|:
name|s
argument_list|)
operator|.
name|collect
argument_list|(
name|Util
operator|.
name|toImmutableList
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|id
operator|.
name|pos
argument_list|,
name|id
operator|.
name|componentPositions
argument_list|)
return|;
block|}
comment|/** Creates an identifier that consists of all but the last {@code n}    * name segments of this one. */
specifier|public
name|SqlIdentifier
name|skipLast
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
literal|0
argument_list|,
name|names
operator|.
name|size
argument_list|()
operator|-
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|SqlUtil
operator|.
name|unparseSqlIdentifierSyntax
argument_list|(
name|writer
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
name|validator
operator|.
name|validateIdentifier
argument_list|(
name|this
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateExpr
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
comment|// First check for builtin functions which don't have parentheses,
comment|// like "LOCALTIME".
specifier|final
name|SqlCall
name|call
init|=
name|validator
operator|.
name|makeNullaryCall
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|validateCall
argument_list|(
name|call
argument_list|,
name|scope
argument_list|)
expr_stmt|;
return|return;
block|}
name|validator
operator|.
name|validateIdentifier
argument_list|(
name|this
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalsDeep
parameter_list|(
annotation|@
name|Nullable
name|SqlNode
name|node
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|SqlIdentifier
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
name|SqlIdentifier
name|that
init|=
operator|(
name|SqlIdentifier
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|names
operator|.
name|size
argument_list|()
operator|!=
name|that
operator|.
name|names
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|that
operator|.
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
block|}
return|return
name|litmus
operator|.
name|succeed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Pure
specifier|public
annotation|@
name|Nullable
name|SqlCollation
name|getCollation
parameter_list|()
block|{
return|return
name|collation
return|;
block|}
specifier|public
name|String
name|getSimple
parameter_list|()
block|{
assert|assert
name|names
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
return|return
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/** Returns the simple names in a list of identifiers.    * Assumes that the list consists of are not-null, simple identifiers. */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|simpleNames
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|Util
operator|.
name|transform
argument_list|(
name|list
argument_list|,
name|n
lambda|->
operator|(
operator|(
name|SqlIdentifier
operator|)
name|n
operator|)
operator|.
name|getSimple
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the simple names in a iterable of identifiers.    * Assumes that the iterable consists of not-null, simple identifiers. */
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|simpleNames
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|SqlNode
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|Util
operator|.
name|transform
argument_list|(
name|list
argument_list|,
name|n
lambda|->
operator|(
operator|(
name|SqlIdentifier
operator|)
name|n
operator|)
operator|.
name|getSimple
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns whether this identifier is a star, such as "*" or "foo.bar.*".    */
specifier|public
name|boolean
name|isStar
parameter_list|()
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
return|;
block|}
comment|/**    * Returns whether this is a simple identifier. "FOO" is simple; "*",    * "FOO.*" and "FOO.BAR" are not.    */
specifier|public
name|boolean
name|isSimple
parameter_list|()
block|{
return|return
name|names
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|isStar
argument_list|()
return|;
block|}
comment|/**    * Returns whether the {@code i}th component of a compound identifier is    * quoted.    *    * @param i Ordinal of component    * @return Whether i'th component is quoted    */
specifier|public
name|boolean
name|isComponentQuoted
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|componentPositions
operator|!=
literal|null
operator|&&
name|componentPositions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isQuoted
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
annotation|@
name|Nullable
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
comment|// for "star" column, whether it's static or dynamic return not_monotonic directly.
if|if
condition|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|DynamicRecordType
operator|.
name|isDynamicStarColName
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
return|;
block|}
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scope
argument_list|,
literal|"scope"
argument_list|)
expr_stmt|;
comment|// First check for builtin functions which don't have parentheses,
comment|// like "LOCALTIME".
specifier|final
name|SqlValidator
name|validator
init|=
name|scope
operator|.
name|getValidator
argument_list|()
decl_stmt|;
specifier|final
name|SqlCall
name|call
init|=
name|validator
operator|.
name|makeNullaryCall
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
block|{
return|return
name|call
operator|.
name|getMonotonicity
argument_list|(
name|scope
argument_list|)
return|;
block|}
specifier|final
name|SqlQualified
name|qualified
init|=
name|scope
operator|.
name|fullyQualify
argument_list|(
name|this
argument_list|)
decl_stmt|;
assert|assert
name|qualified
operator|.
name|namespace
operator|!=
literal|null
operator|:
literal|"namespace must not be null in "
operator|+
name|qualified
assert|;
specifier|final
name|SqlIdentifier
name|fqId
init|=
name|qualified
operator|.
name|identifier
decl_stmt|;
return|return
name|qualified
operator|.
name|namespace
operator|.
name|resolve
argument_list|()
operator|.
name|getMonotonicity
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|fqId
operator|.
name|names
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

