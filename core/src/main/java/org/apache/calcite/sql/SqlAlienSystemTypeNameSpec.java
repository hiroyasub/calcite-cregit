begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Represents a type name for an alien system. For example,  * UNSIGNED is a built-in type in MySQL which is synonym of INTEGER.  *  *<p>You can use this class to define a customized type name with specific alias,  * for example, in some systems, STRING is synonym of VARCHAR  * and BYTES is synonym of VARBINARY.  *  *<p>Internally we may use the {@link SqlAlienSystemTypeNameSpec} to unparse  * as the builtin data type name for some alien systems during rel-to-sql conversion.  */
end_comment

begin_class
specifier|public
class|class
name|SqlAlienSystemTypeNameSpec
extends|extends
name|SqlBasicTypeNameSpec
block|{
comment|//~ Instance fields --------------------------------------------------------
comment|// Type alias used for unparsing.
specifier|private
specifier|final
name|String
name|typeAlias
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a {@code SqlAlienSystemTypeNameSpec} instance.    *    * @param typeAlias Type alias of the alien system    * @param typeName  Type name the {@code typeAlias} implies as the (standard) basic type name    * @param pos       The parser position    */
specifier|public
name|SqlAlienSystemTypeNameSpec
parameter_list|(
name|String
name|typeAlias
parameter_list|,
name|SqlTypeName
name|typeName
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|typeAlias
argument_list|,
name|typeName
argument_list|,
operator|-
literal|1
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a {@code SqlAlienSystemTypeNameSpec} instance.    *    * @param typeAlias Type alias of the alien system    * @param typeName  Type name the {@code typeAlias} implies as the (standard) basic type name    * @param precision Type Precision    * @param pos       The parser position    */
specifier|public
name|SqlAlienSystemTypeNameSpec
parameter_list|(
name|String
name|typeAlias
parameter_list|,
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|precision
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeAlias
operator|=
name|typeAlias
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
name|typeAlias
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalsDeep
parameter_list|(
name|SqlTypeNameSpec
name|node
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|SqlAlienSystemTypeNameSpec
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
name|SqlAlienSystemTypeNameSpec
name|that
init|=
operator|(
name|SqlAlienSystemTypeNameSpec
operator|)
name|node
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|typeAlias
argument_list|,
name|that
operator|.
name|typeAlias
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|equalsDeep
argument_list|(
name|node
argument_list|,
name|litmus
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlAlienSystemTypeNameSpec.java
end_comment

end_unit

