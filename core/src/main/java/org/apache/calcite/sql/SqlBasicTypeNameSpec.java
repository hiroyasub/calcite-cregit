begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A sql type name specification of basic sql type.  *  *<p>Supported basic sql types grammar:  *<blockquote><pre>  *   basicSqlType:  *         GEOMETRY  *     |   BOOLEAN  *     |   [ INTEGER | INT ]  *     |   TINYINT  *     |   SMALLINT  *     |   BIGINT  *     |   REAL  *     |   DOUBLE [ PRECISION ]  *     |   FLOAT  *     |   BINARY [ precision ]  *     |   [ BINARY VARYING | VARBINARY ] [ precision ]  *     |   [ DECIMAL | DEC | NUMERIC ] [ precision [, scale] ]  *     |   ANY [ precision [, scale] ]  *     |   charType [ precision ] [ charSet ]  *     |   varcharType [ precision ] [ charSet ]  *     |   DATE  *     |   TIME [ precision ] [ timeZone ]  *     |   TIMESTAMP [ precision ] [ timeZone ]  *  *  charType:  *         CHARACTER  *     |   CHAR  *  *  varcharType:  *         charType VARYING  *     |   VARCHAR  *  *  charSet:  *         CHARACTER SET charSetName  *  *  timeZone:  *         WITHOUT TIME ZONE  *     |   WITH LOCAL TIME ZONE  *</pre></blockquote>  */
end_comment

begin_class
specifier|public
class|class
name|SqlBasicTypeNameSpec
extends|extends
name|SqlTypeNameSpec
block|{
specifier|private
specifier|final
name|SqlTypeName
name|sqlTypeName
decl_stmt|;
specifier|private
name|int
name|precision
decl_stmt|;
specifier|private
name|int
name|scale
decl_stmt|;
specifier|private
name|String
name|charSetName
decl_stmt|;
comment|/**    * Create a basic sql type name specification.    *    * @param typeName    Type name    * @param precision   Precision of the type name if it is allowed, default is -1    * @param scale       Scale of the type name if it is allowed, default is -1    * @param charSetName Char set of the type, only works when the type    *                    belong to CHARACTER type family    * @param pos         The parser position    */
specifier|public
name|SqlBasicTypeNameSpec
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|,
annotation|@
name|Nullable
name|String
name|charSetName
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|typeName
operator|.
name|name
argument_list|()
argument_list|,
name|pos
argument_list|)
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|sqlTypeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|charSetName
operator|=
name|charSetName
expr_stmt|;
block|}
specifier|public
name|SqlBasicTypeNameSpec
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|typeName
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlBasicTypeNameSpec
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|precision
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlBasicTypeNameSpec
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|precision
parameter_list|,
name|String
name|charSetName
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|,
operator|-
literal|1
argument_list|,
name|charSetName
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlBasicTypeNameSpec
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
name|this
argument_list|(
name|typeName
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|,
literal|null
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getScale
parameter_list|()
block|{
return|return
name|scale
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
specifier|public
name|String
name|getCharSetName
parameter_list|()
block|{
return|return
name|charSetName
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalsDeep
parameter_list|(
name|SqlTypeNameSpec
name|node
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|SqlBasicTypeNameSpec
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
name|SqlBasicTypeNameSpec
name|that
init|=
operator|(
name|SqlBasicTypeNameSpec
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|sqlTypeName
operator|!=
name|that
operator|.
name|sqlTypeName
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|precision
operator|!=
name|that
operator|.
name|precision
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|scale
operator|!=
name|that
operator|.
name|scale
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|charSetName
argument_list|,
name|that
operator|.
name|charSetName
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"{} != {}"
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
return|;
block|}
return|return
name|litmus
operator|.
name|succeed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
comment|// Unparse the builtin type name.
comment|// For some type name with extra definitions, unparse it specifically
comment|// instead of direct unparsing with enum name.
comment|// i.e. TIME_WITH_LOCAL_TIME_ZONE(3)
comment|// would be unparsed as "time(3) with local time zone".
specifier|final
name|boolean
name|isWithLocalTimeZone
init|=
name|isWithLocalTimeZoneDef
argument_list|(
name|sqlTypeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWithLocalTimeZone
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
name|stripLocalTimeZoneDef
argument_list|(
name|sqlTypeName
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|keyword
argument_list|(
name|getTypeName
argument_list|()
operator|.
name|getSimple
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sqlTypeName
operator|.
name|allowsPrec
argument_list|()
operator|&&
operator|(
name|precision
operator|>=
literal|0
operator|)
condition|)
block|{
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|FUN_CALL
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|precision
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlTypeName
operator|.
name|allowsScale
argument_list|()
operator|&&
operator|(
name|scale
operator|>=
literal|0
operator|)
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isWithLocalTimeZone
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"WITH LOCAL TIME ZONE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|charSetName
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"CHARACTER SET"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|identifier
argument_list|(
name|charSetName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveType
parameter_list|(
name|SqlValidator
name|validator
parameter_list|)
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|validator
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|sqlTypeName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RelDataType
name|type
decl_stmt|;
comment|// NOTE jvs 15-Jan-2009:  earlier validation is supposed to
comment|// have caught these, which is why it's OK for them
comment|// to be assertions rather than user-level exceptions.
if|if
condition|(
operator|(
name|precision
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|scale
operator|>=
literal|0
operator|)
condition|)
block|{
assert|assert
name|sqlTypeName
operator|.
name|allowsPrecScale
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
assert|;
name|type
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|precision
operator|>=
literal|0
condition|)
block|{
assert|assert
name|sqlTypeName
operator|.
name|allowsPrecNoScale
argument_list|()
assert|;
name|type
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|sqlTypeName
operator|.
name|allowsNoPrecNoScale
argument_list|()
assert|;
name|type
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|sqlTypeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SqlTypeUtil
operator|.
name|inCharFamily
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// Applying Syntax rule 10 from SQL:99 spec section 6.22 "If TD is a
comment|// fixed-length, variable-length or large object character string,
comment|// then the collating sequence of the result of the<cast
comment|// specification> is the default collating sequence for the
comment|// character repertoire of TD and the result of the<cast
comment|// specification> has the Coercible coercibility characteristic."
name|SqlCollation
name|collation
init|=
name|SqlCollation
operator|.
name|COERCIBLE
decl_stmt|;
name|Charset
name|charset
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|charSetName
condition|)
block|{
name|charset
operator|=
name|typeFactory
operator|.
name|getDefaultCharset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|javaCharSetName
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|SqlUtil
operator|.
name|translateCharacterSetName
argument_list|(
name|charSetName
argument_list|)
argument_list|,
name|charSetName
argument_list|)
decl_stmt|;
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|javaCharSetName
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|typeFactory
operator|.
name|createTypeWithCharsetAndCollation
argument_list|(
name|type
argument_list|,
name|charset
argument_list|,
name|collation
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|//~ Tools ------------------------------------------------------------------
comment|/**    * Returns whether this type name has "local time zone" definition.    */
specifier|private
specifier|static
name|boolean
name|isWithLocalTimeZoneDef
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Remove the local time zone definition of the {@code typeName}.    *    * @param typeName Type name    * @return new type name without local time zone definition    */
specifier|private
name|SqlTypeName
name|stripLocalTimeZoneDef
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|TIME_WITH_LOCAL_TIME_ZONE
case|:
return|return
name|SqlTypeName
operator|.
name|TIME
return|;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
return|return
name|SqlTypeName
operator|.
name|TIMESTAMP
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|typeName
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

