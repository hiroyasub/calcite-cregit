begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|ddl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ColumnStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDataTypeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDrop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_comment
comment|/**  * Utilities concerning {@link SqlNode} for DDL.  */
end_comment

begin_class
specifier|public
class|class
name|SqlDdlNodes
block|{
specifier|private
name|SqlDdlNodes
parameter_list|()
block|{
block|}
comment|/** Creates a CREATE SCHEMA. */
specifier|public
specifier|static
name|SqlCreateSchema
name|createSchema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateSchema
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a CREATE FOREIGN SCHEMA. */
specifier|public
specifier|static
name|SqlCreateForeignSchema
name|createForeignSchema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNode
name|type
parameter_list|,
name|SqlNode
name|library
parameter_list|,
name|SqlNodeList
name|optionList
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateForeignSchema
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|library
argument_list|,
name|optionList
argument_list|)
return|;
block|}
comment|/** Creates a CREATE TYPE. */
specifier|public
specifier|static
name|SqlCreateType
name|createType
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|attributeList
parameter_list|,
name|SqlDataTypeSpec
name|dataTypeSpec
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateType
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|name
argument_list|,
name|attributeList
argument_list|,
name|dataTypeSpec
argument_list|)
return|;
block|}
comment|/** Creates a CREATE TABLE. */
specifier|public
specifier|static
name|SqlCreateTable
name|createTable
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateTable
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
comment|/** Creates a CREATE VIEW. */
specifier|public
specifier|static
name|SqlCreateView
name|createView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateView
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
comment|/** Creates a CREATE MATERIALIZED VIEW. */
specifier|public
specifier|static
name|SqlCreateMaterializedView
name|createMaterializedView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|,
name|SqlNode
name|query
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateMaterializedView
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|,
name|query
argument_list|)
return|;
block|}
comment|/** Creates a CREATE FUNCTION. */
specifier|public
specifier|static
name|SqlCreateFunction
name|createFunction
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNode
name|className
parameter_list|,
name|SqlNodeList
name|usingList
parameter_list|)
block|{
return|return
operator|new
name|SqlCreateFunction
argument_list|(
name|pos
argument_list|,
name|replace
argument_list|,
name|ifNotExists
argument_list|,
name|name
argument_list|,
name|className
argument_list|,
name|usingList
argument_list|)
return|;
block|}
comment|/** Creates a DROP [ FOREIGN ] SCHEMA. */
specifier|public
specifier|static
name|SqlDropSchema
name|dropSchema
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|foreign
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropSchema
argument_list|(
name|pos
argument_list|,
name|foreign
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP TYPE. */
specifier|public
specifier|static
name|SqlDropType
name|dropType
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropType
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP TABLE. */
specifier|public
specifier|static
name|SqlDropTable
name|dropTable
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropTable
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP VIEW. */
specifier|public
specifier|static
name|SqlDrop
name|dropView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropView
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP MATERIALIZED VIEW. */
specifier|public
specifier|static
name|SqlDrop
name|dropMaterializedView
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropMaterializedView
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a DROP FUNCTION. */
specifier|public
specifier|static
name|SqlDrop
name|dropFunction
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|)
block|{
return|return
operator|new
name|SqlDropFunction
argument_list|(
name|pos
argument_list|,
name|ifExists
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** Creates a column declaration. */
specifier|public
specifier|static
name|SqlNode
name|column
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlDataTypeSpec
name|dataType
parameter_list|,
name|SqlNode
name|expression
parameter_list|,
name|ColumnStrategy
name|strategy
parameter_list|)
block|{
return|return
operator|new
name|SqlColumnDeclaration
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|dataType
argument_list|,
name|expression
argument_list|,
name|strategy
argument_list|)
return|;
block|}
comment|/** Creates an attribute definition. */
specifier|public
specifier|static
name|SqlNode
name|attribute
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlDataTypeSpec
name|dataType
parameter_list|,
name|SqlNode
name|expression
parameter_list|,
name|SqlCollation
name|collation
parameter_list|)
block|{
return|return
operator|new
name|SqlAttributeDefinition
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|dataType
argument_list|,
name|expression
argument_list|,
name|collation
argument_list|)
return|;
block|}
comment|/** Creates a CHECK constraint. */
specifier|public
specifier|static
name|SqlNode
name|check
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNode
name|expression
parameter_list|)
block|{
return|return
operator|new
name|SqlCheckConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|expression
argument_list|)
return|;
block|}
comment|/** Creates a UNIQUE constraint. */
specifier|public
specifier|static
name|SqlKeyConstraint
name|unique
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|)
block|{
return|return
operator|new
name|SqlKeyConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|)
return|;
block|}
comment|/** Creates a PRIMARY KEY constraint. */
specifier|public
specifier|static
name|SqlKeyConstraint
name|primary
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|name
parameter_list|,
name|SqlNodeList
name|columnList
parameter_list|)
block|{
return|return
operator|new
name|SqlKeyConstraint
argument_list|(
name|pos
argument_list|,
name|name
argument_list|,
name|columnList
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|PRIMARY
return|;
block|}
block|}
return|;
block|}
comment|/** File type for CREATE FUNCTION. */
specifier|public
enum|enum
name|FileType
block|{
name|FILE
block|,
name|JAR
block|,
name|ARCHIVE
block|}
block|}
end_class

end_unit

