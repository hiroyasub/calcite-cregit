begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlInternalOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|InferTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeTransforms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlNonNullableAccessors
operator|.
name|getOperandLiteralValueOrThrow
import|;
end_import

begin_comment
comment|/** Interval expression.  *  *<p>Syntax:  *  *<blockquote><pre>INTERVAL numericExpression timeUnit  *  * timeUnit: YEAR | MONTH | DAY | HOUR | MINUTE | SECOND</pre></blockquote>  *  *<p>Compare with interval literal, whose syntax is  * {@code INTERVAL characterLiteral timeUnit [ TO timeUnit ]}.  */
end_comment

begin_class
specifier|public
class|class
name|SqlIntervalOperator
extends|extends
name|SqlInternalOperator
block|{
specifier|private
specifier|static
specifier|final
name|SqlReturnTypeInference
name|RETURN_TYPE
init|=
operator|(
operator|(
name|SqlReturnTypeInference
operator|)
name|SqlIntervalOperator
operator|::
name|returnType
operator|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
decl_stmt|;
name|SqlIntervalOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"INTERVAL"
argument_list|,
name|SqlKind
operator|.
name|INTERVAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|RETURN_TYPE
argument_list|,
name|InferTypes
operator|.
name|ANY_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|NUMERIC_INTERVAL
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|RelDataType
name|returnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
specifier|final
name|SqlIntervalQualifier
name|intervalQualifier
init|=
name|getOperandLiteralValueOrThrow
argument_list|(
name|opBinding
argument_list|,
literal|1
argument_list|,
name|SqlIntervalQualifier
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlIntervalType
argument_list|(
name|intervalQualifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"INTERVAL"
argument_list|)
expr_stmt|;
specifier|final
name|SqlNode
name|expression
init|=
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SqlIntervalQualifier
name|intervalQualifier
init|=
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|expression
operator|.
name|unparseWithParentheses
argument_list|(
name|writer
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|,
operator|!
operator|(
name|expression
operator|instanceof
name|SqlLiteral
operator|||
name|expression
operator|instanceof
name|SqlIdentifier
operator|||
name|expression
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|MINUS_PREFIX
operator|||
name|writer
operator|.
name|isAlwaysUseParentheses
argument_list|()
operator|)
argument_list|)
expr_stmt|;
assert|assert
name|intervalQualifier
operator|.
name|timeUnitRange
operator|.
name|endUnit
operator|==
literal|null
assert|;
name|intervalQualifier
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSignatureTemplate
parameter_list|(
name|int
name|operandsCount
parameter_list|)
block|{
switch|switch
condition|(
name|operandsCount
condition|)
block|{
case|case
literal|2
case|:
return|return
literal|"{0} {1} {2}"
return|;
comment|// e.g. "INTERVAL<INTEGER><INTERVAL HOUR>"
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

