begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSelect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
operator|.
name|stripAs
import|;
end_import

begin_comment
comment|/**  * Scope for resolving identifiers within a SELECT statement that has a  * GROUP BY clause.  *  *<p>The same set of identifiers are in scope, but it won't allow access to  * identifiers or expressions which are not group-expressions.  */
end_comment

begin_class
specifier|public
class|class
name|AggregatingSelectScope
extends|extends
name|DelegatingScope
implements|implements
name|AggregatingScope
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|SqlSelect
name|select
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|distinct
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|groupExprList
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates an AggregatingSelectScope    *    * @param selectScope Parent scope    * @param select      Enclosing SELECT node    * @param distinct    Whether SELECT is DISTINCT    */
name|AggregatingSelectScope
parameter_list|(
name|SqlValidatorScope
name|selectScope
parameter_list|,
name|SqlSelect
name|select
parameter_list|,
name|boolean
name|distinct
parameter_list|)
block|{
comment|// The select scope is the parent in the sense that all columns which
comment|// are available in the select scope are available. Whether they are
comment|// valid as aggregation expressions... now that's a different matter.
name|super
argument_list|(
name|selectScope
argument_list|)
expr_stmt|;
name|this
operator|.
name|select
operator|=
name|select
expr_stmt|;
name|this
operator|.
name|distinct
operator|=
name|distinct
expr_stmt|;
if|if
condition|(
name|distinct
condition|)
block|{
name|groupExprList
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|select
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// We deep-copy the group-list in case subsequent validation
comment|// modifies it and makes it no longer equivalent. While copying,
comment|// we fully qualify all identifiers.
name|SqlNodeList
name|sqlNodeList
init|=
operator|(
name|SqlNodeList
operator|)
name|this
operator|.
name|select
operator|.
name|getGroup
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|SqlValidatorUtil
operator|.
name|DeepCopier
argument_list|(
name|parent
argument_list|)
argument_list|)
decl_stmt|;
name|groupExprList
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|SqlNode
name|node
range|:
name|sqlNodeList
control|)
block|{
name|addGroupExpr
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|groupExprList
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Returns the expressions that are in the GROUP BY clause (or the SELECT    * DISTINCT clause, if distinct) and that can therefore be referenced    * without being wrapped in aggregate functions.    *    *<p>The expressions are fully-qualified, and any "*" in select clauses are    * expanded.    *    * @return list of grouping expressions    */
specifier|private
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getGroupExprs
parameter_list|()
block|{
if|if
condition|(
name|distinct
condition|)
block|{
comment|// Cannot compute this in the constructor: select list has not been
comment|// expanded yet.
assert|assert
name|select
operator|.
name|isDistinct
argument_list|()
assert|;
comment|// Remove the AS operator so the expressions are consistent with
comment|// OrderExpressionExpander.
name|List
argument_list|<
name|SqlNode
argument_list|>
name|groupExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlNode
name|selectItem
range|:
operator|(
operator|(
name|SelectScope
operator|)
name|parent
operator|)
operator|.
name|getExpandedSelectList
argument_list|()
control|)
block|{
name|groupExprs
operator|.
name|add
argument_list|(
name|stripAs
argument_list|(
name|selectItem
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groupExprs
return|;
block|}
if|else if
condition|(
name|select
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|groupExprList
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|public
name|SqlNode
name|getNode
parameter_list|()
block|{
return|return
name|select
return|;
block|}
specifier|public
name|SqlValidatorScope
name|getOperandScope
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|isAggregator
argument_list|()
condition|)
block|{
comment|// If we're the 'SUM' node in 'select a + sum(b + c) from t
comment|// group by a', then we should validate our arguments in
comment|// the non-aggregating scope, where 'b' and 'c' are valid
comment|// column references.
return|return
name|parent
return|;
block|}
else|else
block|{
comment|// Check whether expression is constant within the group.
comment|//
comment|// If not, throws. Example, 'empno' in
comment|//    SELECT empno FROM emp GROUP BY deptno
comment|//
comment|// If it perfectly matches an expression in the GROUP BY
comment|// clause, we validate its arguments in the non-aggregating
comment|// scope. Example, 'empno + 1' in
comment|//
comment|//   SELECT empno + 1 FROM emp GROUP BY empno + 1
specifier|final
name|boolean
name|matches
init|=
name|checkAggregateExpr
argument_list|(
name|call
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
condition|)
block|{
return|return
name|parent
return|;
block|}
block|}
return|return
name|super
operator|.
name|getOperandScope
argument_list|(
name|call
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkAggregateExpr
parameter_list|(
name|SqlNode
name|expr
parameter_list|,
name|boolean
name|deep
parameter_list|)
block|{
comment|// Fully-qualify any identifiers in expr.
if|if
condition|(
name|deep
condition|)
block|{
name|expr
operator|=
name|validator
operator|.
name|expand
argument_list|(
name|expr
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// Make sure expression is valid, throws if not.
name|List
argument_list|<
name|SqlNode
argument_list|>
name|groupExprs
init|=
name|getGroupExprs
argument_list|()
decl_stmt|;
specifier|final
name|AggChecker
name|aggChecker
init|=
operator|new
name|AggChecker
argument_list|(
name|validator
argument_list|,
name|this
argument_list|,
name|groupExprs
argument_list|,
name|distinct
argument_list|)
decl_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|aggChecker
argument_list|)
expr_stmt|;
block|}
comment|// Return whether expression exactly matches one of the group
comment|// expressions.
return|return
name|aggChecker
operator|.
name|isGroupExpr
argument_list|(
name|expr
argument_list|)
return|;
block|}
specifier|public
name|void
name|validateExpr
parameter_list|(
name|SqlNode
name|expr
parameter_list|)
block|{
name|checkAggregateExpr
argument_list|(
name|expr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a GROUP BY expression.    *    *<p>This method is used when the GROUP BY list is validated, and    * expressions are expanded, in which case they are not structurally    * identical to the unexpanded form.  We leave the previous expression in    * the list (in case there are occurrences of the expression's unexpanded    * form in the parse tree.    *    * @param expr Expression    */
specifier|public
name|void
name|addGroupExpr
parameter_list|(
name|SqlNode
name|expr
parameter_list|)
block|{
switch|switch
condition|(
name|expr
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CUBE
case|:
case|case
name|GROUPING_SETS
case|:
case|case
name|ROLLUP
case|:
case|case
name|ROW
case|:
for|for
control|(
name|SqlNode
name|child
range|:
operator|(
operator|(
name|SqlCall
operator|)
name|expr
operator|)
operator|.
name|getOperandList
argument_list|()
control|)
block|{
name|addGroupExpr
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
for|for
control|(
name|SqlNode
name|existingNode
range|:
name|groupExprList
control|)
block|{
if|if
condition|(
name|existingNode
operator|.
name|equalsDeep
argument_list|(
name|expr
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|groupExprList
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End AggregatingSelectScope.java
end_comment

end_unit

