begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexWindowBound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlBasicVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMoniker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableNullableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * SQL window specification.  *  *<p>For example, the query</p>  *  *<blockquote>  *<pre>SELECT sum(a) OVER (w ROWS 3 PRECEDING)  * FROM t  * WINDOW w AS (PARTITION BY x, y ORDER BY z),  *     w1 AS (w ROWS 5 PRECEDING UNBOUNDED FOLLOWING)</pre>  *</blockquote>  *  *<p>declares windows w and w1, and uses a window in an OVER clause. It thus  * contains 3 {@link SqlWindow} objects.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SqlWindow
extends|extends
name|SqlCall
block|{
comment|/**    * The FOLLOWING operator used exclusively in a window specification.    */
specifier|static
specifier|final
name|SqlPostfixOperator
name|FOLLOWING_OPERATOR
init|=
operator|new
name|SqlPostfixOperator
argument_list|(
literal|"FOLLOWING"
argument_list|,
name|SqlKind
operator|.
name|FOLLOWING
argument_list|,
literal|20
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    * The PRECEDING operator used exclusively in a window specification.    */
specifier|static
specifier|final
name|SqlPostfixOperator
name|PRECEDING_OPERATOR
init|=
operator|new
name|SqlPostfixOperator
argument_list|(
literal|"PRECEDING"
argument_list|,
name|SqlKind
operator|.
name|PRECEDING
argument_list|,
literal|20
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
comment|/** The name of the window being declared. */
name|SqlIdentifier
name|declName
decl_stmt|;
comment|/** The name of the window being referenced, or null. */
name|SqlIdentifier
name|refName
decl_stmt|;
comment|/** The list of partitioning columns. */
name|SqlNodeList
name|partitionList
decl_stmt|;
comment|/** The list of ordering columns. */
name|SqlNodeList
name|orderList
decl_stmt|;
comment|/** Whether it is a physical (rows) or logical (values) range. */
name|SqlLiteral
name|isRows
decl_stmt|;
comment|/** The lower bound of the window. */
name|SqlNode
name|lowerBound
decl_stmt|;
comment|/** The upper bound of the window. */
name|SqlNode
name|upperBound
decl_stmt|;
comment|/** Whether to allow partial results. It may be null. */
name|SqlLiteral
name|allowPartial
decl_stmt|;
specifier|private
name|SqlCall
name|windowCall
init|=
literal|null
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a window.    */
specifier|public
name|SqlWindow
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|,
name|SqlIdentifier
name|declName
parameter_list|,
name|SqlIdentifier
name|refName
parameter_list|,
name|SqlNodeList
name|partitionList
parameter_list|,
name|SqlNodeList
name|orderList
parameter_list|,
name|SqlLiteral
name|isRows
parameter_list|,
name|SqlNode
name|lowerBound
parameter_list|,
name|SqlNode
name|upperBound
parameter_list|,
name|SqlLiteral
name|allowPartial
parameter_list|)
block|{
name|super
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|declName
operator|=
name|declName
expr_stmt|;
name|this
operator|.
name|refName
operator|=
name|refName
expr_stmt|;
name|this
operator|.
name|partitionList
operator|=
name|partitionList
expr_stmt|;
name|this
operator|.
name|orderList
operator|=
name|orderList
expr_stmt|;
name|this
operator|.
name|isRows
operator|=
name|isRows
expr_stmt|;
name|this
operator|.
name|lowerBound
operator|=
name|lowerBound
expr_stmt|;
name|this
operator|.
name|upperBound
operator|=
name|upperBound
expr_stmt|;
name|this
operator|.
name|allowPartial
operator|=
name|allowPartial
expr_stmt|;
assert|assert
name|declName
operator|==
literal|null
operator|||
name|declName
operator|.
name|isSimple
argument_list|()
assert|;
assert|assert
name|partitionList
operator|!=
literal|null
assert|;
assert|assert
name|orderList
operator|!=
literal|null
assert|;
block|}
specifier|public
specifier|static
name|SqlWindow
name|create
parameter_list|(
name|SqlIdentifier
name|declName
parameter_list|,
name|SqlIdentifier
name|refName
parameter_list|,
name|SqlNodeList
name|partitionList
parameter_list|,
name|SqlNodeList
name|orderList
parameter_list|,
name|SqlLiteral
name|isRows
parameter_list|,
name|SqlNode
name|lowerBound
parameter_list|,
name|SqlNode
name|upperBound
parameter_list|,
name|SqlLiteral
name|allowPartial
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
comment|// If there's only one bound and it's 'FOLLOWING', make it the upper
comment|// bound.
if|if
condition|(
name|upperBound
operator|==
literal|null
operator|&&
name|lowerBound
operator|!=
literal|null
operator|&&
name|lowerBound
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FOLLOWING
condition|)
block|{
name|upperBound
operator|=
name|lowerBound
expr_stmt|;
name|lowerBound
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|SqlWindow
argument_list|(
name|pos
argument_list|,
name|declName
argument_list|,
name|refName
argument_list|,
name|partitionList
argument_list|,
name|orderList
argument_list|,
name|isRows
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|allowPartial
argument_list|)
return|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|SqlWindowOperator
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlKind
name|getKind
parameter_list|()
block|{
return|return
name|SqlKind
operator|.
name|WINDOW
return|;
block|}
specifier|public
name|List
argument_list|<
name|SqlNode
argument_list|>
name|getOperandList
parameter_list|()
block|{
return|return
name|ImmutableNullableList
operator|.
name|of
argument_list|(
name|declName
argument_list|,
name|refName
argument_list|,
name|partitionList
argument_list|,
name|orderList
argument_list|,
name|isRows
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|allowPartial
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOperand
parameter_list|(
name|int
name|i
parameter_list|,
name|SqlNode
name|operand
parameter_list|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|this
operator|.
name|declName
operator|=
operator|(
name|SqlIdentifier
operator|)
name|operand
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|this
operator|.
name|refName
operator|=
operator|(
name|SqlIdentifier
operator|)
name|operand
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|this
operator|.
name|partitionList
operator|=
operator|(
name|SqlNodeList
operator|)
name|operand
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|this
operator|.
name|orderList
operator|=
operator|(
name|SqlNodeList
operator|)
name|operand
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|this
operator|.
name|isRows
operator|=
operator|(
name|SqlLiteral
operator|)
name|operand
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|this
operator|.
name|lowerBound
operator|=
name|operand
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|this
operator|.
name|upperBound
operator|=
name|operand
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|this
operator|.
name|allowPartial
operator|=
operator|(
name|SqlLiteral
operator|)
name|operand
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|i
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|declName
condition|)
block|{
name|declName
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"AS"
argument_list|)
expr_stmt|;
block|}
comment|// Override, so we don't print extra parentheses.
name|getOperator
argument_list|()
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlIdentifier
name|getDeclName
parameter_list|()
block|{
return|return
name|declName
return|;
block|}
specifier|public
name|void
name|setDeclName
parameter_list|(
name|SqlIdentifier
name|declName
parameter_list|)
block|{
assert|assert
name|declName
operator|.
name|isSimple
argument_list|()
assert|;
name|this
operator|.
name|declName
operator|=
name|declName
expr_stmt|;
block|}
specifier|public
name|SqlNode
name|getLowerBound
parameter_list|()
block|{
return|return
name|lowerBound
return|;
block|}
specifier|public
name|void
name|setLowerBound
parameter_list|(
name|SqlNode
name|lowerBound
parameter_list|)
block|{
name|this
operator|.
name|lowerBound
operator|=
name|lowerBound
expr_stmt|;
block|}
specifier|public
name|SqlNode
name|getUpperBound
parameter_list|()
block|{
return|return
name|upperBound
return|;
block|}
specifier|public
name|void
name|setUpperBound
parameter_list|(
name|SqlNode
name|upperBound
parameter_list|)
block|{
name|this
operator|.
name|upperBound
operator|=
name|upperBound
expr_stmt|;
block|}
comment|/**    * Returns if the window is guaranteed to have rows.    * This is useful to refine data type of window aggregates.    * For instance sum(non-nullable) over (empty window) is NULL.    *    * @return true when the window is non-empty    *    * @see org.apache.calcite.rel.core.Window.Group#isAlwaysNonEmpty()    * @see SqlOperatorBinding#getGroupCount()    * @see org.apache.calcite.sql.validate.SqlValidatorImpl#resolveWindow(SqlNode, org.apache.calcite.sql.validate.SqlValidatorScope, boolean)    */
specifier|public
name|boolean
name|isAlwaysNonEmpty
parameter_list|()
block|{
specifier|final
name|SqlWindow
name|tmp
decl_stmt|;
if|if
condition|(
name|lowerBound
operator|==
literal|null
operator|||
name|upperBound
operator|==
literal|null
condition|)
block|{
comment|// Keep the current window unmodified
name|tmp
operator|=
operator|new
name|SqlWindow
argument_list|(
name|getParserPosition
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|partitionList
argument_list|,
name|orderList
argument_list|,
name|isRows
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|allowPartial
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|populateBounds
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|=
name|this
expr_stmt|;
block|}
if|if
condition|(
name|tmp
operator|.
name|lowerBound
operator|instanceof
name|SqlLiteral
operator|&&
name|tmp
operator|.
name|upperBound
operator|instanceof
name|SqlLiteral
condition|)
block|{
name|int
name|lowerKey
init|=
name|RexWindowBound
operator|.
name|create
argument_list|(
name|tmp
operator|.
name|lowerBound
argument_list|,
literal|null
argument_list|)
operator|.
name|getOrderKey
argument_list|()
decl_stmt|;
name|int
name|upperKey
init|=
name|RexWindowBound
operator|.
name|create
argument_list|(
name|tmp
operator|.
name|upperBound
argument_list|,
literal|null
argument_list|)
operator|.
name|getOrderKey
argument_list|()
decl_stmt|;
return|return
name|lowerKey
operator|>
operator|-
literal|1
operator|&&
name|lowerKey
operator|<=
name|upperKey
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isRows
parameter_list|()
block|{
return|return
name|isRows
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|SqlNodeList
name|getOrderList
parameter_list|()
block|{
return|return
name|orderList
return|;
block|}
specifier|public
name|SqlNodeList
name|getPartitionList
parameter_list|()
block|{
return|return
name|partitionList
return|;
block|}
specifier|public
name|SqlIdentifier
name|getRefName
parameter_list|()
block|{
return|return
name|refName
return|;
block|}
specifier|public
name|void
name|setWindowCall
parameter_list|(
name|SqlCall
name|windowCall
parameter_list|)
block|{
name|this
operator|.
name|windowCall
operator|=
name|windowCall
expr_stmt|;
assert|assert
name|windowCall
operator|==
literal|null
operator|||
name|windowCall
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlAggFunction
assert|;
block|}
specifier|public
name|SqlCall
name|getWindowCall
parameter_list|()
block|{
return|return
name|windowCall
return|;
block|}
comment|/** @see Util#deprecated(Object, boolean) */
specifier|static
name|void
name|checkSpecialLiterals
parameter_list|(
name|SqlWindow
name|window
parameter_list|,
name|SqlValidator
name|validator
parameter_list|)
block|{
specifier|final
name|SqlNode
name|lowerBound
init|=
name|window
operator|.
name|getLowerBound
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|upperBound
init|=
name|window
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
name|Object
name|lowerLitType
init|=
literal|null
decl_stmt|;
name|Object
name|upperLitType
init|=
literal|null
decl_stmt|;
name|SqlOperator
name|lowerOp
init|=
literal|null
decl_stmt|;
name|SqlOperator
name|upperOp
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|lowerBound
condition|)
block|{
if|if
condition|(
name|lowerBound
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
name|lowerLitType
operator|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|lowerBound
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|Bound
operator|.
name|UNBOUNDED_FOLLOWING
operator|==
name|lowerLitType
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|lowerBound
argument_list|,
name|RESOURCE
operator|.
name|badLowerBoundary
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|lowerBound
operator|instanceof
name|SqlCall
condition|)
block|{
name|lowerOp
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|lowerBound
operator|)
operator|.
name|getOperator
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|upperBound
condition|)
block|{
if|if
condition|(
name|upperBound
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LITERAL
condition|)
block|{
name|upperLitType
operator|=
operator|(
operator|(
name|SqlLiteral
operator|)
name|upperBound
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|Bound
operator|.
name|UNBOUNDED_PRECEDING
operator|==
name|upperLitType
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|RESOURCE
operator|.
name|badUpperBoundary
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|upperBound
operator|instanceof
name|SqlCall
condition|)
block|{
name|upperOp
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|upperBound
operator|)
operator|.
name|getOperator
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Bound
operator|.
name|CURRENT_ROW
operator|==
name|lowerLitType
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|upperOp
condition|)
block|{
if|if
condition|(
name|upperOp
operator|==
name|PRECEDING_OPERATOR
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|RESOURCE
operator|.
name|currentRowPrecedingError
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|else if
condition|(
literal|null
operator|!=
name|lowerOp
condition|)
block|{
if|if
condition|(
name|lowerOp
operator|==
name|FOLLOWING_OPERATOR
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|upperOp
condition|)
block|{
if|if
condition|(
name|upperOp
operator|==
name|PRECEDING_OPERATOR
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|RESOURCE
operator|.
name|followingBeforePrecedingError
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
literal|null
operator|!=
name|upperLitType
condition|)
block|{
if|if
condition|(
name|Bound
operator|.
name|CURRENT_ROW
operator|==
name|upperLitType
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|upperBound
argument_list|,
name|RESOURCE
operator|.
name|currentRowFollowingError
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * This method retrieves the list of columns for the current table then    * walks through the list looking for a column that is monotonic (sorted)    */
specifier|static
name|boolean
name|isTableSorted
parameter_list|(
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|SqlMoniker
argument_list|>
argument_list|()
decl_stmt|;
comment|// REVIEW: jhyde, 2007/11/7: This is the only use of
comment|// findAllColumnNames. Find a better way to detect monotonicity, then
comment|// remove that method.
name|scope
operator|.
name|findAllColumnNames
argument_list|(
name|columnNames
argument_list|)
expr_stmt|;
for|for
control|(
name|SqlMoniker
name|columnName
range|:
name|columnNames
control|)
block|{
name|SqlIdentifier
name|columnId
init|=
name|columnName
operator|.
name|toIdentifier
argument_list|()
decl_stmt|;
specifier|final
name|SqlMonotonicity
name|monotonicity
init|=
name|scope
operator|.
name|getMonotonicity
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
if|if
condition|(
name|monotonicity
operator|!=
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createCurrentRow
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|Bound
operator|.
name|CURRENT_ROW
operator|.
name|symbol
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createUnboundedFollowing
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|Bound
operator|.
name|UNBOUNDED_FOLLOWING
operator|.
name|symbol
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createUnboundedPreceding
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|Bound
operator|.
name|UNBOUNDED_PRECEDING
operator|.
name|symbol
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createFollowing
parameter_list|(
name|SqlNode
name|e
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|FOLLOWING_OPERATOR
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createPreceding
parameter_list|(
name|SqlNode
name|e
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|PRECEDING_OPERATOR
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlNode
name|createBound
parameter_list|(
name|SqlLiteral
name|range
parameter_list|)
block|{
return|return
name|range
return|;
block|}
comment|/**    * Returns whether an expression represents the "CURRENT ROW" bound.    */
specifier|public
specifier|static
name|boolean
name|isCurrentRow
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|instanceof
name|SqlLiteral
operator|)
operator|&&
operator|(
operator|(
name|SqlLiteral
operator|)
name|node
operator|)
operator|.
name|symbolValue
argument_list|()
operator|==
name|Bound
operator|.
name|CURRENT_ROW
return|;
block|}
comment|/**    * Returns whether an expression represents the "UNBOUNDED PRECEDING" bound.    */
specifier|public
specifier|static
name|boolean
name|isUnboundedPreceding
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|instanceof
name|SqlLiteral
operator|)
operator|&&
operator|(
operator|(
name|SqlLiteral
operator|)
name|node
operator|)
operator|.
name|symbolValue
argument_list|()
operator|==
name|Bound
operator|.
name|UNBOUNDED_PRECEDING
return|;
block|}
comment|/**    * Returns whether an expression represents the "UNBOUNDED FOLLOWING" bound.    */
specifier|public
specifier|static
name|boolean
name|isUnboundedFollowing
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|instanceof
name|SqlLiteral
operator|)
operator|&&
operator|(
operator|(
name|SqlLiteral
operator|)
name|node
operator|)
operator|.
name|symbolValue
argument_list|()
operator|==
name|Bound
operator|.
name|UNBOUNDED_FOLLOWING
return|;
block|}
comment|/**    * Creates a new window by combining this one with another.    *    *<p>For example,    *    *<pre>WINDOW (w PARTITION BY x ORDER BY y)    *   overlay    *   WINDOW w AS (PARTITION BY z)</pre>    *    * yields    *    *<pre>WINDOW (PARTITION BY z ORDER BY y)</pre>    *    *<p>Does not alter this or the other window.    *    * @return A new window    */
specifier|public
name|SqlWindow
name|overlay
parameter_list|(
name|SqlWindow
name|that
parameter_list|,
name|SqlValidator
name|validator
parameter_list|)
block|{
comment|// check 7.11 rule 10c
specifier|final
name|SqlNodeList
name|partitions
init|=
name|getPartitionList
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|partitions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|RESOURCE
operator|.
name|partitionNotAllowed
argument_list|()
argument_list|)
throw|;
block|}
comment|// 7.11 rule 10d
specifier|final
name|SqlNodeList
name|baseOrder
init|=
name|getOrderList
argument_list|()
decl_stmt|;
specifier|final
name|SqlNodeList
name|refOrder
init|=
name|that
operator|.
name|getOrderList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|0
operator|!=
name|baseOrder
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
literal|0
operator|!=
name|refOrder
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|baseOrder
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|RESOURCE
operator|.
name|orderByOverlap
argument_list|()
argument_list|)
throw|;
block|}
comment|// 711 rule 10e
specifier|final
name|SqlNode
name|lowerBound
init|=
name|that
operator|.
name|getLowerBound
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|upperBound
init|=
name|that
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|!=
name|lowerBound
operator|)
operator|||
operator|(
literal|null
operator|!=
name|upperBound
operator|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|that
operator|.
name|isRows
argument_list|,
name|RESOURCE
operator|.
name|refWindowWithFrame
argument_list|()
argument_list|)
throw|;
block|}
name|SqlIdentifier
name|declNameNew
init|=
name|declName
decl_stmt|;
name|SqlIdentifier
name|refNameNew
init|=
name|refName
decl_stmt|;
name|SqlNodeList
name|partitionListNew
init|=
name|partitionList
decl_stmt|;
name|SqlNodeList
name|orderListNew
init|=
name|orderList
decl_stmt|;
name|SqlLiteral
name|isRowsNew
init|=
name|isRows
decl_stmt|;
name|SqlNode
name|lowerBoundNew
init|=
name|lowerBound
decl_stmt|;
name|SqlNode
name|upperBoundNew
init|=
name|upperBound
decl_stmt|;
name|SqlLiteral
name|allowPartialNew
init|=
name|allowPartial
decl_stmt|;
comment|// Clear the reference window, because the reference is now resolved.
comment|// The overlaying window may have its own reference, of course.
name|refNameNew
operator|=
literal|null
expr_stmt|;
comment|// Overlay other parameters.
if|if
condition|(
name|setOperand
argument_list|(
name|partitionListNew
argument_list|,
name|partitionList
argument_list|,
name|validator
argument_list|)
condition|)
block|{
name|partitionListNew
operator|=
name|that
operator|.
name|partitionList
expr_stmt|;
block|}
if|if
condition|(
name|setOperand
argument_list|(
name|orderListNew
argument_list|,
name|that
operator|.
name|orderList
argument_list|,
name|validator
argument_list|)
condition|)
block|{
name|orderListNew
operator|=
name|that
operator|.
name|orderList
expr_stmt|;
block|}
if|if
condition|(
name|setOperand
argument_list|(
name|lowerBoundNew
argument_list|,
name|that
operator|.
name|lowerBound
argument_list|,
name|validator
argument_list|)
condition|)
block|{
name|lowerBoundNew
operator|=
name|that
operator|.
name|lowerBound
expr_stmt|;
block|}
if|if
condition|(
name|setOperand
argument_list|(
name|upperBoundNew
argument_list|,
name|that
operator|.
name|upperBound
argument_list|,
name|validator
argument_list|)
condition|)
block|{
name|upperBoundNew
operator|=
name|that
operator|.
name|upperBound
expr_stmt|;
block|}
return|return
operator|new
name|SqlWindow
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|,
name|declNameNew
argument_list|,
name|refNameNew
argument_list|,
name|partitionListNew
argument_list|,
name|orderListNew
argument_list|,
name|isRowsNew
argument_list|,
name|lowerBoundNew
argument_list|,
name|upperBoundNew
argument_list|,
name|allowPartialNew
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|setOperand
parameter_list|(
name|SqlNode
name|clonedOperand
parameter_list|,
name|SqlNode
name|thatOperand
parameter_list|,
name|SqlValidator
name|validator
parameter_list|)
block|{
if|if
condition|(
operator|(
name|thatOperand
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|SqlNodeList
operator|.
name|isEmptyList
argument_list|(
name|thatOperand
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|clonedOperand
operator|==
literal|null
operator|)
operator|||
name|SqlNodeList
operator|.
name|isEmptyList
argument_list|(
name|clonedOperand
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|clonedOperand
argument_list|,
name|RESOURCE
operator|.
name|cannotOverrideWindowAttribute
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Overridden method to specifically check only the right subtree of a window    * definition.    *    * @param node The SqlWindow to compare to "this" window    * @param fail Whether to throw if not equal    * @return boolean true if all nodes in the subtree are equal    */
annotation|@
name|Override
specifier|public
name|boolean
name|equalsDeep
parameter_list|(
name|SqlNode
name|node
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
comment|// This is the difference over super.equalsDeep.  It skips
comment|// operands[0] the declared name fo this window.  We only want
comment|// to check the window components.
return|return
name|node
operator|==
name|this
operator|||
name|node
operator|instanceof
name|SqlWindow
operator|&&
name|SqlNode
operator|.
name|equalDeep
argument_list|(
name|Util
operator|.
name|skip
argument_list|(
name|getOperandList
argument_list|()
argument_list|)
argument_list|,
name|Util
operator|.
name|skip
argument_list|(
operator|(
operator|(
name|SqlWindow
operator|)
name|node
operator|)
operator|.
name|getOperandList
argument_list|()
argument_list|)
argument_list|,
name|fail
argument_list|)
return|;
block|}
comment|/**    * Returns whether partial windows are allowed. If false, a partial window    * (for example, a window of size 1 hour which has only 45 minutes of data    * in it) will appear to windowed aggregate functions to be empty.    */
specifier|public
name|boolean
name|isAllowPartial
parameter_list|()
block|{
comment|// Default (and standard behavior) is to allow partial windows.
return|return
name|allowPartial
operator|==
literal|null
operator|||
name|allowPartial
operator|.
name|booleanValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
name|SqlValidatorScope
name|operandScope
init|=
name|scope
decl_stmt|;
comment|// REVIEW
name|SqlIdentifier
name|declName
init|=
name|this
operator|.
name|declName
decl_stmt|;
name|SqlIdentifier
name|refName
init|=
name|this
operator|.
name|refName
decl_stmt|;
name|SqlNodeList
name|partitionList
init|=
name|this
operator|.
name|partitionList
decl_stmt|;
name|SqlNodeList
name|orderList
init|=
name|this
operator|.
name|orderList
decl_stmt|;
name|SqlLiteral
name|isRows
init|=
name|this
operator|.
name|isRows
decl_stmt|;
name|SqlNode
name|lowerBound
init|=
name|this
operator|.
name|lowerBound
decl_stmt|;
name|SqlNode
name|upperBound
init|=
name|this
operator|.
name|upperBound
decl_stmt|;
name|SqlLiteral
name|allowPartial
init|=
name|this
operator|.
name|allowPartial
decl_stmt|;
if|if
condition|(
name|refName
operator|!=
literal|null
condition|)
block|{
name|SqlWindow
name|win
init|=
name|validator
operator|.
name|resolveWindow
argument_list|(
name|this
argument_list|,
name|operandScope
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|partitionList
operator|=
name|win
operator|.
name|partitionList
expr_stmt|;
name|orderList
operator|=
name|win
operator|.
name|orderList
expr_stmt|;
name|isRows
operator|=
name|win
operator|.
name|isRows
expr_stmt|;
name|lowerBound
operator|=
name|win
operator|.
name|lowerBound
expr_stmt|;
name|upperBound
operator|=
name|win
operator|.
name|upperBound
expr_stmt|;
name|allowPartial
operator|=
name|win
operator|.
name|allowPartial
expr_stmt|;
block|}
for|for
control|(
name|SqlNode
name|partitionItem
range|:
name|partitionList
control|)
block|{
name|partitionItem
operator|.
name|validateExpr
argument_list|(
name|validator
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlNode
name|orderItem
range|:
name|orderList
control|)
block|{
name|boolean
name|savedColumnReferenceExpansion
init|=
name|validator
operator|.
name|getColumnReferenceExpansion
argument_list|()
decl_stmt|;
name|validator
operator|.
name|setColumnReferenceExpansion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|orderItem
operator|.
name|validateExpr
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|validator
operator|.
name|setColumnReferenceExpansion
argument_list|(
name|savedColumnReferenceExpansion
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 6.10 rule 6a Function RANK& DENSE_RANK require ORDER BY clause
if|if
condition|(
name|orderList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|SqlWindow
operator|.
name|isTableSorted
argument_list|(
name|scope
argument_list|)
operator|&&
name|windowCall
operator|!=
literal|null
operator|&&
name|windowCall
operator|.
name|getOperator
argument_list|()
operator|.
name|requiresOrder
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|this
argument_list|,
name|RESOURCE
operator|.
name|funcNeedsOrderBy
argument_list|()
argument_list|)
throw|;
block|}
comment|// Run framing checks if there are any
if|if
condition|(
name|upperBound
operator|!=
literal|null
operator|||
name|lowerBound
operator|!=
literal|null
condition|)
block|{
comment|// 6.10 Rule 6a RANK& DENSE_RANK do not allow ROWS or RANGE
if|if
condition|(
name|windowCall
operator|!=
literal|null
operator|&&
operator|!
name|windowCall
operator|.
name|getOperator
argument_list|()
operator|.
name|allowsFraming
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|isRows
argument_list|,
name|RESOURCE
operator|.
name|rankWithFrame
argument_list|()
argument_list|)
throw|;
block|}
name|SqlTypeFamily
name|orderTypeFam
init|=
literal|null
decl_stmt|;
comment|// SQL03 7.10 Rule 11a
if|if
condition|(
name|orderList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// if order by is a compound list then range not allowed
if|if
condition|(
name|orderList
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|isRows
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|isRows
argument_list|,
name|RESOURCE
operator|.
name|compoundOrderByProhibitsRange
argument_list|()
argument_list|)
throw|;
block|}
comment|// get the type family for the sort key for Frame Boundary Val.
name|RelDataType
name|orderType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|operandScope
argument_list|,
name|orderList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|orderTypeFam
operator|=
name|orderType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// requires an ORDER BY clause if frame is logical(RANGE)
comment|// We relax this requirement if the table appears to be
comment|// sorted already
if|if
condition|(
operator|!
name|isRows
argument_list|()
operator|&&
operator|!
name|SqlWindow
operator|.
name|isTableSorted
argument_list|(
name|scope
argument_list|)
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|this
argument_list|,
name|RESOURCE
operator|.
name|overMissingOrderBy
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Let the bounds validate themselves
name|validateFrameBoundary
argument_list|(
name|lowerBound
argument_list|,
name|isRows
argument_list|()
argument_list|,
name|orderTypeFam
argument_list|,
name|validator
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
name|validateFrameBoundary
argument_list|(
name|upperBound
argument_list|,
name|isRows
argument_list|()
argument_list|,
name|orderTypeFam
argument_list|,
name|validator
argument_list|,
name|operandScope
argument_list|)
expr_stmt|;
comment|// Validate across boundaries. 7.10 Rule 8 a-d
name|checkSpecialLiterals
argument_list|(
name|this
argument_list|,
name|validator
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|orderList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|SqlWindow
operator|.
name|isTableSorted
argument_list|(
name|scope
argument_list|)
operator|&&
name|windowCall
operator|!=
literal|null
operator|&&
name|windowCall
operator|.
name|getOperator
argument_list|()
operator|.
name|requiresOrder
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|this
argument_list|,
name|RESOURCE
operator|.
name|overMissingOrderBy
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isRows
argument_list|()
operator|&&
operator|!
name|isAllowPartial
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|allowPartial
argument_list|,
name|RESOURCE
operator|.
name|cannotUseDisallowPartialWithRange
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|validateFrameBoundary
parameter_list|(
name|SqlNode
name|bound
parameter_list|,
name|boolean
name|isRows
parameter_list|,
name|SqlTypeFamily
name|orderTypeFam
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|bound
condition|)
block|{
return|return;
block|}
name|bound
operator|.
name|validate
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|bound
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
comment|// is there really anything to validate here? this covers
comment|// "CURRENT_ROW","unbounded preceding"& "unbounded following"
break|break;
case|case
name|OTHER
case|:
case|case
name|FOLLOWING
case|:
case|case
name|PRECEDING
case|:
assert|assert
name|bound
operator|instanceof
name|SqlCall
assert|;
specifier|final
name|SqlNode
name|boundVal
init|=
operator|(
operator|(
name|SqlCall
operator|)
name|bound
operator|)
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// SQL03 7.10 rule 11b Physical ROWS must be a numeric constant. JR:
comment|// actually it's SQL03 7.11 rule 11b "exact numeric with scale 0"
comment|// means not only numeric constant but exact numeric integral
comment|// constant. We also interpret the spec. to not allow negative
comment|// values, but allow zero.
if|if
condition|(
name|isRows
condition|)
block|{
if|if
condition|(
name|boundVal
operator|instanceof
name|SqlNumericLiteral
condition|)
block|{
specifier|final
name|SqlNumericLiteral
name|boundLiteral
init|=
operator|(
name|SqlNumericLiteral
operator|)
name|boundVal
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|boundLiteral
operator|.
name|isExact
argument_list|()
operator|)
operator|||
operator|(
name|boundLiteral
operator|.
name|getScale
argument_list|()
operator|!=
literal|0
operator|)
operator|||
operator|(
literal|0
operator|>
name|boundLiteral
operator|.
name|longValue
argument_list|(
literal|true
argument_list|)
operator|)
condition|)
block|{
comment|// true == throw if not exact (we just tested that - right?)
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|RESOURCE
operator|.
name|rowMustBeNonNegativeIntegral
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Allow expressions in ROWS clause
block|}
block|}
comment|// if this is a range spec check and make sure the boundary type
comment|// and order by type are compatible
if|if
condition|(
name|orderTypeFam
operator|!=
literal|null
operator|&&
operator|!
name|isRows
condition|)
block|{
name|RelDataType
name|bndType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|boundVal
argument_list|)
decl_stmt|;
name|SqlTypeFamily
name|bndTypeFam
init|=
name|bndType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|orderTypeFam
condition|)
block|{
case|case
name|NUMERIC
case|:
if|if
condition|(
name|SqlTypeFamily
operator|.
name|NUMERIC
operator|!=
name|bndTypeFam
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|RESOURCE
operator|.
name|orderByRangeMismatch
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|SqlTypeFamily
operator|.
name|INTERVAL_DAY_TIME
operator|!=
name|bndTypeFam
operator|&&
name|SqlTypeFamily
operator|.
name|INTERVAL_YEAR_MONTH
operator|!=
name|bndTypeFam
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|RESOURCE
operator|.
name|orderByRangeMismatch
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|boundVal
argument_list|,
name|RESOURCE
operator|.
name|orderByDataTypeProhibitsRange
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
default|default:
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"Unexpected node type"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a window<code>(RANGE<i>columnName</i> CURRENT ROW)</code>.    *    * @param columnName Order column    */
specifier|public
name|SqlWindow
name|createCurrentRowWindow
parameter_list|(
specifier|final
name|String
name|columnName
parameter_list|)
block|{
return|return
name|SqlWindow
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|columnName
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlWindow
operator|.
name|createCurrentRow
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlWindow
operator|.
name|createCurrentRow
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
return|;
block|}
comment|/**    * Creates a window<code>(RANGE<i>columnName</i> UNBOUNDED    * PRECEDING)</code>.    *    * @param columnName Order column    */
specifier|public
name|SqlWindow
name|createUnboundedPrecedingWindow
parameter_list|(
specifier|final
name|String
name|columnName
parameter_list|)
block|{
return|return
name|SqlWindow
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
operator|new
name|SqlNodeList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|SqlIdentifier
argument_list|(
name|columnName
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlWindow
operator|.
name|createUnboundedPreceding
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlWindow
operator|.
name|createCurrentRow
argument_list|(
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
return|;
block|}
comment|/**    * Fill in missing bounds. Default bounds are "BETWEEN UNBOUNDED PRECEDING    * AND CURRENT ROW" when ORDER BY present and "BETWEEN UNBOUNDED PRECEDING    * AND UNBOUNDED FOLLOWING" when no ORDER BY present.    */
specifier|public
name|void
name|populateBounds
parameter_list|()
block|{
if|if
condition|(
name|lowerBound
operator|==
literal|null
operator|&&
name|upperBound
operator|==
literal|null
condition|)
block|{
name|setLowerBound
argument_list|(
name|SqlWindow
operator|.
name|createUnboundedPreceding
argument_list|(
name|getParserPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lowerBound
operator|==
literal|null
condition|)
block|{
name|setLowerBound
argument_list|(
name|SqlWindow
operator|.
name|createCurrentRow
argument_list|(
name|getParserPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upperBound
operator|==
literal|null
condition|)
block|{
name|SqlParserPos
name|pos
init|=
name|orderList
operator|.
name|getParserPosition
argument_list|()
decl_stmt|;
name|setUpperBound
argument_list|(
name|orderList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
name|SqlWindow
operator|.
name|createUnboundedFollowing
argument_list|(
name|pos
argument_list|)
else|:
name|SqlWindow
operator|.
name|createCurrentRow
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * An enumeration of types of bounds in a window:<code>CURRENT ROW</code>,    *<code>UNBOUNDED PRECEDING</code>, and<code>UNBOUNDED FOLLOWING</code>.    */
enum|enum
name|Bound
implements|implements
name|SqlLiteral
operator|.
name|SqlSymbol
block|{
name|CURRENT_ROW
argument_list|(
literal|"CURRENT ROW"
argument_list|)
block|,
name|UNBOUNDED_PRECEDING
argument_list|(
literal|"UNBOUNDED PRECEDING"
argument_list|)
block|,
name|UNBOUNDED_FOLLOWING
argument_list|(
literal|"UNBOUNDED FOLLOWING"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
name|Bound
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sql
return|;
block|}
comment|/**      * Creates a parse-tree node representing an occurrence of this bound      * type at a particular position in the parsed text.      */
specifier|public
name|SqlNode
name|symbol
parameter_list|(
name|SqlParserPos
name|pos
parameter_list|)
block|{
return|return
name|SqlLiteral
operator|.
name|createSymbol
argument_list|(
name|this
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
comment|/** An operator describing a window specification. */
specifier|private
specifier|static
class|class
name|SqlWindowOperator
extends|extends
name|SqlOperator
block|{
specifier|private
specifier|static
specifier|final
name|SqlWindowOperator
name|INSTANCE
init|=
operator|new
name|SqlWindowOperator
argument_list|()
decl_stmt|;
specifier|private
name|SqlWindowOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"WINDOW"
argument_list|,
name|SqlKind
operator|.
name|WINDOW
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlSyntax
name|getSyntax
parameter_list|()
block|{
return|return
name|SqlSyntax
operator|.
name|SPECIAL
return|;
block|}
specifier|public
name|SqlCall
name|createCall
parameter_list|(
name|SqlLiteral
name|functionQualifier
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
name|SqlNode
modifier|...
name|operands
parameter_list|)
block|{
assert|assert
name|functionQualifier
operator|==
literal|null
assert|;
assert|assert
name|operands
operator|.
name|length
operator|==
literal|8
assert|;
return|return
name|create
argument_list|(
operator|(
name|SqlIdentifier
operator|)
name|operands
index|[
literal|0
index|]
argument_list|,
operator|(
name|SqlIdentifier
operator|)
name|operands
index|[
literal|1
index|]
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|2
index|]
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|operands
index|[
literal|3
index|]
argument_list|,
operator|(
name|SqlLiteral
operator|)
name|operands
index|[
literal|4
index|]
argument_list|,
name|operands
index|[
literal|5
index|]
argument_list|,
name|operands
index|[
literal|6
index|]
argument_list|,
operator|(
name|SqlLiteral
operator|)
name|operands
index|[
literal|7
index|]
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|acceptCall
parameter_list|(
name|SqlVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|boolean
name|onlyExpressions
parameter_list|,
name|SqlBasicVisitor
operator|.
name|ArgHandler
argument_list|<
name|R
argument_list|>
name|argHandler
parameter_list|)
block|{
if|if
condition|(
name|onlyExpressions
condition|)
block|{
for|for
control|(
name|Ord
argument_list|<
name|SqlNode
argument_list|>
name|operand
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
control|)
block|{
comment|// if the second param is an Identifier then it's supposed to
comment|// be a name from a window clause and isn't part of the
comment|// group by check
if|if
condition|(
name|operand
operator|.
name|e
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|operand
operator|.
name|i
operator|==
literal|1
operator|&&
name|operand
operator|.
name|e
operator|instanceof
name|SqlIdentifier
condition|)
block|{
comment|// skip refName
continue|continue;
block|}
name|argHandler
operator|.
name|visitChild
argument_list|(
name|visitor
argument_list|,
name|call
argument_list|,
name|operand
operator|.
name|i
argument_list|,
name|operand
operator|.
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|acceptCall
argument_list|(
name|visitor
argument_list|,
name|call
argument_list|,
name|onlyExpressions
argument_list|,
name|argHandler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
specifier|final
name|SqlWindow
name|window
init|=
operator|(
name|SqlWindow
operator|)
name|call
decl_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|frame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|WINDOW
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
operator|.
name|refName
operator|!=
literal|null
condition|)
block|{
name|window
operator|.
name|refName
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
operator|.
name|partitionList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"PARTITION BY"
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|partitionFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|window
operator|.
name|partitionList
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|partitionFrame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
operator|.
name|orderList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ORDER BY"
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|orderFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|window
operator|.
name|orderList
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|orderFrame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
operator|.
name|lowerBound
operator|==
literal|null
condition|)
block|{
comment|// No ROWS or RANGE clause
block|}
if|else if
condition|(
name|window
operator|.
name|upperBound
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|window
operator|.
name|isRows
argument_list|()
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ROWS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"RANGE"
argument_list|)
expr_stmt|;
block|}
name|window
operator|.
name|lowerBound
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|window
operator|.
name|isRows
argument_list|()
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ROWS BETWEEN"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"RANGE BETWEEN"
argument_list|)
expr_stmt|;
block|}
name|window
operator|.
name|lowerBound
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"AND"
argument_list|)
expr_stmt|;
name|window
operator|.
name|upperBound
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// ALLOW PARTIAL/DISALLOW PARTIAL
if|if
condition|(
name|window
operator|.
name|allowPartial
operator|==
literal|null
condition|)
block|{
comment|// do nothing
block|}
if|else if
condition|(
name|window
operator|.
name|isAllowPartial
argument_list|()
condition|)
block|{
comment|// We could output "ALLOW PARTIAL", but this syntax is
comment|// non-standard. Omitting the clause has the same effect.
block|}
else|else
block|{
name|writer
operator|.
name|keyword
argument_list|(
literal|"DISALLOW PARTIAL"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endList
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlWindow.java
end_comment

end_unit

