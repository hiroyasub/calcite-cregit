begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Operand type-checking strategy user-defined functions (including user-defined  * aggregate functions, table functions, and table macros).  *  *<p>UDFs have a fixed number of parameters is fixed. Per  * {@link SqlOperandMetadata}, this interface provides the name and types of  * each parameter.  *  * @see OperandTypes#operandMetadata  */
end_comment

begin_class
specifier|public
class|class
name|OperandMetadataImpl
extends|extends
name|FamilyOperandTypeChecker
implements|implements
name|SqlOperandMetadata
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|RelDataTypeFactory
argument_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
argument_list|>
name|paramTypesFactory
decl_stmt|;
specifier|private
specifier|final
name|IntFunction
argument_list|<
name|String
argument_list|>
name|paramNameFn
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/** Package private. Create using {@link OperandTypes#operandMetadata}. */
name|OperandMetadataImpl
parameter_list|(
name|List
argument_list|<
name|SqlTypeFamily
argument_list|>
name|families
parameter_list|,
name|Function
argument_list|<
name|RelDataTypeFactory
argument_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
argument_list|>
name|paramTypesFactory
parameter_list|,
name|IntFunction
argument_list|<
name|String
argument_list|>
name|paramNameFn
parameter_list|,
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|optional
parameter_list|)
block|{
name|super
argument_list|(
name|families
argument_list|,
name|optional
argument_list|)
expr_stmt|;
name|this
operator|.
name|paramTypesFactory
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|paramTypesFactory
argument_list|,
literal|"paramTypesFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|paramNameFn
operator|=
name|paramNameFn
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|isFixedParameters
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RelDataType
argument_list|>
name|paramTypes
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|paramTypesFactory
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|paramNames
parameter_list|()
block|{
return|return
name|Functions
operator|.
name|generate
argument_list|(
name|families
operator|.
name|size
argument_list|()
argument_list|,
name|paramNameFn
argument_list|)
return|;
block|}
block|}
end_class

end_unit

