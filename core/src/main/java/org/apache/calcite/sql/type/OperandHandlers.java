begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|TimeFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Strategies for handling operands.  *  *<p>This class defines singleton instances of strategy objects for operand  * expansion. {@link OperandTypes}, {@link ReturnTypes} and {@link InferTypes}  * provide similar strategies for operand type checking and inference,  * and operator return type inference.  *  * @see SqlOperandTypeChecker  * @see ReturnTypes  * @see InferTypes  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|OperandHandlers
block|{
comment|/** The default operand handler visits all operands. */
specifier|public
specifier|static
specifier|final
name|SqlOperandHandler
name|DEFAULT
init|=
operator|new
name|SqlOperandHandler
argument_list|()
block|{       }
decl_stmt|;
comment|/** An operand handler that tries to convert operand #1 (0-based) into a time    * frame.    *    *<p>For example, the {@code DATE_TRUNC} function uses this; the calls    * {@code DATE_TRUNC('month', orders.order_date)},    * {@code DATE_TRUNC(orders.order_date, MONTH)},    * {@code DATE_TRUNC(orders.order_date, MINUTE15)}    * are all valid. The last uses a user-defined time frame, which appears    * to the validator as a {@link SqlIdentifier} and is then converted to a    * {@link SqlIntervalQualifier} when it matches a defined time frame. */
specifier|public
specifier|static
specifier|final
name|SqlOperandHandler
name|OPERAND_1_MIGHT_BE_TIME_FRAME
init|=
operator|new
name|TimeFrameOperandHandler
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/** Operand handler for a function whose {@code timeFrameOperand} operand    * (0-based) may be a time frame. If the operand is of type    * {@link SqlIdentifier}, looks up the custom time frame and converts it to a    * {@link SqlIntervalQualifier}. */
specifier|private
specifier|static
class|class
name|TimeFrameOperandHandler
implements|implements
name|SqlOperandHandler
block|{
specifier|private
specifier|final
name|int
name|timeFrameOperand
decl_stmt|;
name|TimeFrameOperandHandler
parameter_list|(
name|int
name|timeFrameOperand
parameter_list|)
block|{
name|this
operator|.
name|timeFrameOperand
operator|=
name|timeFrameOperand
expr_stmt|;
block|}
specifier|private
name|SqlNode
name|getOperand
parameter_list|(
name|int
name|i
parameter_list|,
name|SqlNode
name|operand
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
annotation|@
name|Nullable
name|TimeFrame
argument_list|>
name|timeFrameResolver
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
name|timeFrameOperand
operator|&&
name|operand
operator|instanceof
name|SqlIdentifier
operator|&&
operator|(
operator|(
name|SqlIdentifier
operator|)
name|operand
operator|)
operator|.
name|isSimple
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
operator|(
operator|(
name|SqlIdentifier
operator|)
name|operand
operator|)
operator|.
name|getSimple
argument_list|()
decl_stmt|;
specifier|final
name|TimeFrame
name|timeFrame
init|=
name|timeFrameResolver
operator|.
name|apply
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeFrame
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SqlIntervalQualifier
argument_list|(
name|name
argument_list|,
name|operand
operator|.
name|getParserPosition
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|operand
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|rewriteCall
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|newOperandList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Ord
operator|.
name|forEach
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|,
parameter_list|(
name|operand
parameter_list|,
name|i
parameter_list|)
lambda|->
name|newOperandList
operator|.
name|add
argument_list|(
name|getOperand
argument_list|(
name|i
argument_list|,
name|operand
argument_list|,
name|name
lambda|->
name|validator
operator|.
name|getTimeFrameSet
argument_list|()
operator|.
name|getOpt
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newOperandList
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getOperandList
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|createCall
argument_list|(
name|call
operator|.
name|getFunctionQuantifier
argument_list|()
argument_list|,
name|call
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|newOperandList
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

