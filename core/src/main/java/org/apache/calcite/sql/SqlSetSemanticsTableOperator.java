begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * SetSemanticsTable appears as an parameter in a table function.  * It represents as an input table with set semantics.  * Set semantics means that the outcome of the function depends on how  * the data is partitioned.  * When the table function is called from a query, the table parameter can  * optionally be extended with either a PARTITION BY clause or  * an ORDER BY clause or both.  *  */
end_comment

begin_class
specifier|public
class|class
name|SqlSetSemanticsTableOperator
extends|extends
name|SqlInternalOperator
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlSetSemanticsTableOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"SET_SEMANTICS_TABLE"
argument_list|,
name|SqlKind
operator|.
name|SET_SEMANTICS_TABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SqlCall
name|createCall
parameter_list|(
annotation|@
name|Nullable
name|SqlLiteral
name|functionQualifier
parameter_list|,
name|SqlParserPos
name|pos
parameter_list|,
annotation|@
name|Nullable
name|SqlNode
modifier|...
name|operands
parameter_list|)
block|{
assert|assert
name|operands
operator|.
name|length
operator|==
literal|3
assert|;
name|SqlNode
name|partitionList
init|=
name|operands
index|[
literal|1
index|]
decl_stmt|;
name|SqlNode
name|orderList
init|=
name|operands
index|[
literal|2
index|]
decl_stmt|;
assert|assert
operator|(
name|partitionList
operator|!=
literal|null
operator|&&
operator|!
name|SqlNodeList
operator|.
name|isEmptyList
argument_list|(
name|partitionList
argument_list|)
operator|)
operator|||
operator|(
name|orderList
operator|!=
literal|null
operator|&&
operator|!
name|SqlNodeList
operator|.
name|isEmptyList
argument_list|(
name|orderList
argument_list|)
operator|)
assert|;
return|return
name|super
operator|.
name|createCall
argument_list|(
name|functionQualifier
argument_list|,
name|pos
argument_list|,
name|operands
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SqlNodeList
name|partitionList
init|=
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"PARTITION BY"
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|partitionFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|partitionList
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|partitionFrame
argument_list|)
expr_stmt|;
block|}
name|SqlNodeList
name|orderList
init|=
name|call
operator|.
name|operand
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|sep
argument_list|(
literal|"ORDER BY"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|list
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|ORDER_BY_LIST
argument_list|,
name|SqlWriter
operator|.
name|COMMA
argument_list|,
name|orderList
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveType
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperandList
argument_list|()
decl_stmt|;
name|RelDataType
name|tableType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|tableType
operator|!=
literal|null
assert|;
return|return
name|tableType
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|argumentMustBeScalar
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

