begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_comment
comment|/**  * A<code>SqlDialect</code> implementation for the IBM DB2 database.  */
end_comment

begin_class
specifier|public
class|class
name|Db2SqlDialect
extends|extends
name|SqlDialect
block|{
specifier|public
specifier|static
specifier|final
name|SqlDialect
operator|.
name|Context
name|DEFAULT_CONTEXT
init|=
name|SqlDialect
operator|.
name|EMPTY_CONTEXT
operator|.
name|withDatabaseProduct
argument_list|(
name|SqlDialect
operator|.
name|DatabaseProduct
operator|.
name|DB2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SqlDialect
name|DEFAULT
init|=
operator|new
name|Db2SqlDialect
argument_list|(
name|DEFAULT_CONTEXT
argument_list|)
decl_stmt|;
comment|/** Creates a Db2SqlDialect. */
specifier|public
name|Db2SqlDialect
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsCharSet
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasImplicitTableAlias
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparseSqlIntervalQualifier
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlIntervalQualifier
name|qualifier
parameter_list|,
name|RelDataTypeSystem
name|typeSystem
parameter_list|)
block|{
comment|// DB2 supported qualifiers. Singular form of these keywords are also acceptable.
comment|// YEAR/YEARS
comment|// MONTH/MONTHS
comment|// DAY/DAYS
comment|// HOUR/HOURS
comment|// MINUTE/MINUTES
comment|// SECOND/SECONDS
switch|switch
condition|(
name|qualifier
operator|.
name|timeUnitRange
condition|)
block|{
case|case
name|YEAR
case|:
case|case
name|MONTH
case|:
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MICROSECOND
case|:
specifier|final
name|String
name|timeUnit
init|=
name|qualifier
operator|.
name|timeUnitRange
operator|.
name|startUnit
operator|.
name|name
argument_list|()
decl_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
name|timeUnit
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported type: "
operator|+
name|qualifier
operator|.
name|timeUnitRange
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|!=
name|qualifier
operator|.
name|timeUnitRange
operator|.
name|endUnit
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported end unit: "
operator|+
name|qualifier
operator|.
name|timeUnitRange
operator|.
name|endUnit
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparseSqlIntervalLiteral
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlIntervalLiteral
name|literal
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
comment|// A duration is a positive or negative number representing an interval of time.
comment|// If one operand is a date, the other labeled duration of YEARS, MONTHS, or DAYS.
comment|// If one operand is a time, the other must be labeled duration of HOURS, MINUTES, or SECONDS.
comment|// If one operand is a timestamp, the other operand can be any of teh duration.
name|SqlIntervalLiteral
operator|.
name|IntervalValue
name|interval
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|interval
operator|.
name|getSign
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|literal
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|unparseSqlIntervalQualifier
argument_list|(
name|writer
argument_list|,
name|interval
operator|.
name|getIntervalQualifier
argument_list|()
argument_list|,
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

