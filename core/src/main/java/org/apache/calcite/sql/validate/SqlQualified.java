begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Fully-qualified identifier.  *  *<p>The result of calling  * {@link org.apache.calcite.sql.validate.SqlValidatorScope#fullyQualify(org.apache.calcite.sql.SqlIdentifier)},  * a fully-qualified identifier contains the name (in correct case),  * parser position, type, and scope of each component of the identifier.  *  *<p>It is immutable.  */
end_comment

begin_class
specifier|public
class|class
name|SqlQualified
block|{
specifier|public
specifier|final
name|int
name|prefixLength
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|SqlValidatorNamespace
name|namespace
decl_stmt|;
specifier|public
specifier|final
name|SqlIdentifier
name|identifier
decl_stmt|;
specifier|private
name|SqlQualified
parameter_list|(
annotation|@
name|Nullable
name|SqlValidatorScope
name|scope
parameter_list|,
name|int
name|prefixLength
parameter_list|,
annotation|@
name|Nullable
name|SqlValidatorNamespace
name|namespace
parameter_list|,
name|SqlIdentifier
name|identifier
parameter_list|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{id: "
operator|+
name|identifier
operator|.
name|toString
argument_list|()
operator|+
literal|", prefix: "
operator|+
name|prefixLength
operator|+
literal|"}"
return|;
block|}
specifier|public
specifier|static
name|SqlQualified
name|create
parameter_list|(
annotation|@
name|Nullable
name|SqlValidatorScope
name|scope
parameter_list|,
name|int
name|prefixLength
parameter_list|,
annotation|@
name|Nullable
name|SqlValidatorNamespace
name|namespace
parameter_list|,
name|SqlIdentifier
name|identifier
parameter_list|)
block|{
return|return
operator|new
name|SqlQualified
argument_list|(
name|scope
argument_list|,
name|prefixLength
argument_list|,
name|namespace
argument_list|,
name|identifier
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|prefix
parameter_list|()
block|{
return|return
name|identifier
operator|.
name|names
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|prefixLength
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|suffix
parameter_list|()
block|{
return|return
name|Util
operator|.
name|skip
argument_list|(
name|identifier
operator|.
name|names
argument_list|,
name|prefixLength
argument_list|)
return|;
block|}
block|}
end_class

end_unit

