begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandCountRanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandTypeChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * SqlHopTableFunction implements an operator for hopping.  *  *<p>It allows four parameters:  *  *<ol>  *<li>a table</li>  *<li>a descriptor to provide a watermarked column name from the input table</li>  *<li>an interval parameter to specify the length of window shifting</li>  *<li>an interval parameter to specify the length of window size</li>  *</ol>  */
end_comment

begin_class
specifier|public
class|class
name|SqlHopTableFunction
extends|extends
name|SqlWindowTableFunction
block|{
specifier|public
name|SqlHopTableFunction
parameter_list|()
block|{
name|super
argument_list|(
name|SqlKind
operator|.
name|HOP
operator|.
name|name
argument_list|()
argument_list|,
name|OperandTypeCheckerImpl
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParamNames
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|PARAM_DATA
argument_list|,
name|PARAM_TIMECOL
argument_list|,
name|PARAM_SLIDE
argument_list|,
name|PARAM_SIZE
argument_list|,
name|PARAM_OFFSET
argument_list|)
return|;
block|}
comment|// -------------------------------------------------------------------------
comment|//  Inner Class
comment|// -------------------------------------------------------------------------
comment|/** Operand type checker for HOP. */
specifier|private
specifier|static
class|class
name|OperandTypeCheckerImpl
implements|implements
name|SqlOperandTypeChecker
block|{
specifier|static
specifier|final
name|OperandTypeCheckerImpl
name|INSTANCE
init|=
operator|new
name|OperandTypeCheckerImpl
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|checkOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|boolean
name|throwOnFailure
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateTableWithFollowingDescriptors
argument_list|(
name|callBinding
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return
name|throwValidationSignatureErrorOrReturnFalse
argument_list|(
name|callBinding
argument_list|,
name|throwOnFailure
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|validateTailingIntervals
argument_list|(
name|callBinding
argument_list|,
literal|2
argument_list|)
condition|)
block|{
return|return
name|throwValidationSignatureErrorOrReturnFalse
argument_list|(
name|callBinding
argument_list|,
name|throwOnFailure
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlOperandCountRange
name|getOperandCountRange
parameter_list|()
block|{
return|return
name|SqlOperandCountRanges
operator|.
name|between
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAllowedSignatures
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
return|return
name|opName
operator|+
literal|"(TABLE table_name, DESCRIPTOR(timecol), "
operator|+
literal|"datetime interval, datetime interval[, datetime interval])"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Consistency
name|getConsistency
parameter_list|()
block|{
return|return
name|Consistency
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOptional
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
operator|==
literal|4
return|;
block|}
block|}
block|}
end_class

end_unit

