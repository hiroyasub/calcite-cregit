begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Rules that determine whether a type is assignable from another type.  */
end_comment

begin_class
specifier|public
class|class
name|SqlTypeAssignmentRule
implements|implements
name|SqlTypeMappingRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|SqlTypeAssignmentRule
name|INSTANCE
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|map
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a {@code SqlTypeAssignmentRules} with specified type mappings {@code map}.    *    *<p>Make this constructor private intentionally, use {@link #instance()}.    *    * @param map The type mapping, for each map entry, the values types can be assigned to    *            the key type    */
specifier|private
name|SqlTypeAssignmentRule
parameter_list|(
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
static|static
block|{
specifier|final
name|SqlTypeMappingRules
operator|.
name|Builder
name|rules
init|=
name|SqlTypeMappingRules
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|rule
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// IntervalYearMonth is assignable from...
for|for
control|(
name|SqlTypeName
name|interval
range|:
name|SqlTypeName
operator|.
name|YEAR_INTERVAL_TYPES
control|)
block|{
name|rules
operator|.
name|add
argument_list|(
name|interval
argument_list|,
name|SqlTypeName
operator|.
name|YEAR_INTERVAL_TYPES
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlTypeName
name|interval
range|:
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
control|)
block|{
name|rules
operator|.
name|add
argument_list|(
name|interval
argument_list|,
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlTypeName
name|interval
range|:
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
control|)
block|{
specifier|final
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|dayIntervalTypes
init|=
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|interval
argument_list|,
name|dayIntervalTypes
argument_list|)
expr_stmt|;
block|}
comment|// MULTISET is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|MULTISET
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|MULTISET
argument_list|)
argument_list|)
expr_stmt|;
comment|// TINYINT is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
argument_list|)
expr_stmt|;
comment|// SMALLINT is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// INTEGER is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// BIGINT is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// FLOAT (up to 64 bit floating point) is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// REAL (32 bit floating point) is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// DOUBLE is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// DECIMAL is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// VARBINARY is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// CHAR is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// VARCHAR is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// BOOLEAN is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
comment|// BINARY is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// DATE is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// TIME is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// TIME WITH LOCAL TIME ZONE is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIMESTAMP is assignable from ...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIMESTAMP WITH LOCAL TIME ZONE is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// GEOMETRY is assignable from ...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|GEOMETRY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|GEOMETRY
argument_list|)
argument_list|)
expr_stmt|;
comment|// ARRAY is assignable from ...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|ARRAY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|ARRAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// MAP is assignable from ...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|MAP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
comment|// ANY is assignable from ...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|INSTANCE
operator|=
operator|new
name|SqlTypeAssignmentRule
argument_list|(
name|rules
operator|.
name|map
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Returns an instance. */
specifier|public
specifier|static
name|SqlTypeAssignmentRule
name|instance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|getTypeMapping
parameter_list|()
block|{
return|return
name|this
operator|.
name|map
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlTypeAssignmentRule.java
end_comment

end_unit

