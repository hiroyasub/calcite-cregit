begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_comment
comment|/**  * Contains internal operators.  *  *<p>These operators are always created directly, not by looking up a function  * or operator by name or syntax, and therefore this class does not implement  * interface {@link SqlOperatorTable}.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SqlInternalOperators
block|{
specifier|private
name|SqlInternalOperators
parameter_list|()
block|{
block|}
comment|/** An IN operator for Druid.    *    *<p>Unlike the regular    * {@link SqlStdOperatorTable#IN} operator it may    * be used in {@link RexCall}. It does not require that    * its operands have consistent types. */
specifier|public
specifier|static
specifier|final
name|SqlInOperator
name|DRUID_IN
init|=
operator|new
name|SqlInOperator
argument_list|(
name|SqlKind
operator|.
name|DRUID_IN
argument_list|)
decl_stmt|;
comment|/** A NOT IN operator for Druid, analogous to {@link #DRUID_IN}. */
specifier|public
specifier|static
specifier|final
name|SqlInOperator
name|DRUID_NOT_IN
init|=
operator|new
name|SqlInOperator
argument_list|(
name|SqlKind
operator|.
name|DRUID_NOT_IN
argument_list|)
decl_stmt|;
comment|/** A BETWEEN operator for Druid, analogous to {@link #DRUID_IN}. */
specifier|public
specifier|static
specifier|final
name|SqlBetweenOperator
name|DRUID_BETWEEN
init|=
operator|new
name|SqlBetweenOperator
argument_list|(
name|SqlBetweenOperator
operator|.
name|Flag
operator|.
name|SYMMETRIC
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SqlKind
name|getKind
parameter_list|()
block|{
return|return
name|SqlKind
operator|.
name|DRUID_BETWEEN
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|validRexOperands
parameter_list|(
name|int
name|count
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
return|return
name|litmus
operator|.
name|succeed
argument_list|()
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

