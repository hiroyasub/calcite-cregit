begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Definition of the SQL<code>ALL</code> and<code>SOME</code>operators.  *  *<p>Each is used in combination with a relational operator:  *<code>&lt;</code>,<code>&le;</code>,  *<code>&gt;</code>,<code>&ge;</code>,  *<code>=</code>,<code>&lt;&gt;</code>.  *  *<p><code>ANY</code> is a synonym for<code>SOME</code>.  */
end_comment

begin_class
specifier|public
class|class
name|SqlQuantifyOperator
extends|extends
name|SqlInOperator
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|public
specifier|final
name|SqlKind
name|comparisonKind
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SqlQuantifyOperator.    *    * @param kind Either ALL or SOME    * @param comparisonKind Either<code>&lt;</code>,<code>&le;</code>,    *<code>&gt;</code>,<code>&ge;</code>,    *<code>=</code> or<code>&lt;&gt;</code>.    */
name|SqlQuantifyOperator
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|SqlKind
name|comparisonKind
parameter_list|)
block|{
name|super
argument_list|(
name|comparisonKind
operator|.
name|sql
operator|+
literal|" "
operator|+
name|kind
argument_list|,
name|kind
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparisonKind
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|comparisonKind
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|EQUALS
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|NOT_EQUALS
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|LESS_THAN
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|kind
operator|==
name|SqlKind
operator|.
name|SOME
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SqlQuantifyOperator.java
end_comment

end_unit

