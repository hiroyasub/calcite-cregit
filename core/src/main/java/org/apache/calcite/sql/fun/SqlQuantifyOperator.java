begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Definition of the SQL<code>ALL</code> and<code>SOME</code>operators.  *  *<p>Each is used in combination with a relational operator:  *<code>&lt;</code>,<code>&le;</code>,  *<code>&gt;</code>,<code>&ge;</code>,  *<code>=</code>,<code>&lt;&gt;</code>.  *  *<p><code>ANY</code> is a synonym for<code>SOME</code>.  */
end_comment

begin_class
specifier|public
class|class
name|SqlQuantifyOperator
extends|extends
name|SqlInOperator
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|public
specifier|final
name|SqlKind
name|comparisonKind
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SqlQuantifyOperator.    *    * @param kind Either ALL or SOME    * @param comparisonKind Either<code>&lt;</code>,<code>&le;</code>,    *<code>&gt;</code>,<code>&ge;</code>,    *<code>=</code> or<code>&lt;&gt;</code>.    */
name|SqlQuantifyOperator
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|SqlKind
name|comparisonKind
parameter_list|)
block|{
name|super
argument_list|(
name|comparisonKind
operator|.
name|sql
operator|+
literal|" "
operator|+
name|kind
argument_list|,
name|kind
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparisonKind
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|comparisonKind
argument_list|,
literal|"comparisonKind"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|EQUALS
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|NOT_EQUALS
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|LESS_THAN
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
operator|||
name|comparisonKind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|kind
operator|==
name|SqlKind
operator|.
name|SOME
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveType
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperandList
argument_list|()
decl_stmt|;
assert|assert
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|2
assert|;
name|RelDataType
name|typeForCollectionArgument
init|=
name|tryDeriveTypeForCollection
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeForCollectionArgument
operator|!=
literal|null
condition|)
block|{
return|return
name|typeForCollectionArgument
return|;
block|}
return|return
name|super
operator|.
name|deriveType
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
return|;
block|}
comment|/**    * Derive type for SOME(collection expression), ANY (collection expression).    *    * @param validator Validator    * @param scope     Scope of validation    * @param call      Call to this operator    * @return If SOME or ALL is applied to a collection, then the function    * returns type of call, otherwise it returns null.    */
specifier|public
annotation|@
name|Nullable
name|RelDataType
name|tryDeriveTypeForCollection
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
specifier|final
name|SqlNode
name|left
init|=
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|right
init|=
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|right
operator|instanceof
name|SqlNodeList
operator|&&
operator|(
operator|(
name|SqlNodeList
operator|)
name|right
operator|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|RelDataType
name|rightType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
operator|(
operator|(
name|SqlNodeList
operator|)
name|right
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|isCollection
argument_list|(
name|rightType
argument_list|)
condition|)
block|{
specifier|final
name|RelDataType
name|componentRightType
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rightType
operator|.
name|getComponentType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|leftType
init|=
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|SqlTypeUtil
operator|.
name|sameNamedType
argument_list|(
name|componentRightType
argument_list|,
name|leftType
argument_list|)
operator|||
name|SqlTypeUtil
operator|.
name|isNull
argument_list|(
name|leftType
argument_list|)
operator|||
name|SqlTypeUtil
operator|.
name|isNull
argument_list|(
name|componentRightType
argument_list|)
condition|)
block|{
return|return
name|validator
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createTypeWithNullability
argument_list|(
name|validator
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|rightType
operator|.
name|isNullable
argument_list|()
operator|||
name|componentRightType
operator|.
name|isNullable
argument_list|()
operator|||
name|leftType
operator|.
name|isNullable
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

