begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Strategies for inferring operand types.  *  * @see org.apache.calcite.sql.type.SqlOperandTypeInference  * @see org.apache.calcite.sql.type.ReturnTypes  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|InferTypes
block|{
specifier|private
name|InferTypes
parameter_list|()
block|{
block|}
comment|/**    * Operand type-inference strategy where an unknown operand type is derived    * from the first operand with a known type.    */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeInference
name|FIRST_KNOWN
init|=
parameter_list|(
name|callBinding
parameter_list|,
name|returnType
parameter_list|,
name|operandTypes
parameter_list|)
lambda|->
block|{
specifier|final
name|RelDataType
name|unknownType
init|=
name|callBinding
operator|.
name|getValidator
argument_list|()
operator|.
name|getUnknownType
argument_list|()
decl_stmt|;
name|RelDataType
name|knownType
init|=
name|unknownType
decl_stmt|;
for|for
control|(
name|SqlNode
name|operand
range|:
name|callBinding
operator|.
name|operands
argument_list|()
control|)
block|{
name|knownType
operator|=
name|callBinding
operator|.
name|getValidator
argument_list|()
operator|.
name|deriveType
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|operand
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|knownType
operator|.
name|equals
argument_list|(
name|unknownType
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
comment|// REVIEW jvs 11-Nov-2008:  We can't assert this
comment|// because SqlAdvisorValidator produces
comment|// unknown types for incomplete expressions.
comment|// Maybe we need to distinguish the two kinds of unknown.
comment|//assert !knownType.equals(unknownType);
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|operandTypes
index|[
name|i
index|]
operator|=
name|knownType
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Operand type-inference strategy where an unknown operand type is derived    * from the call's return type. If the return type is a record, it must have    * the same number of fields as the number of operands.    */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeInference
name|RETURN_TYPE
init|=
parameter_list|(
name|callBinding
parameter_list|,
name|returnType
parameter_list|,
name|operandTypes
parameter_list|)
lambda|->
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|operandTypes
index|[
name|i
index|]
operator|=
name|returnType
operator|.
name|isStruct
argument_list|()
condition|?
name|returnType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
else|:
name|returnType
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Operand type-inference strategy where an unknown operand type is assumed    * to be boolean.    */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeInference
name|BOOLEAN
init|=
parameter_list|(
name|callBinding
parameter_list|,
name|returnType
parameter_list|,
name|operandTypes
parameter_list|)
lambda|->
block|{
name|RelDataTypeFactory
name|typeFactory
init|=
name|callBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|operandTypes
index|[
name|i
index|]
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Operand type-inference strategy where an unknown operand type is assumed    * to be VARCHAR(1024).  This is not something which should be used in most    * cases (especially since the precision is arbitrary), but for IS [NOT]    * NULL, we don't really care about the type at all, so it's reasonable to    * use something that every other type can be cast to.    */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeInference
name|VARCHAR_1024
init|=
parameter_list|(
name|callBinding
parameter_list|,
name|returnType
parameter_list|,
name|operandTypes
parameter_list|)
lambda|->
block|{
name|RelDataTypeFactory
name|typeFactory
init|=
name|callBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|operandTypes
index|[
name|i
index|]
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Operand type-inference strategy where an unknown operand type is assumed    * to be nullable ANY.    */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeInference
name|ANY_NULLABLE
init|=
parameter_list|(
name|callBinding
parameter_list|,
name|returnType
parameter_list|,
name|operandTypes
parameter_list|)
lambda|->
block|{
name|RelDataTypeFactory
name|typeFactory
init|=
name|callBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|operandTypes
index|[
name|i
index|]
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** Returns an {@link SqlOperandTypeInference} that returns a given list of    * types. */
specifier|public
specifier|static
name|SqlOperandTypeInference
name|explicit
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
parameter_list|)
block|{
return|return
operator|new
name|ExplicitOperandTypeInference
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|types
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

