begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlBasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlBinaryOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSpecialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSyntax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|InferTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandHandlers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandCountRanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeTransforms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Optionality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|BIG_QUERY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|CALCITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|HIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|MSSQL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|MYSQL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|ORACLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|POSTGRESQL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
operator|.
name|SPARK
import|;
end_import

begin_comment
comment|/**  * Defines functions and operators that are not part of standard SQL but  * belong to one or more other dialects of SQL.  *  *<p>They are read by {@link SqlLibraryOperatorTableFactory} into instances  * of {@link SqlOperatorTable} that contain functions and operators for  * particular libraries.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SqlLibraryOperators
block|{
specifier|private
name|SqlLibraryOperators
parameter_list|()
block|{
block|}
comment|/** The "AGGREGATE(m)" aggregate function;    * aggregates a measure column according to the measure's rollup strategy.    * This is a Calcite-specific extension.    *    *<p>This operator is for SQL (and AST); for internal use (RexNode and    * Aggregate) use {@code AGG_M2M}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|CALCITE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|AGGREGATE
init|=
name|SqlBasicAggFunction
operator|.
name|create
argument_list|(
literal|"AGGREGATE"
argument_list|,
name|SqlKind
operator|.
name|AGGREGATE_FN
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
name|OperandTypes
operator|.
name|MEASURE
argument_list|)
decl_stmt|;
comment|/** The "CONVERT_TIMEZONE(tz1, tz2, datetime)" function;    * converts the timezone of {@code datetime} from {@code tz1} to {@code tz2}.    * This function is only on Redshift, but we list it in PostgreSQL    * because Redshift does not have its own library. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|CONVERT_TIMEZONE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"CONVERT_TIMEZONE"
argument_list|,
name|ReturnTypes
operator|.
name|DATE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER_CHARACTER_DATETIME
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** THE "DATE_ADD(date, interval)" function    * (BigQuery) adds the interval to the date. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATE_ADD
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|DATE_ADD
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|DATE_INTERVAL
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** THE "DATE_DIFF(date, date2, timeUnit)" function    * (BigQuery) returns the number of timeUnit in (date - date2). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATE_DIFF
init|=
operator|new
name|SqlTimestampDiffFunction
argument_list|(
literal|"DATE_DIFF"
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|DATE
argument_list|,
name|SqlTypeFamily
operator|.
name|DATE
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
comment|/** The "DATEADD(timeUnit, numeric, datetime)" function    * (Microsoft SQL Server, Redshift, Snowflake). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MSSQL
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATEADD
init|=
operator|new
name|SqlTimestampAddFunction
argument_list|(
literal|"DATEADD"
argument_list|)
decl_stmt|;
comment|/** The "DATEDIFF(timeUnit, datetime, datetime2)" function    * (Microsoft SQL Server, Redshift, Snowflake).    *    *<p>MySQL has "DATEDIFF(date, date2)" and "TIMEDIFF(time, time2)" functions    * but Calcite does not implement these because they have no "timeUnit"    * argument. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MSSQL
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATEDIFF
init|=
operator|new
name|SqlTimestampDiffFunction
argument_list|(
literal|"DATEDIFF"
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|DATE
argument_list|,
name|SqlTypeFamily
operator|.
name|DATE
argument_list|)
argument_list|)
decl_stmt|;
comment|/** The "DATE_PART(timeUnit, datetime)" function    * (Databricks, Postgres, Redshift, Snowflake). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATE_PART
init|=
operator|new
name|SqlExtractFunction
argument_list|(
literal|"DATE_PART"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|getSyntax
argument_list|()
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|this
argument_list|,
name|call
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** The "DATE_SUB(date, interval)" function (BigQuery);    * subtracts interval from the date, independent of any time zone. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATE_SUB
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|DATE_SUB
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|DATE_INTERVAL
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "DATEPART(timeUnit, datetime)" function    * (Microsoft SQL Server). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MSSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATEPART
init|=
operator|new
name|SqlExtractFunction
argument_list|(
literal|"DATEPART"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
name|getSyntax
argument_list|()
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
name|this
argument_list|,
name|call
argument_list|,
name|leftPrec
argument_list|,
name|rightPrec
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** Return type inference for {@code DECODE}. */
specifier|private
specifier|static
specifier|final
name|SqlReturnTypeInference
name|DECODE_RETURN_TYPE
init|=
name|opBinding
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|n
init|=
name|opBinding
operator|.
name|getOperandCount
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|n
operator|-
literal|1
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|opBinding
operator|.
name|getOperandType
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|leastRestrictive
argument_list|(
name|list
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|opBinding
operator|.
name|getOperandCount
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|type
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
decl_stmt|;
comment|/** The "DECODE(v, v1, result1, [v2, result2, ...], resultN)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DECODE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|DECODE
argument_list|,
name|DECODE_RETURN_TYPE
argument_list|,
name|OperandTypes
operator|.
name|VARIADIC
argument_list|)
decl_stmt|;
comment|/** The "IF(condition, thenValue, elseValue)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|HIVE
block|,
name|SPARK
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|IF
init|=
operator|new
name|SqlFunction
argument_list|(
literal|"IF"
argument_list|,
name|SqlKind
operator|.
name|IF
argument_list|,
name|SqlLibraryOperators
operator|::
name|inferIfReturnType
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|BOOLEAN
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
operator|.
name|and
argument_list|(
comment|// Arguments 1 and 2 must have same type
name|OperandTypes
operator|.
name|same
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|validRexOperands
parameter_list|(
name|int
name|count
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
comment|// IF is translated to RexNode by expanding to CASE.
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"not a rex operator"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Infers the return type of {@code IF(b, x, y)},    * namely the least restrictive of the types of x and y.    * Similar to {@link ReturnTypes#LEAST_RESTRICTIVE}. */
specifier|private
specifier|static
annotation|@
name|Nullable
name|RelDataType
name|inferIfReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
return|return
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|leastRestrictive
argument_list|(
name|opBinding
operator|.
name|collectOperandTypes
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
comment|/** The "NVL(value, value)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlBasicFunction
name|NVL
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|NVL
argument_list|,
name|ReturnTypes
operator|.
name|LEAST_RESTRICTIVE
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE_ALL
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|SAME_SAME
argument_list|)
decl_stmt|;
comment|/** The "IFNULL(value, value)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|IFNULL
init|=
name|NVL
operator|.
name|withName
argument_list|(
literal|"IFNULL"
argument_list|)
decl_stmt|;
comment|/** The "LENGTH(string)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|LENGTH
init|=
name|SqlStdOperatorTable
operator|.
name|CHAR_LENGTH
operator|.
name|withName
argument_list|(
literal|"LENGTH"
argument_list|)
decl_stmt|;
comment|/** The "LPAD(original_value, return_length[, pattern])" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|LPAD
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"LPAD"
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_VARYING
argument_list|,
name|OperandTypes
operator|.
name|STRING_NUMERIC_OPTIONAL_STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "RPAD(original_value, return_length[, pattern])" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|RPAD
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"RPAD"
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_VARYING
argument_list|,
name|OperandTypes
operator|.
name|STRING_NUMERIC_OPTIONAL_STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "LTRIM(string)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|LTRIM
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|LTRIM
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_VARYING
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "RTRIM(string)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|RTRIM
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|RTRIM
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_VARYING
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** Generic "SUBSTR(string, position [, substringLength ])" function. */
specifier|private
specifier|static
specifier|final
name|SqlBasicFunction
name|SUBSTR
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"SUBSTR"
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_VARYING
argument_list|,
name|OperandTypes
operator|.
name|STRING_INTEGER_OPTIONAL_INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "ENDS_WITH(value1, value2)" function (BigQuery). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|ENDS_WITH
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"ENDS_WITH"
argument_list|,
name|ReturnTypes
operator|.
name|BOOLEAN_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING_SAME_SAME
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "STARTS_WITH(value1, value2)" function (BigQuery). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|STARTS_WITH
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"STARTS_WITH"
argument_list|,
name|ReturnTypes
operator|.
name|BOOLEAN_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING_SAME_SAME
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** BigQuery's "SUBSTR(string, position [, substringLength ])" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SUBSTR_BIG_QUERY
init|=
name|SUBSTR
operator|.
name|withKind
argument_list|(
name|SqlKind
operator|.
name|SUBSTR_BIG_QUERY
argument_list|)
decl_stmt|;
comment|/** MySQL's "SUBSTR(string, position [, substringLength ])" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SUBSTR_MYSQL
init|=
name|SUBSTR
operator|.
name|withKind
argument_list|(
name|SqlKind
operator|.
name|SUBSTR_MYSQL
argument_list|)
decl_stmt|;
comment|/** Oracle's "SUBSTR(string, position [, substringLength ])" function.    *    *<p>It has different semantics to standard SQL's    * {@link SqlStdOperatorTable#SUBSTRING} function:    *    *<ul>    *<li>If {@code substringLength}&le; 0, result is the empty string    *   (Oracle would return null, because it treats the empty string as null,    *   but Calcite does not have these semantics);    *<li>If {@code position} = 0, treat {@code position} as 1;    *<li>If {@code position}&lt; 0, treat {@code position} as    *       "length(string) + position + 1".    *</ul>    */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SUBSTR_ORACLE
init|=
name|SUBSTR
operator|.
name|withKind
argument_list|(
name|SqlKind
operator|.
name|SUBSTR_ORACLE
argument_list|)
decl_stmt|;
comment|/** PostgreSQL's "SUBSTR(string, position [, substringLength ])" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SUBSTR_POSTGRESQL
init|=
name|SUBSTR
operator|.
name|withKind
argument_list|(
name|SqlKind
operator|.
name|SUBSTR_POSTGRESQL
argument_list|)
decl_stmt|;
comment|/** The "GREATEST(value, value)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|GREATEST
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|GREATEST
argument_list|,
name|ReturnTypes
operator|.
name|LEAST_RESTRICTIVE
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|SAME_VARIADIC
argument_list|)
decl_stmt|;
comment|/** The "LEAST(value, value)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|LEAST
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|LEAST
argument_list|,
name|ReturnTypes
operator|.
name|LEAST_RESTRICTIVE
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|SAME_VARIADIC
argument_list|)
decl_stmt|;
comment|/**    * The<code>TRANSLATE(<i>string_expr</i>,<i>search_chars</i>,    *<i>replacement_chars</i>)</code> function returns<i>string_expr</i> with    * all occurrences of each character in<i>search_chars</i> replaced by its    * corresponding character in<i>replacement_chars</i>.    *    *<p>It is not defined in the SQL standard, but occurs in Oracle and    * PostgreSQL.    */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TRANSLATE3
init|=
operator|new
name|SqlTranslate3Function
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_TYPE
init|=
operator|new
name|SqlJsonTypeFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_DEPTH
init|=
operator|new
name|SqlJsonDepthFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_LENGTH
init|=
operator|new
name|SqlJsonLengthFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_KEYS
init|=
operator|new
name|SqlJsonKeysFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_PRETTY
init|=
operator|new
name|SqlJsonPrettyFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_REMOVE
init|=
operator|new
name|SqlJsonRemoveFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_STORAGE_SIZE
init|=
operator|new
name|SqlJsonStorageSizeFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_INSERT
init|=
operator|new
name|SqlJsonModifyFunction
argument_list|(
literal|"JSON_INSERT"
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_REPLACE
init|=
operator|new
name|SqlJsonModifyFunction
argument_list|(
literal|"JSON_REPLACE"
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|JSON_SET
init|=
operator|new
name|SqlJsonModifyFunction
argument_list|(
literal|"JSON_SET"
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|REGEXP_REPLACE
init|=
operator|new
name|SqlRegexpReplaceFunction
argument_list|()
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|COMPRESS
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"COMPRESS"
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|EXTRACT_VALUE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"EXTRACTVALUE"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|FORCE_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|XML_TRANSFORM
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"XMLTRANSFORM"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|FORCE_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|EXTRACT_XML
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"EXTRACT"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|FORCE_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING_OPTIONAL_STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|EXISTS_NODE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"EXISTSNODE"
argument_list|,
name|ReturnTypes
operator|.
name|INTEGER_NULLABLE
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|FORCE_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING_OPTIONAL_STRING
argument_list|)
decl_stmt|;
comment|/** The "BOOL_AND(condition)" aggregate function, PostgreSQL and Redshift's    * equivalent to {@link SqlStdOperatorTable#EVERY}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|BOOL_AND
init|=
operator|new
name|SqlMinMaxAggFunction
argument_list|(
literal|"BOOL_AND"
argument_list|,
name|SqlKind
operator|.
name|MIN
argument_list|,
name|OperandTypes
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
comment|/** The "BOOL_OR(condition)" aggregate function, PostgreSQL and Redshift's    * equivalent to {@link SqlStdOperatorTable#SOME}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|BOOL_OR
init|=
operator|new
name|SqlMinMaxAggFunction
argument_list|(
literal|"BOOL_OR"
argument_list|,
name|SqlKind
operator|.
name|MAX
argument_list|,
name|OperandTypes
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
comment|/** The "LOGICAL_AND(condition)" aggregate function, BigQuery's    * equivalent to {@link SqlStdOperatorTable#EVERY}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|LOGICAL_AND
init|=
operator|new
name|SqlMinMaxAggFunction
argument_list|(
literal|"LOGICAL_AND"
argument_list|,
name|SqlKind
operator|.
name|MIN
argument_list|,
name|OperandTypes
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
comment|/** The "LOGICAL_OR(condition)" aggregate function, BigQuery's    * equivalent to {@link SqlStdOperatorTable#SOME}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|LOGICAL_OR
init|=
operator|new
name|SqlMinMaxAggFunction
argument_list|(
literal|"LOGICAL_OR"
argument_list|,
name|SqlKind
operator|.
name|MAX
argument_list|,
name|OperandTypes
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
comment|/** The "COUNTIF(condition) [OVER (...)]" function, in BigQuery,    * returns the count of TRUE values for expression.    *    *<p>{@code COUNTIF(b)} is equivalent to    * {@code COUNT(*) FILTER (WHERE b)}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|COUNTIF
init|=
name|SqlBasicAggFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|COUNTIF
argument_list|,
name|ReturnTypes
operator|.
name|BIGINT
argument_list|,
name|OperandTypes
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|withDistinct
argument_list|(
name|Optionality
operator|.
name|FORBIDDEN
argument_list|)
decl_stmt|;
comment|/** The "ARRAY_AGG(value [ ORDER BY ...])" aggregate function,    * in BigQuery and PostgreSQL, gathers values into arrays. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|,
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|ARRAY_AGG
init|=
name|SqlBasicAggFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|ARRAY_AGG
argument_list|,
name|ReturnTypes
operator|.
name|andThen
argument_list|(
name|ReturnTypes
operator|::
name|stripOrderBy
argument_list|,
name|ReturnTypes
operator|.
name|TO_ARRAY
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|ANY
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
operator|.
name|withSyntax
argument_list|(
name|SqlSyntax
operator|.
name|ORDERED_FUNCTION
argument_list|)
operator|.
name|withAllowsNullTreatment
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/** The "ARRAY_CONCAT_AGG(value [ ORDER BY ...])" aggregate function,    * in BigQuery and PostgreSQL, concatenates array values into arrays. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|,
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|ARRAY_CONCAT_AGG
init|=
name|SqlBasicAggFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|ARRAY_CONCAT_AGG
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
name|OperandTypes
operator|.
name|ARRAY
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
operator|.
name|withSyntax
argument_list|(
name|SqlSyntax
operator|.
name|ORDERED_FUNCTION
argument_list|)
decl_stmt|;
comment|/** The "STRING_AGG(value [, separator ] [ ORDER BY ...])" aggregate function,    * BigQuery and PostgreSQL's equivalent of    * {@link SqlStdOperatorTable#LISTAGG}.    *    *<p>{@code STRING_AGG(v, sep ORDER BY x, y)} is implemented by    * rewriting to {@code LISTAGG(v, sep) WITHIN GROUP (ORDER BY x, y)}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|,
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|STRING_AGG
init|=
name|SqlBasicAggFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|STRING_AGG
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|)
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
operator|.
name|withSyntax
argument_list|(
name|SqlSyntax
operator|.
name|ORDERED_FUNCTION
argument_list|)
decl_stmt|;
comment|/** The "GROUP_CONCAT([DISTINCT] expr [, ...] [ORDER BY ...] [SEPARATOR sep])"    * aggregate function, MySQL's equivalent of    * {@link SqlStdOperatorTable#LISTAGG}.    *    *<p>{@code GROUP_CONCAT(v ORDER BY x, y SEPARATOR s)} is implemented by    * rewriting to {@code LISTAGG(v, s) WITHIN GROUP (ORDER BY x, y)}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|GROUP_CONCAT
init|=
name|SqlBasicAggFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|GROUP_CONCAT
argument_list|,
name|ReturnTypes
operator|.
name|andThen
argument_list|(
name|ReturnTypes
operator|::
name|stripOrderBy
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|)
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|SYSTEM
argument_list|)
operator|.
name|withAllowsNullTreatment
argument_list|(
literal|false
argument_list|)
operator|.
name|withAllowsSeparator
argument_list|(
literal|true
argument_list|)
operator|.
name|withSyntax
argument_list|(
name|SqlSyntax
operator|.
name|ORDERED_FUNCTION
argument_list|)
decl_stmt|;
comment|/** The "MAX_BY(value, comp)" aggregate function, Spark's    * equivalent to {@link SqlStdOperatorTable#ARG_MAX}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|SPARK
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|MAX_BY
init|=
name|SqlStdOperatorTable
operator|.
name|ARG_MAX
operator|.
name|withName
argument_list|(
literal|"MAX_BY"
argument_list|)
decl_stmt|;
comment|/** The "MIN_BY(condition)" aggregate function, Spark's    * equivalent to {@link SqlStdOperatorTable#ARG_MIN}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|SPARK
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlAggFunction
name|MIN_BY
init|=
name|SqlStdOperatorTable
operator|.
name|ARG_MIN
operator|.
name|withName
argument_list|(
literal|"MIN_BY"
argument_list|)
decl_stmt|;
comment|/** The "DATE" function. It has the following overloads:    *    *<ul>    *<li>{@code DATE(string)} is syntactic sugar for    *       {@code CAST(string AS DATE)}    *<li>{@code DATE(year, month, day)}    *<li>{@code DATE(timestampLtz [, timeZone])}    *<li>{@code DATE(timestamp)}    *</ul>    */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"DATE"
argument_list|,
name|ReturnTypes
operator|.
name|DATE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|or
argument_list|(
comment|// DATE(string)
name|OperandTypes
operator|.
name|STRING
argument_list|,
comment|// DATE(year, month, day)
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
argument_list|,
comment|// DATE(timestamp)
name|OperandTypes
operator|.
name|TIMESTAMP_NTZ
argument_list|,
comment|// DATE(timestampLtz)
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|,
comment|// DATE(timestampLtz, timeZone)
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"DATE(TIMESTAMP WITH LOCAL TIME ZONE, VARCHAR)"
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "DATETIME" function returns a Calcite    * {@code TIMESTAMP} (which BigQuery calls a {@code DATETIME}).    * It has the following overloads:    *    *<ul>    *<li>{@code DATETIME(year, month, day, hour, minute, second)}    *<li>{@code DATETIME(date[, time])}    *<li>{@code DATETIME(timestampLtz[, timeZone])}    *</ul>    */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATETIME
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"DATETIME"
argument_list|,
name|ReturnTypes
operator|.
name|TIMESTAMP_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|or
argument_list|(
comment|// DATETIME(year, month, day, hour, minute, second)
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
argument_list|,
comment|// DATETIME(date)
name|OperandTypes
operator|.
name|DATE
argument_list|,
comment|// DATETIME(date, time)
name|OperandTypes
operator|.
name|DATE_TIME
argument_list|,
comment|// DATETIME(timestampLtz)
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|,
comment|// DATETIME(timestampLtz, timeZone)
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"DATETIME(TIMESTAMP WITH LOCAL TIME ZONE, VARCHAR)"
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIME" function. It has the following overloads:    *    *<ul>    *<li>{@code TIME(hour, minute, second)}    *<li>{@code TIME(timestampLtz [, timeZone])}    *<li>{@code TIME(timestamp)}    *</ul>    */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIME
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TIME"
argument_list|,
name|ReturnTypes
operator|.
name|TIME_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|or
argument_list|(
comment|// TIME(hour, minute, second)
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
argument_list|,
comment|// TIME(timestamp)
name|OperandTypes
operator|.
name|TIMESTAMP_NTZ
argument_list|,
comment|// TIME(timestampLtz)
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|,
comment|// TIME(timestampLtz, timeZone)
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"TIME(TIMESTAMP WITH LOCAL TIME ZONE, VARCHAR)"
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP" function returns a Calcite    * {@code TIMESTAMP WITH LOCAL TIME ZONE}    * (which BigQuery calls a {@code TIMESTAMP}). It has the following overloads:    *    *<ul>    *<li>{@code TIMESTAMP(string[, timeZone])}    *<li>{@code TIMESTAMP(date[, timeZone])}    *<li>{@code TIMESTAMP(timestamp[, timeZone])}    *</ul>    */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIMESTAMP
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TIMESTAMP"
argument_list|,
name|ReturnTypes
operator|.
name|TIMESTAMP_LTZ
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|or
argument_list|(
comment|// TIMESTAMP(string)
name|OperandTypes
operator|.
name|CHARACTER
argument_list|,
comment|// TIMESTAMP(string, timeZone)
name|OperandTypes
operator|.
name|CHARACTER_CHARACTER
argument_list|,
comment|// TIMESTAMP(date)
name|OperandTypes
operator|.
name|DATE
argument_list|,
comment|// TIMESTAMP(date, timeZone)
name|OperandTypes
operator|.
name|DATE_CHARACTER
argument_list|,
comment|// TIMESTAMP(timestamp)
name|OperandTypes
operator|.
name|TIMESTAMP_NTZ
argument_list|,
comment|// TIMESTAMP(timestamp, timeZone)
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"TIMESTAMP(TIMESTAMP, VARCHAR)"
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_NTZ
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "CURRENT_DATETIME([timezone])" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|CURRENT_DATETIME
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"CURRENT_DATETIME"
argument_list|,
name|ReturnTypes
operator|.
name|TIMESTAMP
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|NILADIC
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|STRING
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "DATE_FROM_UNIX_DATE(integer)" function; returns a DATE value    * a given number of seconds after 1970-01-01. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATE_FROM_UNIX_DATE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"DATE_FROM_UNIX_DATE"
argument_list|,
name|ReturnTypes
operator|.
name|DATE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "UNIX_DATE(date)" function; returns the number of days since    * 1970-01-01. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|UNIX_DATE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"UNIX_DATE"
argument_list|,
name|ReturnTypes
operator|.
name|INTEGER_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|DATE
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "MONTHNAME(datetime)" function; returns the name of the month,    * in the current locale, of a TIMESTAMP or DATE argument. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|MONTHNAME
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"MONTHNAME"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000
argument_list|,
name|OperandTypes
operator|.
name|DATETIME
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "DAYNAME(datetime)" function; returns the name of the day of the week,    * in the current locale, of a TIMESTAMP or DATE argument. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DAYNAME
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"DAYNAME"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000
argument_list|,
name|OperandTypes
operator|.
name|DATETIME
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|LEFT
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"LEFT"
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_VARYING
argument_list|,
name|OperandTypes
operator|.
name|CBSTRING_INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|REPEAT
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"REPEAT"
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_VARYING
argument_list|,
name|OperandTypes
operator|.
name|STRING_INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|RIGHT
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"RIGHT"
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_VARYING
argument_list|,
name|OperandTypes
operator|.
name|CBSTRING_INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SPACE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"SPACE"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|STRCMP
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"STRCMP"
argument_list|,
name|ReturnTypes
operator|.
name|INTEGER_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|,
name|POSTGRESQL
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SOUNDEX
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"SOUNDEX"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_4_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DIFFERENCE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"DIFFERENCE"
argument_list|,
name|ReturnTypes
operator|.
name|INTEGER_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The case-insensitive variant of the LIKE operator. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlSpecialOperator
name|ILIKE
init|=
operator|new
name|SqlLikeOperator
argument_list|(
literal|"ILIKE"
argument_list|,
name|SqlKind
operator|.
name|LIKE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/** The case-insensitive variant of the NOT LIKE operator. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlSpecialOperator
name|NOT_ILIKE
init|=
operator|new
name|SqlLikeOperator
argument_list|(
literal|"NOT ILIKE"
argument_list|,
name|SqlKind
operator|.
name|LIKE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/** The regex variant of the LIKE operator. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|SPARK
block|,
name|HIVE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlSpecialOperator
name|RLIKE
init|=
operator|new
name|SqlLikeOperator
argument_list|(
literal|"RLIKE"
argument_list|,
name|SqlKind
operator|.
name|RLIKE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/** The regex variant of the NOT LIKE operator. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|SPARK
block|,
name|HIVE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlSpecialOperator
name|NOT_RLIKE
init|=
operator|new
name|SqlLikeOperator
argument_list|(
literal|"NOT RLIKE"
argument_list|,
name|SqlKind
operator|.
name|RLIKE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/** The "CONCAT(arg, ...)" function that concatenates strings.    * For example, "CONCAT('a', 'bc', 'd')" returns "abcd". */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|,
name|POSTGRESQL
block|,
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|CONCAT_FUNCTION
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"CONCAT"
argument_list|,
name|ReturnTypes
operator|.
name|MULTIVALENT_STRING_SUM_PRECISION_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|repeat
argument_list|(
name|SqlOperandCountRanges
operator|.
name|from
argument_list|(
literal|2
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
operator|.
name|withOperandTypeInference
argument_list|(
name|InferTypes
operator|.
name|RETURN_TYPE
argument_list|)
decl_stmt|;
comment|/** The "CONCAT(arg0, arg1)" function that concatenates strings.    * For example, "CONCAT('a', 'bc')" returns "abc".    *    *<p>It is assigned {@link SqlKind#CONCAT2} to make it not equal to    * {@link #CONCAT_FUNCTION}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|CONCAT2
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"CONCAT"
argument_list|,
name|ReturnTypes
operator|.
name|MULTIVALENT_STRING_SUM_PRECISION_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING_SAME_SAME
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
operator|.
name|withOperandTypeInference
argument_list|(
name|InferTypes
operator|.
name|RETURN_TYPE
argument_list|)
operator|.
name|withKind
argument_list|(
name|SqlKind
operator|.
name|CONCAT2
argument_list|)
decl_stmt|;
comment|/** The "ARRAY_LENGTH(array)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|ARRAY_LENGTH
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"ARRAY_LENGTH"
argument_list|,
name|ReturnTypes
operator|.
name|INTEGER_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
comment|/** The "ARRAY_REVERSE(array)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|ARRAY_REVERSE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|ARRAY_REVERSE
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
comment|/** The "ARRAY_CONCAT(array [, array]*)" function. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|ARRAY_CONCAT
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|ARRAY_CONCAT
argument_list|,
name|ReturnTypes
operator|.
name|LEAST_RESTRICTIVE
argument_list|,
name|OperandTypes
operator|.
name|AT_LEAST_ONE_SAME_VARIADIC
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|REVERSE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|REVERSE
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE_VARYING
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|FROM_BASE64
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"FROM_BASE64"
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TO_BASE64
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TO_BASE64"
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|BINARY
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "TO_DATE(string1, string2)" function; casts string1    * to a DATE using the format specified in string2. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TO_DATE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TO_DATE"
argument_list|,
name|ReturnTypes
operator|.
name|DATE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TO_TIMESTAMP(string1, string2)" function; casts string1    * to a TIMESTAMP using the format specified in string2. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TO_TIMESTAMP
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TO_TIMESTAMP"
argument_list|,
name|ReturnTypes
operator|.
name|DATE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|STRING_STRING
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "FORMAT_TIME(string, time)" function (BigQuery);    * Formats a time object according to the specified string. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|FORMAT_TIME
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"FORMAT_TIME"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER_TIME
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "FORMAT_DATE(string, date)" function (BigQuery);    * Formats a date object according to the specified string. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|FORMAT_DATE
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"FORMAT_DATE"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER_DATE
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "FORMAT_TIMESTAMP(string, timestamp)" function (BigQuery);    * Formats a timestamp object according to the specified string.    *    *<p>In BigQuery, the "TIMESTAMP" datatype maps to Calcite's    * TIMESTAMP_WITH_LOCAL_TIME_ZONE */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|FORMAT_TIMESTAMP
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"FORMAT_TIMESTAMP"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"FORMAT_TIMESTAMP(<CHARACTER>, "
operator|+
literal|"<TIMESTAMP WITH LOCAL TIME ZONE>)"
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|)
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"FORMAT_TIMESTAMP(<CHARACTER>, "
operator|+
literal|"<TIMESTAMP WITH LOCAL TIME ZONE>,<CHARACTER>)"
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_LTZ
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "FORMAT_DATETIME(string, timestamp)" function (BigQuery);    * Formats a timestamp object according to the specified string. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|FORMAT_DATETIME
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"FORMAT_DATETIME"
argument_list|,
name|ReturnTypes
operator|.
name|VARCHAR_2000_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"FORMAT_DATETIME(<CHARACTER>,<TIMESTAMP>)"
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_NTZ
argument_list|)
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"FORMAT_DATETIME(<CHARACTER>, "
operator|+
literal|"<TIMESTAMP>,<CHARACTER>)"
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_NTZ
argument_list|,
name|OperandTypes
operator|.
name|CHARACTER
argument_list|)
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP_ADD(timestamp, interval)" function (BigQuery), the    * two-argument variant of the built-in    * {@link SqlStdOperatorTable#TIMESTAMP_ADD TIMESTAMPADD} function, which has    * three arguments.    *    *<p>In BigQuery, the syntax is "TIMESTAMP_ADD(timestamp, INTERVAL    * int64_expression date_part)" but in Calcite the second argument can be any    * interval expression, not just an interval literal. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlBasicFunction
name|TIMESTAMP_ADD2
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|TIMESTAMP_ADD
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_INTERVAL
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP_DIFF(timestamp, timestamp, timeUnit)" function (BigQuery);    * returns the number of timeUnit between the two timestamp expressions.    *    *<p>{@code TIMESTAMP_DIFF(t1, t2, unit)} is equivalent to    * {@code TIMESTAMPDIFF(unit, t2, t1)} and {@code (t1 - t2) unit}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIMESTAMP_DIFF3
init|=
operator|new
name|SqlTimestampDiffFunction
argument_list|(
literal|"TIMESTAMP_DIFF"
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|TIMESTAMP
argument_list|,
name|SqlTypeFamily
operator|.
name|TIMESTAMP
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
comment|/** The "TIME_ADD(time, interval)" function (BigQuery);    * adds interval expression to the specified time expression. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIME_ADD
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|TIME_ADD
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|TIME_INTERVAL
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIME_DIFF(time, time, timeUnit)" function (BigQuery);    * returns the number of timeUnit between the two time expressions. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIME_DIFF
init|=
operator|new
name|SqlTimestampDiffFunction
argument_list|(
literal|"TIME_DIFF"
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|TIME
argument_list|,
name|SqlTypeFamily
operator|.
name|TIME
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
comment|/** The "DATE_TRUNC(date, timeUnit)" function (BigQuery);    * truncates a DATE value to the beginning of a timeUnit. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATE_TRUNC
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"DATE_TRUNC"
argument_list|,
name|ReturnTypes
operator|.
name|DATE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"'DATE_TRUNC(<DATE>,<DATETIME_INTERVAL>)'"
argument_list|,
name|OperandTypes
operator|.
name|DATE
argument_list|,
name|OperandTypes
operator|.
name|dateInterval
argument_list|()
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
operator|.
name|withOperandHandler
argument_list|(
name|OperandHandlers
operator|.
name|OPERAND_1_MIGHT_BE_TIME_FRAME
argument_list|)
decl_stmt|;
comment|/** The "TIME_SUB(time, interval)" function (BigQuery);    * subtracts an interval from a time, independent of any time zone.    *    *<p>In BigQuery, the syntax is "TIME_SUB(time, INTERVAL int64 date_part)"    * but in Calcite the second argument can be any interval expression, not just    * an interval literal. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIME_SUB
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|TIME_SUB
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|TIME_INTERVAL
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIME_TRUNC(time, timeUnit)" function (BigQuery);    * truncates a TIME value to the beginning of a timeUnit. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIME_TRUNC
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TIME_TRUNC"
argument_list|,
name|ReturnTypes
operator|.
name|TIME_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"'TIME_TRUNC(<TIME>,<DATETIME_INTERVAL>)'"
argument_list|,
name|OperandTypes
operator|.
name|TIME
argument_list|,
name|OperandTypes
operator|.
name|timeInterval
argument_list|()
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP_SUB(timestamp, interval)" function (BigQuery);    * subtracts an interval from a timestamp, independent of any time zone.    *    *<p>In BigQuery, the syntax is "TIMESTAMP_SUB(timestamp,    * INTERVAL int64 date_part)" but in Calcite the second argument can be any    * interval expression, not just an interval literal. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlBasicFunction
name|TIMESTAMP_SUB
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
name|SqlKind
operator|.
name|TIMESTAMP_SUB
argument_list|,
name|ReturnTypes
operator|.
name|ARG0_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP_INTERVAL
argument_list|)
operator|.
name|withFunctionType
argument_list|(
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** BigQuery's {@code DATETIME_SUB(timestamp, interval)} function    * is a synonym for TIMESTAMP_SUB because in Calcite, DATETIME    * is an alias for TIMESTAMP. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATETIME_SUB
init|=
name|TIMESTAMP_SUB
operator|.
name|withName
argument_list|(
literal|"DATETIME_SUB"
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP_TRUNC(timestamp, timeUnit[, timeZone])" function (BigQuery);    * truncates a TIMESTAMP value to the beginning of a timeUnit. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIMESTAMP_TRUNC
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TIMESTAMP_TRUNC"
argument_list|,
name|ReturnTypes
operator|.
name|TIMESTAMP_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|sequence
argument_list|(
literal|"'TIMESTAMP_TRUNC(<TIMESTAMP>,<DATETIME_INTERVAL>)'"
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP
argument_list|,
name|OperandTypes
operator|.
name|timestampInterval
argument_list|()
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP_SECONDS(bigint)" function; returns a TIMESTAMP value    * a given number of seconds after 1970-01-01 00:00:00. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIMESTAMP_SECONDS
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TIMESTAMP_SECONDS"
argument_list|,
name|ReturnTypes
operator|.
name|TIMESTAMP_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP_MILLIS(bigint)" function; returns a TIMESTAMP value    * a given number of milliseconds after 1970-01-01 00:00:00. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIMESTAMP_MILLIS
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TIMESTAMP_MILLIS"
argument_list|,
name|ReturnTypes
operator|.
name|TIMESTAMP_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "TIMESTAMP_MICROS(bigint)" function; returns a TIMESTAMP value    * a given number of micro-seconds after 1970-01-01 00:00:00. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TIMESTAMP_MICROS
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TIMESTAMP_MICROS"
argument_list|,
name|ReturnTypes
operator|.
name|TIMESTAMP_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "UNIX_SECONDS(bigint)" function; returns the number of seconds    * since 1970-01-01 00:00:00. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|UNIX_SECONDS
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"UNIX_SECONDS"
argument_list|,
name|ReturnTypes
operator|.
name|BIGINT_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "UNIX_MILLIS(bigint)" function; returns the number of milliseconds    * since 1970-01-01 00:00:00. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|UNIX_MILLIS
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"UNIX_MILLIS"
argument_list|,
name|ReturnTypes
operator|.
name|BIGINT_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "UNIX_MICROS(bigint)" function; returns the number of microseconds    * since 1970-01-01 00:00:00. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|UNIX_MICROS
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"UNIX_MICROS"
argument_list|,
name|ReturnTypes
operator|.
name|BIGINT_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|TIMESTAMP
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
decl_stmt|;
comment|/** The "DATETIME_ADD(timestamp, interval)" function (BigQuery).    * As {@code TIMESTAMP_ADD}, returns a Calcite {@code TIMESTAMP}    * (which BigQuery calls a {@code DATETIME}). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATETIME_ADD
init|=
name|TIMESTAMP_ADD2
operator|.
name|withName
argument_list|(
literal|"DATETIME_ADD"
argument_list|)
decl_stmt|;
comment|/** The "DATETIME_DIFF(timestamp, timestamp2, timeUnit)" function (BigQuery). */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|DATETIME_DIFF
init|=
operator|new
name|SqlTimestampDiffFunction
argument_list|(
literal|"DATETIME_DIFF"
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|TIMESTAMP
argument_list|,
name|SqlTypeFamily
operator|.
name|TIMESTAMP
argument_list|,
name|SqlTypeFamily
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
comment|/** The "CHAR(n)" function; returns the character whose ASCII code is    * {@code n} % 256, or null if {@code n}&lt; 0. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|,
name|SPARK
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|CHAR
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"CHAR"
argument_list|,
name|ReturnTypes
operator|.
name|CHAR_FORCE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
comment|/** The "CHR(n)" function; returns the character whose UTF-8 code is    * {@code n}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|ORACLE
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|CHR
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"CHR"
argument_list|,
name|ReturnTypes
operator|.
name|CHAR
argument_list|,
name|OperandTypes
operator|.
name|INTEGER
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TANH
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"TANH"
argument_list|,
name|ReturnTypes
operator|.
name|DOUBLE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|NUMERIC
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|COSH
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"COSH"
argument_list|,
name|ReturnTypes
operator|.
name|DOUBLE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|NUMERIC
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|ORACLE
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SINH
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"SINH"
argument_list|,
name|ReturnTypes
operator|.
name|DOUBLE_NULLABLE
argument_list|,
name|OperandTypes
operator|.
name|NUMERIC
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|MD5
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"MD5"
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|BINARY
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|,
name|MYSQL
block|,
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|SHA1
init|=
name|SqlBasicFunction
operator|.
name|create
argument_list|(
literal|"SHA1"
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|andThen
argument_list|(
name|SqlTypeTransforms
operator|.
name|TO_NULLABLE
argument_list|)
argument_list|,
name|OperandTypes
operator|.
name|STRING
operator|.
name|or
argument_list|(
name|OperandTypes
operator|.
name|BINARY
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|POW
init|=
name|SqlStdOperatorTable
operator|.
name|POWER
operator|.
name|withName
argument_list|(
literal|"POW"
argument_list|)
decl_stmt|;
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|BIG_QUERY
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlFunction
name|TRUNC
init|=
name|SqlStdOperatorTable
operator|.
name|TRUNCATE
operator|.
name|withName
argument_list|(
literal|"TRUNC"
argument_list|)
decl_stmt|;
comment|/** Infix "::" cast operator used by PostgreSQL, for example    * {@code '100'::INTEGER}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|POSTGRESQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlOperator
name|INFIX_CAST
init|=
operator|new
name|SqlCastOperator
argument_list|()
decl_stmt|;
comment|/** NULL-safe "&lt;=&gt;" equal operator used by MySQL, for example    * {@code 1<=>NULL}. */
annotation|@
name|LibraryOperator
argument_list|(
name|libraries
operator|=
block|{
name|MYSQL
block|}
argument_list|)
specifier|public
specifier|static
specifier|final
name|SqlOperator
name|NULL_SAFE_EQUAL
init|=
operator|new
name|SqlBinaryOperator
argument_list|(
literal|"<=>"
argument_list|,
name|SqlKind
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
literal|30
argument_list|,
literal|true
argument_list|,
name|ReturnTypes
operator|.
name|BOOLEAN
argument_list|,
name|InferTypes
operator|.
name|FIRST_KNOWN
argument_list|,
name|OperandTypes
operator|.
name|COMPARABLE_UNORDERED_COMPARABLE_UNORDERED
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

