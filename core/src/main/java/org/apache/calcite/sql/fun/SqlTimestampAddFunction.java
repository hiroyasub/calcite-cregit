begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_comment
comment|/**  * The<code>TIMESTAMPADD</code> function, which adds an interval to a  * timestamp.  *  *<p>The SQL syntax is  *  *<blockquote>  *<code>TIMESTAMPADD(<i>timestamp interval</i>,<i>quantity</i>,  *<i>timestamp</i>)</code>  *</blockquote>  *  *<p>The interval time unit can one of the following literals:<ul>  *<li>MICROSECOND (and synonyms SQL_TSI_MICROSECOND, FRAC_SECOND,  *     SQL_TSI_FRAC_SECOND)  *<li>SECOND (and synonym SQL_TSI_SECOND)  *<li>MINUTE (and synonym  SQL_TSI_MINUTE)  *<li>HOUR (and synonym  SQL_TSI_HOUR)  *<li>DAY (and synonym SQL_TSI_DAY)  *<li>WEEK (and synonym  SQL_TSI_WEEK)  *<li>MONTH (and synonym SQL_TSI_MONTH)  *<li>QUARTER (and synonym SQL_TSI_QUARTER)  *<li>YEAR (and synonym  SQL_TSI_YEAR)  *</ul>  *  *<p>Returns modified timestamp.  */
end_comment

begin_class
class|class
name|SqlTimestampAddFunction
extends|extends
name|SqlFunction
block|{
specifier|private
specifier|static
specifier|final
name|SqlReturnTypeInference
name|RETURN_TYPE_INFERENCE
init|=
operator|new
name|SqlReturnTypeInference
argument_list|()
block|{
specifier|public
name|RelDataType
name|inferReturnType
parameter_list|(
name|SqlOperatorBinding
name|opBinding
parameter_list|)
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|opBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|opBinding
operator|.
name|getOperandLiteralValue
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
condition|)
block|{
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MILLISECOND
case|:
case|case
name|MICROSECOND
case|:
return|return
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
argument_list|,
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|1
argument_list|)
operator|.
name|isNullable
argument_list|()
operator|||
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|2
argument_list|)
operator|.
name|isNullable
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|opBinding
operator|.
name|getOperandType
argument_list|(
literal|2
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
comment|/** Creates a SqlTimestampAddFunction. */
name|SqlTimestampAddFunction
parameter_list|()
block|{
name|super
argument_list|(
literal|"TIMESTAMPADD"
argument_list|,
name|SqlKind
operator|.
name|TIMESTAMP_ADD
argument_list|,
name|RETURN_TYPE_INFERENCE
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|family
argument_list|(
name|SqlTypeFamily
operator|.
name|ANY
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|SqlTypeFamily
operator|.
name|DATETIME
argument_list|)
argument_list|,
name|SqlFunctionCategory
operator|.
name|TIMEDATE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SqlTimestampAddFunction.java
end_comment

end_unit

