begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * Rules that determine whether a type is assignable from another type.  */
end_comment

begin_class
specifier|public
class|class
name|SqlTypeAssignmentRules
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|SqlTypeAssignmentRules
name|INSTANCE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlTypeAssignmentRules
name|COERCE_INSTANCE
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|map
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|SqlTypeAssignmentRules
parameter_list|(
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
static|static
block|{
specifier|final
name|Builder
name|rules
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|rule
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// IntervalYearMonth is assignable from...
for|for
control|(
name|SqlTypeName
name|interval
range|:
name|SqlTypeName
operator|.
name|YEAR_INTERVAL_TYPES
control|)
block|{
name|rules
operator|.
name|add
argument_list|(
name|interval
argument_list|,
name|SqlTypeName
operator|.
name|YEAR_INTERVAL_TYPES
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlTypeName
name|interval
range|:
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
control|)
block|{
name|rules
operator|.
name|add
argument_list|(
name|interval
argument_list|,
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlTypeName
name|interval
range|:
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
control|)
block|{
specifier|final
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|dayIntervalTypes
init|=
name|SqlTypeName
operator|.
name|DAY_INTERVAL_TYPES
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|interval
argument_list|,
name|dayIntervalTypes
argument_list|)
expr_stmt|;
block|}
comment|// MULTISET is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|MULTISET
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|MULTISET
argument_list|)
argument_list|)
expr_stmt|;
comment|// TINYINT is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
argument_list|)
expr_stmt|;
comment|// SMALLINT is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// INTEGER is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// BIGINT is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// FLOAT (up to 64 bit floating point) is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// REAL (32 bit floating point) is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// DOUBLE is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// DECIMAL is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// VARBINARY is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// CHAR is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// VARCHAR is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// BOOLEAN is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
comment|// BINARY is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// DATE is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// TIME is assignable from...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// TIME WITH LOCAL TIME ZONE is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIMESTAMP is assignable from ...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIMESTAMP WITH LOCAL TIME ZONE is assignable from...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// GEOMETRY is assignable from ...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|GEOMETRY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|GEOMETRY
argument_list|)
argument_list|)
expr_stmt|;
comment|// ARRAY is assignable from ...
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|ARRAY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlTypeName
operator|.
name|ARRAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// ANY is assignable from ...
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// we use coerceRules when we're casting
specifier|final
name|Builder
name|coerceRules
init|=
operator|new
name|Builder
argument_list|(
name|rules
argument_list|)
decl_stmt|;
comment|// Make numbers symmetrical,
comment|// and make VARCHAR and CHAR castable to/from numbers
name|rule
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Exact numeric types are castable from intervals
for|for
control|(
name|SqlTypeName
name|exactType
range|:
name|SqlTypeName
operator|.
name|EXACT_TYPES
control|)
block|{
name|coerceRules
operator|.
name|add
argument_list|(
name|exactType
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|exactType
argument_list|)
operator|.
name|addAll
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_TYPES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Intervals are castable from exact numeric
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|INTERVAL_TYPES
control|)
block|{
name|coerceRules
operator|.
name|add
argument_list|(
name|typeName
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|typeName
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// VARCHAR is castable from BOOLEAN, DATE, TIMESTAMP, numeric types and
comment|// intervals
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|addAll
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_TYPES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// CHAR is castable from BOOLEAN, DATE, TIME, TIMESTAMP and numeric types
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|addAll
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_TYPES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// BOOLEAN is castable from CHAR and VARCHAR
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// DATE, TIME, and TIMESTAMP are castable from
comment|// CHAR and VARCHAR.
comment|// DATE is castable from...
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// TIME is castable from...
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// TIME WITH LOCAL TIME ZONE is castable from...
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// TIMESTAMP is castable from...
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// TIMESTAMP WITH LOCAL TIME ZONE is castable from...
name|coerceRules
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
name|coerceRules
operator|.
name|copyValues
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME_WITH_LOCAL_TIME_ZONE
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|INSTANCE
operator|=
operator|new
name|SqlTypeAssignmentRules
argument_list|(
name|rules
operator|.
name|map
argument_list|)
expr_stmt|;
name|COERCE_INSTANCE
operator|=
operator|new
name|SqlTypeAssignmentRules
argument_list|(
name|coerceRules
operator|.
name|map
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Returns an instance that does not coerce. */
specifier|public
specifier|static
specifier|synchronized
name|SqlTypeAssignmentRules
name|instance
parameter_list|()
block|{
return|return
name|instance
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/** Returns an instance. */
specifier|public
specifier|static
specifier|synchronized
name|SqlTypeAssignmentRules
name|instance
parameter_list|(
name|boolean
name|coerce
parameter_list|)
block|{
return|return
name|coerce
condition|?
name|COERCE_INSTANCE
else|:
name|INSTANCE
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|boolean
name|canCastFrom
parameter_list|(
name|SqlTypeName
name|to
parameter_list|,
name|SqlTypeName
name|from
parameter_list|,
name|boolean
name|coerce
parameter_list|)
block|{
return|return
name|instance
argument_list|(
name|coerce
argument_list|)
operator|.
name|canCastFrom
argument_list|(
name|to
argument_list|,
name|from
argument_list|)
return|;
block|}
comment|/** Returns whether it is valid to cast a value of from type {@code from} to    * type {@code to}. */
specifier|public
name|boolean
name|canCastFrom
parameter_list|(
name|SqlTypeName
name|to
parameter_list|,
name|SqlTypeName
name|from
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|from
argument_list|)
expr_stmt|;
if|if
condition|(
name|to
operator|==
name|SqlTypeName
operator|.
name|NULL
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|from
operator|==
name|SqlTypeName
operator|.
name|NULL
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|rule
init|=
name|map
operator|.
name|get
argument_list|(
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|==
literal|null
condition|)
block|{
comment|// if you hit this assert, see the constructor of this class on how
comment|// to add new rule
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No assign rules for "
operator|+
name|to
operator|+
literal|" defined"
argument_list|)
throw|;
block|}
return|return
name|rule
operator|.
name|contains
argument_list|(
name|from
argument_list|)
return|;
block|}
comment|/** Keeps state while maps are building build. */
specifier|private
specifier|static
class|class
name|Builder
block|{
specifier|final
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|map
decl_stmt|;
specifier|final
name|LoadingCache
argument_list|<
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|sets
decl_stmt|;
comment|/** Creates an empty Builder. */
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|sets
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|set
lambda|->
name|Sets
operator|.
name|immutableEnumSet
argument_list|(
name|set
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a Builder as a copy of another Builder. */
name|Builder
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|builder
operator|.
name|map
argument_list|)
expr_stmt|;
name|this
operator|.
name|sets
operator|=
name|builder
operator|.
name|sets
expr_stmt|;
comment|// share the same canonical sets
block|}
name|void
name|add
parameter_list|(
name|SqlTypeName
name|fromType
parameter_list|,
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|toTypes
parameter_list|)
block|{
try|try
block|{
name|map
operator|.
name|put
argument_list|(
name|fromType
argument_list|,
name|sets
operator|.
name|get
argument_list|(
name|toTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UncheckedExecutionException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|Util
operator|.
name|throwIfUnchecked
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"populating SqlTypeAssignmentRules"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|SqlTypeName
argument_list|>
name|copyValues
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
expr|<
name|SqlTypeName
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlTypeAssignmentRules.java
end_comment

end_unit

