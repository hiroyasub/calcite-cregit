begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Class to hold rules to determine if a type is assignable from another type.  *  *<p>REVIEW 7/05/04 Wael: We should split this up in Cast rules, symmetric and  * asymmetric assignable rules  */
end_comment

begin_class
specifier|public
class|class
name|SqlTypeAssignmentRules
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
name|SqlTypeAssignmentRules
name|instance
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|rules
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|coerceRules
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|SqlTypeAssignmentRules
parameter_list|()
block|{
name|rules
operator|=
operator|new
name|HashMap
argument_list|<
name|SqlTypeName
argument_list|,
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|rule
decl_stmt|;
comment|// IntervalYearMonth is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// IntervalDayTime is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Multiset is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|MULTISET
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|MULTISET
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Tinyint is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Smallint is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Int is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// BigInt is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Float is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Real is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Double is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Decimal is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// VarBinary is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Char is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// VarChar is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Boolean is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Binary is assignable from...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Date is assignable from ...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Time is assignable from ...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Timestamp is assignable from ...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Any is assignable from ...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// we use coerceRules when we're casting
name|coerceRules
operator|=
name|copy
argument_list|(
name|rules
argument_list|)
expr_stmt|;
comment|// Make numbers symmetrical and
comment|// make varchar/char castable to/from numbers
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|REAL
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|copy
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
comment|// Exact Numerics are castable from intervals
for|for
control|(
name|SqlTypeName
name|exactType
range|:
name|SqlTypeName
operator|.
name|EXACT_TYPES
control|)
block|{
name|rule
operator|=
name|coerceRules
operator|.
name|get
argument_list|(
name|exactType
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
argument_list|)
expr_stmt|;
block|}
comment|// intervals are castable from Exact Numeric
name|rule
operator|=
name|coerceRules
operator|.
name|get
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
comment|// intervals  castable from Exact Numeric
name|rule
operator|=
name|coerceRules
operator|.
name|get
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
comment|// varchar is castable from Boolean, Date, time, timestamp, numbers and
comment|// intervals
name|rule
operator|=
name|coerceRules
operator|.
name|get
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
argument_list|)
expr_stmt|;
comment|// char is castable from Boolean, Date, time and timestamp and numbers
name|rule
operator|=
name|coerceRules
operator|.
name|get
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
argument_list|)
expr_stmt|;
comment|// Boolean is castable from char and varchar
name|rule
operator|=
name|coerceRules
operator|.
name|get
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
comment|// Date, time, and timestamp are castable from
comment|// char and varchar
comment|// Date is castable from ...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Time is castable from ...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
name|rule
argument_list|)
expr_stmt|;
comment|// Timestamp is castable from ...
name|rule
operator|=
operator|new
name|HashSet
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|()
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|rule
operator|.
name|add
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|coerceRules
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
specifier|static
specifier|synchronized
name|SqlTypeAssignmentRules
name|instance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|SqlTypeAssignmentRules
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
specifier|public
name|boolean
name|canCastFrom
parameter_list|(
name|SqlTypeName
name|to
parameter_list|,
name|SqlTypeName
name|from
parameter_list|,
name|boolean
name|coerce
parameter_list|)
block|{
assert|assert
name|to
operator|!=
literal|null
assert|;
assert|assert
name|from
operator|!=
literal|null
assert|;
name|Map
argument_list|<
name|SqlTypeName
argument_list|,
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
argument_list|>
name|ruleset
init|=
name|coerce
condition|?
name|coerceRules
else|:
name|rules
decl_stmt|;
if|if
condition|(
name|to
operator|.
name|equals
argument_list|(
name|SqlTypeName
operator|.
name|NULL
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|SqlTypeName
operator|.
name|NULL
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Set
argument_list|<
name|SqlTypeName
argument_list|>
name|rule
init|=
name|ruleset
operator|.
name|get
argument_list|(
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|rule
condition|)
block|{
comment|// if you hit this assert, see the constructor of this class on how
comment|// to add new rule
throw|throw
name|Util
operator|.
name|newInternal
argument_list|(
literal|"No assign rules for "
operator|+
name|to
operator|+
literal|" defined"
argument_list|)
throw|;
block|}
return|return
name|rule
operator|.
name|contains
argument_list|(
name|from
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copy
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Set
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|V
operator|)
name|copy
argument_list|(
operator|(
name|Set
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copy
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|HashSet
argument_list|<
name|T
argument_list|>
name|copy
parameter_list|(
name|Set
argument_list|<
name|T
argument_list|>
name|set
parameter_list|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|(
name|set
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlTypeAssignmentRules.java
end_comment

end_unit

