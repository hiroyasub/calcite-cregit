begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
package|;
end_package

begin_comment
comment|/**  * Implementation of {@link SqlConformance} that delegates all methods to  * another object. You can create a sub-class that overrides particular  * methods.  */
end_comment

begin_class
specifier|public
class|class
name|SqlDelegatingConformance
extends|extends
name|SqlAbstractConformance
block|{
specifier|private
specifier|final
name|SqlConformance
name|delegate
decl_stmt|;
comment|/** Creates a SqlDelegatingConformance. */
specifier|protected
name|SqlDelegatingConformance
parameter_list|(
name|SqlConformance
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGroupByAlias
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isGroupByAlias
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGroupByOrdinal
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isGroupByOrdinal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isHavingAlias
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isGroupByAlias
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSortByOrdinal
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isSortByOrdinal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSortByAlias
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isSortByAlias
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSortByAliasObscures
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isSortByAliasObscures
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFromRequired
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isFromRequired
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBangEqualAllowed
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isBangEqualAllowed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMinusAllowed
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isMinusAllowed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInsertSubsetColumnsAllowed
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isInsertSubsetColumnsAllowed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowNiladicParentheses
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|allowNiladicParentheses
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End SqlDelegatingConformance.java
end_comment

end_unit

