begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Static
operator|.
name|RESOURCE
import|;
end_import

begin_comment
comment|/**  * An operator that applies a sort operation before rows are included in an aggregate function.  *  *<p>Operands are as follows:</p>  *  *<ul>  *<li>0: a call to an aggregate function ({@link SqlCall})  *<li>1: order operation list  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|SqlWithinGroupOperator
extends|extends
name|SqlBinaryOperator
block|{
specifier|public
name|SqlWithinGroupOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"WITHIN GROUP"
argument_list|,
name|SqlKind
operator|.
name|WITHIN_GROUP
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
name|ReturnTypes
operator|.
name|ARG0
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|ANY_IGNORE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unparse
parameter_list|(
name|SqlWriter
name|writer
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|int
name|leftPrec
parameter_list|,
name|int
name|rightPrec
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|operandCount
argument_list|()
operator|==
literal|2
assert|;
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"WITHIN GROUP"
argument_list|)
expr_stmt|;
specifier|final
name|SqlWriter
operator|.
name|Frame
name|orderFrame
init|=
name|writer
operator|.
name|startList
argument_list|(
name|SqlWriter
operator|.
name|FrameTypeEnum
operator|.
name|ORDER_BY_LIST
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|keyword
argument_list|(
literal|"ORDER BY"
argument_list|)
expr_stmt|;
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
operator|.
name|unparse
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endList
argument_list|(
name|orderFrame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateCall
parameter_list|(
name|SqlCall
name|call
parameter_list|,
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlValidatorScope
name|operandScope
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|this
assert|;
assert|assert
name|call
operator|.
name|operandCount
argument_list|()
operator|==
literal|2
assert|;
specifier|final
name|SqlValidatorUtil
operator|.
name|FlatAggregate
name|flat
init|=
name|SqlValidatorUtil
operator|.
name|flatten
argument_list|(
name|call
argument_list|)
decl_stmt|;
specifier|final
name|SqlOperator
name|operator
init|=
name|flat
operator|.
name|aggregateCall
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|operator
operator|.
name|isAggregator
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|RESOURCE
operator|.
name|withinGroupNotAllowed
argument_list|(
name|operator
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|SqlNode
name|order
range|:
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|flat
operator|.
name|orderList
argument_list|)
control|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|validator
operator|.
name|deriveType
argument_list|(
name|scope
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|validator
operator|.
name|validateAggregateParams
argument_list|(
name|flat
operator|.
name|aggregateCall
argument_list|,
name|flat
operator|.
name|filter
argument_list|,
name|flat
operator|.
name|distinctList
argument_list|,
name|flat
operator|.
name|orderList
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveType
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
name|SqlCall
name|inner
init|=
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SqlOperator
name|operator
init|=
name|inner
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|operator
operator|.
name|isAggregator
argument_list|()
condition|)
block|{
throw|throw
name|validator
operator|.
name|newValidationError
argument_list|(
name|call
argument_list|,
name|RESOURCE
operator|.
name|withinGroupNotAllowed
argument_list|(
name|operator
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|inner
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|PERCENTILE_DISC
condition|)
block|{
comment|// We first check the percentile call operands, and then derive the correct type using
comment|// PercentileDiscCallBinding (See CALCITE-5230).
name|SqlCallBinding
name|opBinding
init|=
operator|new
name|PercentileDiscCallBinding
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|inner
argument_list|,
name|getCollationColumn
argument_list|(
name|call
argument_list|)
argument_list|)
decl_stmt|;
name|inner
operator|.
name|getOperator
argument_list|()
operator|.
name|checkOperandTypes
argument_list|(
name|opBinding
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RelDataType
name|ret
init|=
name|inner
operator|.
name|getOperator
argument_list|()
operator|.
name|inferReturnType
argument_list|(
name|opBinding
argument_list|)
decl_stmt|;
name|validator
operator|.
name|setValidatedNodeType
argument_list|(
name|inner
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
name|validateOperands
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
return|;
block|}
block|}
specifier|private
name|SqlNode
name|getCollationColumn
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SqlNodeList
operator|)
name|call
operator|.
name|operand
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Used for PERCENTILE_DISC return type inference.    */
specifier|public
specifier|static
class|class
name|PercentileDiscCallBinding
extends|extends
name|SqlCallBinding
block|{
specifier|private
specifier|final
name|SqlNode
name|collationColumn
decl_stmt|;
specifier|private
name|PercentileDiscCallBinding
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
annotation|@
name|Nullable
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|,
name|SqlNode
name|collation
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
expr_stmt|;
name|this
operator|.
name|collationColumn
operator|=
name|collation
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getCollationType
parameter_list|()
block|{
specifier|final
name|RelDataType
name|type
init|=
name|SqlTypeUtil
operator|.
name|deriveType
argument_list|(
name|this
argument_list|,
name|collationColumn
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidatorNamespace
name|namespace
init|=
name|super
operator|.
name|getValidator
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|collationColumn
argument_list|)
decl_stmt|;
return|return
name|namespace
operator|!=
literal|null
condition|?
name|namespace
operator|.
name|getType
argument_list|()
else|:
name|type
return|;
block|}
block|}
block|}
end_class

end_unit

