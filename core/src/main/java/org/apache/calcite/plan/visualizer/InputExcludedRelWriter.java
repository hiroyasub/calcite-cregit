begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|visualizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An implement of RelWriter for explaining a single RelNode.  * The result only contains the properties of the RelNode,  * but does not explain the children.  *  *<pre>{@code  * InputExcludedRelWriter relWriter = new InputExcludedRelWriter();  * rel.explain(relWriter);  * String digest = relWriter.toString();  * }</pre>  *  */
end_comment

begin_class
class|class
name|InputExcludedRelWriter
implements|implements
name|RelWriter
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
annotation|@
name|Nullable
name|Object
argument_list|>
name|values
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|InputExcludedRelWriter
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|explain
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
annotation|@
name|Nullable
name|Object
argument_list|>
argument_list|>
name|valueList
parameter_list|)
block|{
name|valueList
operator|.
name|forEach
argument_list|(
name|pair
lambda|->
block|{
assert|assert
name|pair
operator|.
name|left
operator|!=
literal|null
assert|;
name|this
operator|.
name|values
operator|.
name|put
argument_list|(
name|pair
operator|.
name|left
argument_list|,
name|pair
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SqlExplainLevel
name|getDetailLevel
parameter_list|()
block|{
return|return
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|input
parameter_list|(
name|String
name|term
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
comment|// do nothing, ignore input
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|item
parameter_list|(
name|String
name|term
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|values
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|itemIf
parameter_list|(
name|String
name|term
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value
parameter_list|,
name|boolean
name|condition
parameter_list|)
block|{
if|if
condition|(
name|condition
condition|)
block|{
name|this
operator|.
name|values
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|done
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nest
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|values
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

