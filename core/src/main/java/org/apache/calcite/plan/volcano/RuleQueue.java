begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_comment
comment|/**  * A data structure that manages rule matches for RuleDriver.  * Different RuleDriver requires different ways to pop matches,  * thus different ways to store rule matches that are not called.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RuleQueue
block|{
specifier|protected
specifier|final
name|VolcanoPlanner
name|planner
decl_stmt|;
specifier|protected
name|RuleQueue
parameter_list|(
name|VolcanoPlanner
name|planner
parameter_list|)
block|{
name|this
operator|.
name|planner
operator|=
name|planner
expr_stmt|;
block|}
comment|/**    * Add a RuleMatch into the queue.    * @param match rule match to add    */
specifier|public
specifier|abstract
name|void
name|addMatch
parameter_list|(
name|VolcanoRuleMatch
name|match
parameter_list|)
function_decl|;
comment|/**    * clear this rule queue.    * The return value indicates whether the rule queue was empty before clear.    * @return true if the rule queue was not empty    */
specifier|public
specifier|abstract
name|boolean
name|clear
parameter_list|()
function_decl|;
comment|/** Returns whether to skip a match. This happens if any of the    * {@link RelNode}s have importance zero. */
specifier|protected
name|boolean
name|skipMatch
parameter_list|(
name|VolcanoRuleMatch
name|match
parameter_list|)
block|{
for|for
control|(
name|RelNode
name|rel
range|:
name|match
operator|.
name|rels
control|)
block|{
if|if
condition|(
name|planner
operator|.
name|prunedNodes
operator|.
name|contains
argument_list|(
name|rel
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// If the same subset appears more than once along any path from root
comment|// operand to a leaf operand, we have matched a cycle. A relational
comment|// expression that consumes its own output can never be implemented, and
comment|// furthermore, if we fire rules on it we may generate lots of garbage.
comment|// For example, if
comment|//   Project(A, X = X + 0)
comment|// is in the same subset as A, then we would generate
comment|//   Project(A, X = X + 0 + 0)
comment|//   Project(A, X = X + 0 + 0 + 0)
comment|// also in the same subset. They are valid but useless.
specifier|final
name|Deque
argument_list|<
name|RelSubset
argument_list|>
name|subsets
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|checkDuplicateSubsets
argument_list|(
name|subsets
argument_list|,
name|match
operator|.
name|rule
operator|.
name|getOperand
argument_list|()
argument_list|,
name|match
operator|.
name|rels
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Recursively checks whether there are any duplicate subsets along any path    * from root of the operand tree to one of the leaves.    *    *<p>It is OK for a match to have duplicate subsets if they are not on the    * same path. For example,    *    *<blockquote><pre>    *   Join    *  /   \    * X     X    *</pre></blockquote>    *    *<p>is a valid match.    *    * @throws org.apache.calcite.util.Util.FoundOne on match    */
specifier|private
name|void
name|checkDuplicateSubsets
parameter_list|(
name|Deque
argument_list|<
name|RelSubset
argument_list|>
name|subsets
parameter_list|,
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelNode
index|[]
name|rels
parameter_list|)
block|{
specifier|final
name|RelSubset
name|subset
init|=
name|planner
operator|.
name|getSubsetNonNull
argument_list|(
name|rels
index|[
name|operand
operator|.
name|ordinalInRule
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|subsets
operator|.
name|contains
argument_list|(
name|subset
argument_list|)
condition|)
block|{
throw|throw
name|Util
operator|.
name|FoundOne
operator|.
name|NULL
throw|;
block|}
if|if
condition|(
operator|!
name|operand
operator|.
name|getChildOperands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subsets
operator|.
name|push
argument_list|(
name|subset
argument_list|)
expr_stmt|;
for|for
control|(
name|RelOptRuleOperand
name|childOperand
range|:
name|operand
operator|.
name|getChildOperands
argument_list|()
control|)
block|{
name|checkDuplicateSubsets
argument_list|(
name|subsets
argument_list|,
name|childOperand
argument_list|,
name|rels
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelSubset
name|x
init|=
name|subsets
operator|.
name|pop
argument_list|()
decl_stmt|;
assert|assert
name|x
operator|==
name|subset
assert|;
block|}
block|}
block|}
end_class

end_unit

