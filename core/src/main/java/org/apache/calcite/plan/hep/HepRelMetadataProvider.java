begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|MetadataDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|MetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|UnboundMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * HepRelMetadataProvider implements the {@link RelMetadataProvider} interface  * by combining metadata from the rels inside of a {@link HepRelVertex}.  */
end_comment

begin_class
class|class
name|HepRelMetadataProvider
implements|implements
name|RelMetadataProvider
block|{
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|HepRelMetadataProvider
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|107
return|;
block|}
specifier|public
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|>
name|UnboundMetadata
argument_list|<
name|M
argument_list|>
name|apply
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|relClass
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|M
argument_list|>
name|metadataClass
parameter_list|)
block|{
return|return
operator|new
name|UnboundMetadata
argument_list|<
name|M
argument_list|>
argument_list|()
block|{
specifier|public
name|M
name|bind
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|rel
operator|instanceof
name|HepRelVertex
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HepRelVertex
name|vertex
init|=
operator|(
name|HepRelVertex
operator|)
name|rel
decl_stmt|;
specifier|final
name|RelNode
name|rel2
init|=
name|vertex
operator|.
name|getCurrentRel
argument_list|()
decl_stmt|;
name|UnboundMetadata
argument_list|<
name|M
argument_list|>
name|function
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataProvider
argument_list|()
operator|.
name|apply
argument_list|(
name|rel2
operator|.
name|getClass
argument_list|()
argument_list|,
name|metadataClass
argument_list|)
decl_stmt|;
return|return
name|function
operator|.
name|bind
argument_list|(
name|rel2
argument_list|,
name|mq
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
parameter_list|<
name|M
extends|extends
name|Metadata
parameter_list|>
name|Multimap
argument_list|<
name|Method
argument_list|,
name|MetadataHandler
argument_list|<
name|M
argument_list|>
argument_list|>
name|handlers
parameter_list|(
name|MetadataDef
argument_list|<
name|M
argument_list|>
name|def
parameter_list|)
block|{
return|return
name|ImmutableMultimap
operator|.
name|of
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End HepRelMetadataProvider.java
end_comment

end_unit

