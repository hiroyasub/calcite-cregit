begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Predicates that are known to hold in the output of a particular relational  * expression.  */
end_comment

begin_class
specifier|public
class|class
name|RelOptPredicateList
block|{
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|EMPTY_LIST
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelOptPredicateList
name|EMPTY
init|=
operator|new
name|RelOptPredicateList
argument_list|(
name|EMPTY_LIST
argument_list|,
name|EMPTY_LIST
argument_list|,
name|EMPTY_LIST
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicates
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|leftInferredPredicates
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|rightInferredPredicates
decl_stmt|;
specifier|private
name|RelOptPredicateList
parameter_list|(
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicates
parameter_list|,
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|leftInferredPredicates
parameter_list|,
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|rightInferredPredicates
parameter_list|)
block|{
name|this
operator|.
name|pulledUpPredicates
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|pulledUpPredicates
argument_list|)
expr_stmt|;
name|this
operator|.
name|leftInferredPredicates
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|leftInferredPredicates
argument_list|)
expr_stmt|;
name|this
operator|.
name|rightInferredPredicates
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rightInferredPredicates
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|RelOptPredicateList
name|of
parameter_list|(
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicates
parameter_list|)
block|{
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicatesList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|pulledUpPredicates
argument_list|)
decl_stmt|;
if|if
condition|(
name|pulledUpPredicatesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
return|return
operator|new
name|RelOptPredicateList
argument_list|(
name|pulledUpPredicatesList
argument_list|,
name|EMPTY_LIST
argument_list|,
name|EMPTY_LIST
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelOptPredicateList
name|of
parameter_list|(
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicates
parameter_list|,
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|leftInferredPredicates
parameter_list|,
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|rightInferredPredicates
parameter_list|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicatesList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|pulledUpPredicates
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|leftInferredPredicateList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|leftInferredPredicates
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|rightInferredPredicatesList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rightInferredPredicates
argument_list|)
decl_stmt|;
if|if
condition|(
name|pulledUpPredicatesList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|leftInferredPredicateList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|rightInferredPredicatesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
return|return
operator|new
name|RelOptPredicateList
argument_list|(
name|pulledUpPredicatesList
argument_list|,
name|leftInferredPredicateList
argument_list|,
name|rightInferredPredicatesList
argument_list|)
return|;
block|}
specifier|public
name|RelOptPredicateList
name|union
parameter_list|(
name|RelOptPredicateList
name|list
parameter_list|)
block|{
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|pulledUpPredicates
argument_list|,
name|list
operator|.
name|pulledUpPredicates
argument_list|)
argument_list|,
name|Iterables
operator|.
name|concat
argument_list|(
name|leftInferredPredicates
argument_list|,
name|list
operator|.
name|leftInferredPredicates
argument_list|)
argument_list|,
name|Iterables
operator|.
name|concat
argument_list|(
name|rightInferredPredicates
argument_list|,
name|list
operator|.
name|rightInferredPredicates
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelOptPredicateList
name|shift
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|RexUtil
operator|.
name|shift
argument_list|(
name|pulledUpPredicates
argument_list|,
name|offset
argument_list|)
argument_list|,
name|RexUtil
operator|.
name|shift
argument_list|(
name|leftInferredPredicates
argument_list|,
name|offset
argument_list|)
argument_list|,
name|RexUtil
operator|.
name|shift
argument_list|(
name|rightInferredPredicates
argument_list|,
name|offset
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelOptPredicateList.java
end_comment

end_unit

