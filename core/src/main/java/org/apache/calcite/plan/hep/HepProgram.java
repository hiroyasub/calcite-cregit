begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castToInitialized
import|;
end_import

begin_comment
comment|/**  * HepProgram specifies the order in which rules should be attempted by  * {@link HepPlanner}. Use {@link HepProgramBuilder} to create a new  * instance of HepProgram.  *  *<p>Note that the structure of a program is immutable, but the planner uses it  * as read/write during planning, so a program can only be in use by a single  * planner at a time.  */
end_comment

begin_class
specifier|public
class|class
name|HepProgram
extends|extends
name|HepInstruction
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * Symbolic constant for matching until no more matches occur.    */
specifier|public
specifier|static
specifier|final
name|int
name|MATCH_UNTIL_FIXPOINT
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|final
name|ImmutableList
argument_list|<
name|HepInstruction
argument_list|>
name|instructions
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a new empty HepProgram. The program has an initial match order of    * {@link org.apache.calcite.plan.hep.HepMatchOrder#DEPTH_FIRST}, and an initial    * match limit of {@link #MATCH_UNTIL_FIXPOINT}.    */
name|HepProgram
parameter_list|(
name|List
argument_list|<
name|HepInstruction
argument_list|>
name|instructions
parameter_list|)
block|{
name|this
operator|.
name|instructions
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|instructions
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|HepProgramBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|HepProgramBuilder
argument_list|()
return|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|,
name|instructions
argument_list|)
return|;
block|}
comment|/** State for a {@link HepProgram} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
specifier|final
name|ImmutableList
argument_list|<
name|HepState
argument_list|>
name|instructionStates
decl_stmt|;
name|int
name|matchLimit
init|=
name|MATCH_UNTIL_FIXPOINT
decl_stmt|;
name|HepMatchOrder
name|matchOrder
init|=
name|HepMatchOrder
operator|.
name|DEPTH_FIRST
decl_stmt|;
name|HepInstruction
operator|.
name|EndGroup
operator|.
expr|@
name|Nullable
name|State
name|group
expr_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|,
name|List
argument_list|<
name|HepInstruction
argument_list|>
name|instructions
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
specifier|final
name|PrepareContext
name|px2
init|=
name|px
operator|.
name|withProgramState
argument_list|(
name|castToInitialized
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|HepState
argument_list|>
name|states
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|HepInstruction
argument_list|,
name|Consumer
argument_list|<
name|HepState
argument_list|>
argument_list|>
name|actions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HepInstruction
name|instruction
range|:
name|instructions
control|)
block|{
specifier|final
name|HepState
name|state
decl_stmt|;
if|if
condition|(
name|instruction
operator|instanceof
name|BeginGroup
condition|)
block|{
comment|// The state of a BeginGroup instruction needs the state of the
comment|// corresponding EndGroup instruction, which we haven't seen yet.
comment|// Temporarily put a placeholder State into the list, and add an
comment|// action to replace that State. The action will be invoked when we
comment|// reach the EndGroup.
specifier|final
name|int
name|i
init|=
name|states
operator|.
name|size
argument_list|()
decl_stmt|;
name|actions
operator|.
name|put
argument_list|(
operator|(
operator|(
name|BeginGroup
operator|)
name|instruction
operator|)
operator|.
name|endGroup
argument_list|,
name|state2
lambda|->
name|states
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|instruction
operator|.
name|prepare
argument_list|(
name|px2
operator|.
name|withEndGroupState
argument_list|(
operator|(
name|EndGroup
operator|.
name|State
operator|)
name|state2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|castNonNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|instruction
operator|.
name|prepare
argument_list|(
name|px2
argument_list|)
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|containsKey
argument_list|(
name|instruction
argument_list|)
condition|)
block|{
name|actions
operator|.
name|get
argument_list|(
name|instruction
argument_list|)
operator|.
name|accept
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
name|states
operator|.
name|add
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|instructionStates
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|states
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|init
parameter_list|()
block|{
name|matchLimit
operator|=
name|MATCH_UNTIL_FIXPOINT
expr_stmt|;
name|matchOrder
operator|=
name|HepMatchOrder
operator|.
name|DEPTH_FIRST
expr_stmt|;
name|group
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeProgram
argument_list|(
name|HepProgram
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|boolean
name|skippingGroup
parameter_list|()
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
comment|// Skip if we've already collected the ruleset.
return|return
operator|!
name|group
operator|.
name|collecting
return|;
block|}
else|else
block|{
comment|// Not grouping.
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

