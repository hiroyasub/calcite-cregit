begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/***  *<p>The algorithm executes repeatedly. The exact rules  * that may be fired varies.  *  *<p>The planner iterates over the rule matches presented  * by the rule queue until the rule queue becomes empty.  */
end_comment

begin_class
class|class
name|IterativeRuleDriver
implements|implements
name|RuleDriver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|VolcanoPlanner
name|planner
decl_stmt|;
specifier|private
specifier|final
name|IterativeRuleQueue
name|ruleQueue
decl_stmt|;
name|IterativeRuleDriver
parameter_list|(
name|VolcanoPlanner
name|planner
parameter_list|)
block|{
name|this
operator|.
name|planner
operator|=
name|planner
expr_stmt|;
name|ruleQueue
operator|=
operator|new
name|IterativeRuleQueue
argument_list|(
name|planner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IterativeRuleQueue
name|getRuleQueue
parameter_list|()
block|{
return|return
name|ruleQueue
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drive
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
assert|assert
name|planner
operator|.
name|root
operator|!=
literal|null
operator|:
literal|"RelSubset must not be null at this point"
assert|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Best cost before rule match: {}"
argument_list|,
name|planner
operator|.
name|root
operator|.
name|bestCost
argument_list|)
expr_stmt|;
name|VolcanoRuleMatch
name|match
init|=
name|ruleQueue
operator|.
name|popMatch
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
operator|==
literal|null
condition|)
block|{
break|break;
block|}
assert|assert
name|match
operator|.
name|getRule
argument_list|()
operator|.
name|matches
argument_list|(
name|match
argument_list|)
assert|;
try|try
block|{
name|match
operator|.
name|onMatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VolcanoTimeoutException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Volcano planning times out, cancels the subsequent optimization."
argument_list|)
expr_stmt|;
name|planner
operator|.
name|canonize
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// The root may have been merged with another
comment|// subset. Find the new root subset.
name|planner
operator|.
name|canonize
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onProduce
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelSubset
name|subset
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSetMerged
parameter_list|(
name|RelSet
name|set
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|ruleQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

