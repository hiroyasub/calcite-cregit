begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Spaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|PartiallyOrderedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apiguardian
operator|.
name|api
operator|.
name|API
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utility class to dump state of<code>VolcanoPlanner</code>.  */
end_comment

begin_class
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.23"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|INTERNAL
argument_list|)
class|class
name|Dumpers
block|{
specifier|private
name|Dumpers
parameter_list|()
block|{
block|}
comment|/**    * Returns a multi-line string describing the provenance of a tree of    * relational expressions. For each node in the tree, prints the rule that    * created the node, if any. Recursively describes the provenance of the    * relational expressions that are the arguments to that rule.    *    *<p>Thus, every relational expression and rule invocation that affected    * the final outcome is described in the provenance. This can be useful    * when finding the root cause of "mistakes" in a query plan.</p>    *    * @param provenanceMap The provenance map    * @param root Root relational expression in a tree    * @return Multi-line string describing the rules that created the tree    */
specifier|static
name|String
name|provenance
parameter_list|(
name|Map
argument_list|<
name|RelNode
argument_list|,
name|VolcanoPlanner
operator|.
name|Provenance
argument_list|>
name|provenanceMap
parameter_list|,
name|RelNode
name|root
parameter_list|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|RelVisitor
argument_list|()
block|{
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|,
name|ordinal
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
comment|// CHECKSTYLE: IGNORE 1
block|}
operator|.
name|go
argument_list|(
name|root
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|RelNode
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|node
range|:
name|nodes
control|)
block|{
name|provenanceRecurse
argument_list|(
name|provenanceMap
argument_list|,
name|pw
argument_list|,
name|node
argument_list|,
literal|0
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|provenanceRecurse
parameter_list|(
name|Map
argument_list|<
name|RelNode
argument_list|,
name|VolcanoPlanner
operator|.
name|Provenance
argument_list|>
name|provenanceMap
parameter_list|,
name|PrintWriter
name|pw
parameter_list|,
name|RelNode
name|node
parameter_list|,
name|int
name|i
parameter_list|,
name|Set
argument_list|<
name|RelNode
argument_list|>
name|visited
parameter_list|)
block|{
name|Spaces
operator|.
name|append
argument_list|(
name|pw
argument_list|,
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|visited
operator|.
name|add
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"rel#"
operator|+
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" (see above)"
argument_list|)
expr_stmt|;
return|return;
block|}
name|pw
operator|.
name|println
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|VolcanoPlanner
operator|.
name|Provenance
name|o
init|=
name|provenanceMap
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Spaces
operator|.
name|append
argument_list|(
name|pw
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|==
name|VolcanoPlanner
operator|.
name|Provenance
operator|.
name|EMPTY
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"no parent"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|VolcanoPlanner
operator|.
name|DirectProvenance
condition|)
block|{
name|RelNode
name|rel
init|=
operator|(
operator|(
name|VolcanoPlanner
operator|.
name|DirectProvenance
operator|)
name|o
operator|)
operator|.
name|source
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"direct"
argument_list|)
expr_stmt|;
name|provenanceRecurse
argument_list|(
name|provenanceMap
argument_list|,
name|pw
argument_list|,
name|rel
argument_list|,
name|i
operator|+
literal|2
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|VolcanoPlanner
operator|.
name|RuleProvenance
condition|)
block|{
name|VolcanoPlanner
operator|.
name|RuleProvenance
name|rule
init|=
operator|(
name|VolcanoPlanner
operator|.
name|RuleProvenance
operator|)
name|o
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"call#"
operator|+
name|rule
operator|.
name|callId
operator|+
literal|" rule ["
operator|+
name|rule
operator|.
name|rule
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|rule
operator|.
name|rels
control|)
block|{
name|provenanceRecurse
argument_list|(
name|provenanceMap
argument_list|,
name|pw
argument_list|,
name|rel
argument_list|,
name|i
operator|+
literal|2
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|o
operator|==
literal|null
operator|&&
name|node
operator|instanceof
name|RelSubset
condition|)
block|{
comment|// A few operands recognize subsets, not individual rels.
comment|// The first rel in the subset is deemed to have created it.
specifier|final
name|RelSubset
name|subset
init|=
operator|(
name|RelSubset
operator|)
name|node
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"subset "
operator|+
name|subset
argument_list|)
expr_stmt|;
name|provenanceRecurse
argument_list|(
name|provenanceMap
argument_list|,
name|pw
argument_list|,
name|subset
operator|.
name|getRelList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|i
operator|+
literal|2
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad type "
operator|+
name|o
argument_list|)
throw|;
block|}
block|}
specifier|static
name|void
name|dumpSets
parameter_list|(
name|VolcanoPlanner
name|planner
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
block|{
name|Ordering
argument_list|<
name|RelSet
argument_list|>
name|ordering
init|=
name|Ordering
operator|.
name|from
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|o
lambda|->
name|o
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RelSet
name|set
range|:
name|ordering
operator|.
name|immutableSortedCopy
argument_list|(
name|planner
operator|.
name|allSets
argument_list|)
control|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"Set#"
operator|+
name|set
operator|.
name|id
operator|+
literal|", type: "
operator|+
name|set
operator|.
name|subsets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|j
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|RelSubset
name|subset
range|:
name|set
operator|.
name|subsets
control|)
block|{
operator|++
name|j
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|subset
operator|+
literal|", best="
operator|+
operator|(
operator|(
name|subset
operator|.
name|best
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
operator|(
literal|"rel#"
operator|+
name|subset
operator|.
name|best
operator|.
name|getId
argument_list|()
operator|)
operator|)
argument_list|)
expr_stmt|;
assert|assert
name|subset
operator|.
name|set
operator|==
name|set
assert|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|j
condition|;
name|k
operator|++
control|)
block|{
assert|assert
operator|!
name|set
operator|.
name|subsets
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|getTraitSet
argument_list|()
operator|.
name|equals
argument_list|(
name|subset
operator|.
name|getTraitSet
argument_list|()
argument_list|)
assert|;
block|}
for|for
control|(
name|RelNode
name|rel
range|:
name|subset
operator|.
name|getRels
argument_list|()
control|)
block|{
comment|// "\t\trel#34:JavaProject(rel#32:JavaFilter(...), ...)"
name|pw
operator|.
name|print
argument_list|(
literal|"\t\t"
operator|+
name|rel
argument_list|)
expr_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|RelSubset
name|inputSubset
init|=
name|planner
operator|.
name|getSubset
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
argument_list|)
decl_stmt|;
name|RelSet
name|inputSet
init|=
name|inputSubset
operator|.
name|set
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|RelSubset
condition|)
block|{
specifier|final
name|Iterator
argument_list|<
name|RelNode
argument_list|>
name|rels
init|=
name|inputSubset
operator|.
name|getRels
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|rels
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|input
operator|=
name|rels
operator|.
name|next
argument_list|()
expr_stmt|;
assert|assert
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|satisfies
argument_list|(
name|inputSubset
operator|.
name|getTraitSet
argument_list|()
argument_list|)
assert|;
assert|assert
name|inputSet
operator|.
name|rels
operator|.
name|contains
argument_list|(
name|input
argument_list|)
assert|;
assert|assert
name|inputSet
operator|.
name|subsets
operator|.
name|contains
argument_list|(
name|inputSubset
argument_list|)
assert|;
block|}
block|}
block|}
if|if
condition|(
name|planner
operator|.
name|prunedNodes
operator|.
name|contains
argument_list|(
name|rel
argument_list|)
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|", pruned"
argument_list|)
expr_stmt|;
block|}
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|", rowcount="
operator|+
name|mq
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|", cumulative cost="
operator|+
name|planner
operator|.
name|getCost
argument_list|(
name|rel
argument_list|,
name|mq
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
name|void
name|dumpGraphviz
parameter_list|(
name|VolcanoPlanner
name|planner
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
block|{
name|Ordering
argument_list|<
name|RelSet
argument_list|>
name|ordering
init|=
name|Ordering
operator|.
name|from
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|o
lambda|->
name|o
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RelNode
argument_list|>
name|activeRels
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|VolcanoRuleCall
name|volcanoRuleCall
range|:
name|planner
operator|.
name|ruleCallStack
control|)
block|{
name|activeRels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|volcanoRuleCall
operator|.
name|rels
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"digraph G {"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\troot [style=filled,label=\"Root\"];"
argument_list|)
expr_stmt|;
name|PartiallyOrderedSet
argument_list|<
name|RelSubset
argument_list|>
name|subsetPoset
init|=
operator|new
name|PartiallyOrderedSet
argument_list|<>
argument_list|(
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
name|e1
operator|.
name|getTraitSet
argument_list|()
operator|.
name|satisfies
argument_list|(
name|e2
operator|.
name|getTraitSet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RelSubset
argument_list|>
name|nonEmptySubsets
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelSet
name|set
range|:
name|ordering
operator|.
name|immutableSortedCopy
argument_list|(
name|planner
operator|.
name|allSets
argument_list|)
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"\tsubgraph cluster"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|set
operator|.
name|id
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t\tlabel="
argument_list|)
expr_stmt|;
name|Util
operator|.
name|printJavaString
argument_list|(
name|pw
argument_list|,
literal|"Set "
operator|+
name|set
operator|.
name|id
operator|+
literal|" "
operator|+
name|set
operator|.
name|subsets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|set
operator|.
name|rels
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"\t\trel"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|rel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" [label="
argument_list|)
expr_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
comment|// Note: rel traitset could be different from its subset.traitset
comment|// It can happen due to RelTraitset#simplify
comment|// If the traits are different, we want to keep them on a graph
name|String
name|traits
init|=
literal|"."
operator|+
name|planner
operator|.
name|getSubset
argument_list|(
name|rel
argument_list|)
operator|.
name|getTraitSet
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|rel
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
name|traits
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
name|int
name|openParen
init|=
name|title
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
decl_stmt|;
if|if
condition|(
name|openParen
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Title is like rel#12:LogicalJoin(left=RelSubset#4,right=RelSubset#3,
comment|// condition==($2, $0),joinType=inner)
comment|// so we remove the parenthesis, and wrap parameters to the second line
comment|// This avoids "too wide" Graphiz boxes, and makes the graph easier to follow
name|title
operator|=
name|title
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|openParen
argument_list|)
operator|+
literal|'\n'
operator|+
name|title
operator|.
name|substring
argument_list|(
name|openParen
operator|+
literal|1
argument_list|,
name|title
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|Util
operator|.
name|printJavaString
argument_list|(
name|pw
argument_list|,
name|title
operator|+
literal|"\nrows="
operator|+
name|mq
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
operator|+
literal|", cost="
operator|+
name|planner
operator|.
name|getCost
argument_list|(
name|rel
argument_list|,
name|mq
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RelSubset
name|relSubset
init|=
name|planner
operator|.
name|getSubset
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|rel
operator|instanceof
name|AbstractConverter
operator|)
condition|)
block|{
name|nonEmptySubsets
operator|.
name|add
argument_list|(
name|relSubset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relSubset
operator|.
name|best
operator|==
name|rel
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|",color=blue"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|activeRels
operator|.
name|contains
argument_list|(
name|rel
argument_list|)
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|",style=dashed"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|",shape=box"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|subsetPoset
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|RelSubset
name|subset
range|:
name|set
operator|.
name|subsets
control|)
block|{
name|subsetPoset
operator|.
name|add
argument_list|(
name|subset
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t\tsubset"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|subset
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" [label="
argument_list|)
expr_stmt|;
name|Util
operator|.
name|printJavaString
argument_list|(
name|pw
argument_list|,
name|subset
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|empty
init|=
operator|!
name|nonEmptySubsets
operator|.
name|contains
argument_list|(
name|subset
argument_list|)
decl_stmt|;
if|if
condition|(
name|empty
condition|)
block|{
comment|// We don't want to iterate over rels when we know the set is not empty
for|for
control|(
name|RelNode
name|rel
range|:
name|subset
operator|.
name|getRels
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|rel
operator|instanceof
name|AbstractConverter
operator|)
condition|)
block|{
name|empty
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|empty
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|",color=red"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|activeRels
operator|.
name|contains
argument_list|(
name|subset
argument_list|)
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|",style=dashed"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RelSubset
name|subset
range|:
name|subsetPoset
control|)
block|{
for|for
control|(
name|RelSubset
name|parent
range|:
name|subsetPoset
operator|.
name|getChildren
argument_list|(
name|subset
argument_list|)
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"\t\tsubset"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|subset
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" -> subset"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
name|pw
operator|.
name|print
argument_list|(
literal|"\t}\n"
argument_list|)
expr_stmt|;
block|}
comment|// Note: it is important that all the links are declared AFTER declaration of the nodes
comment|// Otherwise Graphviz creates nodes implicitly, and puts them into a wrong cluster
name|pw
operator|.
name|print
argument_list|(
literal|"\troot -> subset"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|planner
operator|.
name|root
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
for|for
control|(
name|RelSet
name|set
range|:
name|ordering
operator|.
name|immutableSortedCopy
argument_list|(
name|planner
operator|.
name|allSets
argument_list|)
control|)
block|{
for|for
control|(
name|RelNode
name|rel
range|:
name|set
operator|.
name|rels
control|)
block|{
name|RelSubset
name|relSubset
init|=
name|planner
operator|.
name|getSubset
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\tsubset"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|relSubset
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" -> rel"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|rel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|relSubset
operator|.
name|best
operator|==
name|rel
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"[color=blue]"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|rel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" rel"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|rel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|input
operator|instanceof
name|RelSubset
condition|?
literal|"subset"
else|:
literal|"rel"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|input
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|relSubset
operator|.
name|best
operator|==
name|rel
operator|||
name|inputs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|char
name|sep
init|=
literal|'['
decl_stmt|;
if|if
condition|(
name|relSubset
operator|.
name|best
operator|==
name|rel
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"color=blue"
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|','
expr_stmt|;
block|}
if|if
condition|(
name|inputs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"label=\""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
comment|// sep = ',';
block|}
name|pw
operator|.
name|print
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Draw lines for current rules
for|for
control|(
name|VolcanoRuleCall
name|ruleCall
range|:
name|planner
operator|.
name|ruleCallStack
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"rule"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|ruleCall
operator|.
name|id
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" [style=dashed,label="
argument_list|)
expr_stmt|;
name|Util
operator|.
name|printJavaString
argument_list|(
name|pw
argument_list|,
name|ruleCall
operator|.
name|rule
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|RelNode
index|[]
name|rels
init|=
name|ruleCall
operator|.
name|rels
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|rel
init|=
name|rels
index|[
name|i
index|]
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" rule"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|ruleCall
operator|.
name|id
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|rel
operator|instanceof
name|RelSubset
condition|?
literal|"subset"
else|:
literal|"rel"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|rel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" [style=dashed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rels
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|",label=\""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

