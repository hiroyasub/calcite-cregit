begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTrait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A match of a rule to a particular set of target relational expressions,  * frozen in time.  */
end_comment

begin_class
class|class
name|VolcanoRuleMatch
extends|extends
name|VolcanoRuleCall
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|RelSet
name|targetSet
decl_stmt|;
specifier|private
name|RelSubset
name|targetSubset
decl_stmt|;
specifier|private
name|String
name|digest
decl_stmt|;
specifier|private
name|double
name|cachedImportance
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a<code>VolcanoRuleMatch</code>.    *    * @param operand0 Primary operand    * @param rels     List of targets; copied by the constructor, so the client    *                 can modify it later    * @param nodeInputs Map from relational expressions to their inputs    */
name|VolcanoRuleMatch
parameter_list|(
name|VolcanoPlanner
name|volcanoPlanner
parameter_list|,
name|RelOptRuleOperand
name|operand0
parameter_list|,
name|RelNode
index|[]
name|rels
parameter_list|,
name|Map
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
argument_list|>
name|nodeInputs
parameter_list|)
block|{
name|super
argument_list|(
name|volcanoPlanner
argument_list|,
name|operand0
argument_list|,
name|rels
operator|.
name|clone
argument_list|()
argument_list|,
name|nodeInputs
argument_list|)
expr_stmt|;
assert|assert
name|allNotNull
argument_list|(
name|rels
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
comment|// Try to deduce which subset the result will belong to. Assume --
comment|// for now -- that the set is the same as the root relexp.
name|targetSet
operator|=
name|volcanoPlanner
operator|.
name|getSet
argument_list|(
name|rels
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
assert|assert
name|targetSet
operator|!=
literal|null
operator|:
name|rels
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" isn't in a set"
assert|;
name|digest
operator|=
name|computeDigest
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|digest
return|;
block|}
comment|/**    * Clears the cached importance value of this rule match. The importance    * will be re-calculated next time {@link #getImportance()} is called.    */
name|void
name|clearCachedImportance
parameter_list|()
block|{
name|cachedImportance
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
comment|/**    * Returns the importance of this rule.    *    *<p>Calls {@link #computeImportance()} the first time, thereafter uses a    * cached value until {@link #clearCachedImportance()} is called.    *    * @return importance of this rule; a value between 0 and 1    */
name|double
name|getImportance
parameter_list|()
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|cachedImportance
argument_list|)
condition|)
block|{
name|cachedImportance
operator|=
name|computeImportance
argument_list|()
expr_stmt|;
block|}
return|return
name|cachedImportance
return|;
block|}
comment|/**    * Computes the importance of this rule match.    *    * @return importance of this rule match    */
name|double
name|computeImportance
parameter_list|()
block|{
assert|assert
name|rels
index|[
literal|0
index|]
operator|!=
literal|null
assert|;
name|RelSubset
name|subset
init|=
name|volcanoPlanner
operator|.
name|getSubset
argument_list|(
name|rels
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|double
name|importance
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|subset
operator|!=
literal|null
condition|)
block|{
name|importance
operator|=
name|volcanoPlanner
operator|.
name|ruleQueue
operator|.
name|getImportance
argument_list|(
name|subset
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelSubset
name|targetSubset
init|=
name|guessSubset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|targetSubset
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|targetSubset
operator|!=
name|subset
operator|)
condition|)
block|{
comment|// If this rule will generate a member of an equivalence class
comment|// which is more important, use that importance.
specifier|final
name|double
name|targetImportance
init|=
name|volcanoPlanner
operator|.
name|ruleQueue
operator|.
name|getImportance
argument_list|(
name|targetSubset
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetImportance
operator|>
name|importance
condition|)
block|{
name|importance
operator|=
name|targetImportance
expr_stmt|;
comment|// If the equivalence class is cheaper than the target, bump up
comment|// the importance of the rule. A converter is an easy way to
comment|// make the plan cheaper, so we'd hate to miss this opportunity.
comment|//
comment|// REVIEW: jhyde, 2007/12/21: This rule seems to make sense, but
comment|// is disabled until it has been proven.
comment|//
comment|// CHECKSTYLE: IGNORE 3
if|if
condition|(
operator|(
name|subset
operator|!=
literal|null
operator|)
operator|&&
name|subset
operator|.
name|bestCost
operator|.
name|isLt
argument_list|(
name|targetSubset
operator|.
name|bestCost
argument_list|)
operator|&&
literal|false
condition|)
block|{
name|importance
operator|*=
name|targetSubset
operator|.
name|bestCost
operator|.
name|divideBy
argument_list|(
name|subset
operator|.
name|bestCost
argument_list|)
expr_stmt|;
name|importance
operator|=
name|Math
operator|.
name|min
argument_list|(
name|importance
argument_list|,
literal|0.99
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|importance
return|;
block|}
comment|/**    * Computes a string describing this rule match. Two rule matches are    * equivalent if and only if their digests are the same.    *    * @return description of this rule match    */
specifier|private
name|String
name|computeDigest
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"rule ["
operator|+
name|getRule
argument_list|()
operator|+
literal|"] rels ["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
operator|.
name|append
argument_list|(
name|rels
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Recomputes the digest of this VolcanoRuleMatch.    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|void
name|recomputeDigest
parameter_list|()
block|{
name|digest
operator|=
name|computeDigest
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns a guess as to which subset (that is equivalence class of    * relational expressions combined with a set of physical traits) the result    * of this rule will belong to.    *    * @return expected subset, or null if we cannot guess    */
specifier|private
name|RelSubset
name|guessSubset
parameter_list|()
block|{
if|if
condition|(
name|targetSubset
operator|!=
literal|null
condition|)
block|{
return|return
name|targetSubset
return|;
block|}
specifier|final
name|RelTrait
name|targetTrait
init|=
name|getRule
argument_list|()
operator|.
name|getOutTrait
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|targetSet
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|targetTrait
operator|!=
literal|null
operator|)
condition|)
block|{
specifier|final
name|RelTraitSet
name|targetTraitSet
init|=
name|rels
index|[
literal|0
index|]
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|targetTrait
argument_list|)
decl_stmt|;
comment|// Find the subset in the target set which matches the expected
comment|// set of traits. It may not exist yet.
name|targetSubset
operator|=
name|targetSet
operator|.
name|getSubset
argument_list|(
name|targetTraitSet
argument_list|)
expr_stmt|;
return|return
name|targetSubset
return|;
block|}
comment|// The target subset doesn't exist yet.
return|return
literal|null
return|;
block|}
comment|/** Returns whether all elements of a given array are not-null;    * fails if any are null. */
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|boolean
name|allNotNull
parameter_list|(
name|E
index|[]
name|es
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
for|for
control|(
name|E
name|e
range|:
name|es
control|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"was null"
argument_list|,
operator|(
name|Object
operator|)
name|es
argument_list|)
return|;
block|}
block|}
return|return
name|litmus
operator|.
name|succeed
argument_list|()
return|;
block|}
block|}
end_class

end_unit

