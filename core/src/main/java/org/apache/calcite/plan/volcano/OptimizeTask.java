begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|ConventionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|DeriveMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTrait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|PhysicalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apiguardian
operator|.
name|api
operator|.
name|API
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<code>OptimizeTask</code> represents the optimization task  * of VolcanoPlanner.  *  *<p>How does it work?</p>  *  *<p>Let S# denote the seed physical operator in a RelSet after  * logical and physical rules transformation, P# denote the  * physical operator generated by passing down parent trait  * requirements, D# denote the physical operator generated by  * deriving from child delivered traitSets.</p>  *  * The initial rel list state in a RelSet is as follows:  *<pre>  *  cursor  *    |  *    V  *   S1, S2  *</pre>  *  * When we create a task for RelSubset1, the task will immediately  * pass the subset's traitSet to seed operators, S1 and S2,  * now we have:  *<pre>  *  cursor  *    |  *    V  *   S1, S2, P1, P2  *</pre>  *  * The subset task will create a optimization task for the relnode  * pointed by cursor, and move cursor to next available physical  * operator S2. In the task for S1, it will continue optimize its  * child nodes, which are RelSubsets. After child inputs optimization  * is finished, S1 will derive new relnodes from delivered subsets  * in input RelSet. Once task for S1 is completed, we have:  *<pre>  *      cursor  *        |  *        V  *   S1, S2, P1, P2, D1  *</pre>  *  * The subset task continues scheduling task for S2, P1... until  * there is no more relnode created for the RelSet, then we have:  *<pre>  *                              cursor  *                                |  *                                V  *   S1, S2, P1, P2, D1, D2, D3, null  *</pre>  *  * When a task for another RelSubset2 is created, the task will try  * to pass down the subset's traitSet to seed operator S1 and S2,  * now the RelSet looks like:  *<pre>  *                              cursor  *                                |  *                                V  *   S1, S2, P1, P2, D1, D2, D3, P3, P4  *</pre>  *  * The process continues till there is no more subsets or relnodes  * created for the RelSet.  */
end_comment

begin_class
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.23"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|INTERNAL
argument_list|)
specifier|abstract
class|class
name|OptimizeTask
block|{
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getPlannerTaskTracer
argument_list|()
decl_stmt|;
specifier|static
name|OptimizeTask
name|create
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|RelSubset
condition|)
block|{
return|return
operator|new
name|RelSubsetOptTask
argument_list|(
operator|(
name|RelSubset
operator|)
name|node
argument_list|)
return|;
block|}
return|return
operator|new
name|RelNodeOptTask
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|final
name|VolcanoPlanner
name|planner
decl_stmt|;
specifier|final
name|int
name|id
decl_stmt|;
name|OptimizeTask
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
name|planner
operator|=
operator|(
name|VolcanoPlanner
operator|)
name|node
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
expr_stmt|;
name|id
operator|=
name|planner
operator|.
name|nextTaskId
operator|++
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Scheduled task(id={}) for {}"
argument_list|,
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|abstract
name|boolean
name|hasSubTask
parameter_list|()
function_decl|;
specifier|abstract
name|OptimizeTask
name|nextSubTask
parameter_list|()
function_decl|;
specifier|abstract
name|void
name|execute
parameter_list|()
function_decl|;
comment|/**    * Task State    */
specifier|public
enum|enum
name|State
block|{
name|SCHEDULED
block|,
name|EXECUTING
block|,
name|COMPLETED
block|}
comment|/**    * Task for optimizing RelNode.    *    *<p>Optimize input RelSubsets and derive new RelNodes    * from child traitSets.</p>    */
specifier|static
class|class
name|RelNodeOptTask
extends|extends
name|OptimizeTask
block|{
specifier|final
name|RelNode
name|node
decl_stmt|;
name|int
name|nextId
init|=
literal|0
decl_stmt|;
comment|// next child index
name|RelNodeOptTask
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|hasSubTask
parameter_list|()
block|{
name|int
name|size
init|=
name|node
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextId
operator|<
name|size
condition|)
block|{
name|RelSubset
name|subset
init|=
operator|(
name|RelSubset
operator|)
name|node
operator|.
name|getInput
argument_list|(
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subset
operator|.
name|taskState
operator|==
literal|null
condition|)
block|{
comment|// not yet scheduled
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// maybe a cycle if it is not completed
name|nextId
operator|++
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|OptimizeTask
name|nextSubTask
parameter_list|()
block|{
name|RelNode
name|child
init|=
name|node
operator|.
name|getInput
argument_list|(
name|nextId
operator|++
argument_list|)
decl_stmt|;
return|return
operator|new
name|RelSubsetOptTask
argument_list|(
operator|(
name|RelSubset
operator|)
name|child
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|PhysicalNode
operator|)
operator|||
operator|(
operator|(
name|PhysicalNode
operator|)
name|node
operator|)
operator|.
name|getDeriveMode
argument_list|()
operator|==
name|DeriveMode
operator|.
name|PROHIBITED
operator|||
operator|!
name|planner
operator|.
name|isSeedNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Completed task(id={}) for {}"
argument_list|,
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return;
block|}
name|PhysicalNode
name|rel
init|=
operator|(
name|PhysicalNode
operator|)
name|node
decl_stmt|;
name|DeriveMode
name|mode
init|=
name|rel
operator|.
name|getDeriveMode
argument_list|()
decl_stmt|;
name|int
name|arity
init|=
name|node
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// for OMAKASE
name|List
argument_list|<
name|List
argument_list|<
name|RelTraitSet
argument_list|>
argument_list|>
name|inputTraits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|arity
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arity
condition|;
name|i
operator|++
control|)
block|{
name|int
name|childId
init|=
name|i
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|DeriveMode
operator|.
name|RIGHT_FIRST
condition|)
block|{
name|childId
operator|=
name|arity
operator|-
name|i
operator|-
literal|1
expr_stmt|;
block|}
name|RelSubset
name|input
init|=
operator|(
name|RelSubset
operator|)
name|node
operator|.
name|getInput
argument_list|(
name|childId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelTraitSet
argument_list|>
name|traits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|inputTraits
operator|.
name|add
argument_list|(
name|traits
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numSubset
init|=
name|input
operator|.
name|set
operator|.
name|subsets
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numSubset
condition|;
name|j
operator|++
control|)
block|{
name|RelSubset
name|subset
init|=
name|input
operator|.
name|set
operator|.
name|subsets
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subset
operator|.
name|isDelivered
argument_list|()
operator|||
name|equalsSansConvention
argument_list|(
name|subset
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|traitSet
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO: should use matching type to determine
comment|// Ideally we should stop deriving new relnodes when the
comment|// subset's traitSet equals with input traitSet, but
comment|// in case someone manually builds a physical relnode
comment|// tree, which is highly discouraged, without specifying
comment|// correct traitSet, e.g.
comment|//   EnumerableFilter  [].ANY
comment|//       -> EnumerableMergeJoin  [a].Hash[a]
comment|// We should still be able to derive the correct traitSet
comment|// for the dumb filter, even though the filter's traitSet
comment|// should be derived from the MergeJoin when it is created.
comment|// But if the subset's traitSet equals with the default
comment|// empty traitSet sans convention (the default traitSet
comment|// from cluster may have logical convention, NONE, which
comment|// is not interesting), we are safe to ignore it, because
comment|// a physical filter with non default traitSet, but has a
comment|// input with default empty traitSet, e.g.
comment|//   EnumerableFilter  [a].Hash[a]
comment|//       -> EnumerableProject  [].ANY
comment|// is definitely wrong, we should fail fast.
continue|continue;
block|}
if|if
condition|(
name|mode
operator|==
name|DeriveMode
operator|.
name|OMAKASE
condition|)
block|{
name|traits
operator|.
name|add
argument_list|(
name|subset
operator|.
name|getTraitSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RelNode
name|newRel
init|=
name|rel
operator|.
name|derive
argument_list|(
name|subset
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|childId
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRel
operator|!=
literal|null
operator|&&
operator|!
name|planner
operator|.
name|isRegistered
argument_list|(
name|newRel
argument_list|)
condition|)
block|{
name|RelSubset
name|relSubset
init|=
name|planner
operator|.
name|register
argument_list|(
name|newRel
argument_list|,
name|node
argument_list|)
decl_stmt|;
assert|assert
name|relSubset
operator|.
name|set
operator|==
name|planner
operator|.
name|getSubset
argument_list|(
name|node
argument_list|)
operator|.
name|set
assert|;
block|}
block|}
block|}
if|if
condition|(
name|mode
operator|==
name|DeriveMode
operator|.
name|LEFT_FIRST
operator|||
name|mode
operator|==
name|DeriveMode
operator|.
name|RIGHT_FIRST
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|mode
operator|==
name|DeriveMode
operator|.
name|OMAKASE
condition|)
block|{
name|List
argument_list|<
name|RelNode
argument_list|>
name|relList
init|=
name|rel
operator|.
name|derive
argument_list|(
name|inputTraits
argument_list|)
decl_stmt|;
for|for
control|(
name|RelNode
name|relNode
range|:
name|relList
control|)
block|{
if|if
condition|(
operator|!
name|planner
operator|.
name|isRegistered
argument_list|(
name|relNode
argument_list|)
condition|)
block|{
name|planner
operator|.
name|register
argument_list|(
name|relNode
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Completed task(id={}) for {}"
argument_list|,
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns whether the 2 traitSets are equal without Convention.      * It assumes they have the same traitDefs order.      */
specifier|private
name|boolean
name|equalsSansConvention
parameter_list|(
name|RelTraitSet
name|ts1
parameter_list|,
name|RelTraitSet
name|ts2
parameter_list|)
block|{
assert|assert
name|ts1
operator|.
name|size
argument_list|()
operator|==
name|ts2
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ts1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelTrait
name|trait
init|=
name|ts1
operator|.
name|getTrait
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|trait
operator|.
name|getTraitDef
argument_list|()
operator|==
name|ConventionTraitDef
operator|.
name|INSTANCE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|trait
operator|.
name|equals
argument_list|(
name|ts2
operator|.
name|getTrait
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Task#"
operator|+
name|id
operator|+
literal|":{ "
operator|+
name|node
operator|+
literal|" }"
return|;
block|}
block|}
comment|/**    * Task for optimizing RelSubset.    *    *<p>Pass down the trait requirements of current RelSubset    * and add enforcers to the new delivered subsets.</p>    */
specifier|static
class|class
name|RelSubsetOptTask
extends|extends
name|OptimizeTask
block|{
specifier|final
name|RelSubset
name|subset
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelSubset
argument_list|>
name|deliveredSubsets
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|RelSubsetOptTask
parameter_list|(
name|RelSubset
name|subset
parameter_list|)
block|{
name|super
argument_list|(
name|subset
argument_list|)
expr_stmt|;
name|this
operator|.
name|subset
operator|=
name|subset
expr_stmt|;
name|subset
operator|.
name|taskState
operator|=
name|State
operator|.
name|SCHEDULED
expr_stmt|;
name|propagateTraits
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|propagateTraits
parameter_list|()
block|{
name|int
name|size
init|=
name|Math
operator|.
name|min
argument_list|(
name|subset
operator|.
name|set
operator|.
name|getSeedSize
argument_list|()
argument_list|,
name|subset
operator|.
name|set
operator|.
name|rels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|rel
init|=
name|subset
operator|.
name|set
operator|.
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|rel
operator|instanceof
name|PhysicalNode
operator|)
operator|||
name|rel
operator|.
name|getConvention
argument_list|()
operator|==
name|Convention
operator|.
name|NONE
operator|||
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|satisfies
argument_list|(
name|subset
operator|.
name|getTraitSet
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|RelNode
name|node
init|=
operator|(
operator|(
name|PhysicalNode
operator|)
name|rel
operator|)
operator|.
name|passThrough
argument_list|(
name|subset
operator|.
name|getTraitSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
operator|!
name|planner
operator|.
name|isRegistered
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|RelSubset
name|newSubset
init|=
name|planner
operator|.
name|register
argument_list|(
name|node
argument_list|,
name|subset
argument_list|)
decl_stmt|;
name|deliveredSubsets
operator|.
name|add
argument_list|(
name|newSubset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: should we consider stop trying propagation on node
comment|// with the same traitset as phyNode?
assert|assert
literal|true
assert|;
block|}
block|}
block|}
annotation|@
name|Override
name|boolean
name|hasSubTask
parameter_list|()
block|{
return|return
name|subset
operator|.
name|set
operator|.
name|hasNextPhysicalNode
argument_list|()
return|;
block|}
annotation|@
name|Override
name|OptimizeTask
name|nextSubTask
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|subset
operator|.
name|set
operator|.
name|nextPhysicalNode
argument_list|()
decl_stmt|;
return|return
operator|new
name|RelNodeOptTask
argument_list|(
name|rel
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|subset
operator|.
name|taskState
operator|=
name|State
operator|.
name|EXECUTING
expr_stmt|;
name|subset
operator|.
name|set
operator|.
name|addConverters
argument_list|(
name|subset
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|RelSubset
name|delivered
range|:
name|deliveredSubsets
control|)
block|{
name|subset
operator|.
name|set
operator|.
name|addConverters
argument_list|(
name|delivered
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|subset
operator|.
name|taskState
operator|=
name|State
operator|.
name|COMPLETED
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Completed task(id={}) for {}"
argument_list|,
name|id
argument_list|,
name|subset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Task#"
operator|+
name|id
operator|+
literal|":{ "
operator|+
name|subset
operator|+
literal|" }"
return|;
block|}
block|}
block|}
end_class

end_unit

