begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|visualizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Helper class to create the node update.  */
end_comment

begin_class
class|class
name|NodeUpdateHelper
block|{
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
specifier|private
specifier|final
annotation|@
name|Nullable
name|RelNode
name|rel
decl_stmt|;
specifier|private
specifier|final
name|NodeUpdateInfo
name|state
decl_stmt|;
specifier|private
annotation|@
name|Nullable
name|NodeUpdateInfo
name|update
init|=
literal|null
decl_stmt|;
name|NodeUpdateHelper
parameter_list|(
name|String
name|key
parameter_list|,
annotation|@
name|Nullable
name|RelNode
name|rel
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|rel
operator|=
name|rel
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|new
name|NodeUpdateInfo
argument_list|()
expr_stmt|;
block|}
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Nullable
name|RelNode
name|getRel
parameter_list|()
block|{
return|return
name|this
operator|.
name|rel
return|;
block|}
name|void
name|updateAttribute
parameter_list|(
specifier|final
name|String
name|attr
parameter_list|,
specifier|final
name|Object
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|newValue
argument_list|,
name|state
operator|.
name|get
argument_list|(
name|attr
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|state
operator|.
name|put
argument_list|(
name|attr
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|update
operator|==
literal|null
condition|)
block|{
name|update
operator|=
operator|new
name|NodeUpdateInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newValue
operator|instanceof
name|List
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|newValue
operator|)
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|update
operator|.
name|containsKey
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return;
block|}
name|update
operator|.
name|put
argument_list|(
name|attr
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isEmptyUpdate
parameter_list|()
block|{
return|return
name|this
operator|.
name|update
operator|==
literal|null
operator|||
name|update
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Gets an object representing all the changes since the last call to this method.    *    * @return an object or null if there are no changes.    */
annotation|@
name|Nullable
name|Object
name|getAndResetUpdate
parameter_list|()
block|{
if|if
condition|(
name|isEmptyUpdate
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NodeUpdateInfo
name|update
init|=
name|this
operator|.
name|update
decl_stmt|;
name|this
operator|.
name|update
operator|=
literal|null
expr_stmt|;
return|return
name|update
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getState
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|state
argument_list|)
return|;
block|}
comment|/**    * Get the current value for the attribute.    */
annotation|@
name|Nullable
name|Object
name|getValue
parameter_list|(
specifier|final
name|String
name|attr
parameter_list|)
block|{
return|return
name|this
operator|.
name|state
operator|.
name|get
argument_list|(
name|attr
argument_list|)
return|;
block|}
comment|/**    * Type alias.    */
specifier|private
specifier|static
class|class
name|NodeUpdateInfo
extends|extends
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{   }
block|}
end_class

end_unit

