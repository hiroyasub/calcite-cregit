begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|MaterializationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|TileKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Use of a lattice by the query optimizer.  */
end_comment

begin_class
specifier|public
class|class
name|RelOptLattice
block|{
specifier|public
specifier|final
name|Lattice
name|lattice
decl_stmt|;
specifier|public
specifier|final
name|RelOptTable
name|starRelOptTable
decl_stmt|;
specifier|public
name|RelOptLattice
parameter_list|(
name|Lattice
name|lattice
parameter_list|,
name|RelOptTable
name|starRelOptTable
parameter_list|)
block|{
name|this
operator|.
name|lattice
operator|=
name|lattice
expr_stmt|;
name|this
operator|.
name|starRelOptTable
operator|=
name|starRelOptTable
expr_stmt|;
block|}
specifier|public
name|RelOptTable
name|rootTable
parameter_list|()
block|{
return|return
name|lattice
operator|.
name|rootNode
operator|.
name|relOptTable
argument_list|()
return|;
block|}
comment|/** Rewrites a relational expression to use a lattice.    *    *<p>Returns null if a rewrite is not possible.    *    * @param node Relational expression    * @return Rewritten query    */
specifier|public
name|RelNode
name|rewrite
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|RelOptMaterialization
operator|.
name|tryUseStar
argument_list|(
name|node
argument_list|,
name|starRelOptTable
argument_list|)
return|;
block|}
comment|/** Retrieves a materialized table that will satisfy an aggregate query on    * the star table.    *    *<p>The current implementation creates a materialization and populates it,    * provided that {@link Lattice#auto} is true.    *    *<p>Future implementations might return materializations at a different    * level of aggregation, from which the desired result can be obtained by    * rolling up.    *    * @param planner Current planner    * @param groupSet Grouping key    * @param measureList Calls to aggregate functions    * @return Materialized table    */
specifier|public
name|Pair
argument_list|<
name|CalciteSchema
operator|.
name|TableEntry
argument_list|,
name|TileKey
argument_list|>
name|getAggregate
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|Lattice
operator|.
name|Measure
argument_list|>
name|measureList
parameter_list|)
block|{
specifier|final
name|CalciteConnectionConfig
name|config
init|=
name|planner
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|CalciteConnectionConfig
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|MaterializationService
name|service
init|=
name|MaterializationService
operator|.
name|instance
argument_list|()
decl_stmt|;
name|boolean
name|create
init|=
name|lattice
operator|.
name|auto
operator|&&
name|config
operator|.
name|createMaterializations
argument_list|()
decl_stmt|;
specifier|final
name|CalciteSchema
name|schema
init|=
name|starRelOptTable
operator|.
name|unwrap
argument_list|(
name|CalciteSchema
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|service
operator|.
name|defineTile
argument_list|(
name|lattice
argument_list|,
name|groupSet
argument_list|,
name|measureList
argument_list|,
name|schema
argument_list|,
name|create
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

