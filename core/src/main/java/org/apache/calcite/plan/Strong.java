begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Utilities for strong predicates.  *  *<p>A predicate is strong (or null-rejecting) if it is UNKNOWN if any of its  * inputs is UNKNOWN.</p>  *  *<p>By the way, UNKNOWN is just the boolean form of NULL.</p>  *  *<p>Examples:</p>  *<ul>  *<li>{@code UNKNOWN} is strong  *<li>{@code c = 1} is strong  *<li>{@code c IS NULL} is not strong. (It always returns TRUE or FALSE.)  *<li>{@code p1 AND p2} is strong if p1 or p2 are strong  *<li>{@code p1 OR p2} is strong if p1 and p2 are strong  *<li>{@code c1 = 1 OR c2 IS NULL} is strong on c1 but not c2  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|Strong
block|{
specifier|private
specifier|final
name|BitSet
name|nullColumns
decl_stmt|;
specifier|private
name|Strong
parameter_list|(
name|BitSet
name|nullColumns
parameter_list|)
block|{
name|this
operator|.
name|nullColumns
operator|=
name|nullColumns
expr_stmt|;
block|}
specifier|public
specifier|static
name|Strong
name|of
parameter_list|(
name|BitSet
name|nullColumns
parameter_list|)
block|{
return|return
operator|new
name|Strong
argument_list|(
name|nullColumns
argument_list|)
return|;
block|}
comment|/** Returns whether the analyzed expression will return null if a given set    * of input columns are null. */
specifier|public
specifier|static
name|boolean
name|is
parameter_list|(
name|RexNode
name|node
parameter_list|,
name|BitSet
name|nullColumns
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|nullColumns
argument_list|)
operator|.
name|strong
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|strong
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
return|return
operator|(
operator|(
name|RexLiteral
operator|)
name|node
operator|)
operator|.
name|getValue
argument_list|()
operator|==
literal|null
return|;
case|case
name|IS_TRUE
case|:
case|case
name|IS_NOT_NULL
case|:
case|case
name|AND
case|:
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|anyStrong
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
case|case
name|OR
case|:
return|return
name|allStrong
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
case|case
name|INPUT_REF
case|:
return|return
name|nullColumns
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|node
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|allStrong
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
if|if
condition|(
operator|!
name|strong
argument_list|(
name|operand
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|anyStrong
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
if|if
condition|(
name|strong
argument_list|(
name|operand
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_comment
comment|// End Strong.java
end_comment

end_unit

