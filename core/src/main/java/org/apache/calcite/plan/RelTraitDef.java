begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * RelTraitDef represents a class of {@link RelTrait}s. Implementations of  * RelTraitDef may be singletons under the following conditions:  *  *<ol>  *<li>if the set of all possible associated RelTraits is finite and fixed (e.g.  * all RelTraits for this RelTraitDef are known at compile time). For example,  * the CallingConvention trait meets this requirement, because CallingConvention  * is effectively an enumeration.</li>  *<li>Either  *  *<ul>  *<li> {@link #canConvert(RelOptPlanner, RelTrait, RelTrait)} and  * {@link #convert(RelOptPlanner, RelNode, RelTrait, boolean)} do not require  * planner-instance-specific information,<b>or</b></li>  *  *<li>the RelTraitDef manages separate sets of conversion data internally. See  * {@link ConventionTraitDef} for an example of this.</li>  *</ul>  *</li>  *</ol>  *  *<p>Otherwise, a new instance of RelTraitDef must be constructed and  * registered with each new planner instantiated.</p>  *  * @param<T> Trait that this trait definition is based upon  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RelTraitDef
parameter_list|<
name|T
extends|extends
name|RelTrait
parameter_list|>
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|canonicalMap
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|load
parameter_list|(
annotation|@
name|Nonnull
name|T
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|key
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/** Cache of composite traits.    *    *<p>Uses soft values to allow GC.    *    *<p>You can look up using a {@link RelCompositeTrait} whose constituent    * traits are not canonized.    */
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|Object
argument_list|,
name|RelCompositeTrait
argument_list|>
name|canonicalCompositeMap
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|RelCompositeTrait
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelCompositeTrait
name|load
parameter_list|(
annotation|@
name|Nonnull
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|RelCompositeTrait
condition|)
block|{
return|return
operator|(
name|RelCompositeTrait
operator|)
name|key
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|RelMultipleTrait
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|RelMultipleTrait
argument_list|>
operator|)
name|key
decl_stmt|;
specifier|final
name|RelTraitDef
name|def
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTraitDef
argument_list|()
decl_stmt|;
return|return
operator|(
name|RelCompositeTrait
operator|)
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|def
argument_list|,
name|list
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|RelTraitDef
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Whether a relational expression may possess more than one instance of    * this trait simultaneously.    *    *<p>A subset has only one instance of a trait.</p>    */
specifier|public
name|boolean
name|multiple
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * @return the specific RelTrait type associated with this RelTraitDef.    */
specifier|public
specifier|abstract
name|Class
argument_list|<
name|T
argument_list|>
name|getTraitClass
parameter_list|()
function_decl|;
comment|/**    * @return a simple name for this RelTraitDef (for use in    * {@link org.apache.calcite.rel.RelNode#explain}).    */
specifier|public
specifier|abstract
name|String
name|getSimpleName
parameter_list|()
function_decl|;
comment|/**    * Takes an arbitrary RelTrait and returns the canonical representation of    * that RelTrait. Canonized RelTrait objects may always be compared using    * the equality operator (<code>==</code>).    *    *<p>If an equal RelTrait has already been canonized and is still in use,    * it will be returned. Otherwise, the given RelTrait is made canonical and    * returned.    *    * @param trait a possibly non-canonical RelTrait    * @return a canonical RelTrait.    */
specifier|public
specifier|final
name|T
name|canonize
parameter_list|(
name|T
name|trait
parameter_list|)
block|{
if|if
condition|(
name|trait
operator|instanceof
name|RelCompositeTrait
condition|)
block|{
name|RelCompositeTrait
name|relCompositeTrait
init|=
operator|(
name|RelCompositeTrait
operator|)
name|trait
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|canonizeComposite
argument_list|(
name|relCompositeTrait
argument_list|)
return|;
block|}
assert|assert
name|getTraitClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|trait
argument_list|)
operator|:
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" cannot canonize a "
operator|+
name|trait
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
assert|;
return|return
name|canonicalMap
operator|.
name|getUnchecked
argument_list|(
name|trait
argument_list|)
return|;
block|}
specifier|final
name|RelCompositeTrait
name|canonizeComposite
parameter_list|(
name|RelCompositeTrait
name|compositeTrait
parameter_list|)
block|{
return|return
name|canonicalCompositeMap
operator|.
name|getUnchecked
argument_list|(
name|compositeTrait
argument_list|)
return|;
block|}
comment|/**    * Converts the given RelNode to the given RelTrait.    *    * @param planner                     the planner requesting the conversion    * @param rel                         RelNode to convert    * @param toTrait                     RelTrait to convert to    * @param allowInfiniteCostConverters flag indicating whether infinite cost    *                                    converters are allowed    * @return a converted RelNode or null if conversion is not possible    */
specifier|public
specifier|abstract
name|RelNode
name|convert
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|T
name|toTrait
parameter_list|,
name|boolean
name|allowInfiniteCostConverters
parameter_list|)
function_decl|;
comment|/**    * Tests whether the given RelTrait can be converted to another RelTrait.    *    * @param planner   the planner requesting the conversion test    * @param fromTrait the RelTrait to convert from    * @param toTrait   the RelTrait to convert to    * @return true if fromTrait can be converted to toTrait    */
specifier|public
specifier|abstract
name|boolean
name|canConvert
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|T
name|fromTrait
parameter_list|,
name|T
name|toTrait
parameter_list|)
function_decl|;
comment|/**    * Provides notification of the registration of a particular    * {@link ConverterRule} with a {@link RelOptPlanner}. The default    * implementation does nothing.    *    * @param planner       the planner registering the rule    * @param converterRule the registered converter rule    */
specifier|public
name|void
name|registerConverterRule
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|ConverterRule
name|converterRule
parameter_list|)
block|{
block|}
comment|/**    * Provides notification that a particular {@link ConverterRule} has been    * de-registered from a {@link RelOptPlanner}. The default implementation    * does nothing.    *    * @param planner       the planner registering the rule    * @param converterRule the registered converter rule    */
specifier|public
name|void
name|deregisterConverterRule
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|ConverterRule
name|converterRule
parameter_list|)
block|{
block|}
comment|/**    * Returns the default member of this trait.    */
specifier|public
specifier|abstract
name|T
name|getDefault
parameter_list|()
function_decl|;
block|}
end_class

begin_comment
comment|// End RelTraitDef.java
end_comment

end_unit

