begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|CalcitePrepareImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableRelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableRels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexExecutorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexSimplify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|PredicateImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ControlFlowException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
operator|.
name|andNot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
operator|.
name|removeAll
import|;
end_import

begin_comment
comment|/**  * Substitutes part of a tree of relational expressions with another tree.  *  *<p>The call {@code new SubstitutionVisitor(target, query).go(replacement))}  * will return {@code query} with every occurrence of {@code target} replaced  * by {@code replacement}.</p>  *  *<p>The following example shows how {@code SubstitutionVisitor} can be used  * for materialized view recognition.</p>  *  *<ul>  *<li>query = SELECT a, c FROM t WHERE x = 5 AND b = 4</li>  *<li>target = SELECT a, b, c FROM t WHERE x = 5</li>  *<li>replacement = SELECT * FROM mv</li>  *<li>result = SELECT a, c FROM mv WHERE b = 4</li>  *</ul>  *  *<p>Note that {@code result} uses the materialized view table {@code mv} and a  * simplified condition {@code b = 4}.</p>  *  *<p>Uses a bottom-up matching algorithm. Nodes do not need to be identical.  * At each level, returns the residue.</p>  *  *<p>The inputs must only include the core relational operators:  * {@link org.apache.calcite.rel.logical.LogicalTableScan},  * {@link org.apache.calcite.rel.logical.LogicalFilter},  * {@link org.apache.calcite.rel.logical.LogicalProject},  * {@link org.apache.calcite.rel.logical.LogicalJoin},  * {@link org.apache.calcite.rel.logical.LogicalUnion},  * {@link org.apache.calcite.rel.logical.LogicalAggregate}.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SubstitutionVisitor
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
name|CalcitePrepareImpl
operator|.
name|DEBUG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|CalciteTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|UnifyRule
argument_list|>
name|DEFAULT_RULES
init|=
name|ImmutableList
operator|.
expr|<
name|UnifyRule
operator|>
name|of
argument_list|(
name|TrivialRule
operator|.
name|INSTANCE
argument_list|,
name|ScanToProjectUnifyRule
operator|.
name|INSTANCE
argument_list|,
name|ProjectToProjectUnifyRule
operator|.
name|INSTANCE
argument_list|,
name|FilterToProjectUnifyRule
operator|.
name|INSTANCE
argument_list|,
comment|//          ProjectToFilterUnifyRule.INSTANCE,
comment|//          FilterToFilterUnifyRule.INSTANCE,
name|AggregateToAggregateUnifyRule
operator|.
name|INSTANCE
argument_list|,
name|AggregateOnProjectToAggregateUnifyRule
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
comment|/**    * Factory for a builder for relational expressions.    */
specifier|protected
specifier|final
name|RelBuilder
name|relBuilder
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|UnifyRule
argument_list|>
name|rules
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Pair
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
argument_list|,
name|List
argument_list|<
name|UnifyRule
argument_list|>
argument_list|>
name|ruleMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RelOptCluster
name|cluster
decl_stmt|;
specifier|private
specifier|final
name|RexSimplify
name|simplify
decl_stmt|;
specifier|private
specifier|final
name|Holder
name|query
decl_stmt|;
specifier|private
specifier|final
name|MutableRel
name|target
decl_stmt|;
comment|/**    * Nodes in {@link #target} that have no children.    */
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|targetLeaves
decl_stmt|;
comment|/**    * Nodes in {@link #query} that have no children.    */
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|queryLeaves
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|MutableRel
argument_list|,
name|MutableRel
argument_list|>
name|replacementMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Multimap
argument_list|<
name|MutableRel
argument_list|,
name|MutableRel
argument_list|>
name|equivalents
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/** Workspace while rule is being matched.    * Careful, re-entrant!    * Assumes no rule needs more than 2 slots. */
specifier|protected
specifier|final
name|MutableRel
index|[]
name|slots
init|=
operator|new
name|MutableRel
index|[
literal|2
index|]
decl_stmt|;
comment|/** Creates a SubstitutionVisitor with the default rule set. */
specifier|public
name|SubstitutionVisitor
parameter_list|(
name|RelNode
name|target_
parameter_list|,
name|RelNode
name|query_
parameter_list|)
block|{
name|this
argument_list|(
name|target_
argument_list|,
name|query_
argument_list|,
name|DEFAULT_RULES
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a SubstitutionVisitor with the default logical builder. */
specifier|public
name|SubstitutionVisitor
parameter_list|(
name|RelNode
name|target_
parameter_list|,
name|RelNode
name|query_
parameter_list|,
name|ImmutableList
argument_list|<
name|UnifyRule
argument_list|>
name|rules
parameter_list|)
block|{
name|this
argument_list|(
name|target_
argument_list|,
name|query_
argument_list|,
name|rules
argument_list|,
name|RelFactories
operator|.
name|LOGICAL_BUILDER
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SubstitutionVisitor
parameter_list|(
name|RelNode
name|target_
parameter_list|,
name|RelNode
name|query_
parameter_list|,
name|ImmutableList
argument_list|<
name|UnifyRule
argument_list|>
name|rules
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|target_
operator|.
name|getCluster
argument_list|()
expr_stmt|;
specifier|final
name|RexExecutor
name|executor
init|=
name|Util
operator|.
name|first
argument_list|(
name|cluster
operator|.
name|getPlanner
argument_list|()
operator|.
name|getExecutor
argument_list|()
argument_list|,
name|RexUtil
operator|.
name|EXECUTOR
argument_list|)
decl_stmt|;
name|this
operator|.
name|simplify
operator|=
operator|new
name|RexSimplify
argument_list|(
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|rules
operator|=
name|rules
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|Holder
operator|.
name|of
argument_list|(
name|MutableRels
operator|.
name|toMutable
argument_list|(
name|query_
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|MutableRels
operator|.
name|toMutable
argument_list|(
name|target_
argument_list|)
expr_stmt|;
name|this
operator|.
name|relBuilder
operator|=
name|relBuilderFactory
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|MutableRel
argument_list|>
name|parents
init|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|allNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|MutableRelVisitor
name|visitor
init|=
operator|new
name|MutableRelVisitor
argument_list|()
block|{
specifier|public
name|void
name|visit
parameter_list|(
name|MutableRel
name|node
parameter_list|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|allNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|visitor
operator|.
name|go
argument_list|(
name|target
argument_list|)
expr_stmt|;
comment|// Populate the list of leaves in the tree under "target".
comment|// Leaves are all nodes that are not parents.
comment|// For determinism, it is important that the list is in scan order.
name|allNodes
operator|.
name|removeAll
argument_list|(
name|parents
argument_list|)
expr_stmt|;
name|targetLeaves
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|allNodes
argument_list|)
expr_stmt|;
name|allNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|go
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|allNodes
operator|.
name|removeAll
argument_list|(
name|parents
argument_list|)
expr_stmt|;
name|queryLeaves
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|allNodes
argument_list|)
expr_stmt|;
block|}
name|void
name|register
parameter_list|(
name|MutableRel
name|result
parameter_list|,
name|MutableRel
name|query
parameter_list|)
block|{
block|}
comment|/**    * Maps a condition onto a target.    *    *<p>If condition is stronger than target, returns the residue.    * If it is equal to target, returns the expression that evaluates to    * the constant {@code true}. If it is weaker than target, returns    * {@code null}.</p>    *    *<p>The terms satisfy the relation</p>    *    *<pre>    *     {@code condition = target AND residue}    *</pre>    *    *<p>and {@code residue} must be as weak as possible.</p>    *    *<p>Example #1: condition stronger than target</p>    *<ul>    *<li>condition: x = 1 AND y = 2</li>    *<li>target: x = 1</li>    *<li>residue: y = 2</li>    *</ul>    *    *<p>Note that residue {@code x&gt; 0 AND y = 2} would also satisfy the    * relation {@code condition = target AND residue} but is stronger than    * necessary, so we prefer {@code y = 2}.</p>    *    *<p>Example #2: target weaker than condition (valid, but not currently    * implemented)</p>    *<ul>    *<li>condition: x = 1</li>    *<li>target: x = 1 OR z = 3</li>    *<li>residue: x = 1</li>    *</ul>    *    *<p>Example #3: condition and target are equivalent</p>    *<ul>    *<li>condition: x = 1 AND y = 2</li>    *<li>target: y = 2 AND x = 1</li>    *<li>residue: TRUE</li>    *</ul>    *    *<p>Example #4: condition weaker than target</p>    *<ul>    *<li>condition: x = 1</li>    *<li>target: x = 1 AND y = 2</li>    *<li>residue: null (i.e. no match)</li>    *</ul>    *    *<p>There are many other possible examples. It amounts to solving    * whether {@code condition AND NOT target} can ever evaluate to    * true, and therefore is a form of the NP-complete    *<a href="http://en.wikipedia.org/wiki/Satisfiability">Satisfiability</a>    * problem.</p>    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|RexNode
name|splitFilter
parameter_list|(
specifier|final
name|RexSimplify
name|simplify
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|RexNode
name|target
parameter_list|)
block|{
comment|// First, try splitting into ORs.
comment|// Given target    c1 OR c2 OR c3 OR c4
comment|// and condition   c2 OR c4
comment|// residue is      c2 OR c4
comment|// Also deals with case target [x] condition [x] yields residue [true].
name|RexNode
name|z
init|=
name|splitOr
argument_list|(
name|simplify
operator|.
name|rexBuilder
argument_list|,
name|condition
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|z
operator|!=
literal|null
condition|)
block|{
return|return
name|z
return|;
block|}
if|if
condition|(
name|isEquivalent
argument_list|(
name|simplify
operator|.
name|rexBuilder
argument_list|,
name|condition
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return
name|simplify
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
name|RexNode
name|x
init|=
name|andNot
argument_list|(
name|simplify
operator|.
name|rexBuilder
argument_list|,
name|target
argument_list|,
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|mayBeSatisfiable
argument_list|(
name|x
argument_list|)
condition|)
block|{
name|RexNode
name|x2
init|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|simplify
operator|.
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|condition
argument_list|,
name|target
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RexNode
name|r
init|=
name|simplify
operator|.
name|withUnknownAsFalse
argument_list|(
literal|true
argument_list|)
operator|.
name|simplify
argument_list|(
name|x2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlwaysFalse
argument_list|()
operator|&&
name|isEquivalent
argument_list|(
name|simplify
operator|.
name|rexBuilder
argument_list|,
name|condition
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjs
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|target
argument_list|)
control|)
block|{
name|removeAll
argument_list|(
name|conjs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|simplify
operator|.
name|rexBuilder
argument_list|,
name|conjs
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|RexNode
name|splitOr
parameter_list|(
specifier|final
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|RexNode
name|target
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|conditions
init|=
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|condition
argument_list|)
decl_stmt|;
name|int
name|conditionsLength
init|=
name|conditions
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|targetsLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|target
argument_list|)
control|)
block|{
name|removeAll
argument_list|(
name|conditions
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|targetsLength
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|conditions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|conditionsLength
operator|==
name|targetsLength
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|else if
condition|(
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|condition
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEquivalent
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|RexNode
name|target
parameter_list|)
block|{
comment|// Example:
comment|//  e: x = 1 AND y = 2 AND z = 3 AND NOT (x = 1 AND y = 2)
comment|//  disjunctions: {x = 1, y = 2, z = 3}
comment|//  notDisjunctions: {x = 1 AND y = 2}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|conditionDisjunctions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|RexUtil
operator|.
name|strings
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|condition
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|targetDisjunctions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|RexUtil
operator|.
name|strings
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|target
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditionDisjunctions
operator|.
name|equals
argument_list|(
name|targetDisjunctions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether a boolean expression ever returns true.    *    *<p>This method may give false positives. For instance, it will say    * that {@code x = 5 AND x> 10} is satisfiable, because at present it    * cannot prove that it is not.</p>    */
specifier|public
specifier|static
name|boolean
name|mayBeSatisfiable
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
comment|// Example:
comment|//  e: x = 1 AND y = 2 AND z = 3 AND NOT (x = 1 AND y = 2)
comment|//  disjunctions: {x = 1, y = 2, z = 3}
comment|//  notDisjunctions: {x = 1 AND y = 2}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|disjunctions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notDisjunctions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|e
argument_list|,
name|disjunctions
argument_list|,
name|notDisjunctions
argument_list|)
expr_stmt|;
comment|// If there is a single FALSE or NOT TRUE, the whole expression is
comment|// always false.
for|for
control|(
name|RexNode
name|disjunction
range|:
name|disjunctions
control|)
block|{
switch|switch
condition|(
name|disjunction
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
operator|!
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|disjunction
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
for|for
control|(
name|RexNode
name|disjunction
range|:
name|notDisjunctions
control|)
block|{
switch|switch
condition|(
name|disjunction
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|disjunction
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// If one of the not-disjunctions is a disjunction that is wholly
comment|// contained in the disjunctions list, the expression is not
comment|// satisfiable.
comment|//
comment|// Example #1. x AND y AND z AND NOT (x AND y)  - not satisfiable
comment|// Example #2. x AND y AND NOT (x AND y)        - not satisfiable
comment|// Example #3. x AND y AND NOT (x AND y AND z)  - may be satisfiable
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notDisjunctions
control|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|disjunctions2
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|notDisjunction
argument_list|)
decl_stmt|;
if|if
condition|(
name|disjunctions
operator|.
name|containsAll
argument_list|(
name|disjunctions2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|RelNode
name|go0
parameter_list|(
name|RelNode
name|replacement_
parameter_list|)
block|{
assert|assert
literal|false
assert|;
comment|// not called
name|MutableRel
name|replacement
init|=
name|MutableRels
operator|.
name|toMutable
argument_list|(
name|replacement_
argument_list|)
decl_stmt|;
assert|assert
name|equalType
argument_list|(
literal|"target"
argument_list|,
name|target
argument_list|,
literal|"replacement"
argument_list|,
name|replacement
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
name|replacementMap
operator|.
name|put
argument_list|(
name|target
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
specifier|final
name|UnifyResult
name|unifyResult
init|=
name|matchRecurse
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|unifyResult
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|MutableRel
name|node0
init|=
name|unifyResult
operator|.
name|result
decl_stmt|;
name|MutableRel
name|node
init|=
name|node0
decl_stmt|;
comment|// replaceAncestors(node0);
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Convert: query:\n"
operator|+
name|query
operator|.
name|deep
argument_list|()
operator|+
literal|"\nunify.query:\n"
operator|+
name|unifyResult
operator|.
name|call
operator|.
name|query
operator|.
name|deep
argument_list|()
operator|+
literal|"\nunify.result:\n"
operator|+
name|unifyResult
operator|.
name|result
operator|.
name|deep
argument_list|()
operator|+
literal|"\nunify.target:\n"
operator|+
name|unifyResult
operator|.
name|call
operator|.
name|target
operator|.
name|deep
argument_list|()
operator|+
literal|"\nnode0:\n"
operator|+
name|node0
operator|.
name|deep
argument_list|()
operator|+
literal|"\nnode:\n"
operator|+
name|node
operator|.
name|deep
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|MutableRels
operator|.
name|fromMutable
argument_list|(
name|node
argument_list|,
name|relBuilder
argument_list|)
return|;
block|}
comment|/**    * Returns a list of all possible rels that result from substituting the    * matched RelNode with the replacement RelNode within the query.    *    *<p>For example, the substitution result of A join B, while A and B    * are both a qualified match for replacement R, is R join B, R join R,    * A join R.    */
specifier|public
name|List
argument_list|<
name|RelNode
argument_list|>
name|go
parameter_list|(
name|RelNode
name|replacement_
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Replacement
argument_list|>
argument_list|>
name|matches
init|=
name|go
argument_list|(
name|MutableRels
operator|.
name|toMutable
argument_list|(
name|replacement_
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|List
argument_list|<
name|RelNode
argument_list|>
name|sub
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|sub
operator|.
name|add
argument_list|(
name|MutableRels
operator|.
name|fromMutable
argument_list|(
name|query
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|reverseSubstitute
argument_list|(
name|relBuilder
argument_list|,
name|query
argument_list|,
name|matches
argument_list|,
name|sub
argument_list|,
literal|0
argument_list|,
name|matches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sub
return|;
block|}
comment|/**    * Substitutes the query with replacement whenever possible but meanwhile    * keeps track of all the substitutions and their original rel before    * replacement, so that in later processing stage, the replacement can be    * recovered individually to produce a list of all possible rels with    * substitution in different places.    */
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Replacement
argument_list|>
argument_list|>
name|go
parameter_list|(
name|MutableRel
name|replacement
parameter_list|)
block|{
assert|assert
name|equalType
argument_list|(
literal|"target"
argument_list|,
name|target
argument_list|,
literal|"replacement"
argument_list|,
name|replacement
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|queryDescendants
init|=
name|MutableRels
operator|.
name|descendants
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|targetDescendants
init|=
name|MutableRels
operator|.
name|descendants
argument_list|(
name|target
argument_list|)
decl_stmt|;
comment|// Populate "equivalents" with (q, t) for each query descendant q and
comment|// target descendant t that are equal.
specifier|final
name|Map
argument_list|<
name|MutableRel
argument_list|,
name|MutableRel
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|MutableRel
name|queryDescendant
range|:
name|queryDescendants
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|queryDescendant
argument_list|,
name|queryDescendant
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MutableRel
name|targetDescendant
range|:
name|targetDescendants
control|)
block|{
name|MutableRel
name|queryDescendant
init|=
name|map
operator|.
name|get
argument_list|(
name|targetDescendant
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryDescendant
operator|!=
literal|null
condition|)
block|{
assert|assert
name|queryDescendant
operator|.
name|rowType
operator|.
name|equals
argument_list|(
name|targetDescendant
operator|.
name|rowType
argument_list|)
assert|;
name|equivalents
operator|.
name|put
argument_list|(
name|queryDescendant
argument_list|,
name|targetDescendant
argument_list|)
expr_stmt|;
block|}
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Replacement
argument_list|>
name|attempted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Replacement
argument_list|>
argument_list|>
name|substitutions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|MutableRel
name|queryDescendant
init|=
name|query
decl_stmt|;
name|outer
label|:
while|while
condition|(
name|queryDescendant
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Replacement
name|r
range|:
name|attempted
control|)
block|{
if|if
condition|(
name|queryDescendant
operator|==
name|r
operator|.
name|after
condition|)
block|{
comment|// This node has been replaced by previous iterations in the
comment|// hope to match its ancestors, so the node itself should not
comment|// be matched again.
name|queryDescendant
operator|=
name|MutableRels
operator|.
name|preOrderTraverseNext
argument_list|(
name|queryDescendant
argument_list|)
expr_stmt|;
continue|continue
name|outer
continue|;
block|}
block|}
specifier|final
name|MutableRel
name|next
init|=
name|MutableRels
operator|.
name|preOrderTraverseNext
argument_list|(
name|queryDescendant
argument_list|)
decl_stmt|;
specifier|final
name|MutableRel
name|childOrNext
init|=
name|queryDescendant
operator|.
name|getInputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|next
else|:
name|queryDescendant
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|MutableRel
name|targetDescendant
range|:
name|targetDescendants
control|)
block|{
for|for
control|(
name|UnifyRule
name|rule
range|:
name|applicableRules
argument_list|(
name|queryDescendant
argument_list|,
name|targetDescendant
argument_list|)
control|)
block|{
name|UnifyRuleCall
name|call
init|=
name|rule
operator|.
name|match
argument_list|(
name|this
argument_list|,
name|queryDescendant
argument_list|,
name|targetDescendant
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
block|{
specifier|final
name|UnifyResult
name|result
init|=
name|rule
operator|.
name|apply
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|attempted
operator|.
name|add
argument_list|(
operator|new
name|Replacement
argument_list|(
name|result
operator|.
name|call
operator|.
name|query
argument_list|,
name|result
operator|.
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|MutableRel
name|parent
init|=
name|result
operator|.
name|call
operator|.
name|query
operator|.
name|replaceInParent
argument_list|(
name|result
operator|.
name|result
argument_list|)
decl_stmt|;
comment|// Replace previous equivalents with new equivalents, higher up
comment|// the tree.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rule
operator|.
name|slotCount
condition|;
name|i
operator|++
control|)
block|{
name|Collection
argument_list|<
name|MutableRel
argument_list|>
name|equi
init|=
name|equivalents
operator|.
name|get
argument_list|(
name|slots
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|equi
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|equivalents
operator|.
name|remove
argument_list|(
name|slots
index|[
name|i
index|]
argument_list|,
name|equi
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|result
operator|.
name|result
operator|.
name|rowType
operator|.
name|equals
argument_list|(
name|result
operator|.
name|call
operator|.
name|query
operator|.
name|rowType
argument_list|)
operator|:
name|Pair
operator|.
name|of
argument_list|(
name|result
operator|.
name|result
argument_list|,
name|result
operator|.
name|call
operator|.
name|query
argument_list|)
assert|;
name|equivalents
operator|.
name|put
argument_list|(
name|result
operator|.
name|result
argument_list|,
name|result
operator|.
name|call
operator|.
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetDescendant
operator|==
name|target
condition|)
block|{
comment|// A real substitution happens. We purge the attempted
comment|// replacement list and add them into substitution list.
comment|// Meanwhile we stop matching the descendants and jump
comment|// to the next subtree in pre-order traversal.
if|if
condition|(
operator|!
name|target
operator|.
name|equals
argument_list|(
name|replacement
argument_list|)
condition|)
block|{
name|Replacement
name|r
init|=
name|replace
argument_list|(
name|query
operator|.
name|getInput
argument_list|()
argument_list|,
name|target
argument_list|,
name|replacement
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|r
operator|!=
literal|null
operator|:
name|rule
operator|+
literal|"should have returned a result containing the target."
assert|;
name|attempted
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|substitutions
operator|.
name|add
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|attempted
argument_list|)
argument_list|)
expr_stmt|;
name|attempted
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queryDescendant
operator|=
name|next
expr_stmt|;
continue|continue
name|outer
continue|;
block|}
comment|// We will try walking the query tree all over again to see
comment|// if there can be any substitutions after the replacement
comment|// attempt.
break|break
name|outer
break|;
block|}
block|}
block|}
block|}
name|queryDescendant
operator|=
name|childOrNext
expr_stmt|;
block|}
comment|// Quit the entire loop if:
comment|// 1) we have walked the entire query tree with one or more successful
comment|//    substitutions, thus count != 0&& attempted.isEmpty();
comment|// 2) we have walked the entire query tree but have made no replacement
comment|//    attempt, thus count == 0&& attempted.isEmpty();
comment|// 3) we had done some replacement attempt in a previous walk, but in
comment|//    this one we have not found any potential matches or substitutions,
comment|//    thus count == 0&& !attempted.isEmpty().
if|if
condition|(
name|count
operator|==
literal|0
operator|||
name|attempted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|attempted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We had done some replacement attempt in the previous walk, but that
comment|// did not lead to any substitutions in this walk, so we need to recover
comment|// the replacement.
name|undoReplacement
argument_list|(
name|attempted
argument_list|)
expr_stmt|;
block|}
return|return
name|substitutions
return|;
block|}
comment|/**    * Represents a replacement action: before&rarr; after.    */
specifier|static
class|class
name|Replacement
block|{
specifier|final
name|MutableRel
name|before
decl_stmt|;
specifier|final
name|MutableRel
name|after
decl_stmt|;
name|Replacement
parameter_list|(
name|MutableRel
name|before
parameter_list|,
name|MutableRel
name|after
parameter_list|)
block|{
name|this
operator|.
name|before
operator|=
name|before
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
block|}
block|}
comment|/** Within a relational expression {@code query}, replaces occurrences of    * {@code find} with {@code replace}.    *    *<p>Assumes relational expressions (and their descendants) are not null.    * Does not handle cycles. */
specifier|public
specifier|static
name|Replacement
name|replace
parameter_list|(
name|MutableRel
name|query
parameter_list|,
name|MutableRel
name|find
parameter_list|,
name|MutableRel
name|replace
parameter_list|)
block|{
if|if
condition|(
name|find
operator|.
name|equals
argument_list|(
name|replace
argument_list|)
condition|)
block|{
comment|// Short-cut common case.
return|return
literal|null
return|;
block|}
assert|assert
name|equalType
argument_list|(
literal|"find"
argument_list|,
name|find
argument_list|,
literal|"replace"
argument_list|,
name|replace
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
return|return
name|replaceRecurse
argument_list|(
name|query
argument_list|,
name|find
argument_list|,
name|replace
argument_list|)
return|;
block|}
comment|/** Helper for {@link #replace}. */
specifier|private
specifier|static
name|Replacement
name|replaceRecurse
parameter_list|(
name|MutableRel
name|query
parameter_list|,
name|MutableRel
name|find
parameter_list|,
name|MutableRel
name|replace
parameter_list|)
block|{
if|if
condition|(
name|find
operator|.
name|equals
argument_list|(
name|query
argument_list|)
condition|)
block|{
name|query
operator|.
name|replaceInParent
argument_list|(
name|replace
argument_list|)
expr_stmt|;
return|return
operator|new
name|Replacement
argument_list|(
name|query
argument_list|,
name|replace
argument_list|)
return|;
block|}
for|for
control|(
name|MutableRel
name|input
range|:
name|query
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|Replacement
name|r
init|=
name|replaceRecurse
argument_list|(
name|input
argument_list|,
name|find
argument_list|,
name|replace
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
return|return
name|r
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|undoReplacement
parameter_list|(
name|List
argument_list|<
name|Replacement
argument_list|>
name|replacement
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|replacement
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Replacement
name|r
init|=
name|replacement
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|r
operator|.
name|after
operator|.
name|replaceInParent
argument_list|(
name|r
operator|.
name|before
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|redoReplacement
parameter_list|(
name|List
argument_list|<
name|Replacement
argument_list|>
name|replacement
parameter_list|)
block|{
for|for
control|(
name|Replacement
name|r
range|:
name|replacement
control|)
block|{
name|r
operator|.
name|before
operator|.
name|replaceInParent
argument_list|(
name|r
operator|.
name|after
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|reverseSubstitute
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|Holder
name|query
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Replacement
argument_list|>
argument_list|>
name|matches
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|sub
parameter_list|,
name|int
name|replaceCount
parameter_list|,
name|int
name|maxCount
parameter_list|)
block|{
if|if
condition|(
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Replacement
argument_list|>
argument_list|>
name|rem
init|=
name|matches
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|matches
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|reverseSubstitute
argument_list|(
name|relBuilder
argument_list|,
name|query
argument_list|,
name|rem
argument_list|,
name|sub
argument_list|,
name|replaceCount
argument_list|,
name|maxCount
argument_list|)
expr_stmt|;
name|undoReplacement
argument_list|(
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|replaceCount
operator|<
name|maxCount
condition|)
block|{
name|sub
operator|.
name|add
argument_list|(
name|MutableRels
operator|.
name|fromMutable
argument_list|(
name|query
operator|.
name|getInput
argument_list|()
argument_list|,
name|relBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reverseSubstitute
argument_list|(
name|relBuilder
argument_list|,
name|query
argument_list|,
name|rem
argument_list|,
name|sub
argument_list|,
name|replaceCount
argument_list|,
name|maxCount
argument_list|)
expr_stmt|;
name|redoReplacement
argument_list|(
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|UnifyResult
name|matchRecurse
parameter_list|(
name|MutableRel
name|target
parameter_list|)
block|{
assert|assert
literal|false
assert|;
comment|// not called
specifier|final
name|List
argument_list|<
name|MutableRel
argument_list|>
name|targetInputs
init|=
name|target
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|MutableRel
name|queryParent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MutableRel
name|targetInput
range|:
name|targetInputs
control|)
block|{
name|UnifyResult
name|unifyResult
init|=
name|matchRecurse
argument_list|(
name|targetInput
argument_list|)
decl_stmt|;
if|if
condition|(
name|unifyResult
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|queryParent
operator|=
name|unifyResult
operator|.
name|call
operator|.
name|query
operator|.
name|replaceInParent
argument_list|(
name|unifyResult
operator|.
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetInputs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|MutableRel
name|queryLeaf
range|:
name|queryLeaves
control|)
block|{
for|for
control|(
name|UnifyRule
name|rule
range|:
name|applicableRules
argument_list|(
name|queryLeaf
argument_list|,
name|target
argument_list|)
control|)
block|{
specifier|final
name|UnifyResult
name|x
init|=
name|apply
argument_list|(
name|rule
argument_list|,
name|queryLeaf
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rule: "
operator|+
name|rule
operator|+
literal|"\nQuery:\n"
operator|+
name|queryParent
operator|+
operator|(
name|x
operator|.
name|call
operator|.
name|query
operator|!=
name|queryParent
condition|?
literal|"\nQuery (original):\n"
operator|+
name|queryParent
else|:
literal|""
operator|)
operator|+
literal|"\nTarget:\n"
operator|+
name|target
operator|.
name|deep
argument_list|()
operator|+
literal|"\nResult:\n"
operator|+
name|x
operator|.
name|result
operator|.
name|deep
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
block|}
block|}
block|}
else|else
block|{
assert|assert
name|queryParent
operator|!=
literal|null
assert|;
for|for
control|(
name|UnifyRule
name|rule
range|:
name|applicableRules
argument_list|(
name|queryParent
argument_list|,
name|target
argument_list|)
control|)
block|{
specifier|final
name|UnifyResult
name|x
init|=
name|apply
argument_list|(
name|rule
argument_list|,
name|queryParent
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rule: "
operator|+
name|rule
operator|+
literal|"\nQuery:\n"
operator|+
name|queryParent
operator|.
name|deep
argument_list|()
operator|+
operator|(
name|x
operator|.
name|call
operator|.
name|query
operator|!=
name|queryParent
condition|?
literal|"\nQuery (original):\n"
operator|+
name|queryParent
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|"\nTarget:\n"
operator|+
name|target
operator|.
name|deep
argument_list|()
operator|+
literal|"\nResult:\n"
operator|+
name|x
operator|.
name|result
operator|.
name|deep
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
block|}
block|}
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unify failed:"
operator|+
literal|"\nQuery:\n"
operator|+
name|queryParent
operator|.
name|toString
argument_list|()
operator|+
literal|"\nTarget:\n"
operator|+
name|target
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRule
name|rule
parameter_list|,
name|MutableRel
name|query
parameter_list|,
name|MutableRel
name|target
parameter_list|)
block|{
specifier|final
name|UnifyRuleCall
name|call
init|=
operator|new
name|UnifyRuleCall
argument_list|(
name|rule
argument_list|,
name|query
argument_list|,
name|target
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|rule
operator|.
name|apply
argument_list|(
name|call
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|UnifyRule
argument_list|>
name|applicableRules
parameter_list|(
name|MutableRel
name|query
parameter_list|,
name|MutableRel
name|target
parameter_list|)
block|{
specifier|final
name|Class
name|queryClass
init|=
name|query
operator|.
name|getClass
argument_list|()
decl_stmt|;
specifier|final
name|Class
name|targetClass
init|=
name|target
operator|.
name|getClass
argument_list|()
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|key
init|=
name|Pair
operator|.
name|of
argument_list|(
name|queryClass
argument_list|,
name|targetClass
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UnifyRule
argument_list|>
name|list
init|=
name|ruleMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|UnifyRule
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|UnifyRule
name|rule
range|:
name|rules
control|)
block|{
comment|//noinspection unchecked
if|if
condition|(
name|mightMatch
argument_list|(
name|rule
argument_list|,
name|queryClass
argument_list|,
name|targetClass
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|ruleMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|boolean
name|mightMatch
parameter_list|(
name|UnifyRule
name|rule
parameter_list|,
name|Class
name|queryClass
parameter_list|,
name|Class
name|targetClass
parameter_list|)
block|{
return|return
name|rule
operator|.
name|queryOperand
operator|.
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|queryClass
argument_list|)
operator|&&
name|rule
operator|.
name|targetOperand
operator|.
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|targetClass
argument_list|)
return|;
block|}
comment|/** Exception thrown to exit a matcher. Not really an error. */
specifier|protected
specifier|static
class|class
name|MatchFailed
extends|extends
name|ControlFlowException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableInstanceNeverThrown"
argument_list|)
specifier|public
specifier|static
specifier|final
name|MatchFailed
name|INSTANCE
init|=
operator|new
name|MatchFailed
argument_list|()
decl_stmt|;
block|}
comment|/** Rule that attempts to match a query relational expression    * against a target relational expression.    *    *<p>The rule declares the query and target types; this allows the    * engine to fire only a few rules in a given context.</p>    */
specifier|protected
specifier|abstract
specifier|static
class|class
name|UnifyRule
block|{
specifier|protected
specifier|final
name|int
name|slotCount
decl_stmt|;
specifier|protected
specifier|final
name|Operand
name|queryOperand
decl_stmt|;
specifier|protected
specifier|final
name|Operand
name|targetOperand
decl_stmt|;
specifier|protected
name|UnifyRule
parameter_list|(
name|int
name|slotCount
parameter_list|,
name|Operand
name|queryOperand
parameter_list|,
name|Operand
name|targetOperand
parameter_list|)
block|{
name|this
operator|.
name|slotCount
operator|=
name|slotCount
expr_stmt|;
name|this
operator|.
name|queryOperand
operator|=
name|queryOperand
expr_stmt|;
name|this
operator|.
name|targetOperand
operator|=
name|targetOperand
expr_stmt|;
block|}
comment|/**      *<p>Applies this rule to a particular node in a query. The goal is      * to convert {@code query} into {@code target}. Before the rule is      * invoked, Calcite has made sure that query's children are equivalent      * to target's children.      *      *<p>There are 3 possible outcomes:</p>      *      *<ul>      *      *<li>{@code query} already exactly matches {@code target}; returns      * {@code target}</li>      *      *<li>{@code query} is sufficiently close to a match for      * {@code target}; returns {@code target}</li>      *      *<li>{@code query} cannot be made to match {@code target}; returns      * null</li>      *      *</ul>      *      *<p>REVIEW: Is possible that we match query PLUS one or more of its      * ancestors?</p>      *      * @param call Input parameters      */
specifier|protected
specifier|abstract
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
function_decl|;
specifier|protected
name|UnifyRuleCall
name|match
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|query
parameter_list|,
name|MutableRel
name|target
parameter_list|)
block|{
if|if
condition|(
name|queryOperand
operator|.
name|matches
argument_list|(
name|visitor
argument_list|,
name|query
argument_list|)
condition|)
block|{
if|if
condition|(
name|targetOperand
operator|.
name|matches
argument_list|(
name|visitor
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return
name|visitor
operator|.
expr|new
name|UnifyRuleCall
argument_list|(
name|this
argument_list|,
name|query
argument_list|,
name|target
argument_list|,
name|copy
argument_list|(
name|visitor
operator|.
name|slots
argument_list|,
name|slotCount
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|copy
parameter_list|(
name|E
index|[]
name|slots
parameter_list|,
name|int
name|slotCount
parameter_list|)
block|{
comment|// Optimize if there are 0 or 1 slots.
switch|switch
condition|(
name|slotCount
condition|)
block|{
case|case
literal|0
case|:
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|slots
index|[
literal|0
index|]
argument_list|)
return|;
default|default:
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|slots
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|slotCount
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Arguments to an application of a {@link UnifyRule}.    */
specifier|protected
class|class
name|UnifyRuleCall
block|{
specifier|protected
specifier|final
name|UnifyRule
name|rule
decl_stmt|;
specifier|public
specifier|final
name|MutableRel
name|query
decl_stmt|;
specifier|public
specifier|final
name|MutableRel
name|target
decl_stmt|;
specifier|protected
specifier|final
name|ImmutableList
argument_list|<
name|MutableRel
argument_list|>
name|slots
decl_stmt|;
specifier|public
name|UnifyRuleCall
parameter_list|(
name|UnifyRule
name|rule
parameter_list|,
name|MutableRel
name|query
parameter_list|,
name|MutableRel
name|target
parameter_list|,
name|ImmutableList
argument_list|<
name|MutableRel
argument_list|>
name|slots
parameter_list|)
block|{
name|this
operator|.
name|rule
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|slots
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|slots
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|result
parameter_list|(
name|MutableRel
name|result
parameter_list|)
block|{
assert|assert
name|MutableRels
operator|.
name|contains
argument_list|(
name|result
argument_list|,
name|target
argument_list|)
assert|;
assert|assert
name|equalType
argument_list|(
literal|"result"
argument_list|,
name|result
argument_list|,
literal|"query"
argument_list|,
name|query
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
name|MutableRel
name|replace
init|=
name|replacementMap
operator|.
name|get
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|replace
operator|!=
literal|null
condition|)
block|{
assert|assert
literal|false
assert|;
comment|// replacementMap is always empty
comment|// result =
name|replace
argument_list|(
name|result
argument_list|,
name|target
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
name|register
argument_list|(
name|result
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
operator|new
name|UnifyResult
argument_list|(
name|this
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/**      * Creates a {@link UnifyRuleCall} based on the parent of {@code query}.      */
specifier|public
name|UnifyRuleCall
name|create
parameter_list|(
name|MutableRel
name|query
parameter_list|)
block|{
return|return
operator|new
name|UnifyRuleCall
argument_list|(
name|rule
argument_list|,
name|query
argument_list|,
name|target
argument_list|,
name|slots
argument_list|)
return|;
block|}
specifier|public
name|RelOptCluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
specifier|public
name|RexSimplify
name|getSimplify
parameter_list|()
block|{
return|return
name|simplify
return|;
block|}
block|}
comment|/**    * Result of an application of a {@link UnifyRule} indicating that the    * rule successfully matched {@code query} against {@code target} and    * generated a {@code result} that is equivalent to {@code query} and    * contains {@code target}.    */
specifier|protected
specifier|static
class|class
name|UnifyResult
block|{
specifier|private
specifier|final
name|UnifyRuleCall
name|call
decl_stmt|;
comment|// equivalent to "query", contains "result"
specifier|private
specifier|final
name|MutableRel
name|result
decl_stmt|;
name|UnifyResult
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|,
name|MutableRel
name|result
parameter_list|)
block|{
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
assert|assert
name|equalType
argument_list|(
literal|"query"
argument_list|,
name|call
operator|.
name|query
argument_list|,
literal|"result"
argument_list|,
name|result
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
block|}
comment|/** Abstract base class for implementing {@link UnifyRule}. */
specifier|protected
specifier|abstract
specifier|static
class|class
name|AbstractUnifyRule
extends|extends
name|UnifyRule
block|{
specifier|public
name|AbstractUnifyRule
parameter_list|(
name|Operand
name|queryOperand
parameter_list|,
name|Operand
name|targetOperand
parameter_list|,
name|int
name|slotCount
parameter_list|)
block|{
name|super
argument_list|(
name|slotCount
argument_list|,
name|queryOperand
argument_list|,
name|targetOperand
argument_list|)
expr_stmt|;
comment|//noinspection AssertWithSideEffects
assert|assert
name|isValid
argument_list|()
assert|;
block|}
specifier|protected
name|boolean
name|isValid
parameter_list|()
block|{
specifier|final
name|SlotCounter
name|slotCounter
init|=
operator|new
name|SlotCounter
argument_list|()
decl_stmt|;
name|slotCounter
operator|.
name|visit
argument_list|(
name|queryOperand
argument_list|)
expr_stmt|;
assert|assert
name|slotCounter
operator|.
name|queryCount
operator|==
name|slotCount
assert|;
assert|assert
name|slotCounter
operator|.
name|targetCount
operator|==
literal|0
assert|;
name|slotCounter
operator|.
name|queryCount
operator|=
literal|0
expr_stmt|;
name|slotCounter
operator|.
name|visit
argument_list|(
name|targetOperand
argument_list|)
expr_stmt|;
assert|assert
name|slotCounter
operator|.
name|queryCount
operator|==
literal|0
assert|;
assert|assert
name|slotCounter
operator|.
name|targetCount
operator|==
name|slotCount
assert|;
return|return
literal|true
return|;
block|}
comment|/** Creates an operand with given inputs. */
specifier|protected
specifier|static
name|Operand
name|operand
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MutableRel
argument_list|>
name|clazz
parameter_list|,
name|Operand
modifier|...
name|inputOperands
parameter_list|)
block|{
return|return
operator|new
name|InternalOperand
argument_list|(
name|clazz
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|inputOperands
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates an operand that doesn't check inputs. */
specifier|protected
specifier|static
name|Operand
name|any
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MutableRel
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|AnyOperand
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/** Creates an operand that matches a relational expression in the query. */
specifier|protected
specifier|static
name|Operand
name|query
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
operator|new
name|QueryOperand
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
comment|/** Creates an operand that matches a relational expression in the      * target. */
specifier|protected
specifier|static
name|Operand
name|target
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
return|return
operator|new
name|TargetOperand
argument_list|(
name|ordinal
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link UnifyRule} that matches if the query is already    * equal to the target.    *    *<p>Matches scans to the same table, because these will be    * {@link MutableScan}s with the same    * {@link org.apache.calcite.rel.logical.LogicalTableScan} instance.</p>    */
specifier|private
specifier|static
class|class
name|TrivialRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|private
specifier|static
specifier|final
name|TrivialRule
name|INSTANCE
init|=
operator|new
name|TrivialRule
argument_list|()
decl_stmt|;
specifier|private
name|TrivialRule
parameter_list|()
block|{
name|super
argument_list|(
name|any
argument_list|(
name|MutableRel
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|MutableRel
operator|.
name|class
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|query
operator|.
name|equals
argument_list|(
name|call
operator|.
name|target
argument_list|)
condition|)
block|{
return|return
name|call
operator|.
name|result
argument_list|(
name|call
operator|.
name|query
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/** Implementation of {@link UnifyRule} that matches    * {@link org.apache.calcite.rel.logical.LogicalTableScan}. */
specifier|private
specifier|static
class|class
name|ScanToProjectUnifyRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|ScanToProjectUnifyRule
name|INSTANCE
init|=
operator|new
name|ScanToProjectUnifyRule
argument_list|()
decl_stmt|;
specifier|private
name|ScanToProjectUnifyRule
parameter_list|()
block|{
name|super
argument_list|(
name|any
argument_list|(
name|MutableScan
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|MutableProject
operator|.
name|class
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|MutableProject
name|target
init|=
operator|(
name|MutableProject
operator|)
name|call
operator|.
name|target
decl_stmt|;
specifier|final
name|MutableScan
name|query
init|=
operator|(
name|MutableScan
operator|)
name|call
operator|.
name|query
decl_stmt|;
comment|// We do not need to check query's parent type to avoid duplication
comment|// of ProjectToProjectUnifyRule or FilterToProjectUnifyRule, since
comment|// SubstitutionVisitor performs a top-down match.
if|if
condition|(
operator|!
name|query
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getInput
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RexShuttle
name|shuttle
init|=
name|getRexShuttle
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|target
operator|.
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
decl_stmt|;
try|try
block|{
name|newProjects
operator|=
operator|(
name|List
argument_list|<
name|RexNode
argument_list|>
operator|)
name|shuttle
operator|.
name|apply
argument_list|(
name|rexBuilder
operator|.
name|identityProjects
argument_list|(
name|query
operator|.
name|rowType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MatchFailed
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|MutableProject
name|newProject
init|=
name|MutableProject
operator|.
name|of
argument_list|(
name|query
operator|.
name|rowType
argument_list|,
name|target
argument_list|,
name|newProjects
argument_list|)
decl_stmt|;
specifier|final
name|MutableRel
name|newProject2
init|=
name|MutableRels
operator|.
name|strip
argument_list|(
name|newProject
argument_list|)
decl_stmt|;
return|return
name|call
operator|.
name|result
argument_list|(
name|newProject2
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link UnifyRule} that matches    * {@link org.apache.calcite.rel.logical.LogicalProject}. */
specifier|private
specifier|static
class|class
name|ProjectToProjectUnifyRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|ProjectToProjectUnifyRule
name|INSTANCE
init|=
operator|new
name|ProjectToProjectUnifyRule
argument_list|()
decl_stmt|;
specifier|private
name|ProjectToProjectUnifyRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MutableProject
operator|.
name|class
argument_list|,
name|query
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|MutableProject
operator|.
name|class
argument_list|,
name|target
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|MutableProject
name|target
init|=
operator|(
name|MutableProject
operator|)
name|call
operator|.
name|target
decl_stmt|;
specifier|final
name|MutableProject
name|query
init|=
operator|(
name|MutableProject
operator|)
name|call
operator|.
name|query
decl_stmt|;
specifier|final
name|RexShuttle
name|shuttle
init|=
name|getRexShuttle
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
decl_stmt|;
try|try
block|{
name|newProjects
operator|=
name|shuttle
operator|.
name|apply
argument_list|(
name|query
operator|.
name|projects
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MatchFailed
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|MutableProject
name|newProject
init|=
name|MutableProject
operator|.
name|of
argument_list|(
name|query
operator|.
name|rowType
argument_list|,
name|target
argument_list|,
name|newProjects
argument_list|)
decl_stmt|;
specifier|final
name|MutableRel
name|newProject2
init|=
name|MutableRels
operator|.
name|strip
argument_list|(
name|newProject
argument_list|)
decl_stmt|;
return|return
name|call
operator|.
name|result
argument_list|(
name|newProject2
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link UnifyRule} that matches a {@link MutableFilter}    * to a {@link MutableProject}. */
specifier|private
specifier|static
class|class
name|FilterToProjectUnifyRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|FilterToProjectUnifyRule
name|INSTANCE
init|=
operator|new
name|FilterToProjectUnifyRule
argument_list|()
decl_stmt|;
specifier|private
name|FilterToProjectUnifyRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MutableFilter
operator|.
name|class
argument_list|,
name|query
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|MutableProject
operator|.
name|class
argument_list|,
name|target
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
comment|// Child of projectTarget is equivalent to child of filterQuery.
try|try
block|{
comment|// TODO: make sure that constants are ok
specifier|final
name|MutableProject
name|target
init|=
operator|(
name|MutableProject
operator|)
name|call
operator|.
name|target
decl_stmt|;
specifier|final
name|RexShuttle
name|shuttle
init|=
name|getRexShuttle
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|newCondition
decl_stmt|;
specifier|final
name|MutableFilter
name|query
init|=
operator|(
name|MutableFilter
operator|)
name|call
operator|.
name|query
decl_stmt|;
try|try
block|{
name|newCondition
operator|=
name|query
operator|.
name|condition
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MatchFailed
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|MutableFilter
name|newFilter
init|=
name|MutableFilter
operator|.
name|of
argument_list|(
name|target
argument_list|,
name|newCondition
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getParent
argument_list|()
operator|instanceof
name|MutableProject
condition|)
block|{
specifier|final
name|MutableRel
name|inverse
init|=
name|invert
argument_list|(
operator|(
operator|(
name|MutableProject
operator|)
name|query
operator|.
name|getParent
argument_list|()
operator|)
operator|.
name|getNamedProjects
argument_list|()
argument_list|,
name|newFilter
argument_list|,
name|shuttle
argument_list|)
decl_stmt|;
return|return
name|call
operator|.
name|create
argument_list|(
name|query
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|result
argument_list|(
name|inverse
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|MutableRel
name|inverse
init|=
name|invert
argument_list|(
name|query
argument_list|,
name|newFilter
argument_list|,
name|target
argument_list|)
decl_stmt|;
return|return
name|call
operator|.
name|result
argument_list|(
name|inverse
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MatchFailed
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|MutableRel
name|invert
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|namedProjects
parameter_list|,
name|MutableRel
name|input
parameter_list|,
name|RexShuttle
name|shuttle
parameter_list|)
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"SubstitutionVisitor: invert:\nprojects: {}\ninput: {}\nproject: {}\n"
argument_list|,
name|namedProjects
argument_list|,
name|input
argument_list|,
name|shuttle
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|input
operator|.
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
name|Pair
operator|.
name|left
argument_list|(
name|namedProjects
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|projects
control|)
block|{
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeZeroLiteral
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|expr
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|projects
argument_list|)
control|)
block|{
specifier|final
name|RexNode
name|node
init|=
name|expr
operator|.
name|e
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
name|MatchFailed
operator|.
name|INSTANCE
throw|;
block|}
name|exprList
operator|.
name|set
argument_list|(
name|expr
operator|.
name|i
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|MutableProject
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|exprList
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|namedProjects
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|MutableRel
name|invert
parameter_list|(
name|MutableRel
name|model
parameter_list|,
name|MutableRel
name|input
parameter_list|,
name|MutableProject
name|project
parameter_list|)
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"SubstitutionVisitor: invert:\nmodel: {}\ninput: {}\nproject: {}\n"
argument_list|,
name|model
argument_list|,
name|input
argument_list|,
name|project
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|.
name|projects
operator|.
name|size
argument_list|()
operator|<
name|model
operator|.
name|rowType
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
throw|throw
name|MatchFailed
operator|.
name|INSTANCE
throw|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|model
operator|.
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|model
operator|.
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeZeroLiteral
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|expr
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|projects
argument_list|)
control|)
block|{
if|if
condition|(
name|expr
operator|.
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
specifier|final
name|int
name|target
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|expr
operator|.
name|e
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|exprList
operator|.
name|set
argument_list|(
name|target
argument_list|,
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|expr
operator|.
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
name|expr
operator|.
name|i
argument_list|,
name|input
operator|.
name|rowType
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|MatchFailed
operator|.
name|INSTANCE
throw|;
block|}
block|}
return|return
name|MutableProject
operator|.
name|of
argument_list|(
name|model
operator|.
name|rowType
argument_list|,
name|input
argument_list|,
name|exprList
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link UnifyRule} that matches a    * {@link MutableFilter}. */
specifier|private
specifier|static
class|class
name|FilterToFilterUnifyRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|FilterToFilterUnifyRule
name|INSTANCE
init|=
operator|new
name|FilterToFilterUnifyRule
argument_list|()
decl_stmt|;
specifier|private
name|FilterToFilterUnifyRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MutableFilter
operator|.
name|class
argument_list|,
name|query
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|MutableFilter
operator|.
name|class
argument_list|,
name|target
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
comment|// in.query can be rewritten in terms of in.target if its condition
comment|// is weaker. For example:
comment|//   query: SELECT * FROM t WHERE x = 1 AND y = 2
comment|//   target: SELECT * FROM t WHERE x = 1
comment|// transforms to
comment|//   result: SELECT * FROM (target) WHERE y = 2
specifier|final
name|MutableFilter
name|query
init|=
operator|(
name|MutableFilter
operator|)
name|call
operator|.
name|query
decl_stmt|;
specifier|final
name|MutableFilter
name|target
init|=
operator|(
name|MutableFilter
operator|)
name|call
operator|.
name|target
decl_stmt|;
specifier|final
name|MutableFilter
name|newFilter
init|=
name|createFilter
argument_list|(
name|call
argument_list|,
name|query
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newFilter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|call
operator|.
name|result
argument_list|(
name|newFilter
argument_list|)
return|;
block|}
name|MutableFilter
name|createFilter
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|,
name|MutableFilter
name|query
parameter_list|,
name|MutableFilter
name|target
parameter_list|)
block|{
specifier|final
name|RexNode
name|newCondition
init|=
name|splitFilter
argument_list|(
name|call
operator|.
name|getSimplify
argument_list|()
argument_list|,
name|query
operator|.
name|condition
argument_list|,
name|target
operator|.
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCondition
operator|==
literal|null
condition|)
block|{
comment|// Could not map query onto target.
return|return
literal|null
return|;
block|}
if|if
condition|(
name|newCondition
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
return|return
name|MutableFilter
operator|.
name|of
argument_list|(
name|target
argument_list|,
name|newCondition
argument_list|)
return|;
block|}
block|}
comment|/** Implementation of {@link UnifyRule} that matches a {@link MutableProject}    * to a {@link MutableFilter}. */
specifier|private
specifier|static
class|class
name|ProjectToFilterUnifyRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|ProjectToFilterUnifyRule
name|INSTANCE
init|=
operator|new
name|ProjectToFilterUnifyRule
argument_list|()
decl_stmt|;
specifier|private
name|ProjectToFilterUnifyRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MutableProject
operator|.
name|class
argument_list|,
name|query
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|MutableFilter
operator|.
name|class
argument_list|,
name|target
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|query
operator|.
name|getParent
argument_list|()
operator|instanceof
name|MutableFilter
condition|)
block|{
specifier|final
name|UnifyRuleCall
name|in2
init|=
name|call
operator|.
name|create
argument_list|(
name|call
operator|.
name|query
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MutableFilter
name|query
init|=
operator|(
name|MutableFilter
operator|)
name|in2
operator|.
name|query
decl_stmt|;
specifier|final
name|MutableFilter
name|target
init|=
operator|(
name|MutableFilter
operator|)
name|in2
operator|.
name|target
decl_stmt|;
specifier|final
name|MutableFilter
name|newFilter
init|=
name|FilterToFilterUnifyRule
operator|.
name|INSTANCE
operator|.
name|createFilter
argument_list|(
name|call
argument_list|,
name|query
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newFilter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|in2
operator|.
name|result
argument_list|(
name|query
operator|.
name|replaceInParent
argument_list|(
name|newFilter
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/** Implementation of {@link UnifyRule} that matches a    * {@link org.apache.calcite.rel.logical.LogicalAggregate} to a    * {@link org.apache.calcite.rel.logical.LogicalAggregate}, provided    * that they have the same child. */
specifier|private
specifier|static
class|class
name|AggregateToAggregateUnifyRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|AggregateToAggregateUnifyRule
name|INSTANCE
init|=
operator|new
name|AggregateToAggregateUnifyRule
argument_list|()
decl_stmt|;
specifier|private
name|AggregateToAggregateUnifyRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MutableAggregate
operator|.
name|class
argument_list|,
name|query
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|MutableAggregate
operator|.
name|class
argument_list|,
name|target
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|MutableAggregate
name|query
init|=
operator|(
name|MutableAggregate
operator|)
name|call
operator|.
name|query
decl_stmt|;
specifier|final
name|MutableAggregate
name|target
init|=
operator|(
name|MutableAggregate
operator|)
name|call
operator|.
name|target
decl_stmt|;
assert|assert
name|query
operator|!=
name|target
assert|;
comment|// in.query can be rewritten in terms of in.target if its groupSet is
comment|// a subset, and its aggCalls are a superset. For example:
comment|//   query: SELECT x, COUNT(b) FROM t GROUP BY x
comment|//   target: SELECT x, y, SUM(a) AS s, COUNT(b) AS cb FROM t GROUP BY x, y
comment|// transforms to
comment|//   result: SELECT x, SUM(cb) FROM (target) GROUP BY x
if|if
condition|(
name|query
operator|.
name|getInput
argument_list|()
operator|!=
name|target
operator|.
name|getInput
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|target
operator|.
name|groupSet
operator|.
name|contains
argument_list|(
name|query
operator|.
name|groupSet
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MutableRel
name|result
init|=
name|unifyAggregates
argument_list|(
name|query
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|call
operator|.
name|result
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|MutableAggregate
name|permute
parameter_list|(
name|MutableAggregate
name|aggregate
parameter_list|,
name|MutableRel
name|input
parameter_list|,
name|Mapping
name|mapping
parameter_list|)
block|{
name|ImmutableBitSet
name|groupSet
init|=
name|Mappings
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|aggregate
operator|.
name|groupSet
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
init|=
name|Mappings
operator|.
name|apply2
argument_list|(
name|mapping
argument_list|,
name|aggregate
operator|.
name|groupSets
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggregateCalls
init|=
name|apply
argument_list|(
name|mapping
argument_list|,
name|aggregate
operator|.
name|aggCalls
argument_list|)
decl_stmt|;
return|return
name|MutableAggregate
operator|.
name|of
argument_list|(
name|input
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|groupSet
argument_list|,
name|groupSets
argument_list|,
name|aggregateCalls
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|apply
parameter_list|(
specifier|final
name|Mapping
name|mapping
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCallList
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|aggCallList
argument_list|,
operator|new
name|Function
argument_list|<
name|AggregateCall
argument_list|,
name|AggregateCall
argument_list|>
argument_list|()
block|{
specifier|public
name|AggregateCall
name|apply
parameter_list|(
name|AggregateCall
name|call
parameter_list|)
block|{
return|return
name|call
operator|.
name|copy
argument_list|(
name|Mappings
operator|.
name|apply2
argument_list|(
name|mapping
argument_list|,
name|call
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|,
name|Mappings
operator|.
name|apply
argument_list|(
name|mapping
argument_list|,
name|call
operator|.
name|filterArg
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutableRel
name|unifyAggregates
parameter_list|(
name|MutableAggregate
name|query
parameter_list|,
name|MutableAggregate
name|target
parameter_list|)
block|{
if|if
condition|(
name|query
operator|.
name|getGroupType
argument_list|()
operator|!=
name|Aggregate
operator|.
name|Group
operator|.
name|SIMPLE
operator|||
name|target
operator|.
name|getGroupType
argument_list|()
operator|!=
name|Aggregate
operator|.
name|Group
operator|.
name|SIMPLE
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|Bug
operator|.
name|CALCITE_461_FIXED
argument_list|)
throw|;
block|}
name|MutableRel
name|result
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|groupSet
operator|.
name|equals
argument_list|(
name|target
operator|.
name|groupSet
argument_list|)
condition|)
block|{
comment|// Same level of aggregation. Generate a project.
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|projects
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|query
operator|.
name|groupSet
operator|.
name|cardinality
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupCount
condition|;
name|i
operator|++
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AggregateCall
name|aggregateCall
range|:
name|query
operator|.
name|aggCalls
control|)
block|{
name|int
name|i
init|=
name|target
operator|.
name|aggCalls
operator|.
name|indexOf
argument_list|(
name|aggregateCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|projects
operator|.
name|add
argument_list|(
name|groupCount
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|MutableRels
operator|.
name|createProject
argument_list|(
name|target
argument_list|,
name|projects
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Target is coarser level of aggregation. Generate an aggregate.
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|groupSet
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|targetGroupList
init|=
name|target
operator|.
name|groupSet
operator|.
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
range|:
name|query
operator|.
name|groupSet
control|)
block|{
name|int
name|c2
init|=
name|targetGroupList
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|groupSet
operator|.
name|set
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggregateCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggregateCall
range|:
name|query
operator|.
name|aggCalls
control|)
block|{
if|if
condition|(
name|aggregateCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|i
init|=
name|target
operator|.
name|aggCalls
operator|.
name|indexOf
argument_list|(
name|aggregateCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|aggregateCalls
operator|.
name|add
argument_list|(
name|AggregateCall
operator|.
name|create
argument_list|(
name|getRollup
argument_list|(
name|aggregateCall
operator|.
name|getAggregation
argument_list|()
argument_list|)
argument_list|,
name|aggregateCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|target
operator|.
name|groupSet
operator|.
name|cardinality
argument_list|()
operator|+
name|i
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|aggregateCall
operator|.
name|type
argument_list|,
name|aggregateCall
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|MutableAggregate
operator|.
name|of
argument_list|(
name|target
argument_list|,
literal|false
argument_list|,
name|groupSet
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggregateCalls
argument_list|)
expr_stmt|;
block|}
return|return
name|MutableRels
operator|.
name|createCastRel
argument_list|(
name|result
argument_list|,
name|query
operator|.
name|rowType
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Implementation of {@link UnifyRule} that matches a    * {@link MutableAggregate} on    * a {@link MutableProject} query to an {@link MutableAggregate} target.    *    *<p>The rule is necessary when we unify query=Aggregate(x) with    * target=Aggregate(x, y). Query will tend to have an extra Project(x) on its    * input, which this rule knows is safe to ignore.</p> */
specifier|private
specifier|static
class|class
name|AggregateOnProjectToAggregateUnifyRule
extends|extends
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|AggregateOnProjectToAggregateUnifyRule
name|INSTANCE
init|=
operator|new
name|AggregateOnProjectToAggregateUnifyRule
argument_list|()
decl_stmt|;
specifier|private
name|AggregateOnProjectToAggregateUnifyRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MutableAggregate
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|MutableProject
operator|.
name|class
argument_list|,
name|query
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|MutableAggregate
operator|.
name|class
argument_list|,
name|target
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnifyResult
name|apply
parameter_list|(
name|UnifyRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|MutableAggregate
name|query
init|=
operator|(
name|MutableAggregate
operator|)
name|call
operator|.
name|query
decl_stmt|;
specifier|final
name|MutableAggregate
name|target
init|=
operator|(
name|MutableAggregate
operator|)
name|call
operator|.
name|target
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|query
operator|.
name|getInput
argument_list|()
operator|instanceof
name|MutableProject
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|MutableProject
name|project
init|=
operator|(
name|MutableProject
operator|)
name|query
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|getInput
argument_list|()
operator|!=
name|target
operator|.
name|getInput
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|project
operator|.
name|getMapping
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|MutableAggregate
name|aggregate2
init|=
name|permute
argument_list|(
name|query
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|mapping
operator|.
name|inverse
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MutableRel
name|result
init|=
name|unifyAggregates
argument_list|(
name|aggregate2
argument_list|,
name|target
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
literal|null
else|:
name|call
operator|.
name|result
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|SqlAggFunction
name|getRollup
parameter_list|(
name|SqlAggFunction
name|aggregation
parameter_list|)
block|{
if|if
condition|(
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|SUM
operator|||
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|MIN
operator|||
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|MAX
operator|||
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|SUM0
condition|)
block|{
return|return
name|aggregation
return|;
block|}
if|else if
condition|(
name|aggregation
operator|==
name|SqlStdOperatorTable
operator|.
name|COUNT
condition|)
block|{
return|return
name|SqlStdOperatorTable
operator|.
name|SUM0
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Builds a shuttle that stores a list of expressions, and can map incoming    * expressions to references to them. */
specifier|protected
specifier|static
name|RexShuttle
name|getRexShuttle
parameter_list|(
name|MutableProject
name|target
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|target
operator|.
name|projects
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|ref
parameter_list|)
block|{
specifier|final
name|Integer
name|integer
init|=
name|map
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|integer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RexInputRef
argument_list|(
name|integer
argument_list|,
name|ref
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
throw|throw
name|MatchFailed
operator|.
name|INSTANCE
throw|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|Integer
name|integer
init|=
name|map
operator|.
name|get
argument_list|(
name|call
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|integer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RexInputRef
argument_list|(
name|integer
argument_list|,
name|call
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** Returns if one rel is weaker than another. */
specifier|protected
name|boolean
name|isWeaker
parameter_list|(
name|MutableRel
name|rel0
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel0
operator|==
name|rel
operator|||
name|equivalents
operator|.
name|get
argument_list|(
name|rel0
argument_list|)
operator|.
name|contains
argument_list|(
name|rel
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|rel0
operator|instanceof
name|MutableFilter
operator|)
operator|||
operator|!
operator|(
name|rel
operator|instanceof
name|MutableFilter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|rel
operator|.
name|rowType
operator|.
name|equals
argument_list|(
name|rel0
operator|.
name|rowType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|MutableRel
name|rel0input
init|=
operator|(
operator|(
name|MutableFilter
operator|)
name|rel0
operator|)
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|MutableRel
name|relinput
init|=
operator|(
operator|(
name|MutableFilter
operator|)
name|rel
operator|)
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|rel0input
operator|!=
name|relinput
operator|&&
operator|!
name|equivalents
operator|.
name|get
argument_list|(
name|rel0input
argument_list|)
operator|.
name|contains
argument_list|(
name|relinput
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RexExecutorImpl
name|rexImpl
init|=
operator|(
name|RexExecutorImpl
operator|)
operator|(
name|rel
operator|.
name|cluster
operator|.
name|getPlanner
argument_list|()
operator|.
name|getExecutor
argument_list|()
operator|)
decl_stmt|;
name|RexImplicationChecker
name|rexImplicationChecker
init|=
operator|new
name|RexImplicationChecker
argument_list|(
name|rel
operator|.
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|rexImpl
argument_list|,
name|rel
operator|.
name|rowType
argument_list|)
decl_stmt|;
return|return
name|rexImplicationChecker
operator|.
name|implies
argument_list|(
operator|(
operator|(
name|MutableFilter
operator|)
name|rel0
operator|)
operator|.
name|condition
argument_list|,
operator|(
operator|(
name|MutableFilter
operator|)
name|rel
operator|)
operator|.
name|condition
argument_list|)
return|;
block|}
comment|/** Returns whether two relational expressions have the same row-type. */
specifier|public
specifier|static
name|boolean
name|equalType
parameter_list|(
name|String
name|desc0
parameter_list|,
name|MutableRel
name|rel0
parameter_list|,
name|String
name|desc1
parameter_list|,
name|MutableRel
name|rel1
parameter_list|,
name|Litmus
name|litmus
parameter_list|)
block|{
return|return
name|RelOptUtil
operator|.
name|equal
argument_list|(
name|desc0
argument_list|,
name|rel0
operator|.
name|rowType
argument_list|,
name|desc1
argument_list|,
name|rel1
operator|.
name|rowType
argument_list|,
name|litmus
argument_list|)
return|;
block|}
comment|/** Operand to a {@link UnifyRule}. */
specifier|protected
specifier|abstract
specifier|static
class|class
name|Operand
block|{
specifier|protected
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|MutableRel
argument_list|>
name|clazz
decl_stmt|;
specifier|protected
name|Operand
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MutableRel
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|boolean
name|matches
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|isWeaker
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** Operand to a {@link UnifyRule} that matches a relational expression of a    * given type. It has zero or more child operands. */
specifier|private
specifier|static
class|class
name|InternalOperand
extends|extends
name|Operand
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Operand
argument_list|>
name|inputs
decl_stmt|;
name|InternalOperand
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MutableRel
argument_list|>
name|clazz
parameter_list|,
name|List
argument_list|<
name|Operand
argument_list|>
name|inputs
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|isInstance
argument_list|(
name|rel
argument_list|)
operator|&&
name|allMatch
argument_list|(
name|visitor
argument_list|,
name|inputs
argument_list|,
name|rel
operator|.
name|getInputs
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWeaker
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|isInstance
argument_list|(
name|rel
argument_list|)
operator|&&
name|allWeaker
argument_list|(
name|visitor
argument_list|,
name|inputs
argument_list|,
name|rel
operator|.
name|getInputs
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|allMatch
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|List
argument_list|<
name|Operand
argument_list|>
name|operands
parameter_list|,
name|List
argument_list|<
name|MutableRel
argument_list|>
name|rels
parameter_list|)
block|{
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|!=
name|rels
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|Operand
argument_list|,
name|MutableRel
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|operands
argument_list|,
name|rels
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|pair
operator|.
name|left
operator|.
name|matches
argument_list|(
name|visitor
argument_list|,
name|pair
operator|.
name|right
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|allWeaker
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|List
argument_list|<
name|Operand
argument_list|>
name|operands
parameter_list|,
name|List
argument_list|<
name|MutableRel
argument_list|>
name|rels
parameter_list|)
block|{
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|!=
name|rels
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|Operand
argument_list|,
name|MutableRel
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|operands
argument_list|,
name|rels
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|pair
operator|.
name|left
operator|.
name|isWeaker
argument_list|(
name|visitor
argument_list|,
name|pair
operator|.
name|right
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/** Operand to a {@link UnifyRule} that matches a relational expression of a    * given type. */
specifier|private
specifier|static
class|class
name|AnyOperand
extends|extends
name|Operand
block|{
name|AnyOperand
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MutableRel
argument_list|>
name|clazz
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|isInstance
argument_list|(
name|rel
argument_list|)
return|;
block|}
block|}
comment|/** Operand that assigns a particular relational expression to a variable.    *    *<p>It is applied to a descendant of the query, writes the operand into the    * slots array, and always matches.    * There is a corresponding operand of type {@link TargetOperand} that checks    * whether its relational expression, a descendant of the target, is    * equivalent to this {@code QueryOperand}'s relational expression.    */
specifier|private
specifier|static
class|class
name|QueryOperand
extends|extends
name|Operand
block|{
specifier|private
specifier|final
name|int
name|ordinal
decl_stmt|;
specifier|protected
name|QueryOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|MutableRel
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
name|visitor
operator|.
name|slots
index|[
name|ordinal
index|]
operator|=
name|rel
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/** Operand that checks that a relational expression matches the corresponding    * relational expression that was passed to a {@link QueryOperand}. */
specifier|private
specifier|static
class|class
name|TargetOperand
extends|extends
name|Operand
block|{
specifier|private
specifier|final
name|int
name|ordinal
decl_stmt|;
specifier|protected
name|TargetOperand
parameter_list|(
name|int
name|ordinal
parameter_list|)
block|{
name|super
argument_list|(
name|MutableRel
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
specifier|final
name|MutableRel
name|rel0
init|=
name|visitor
operator|.
name|slots
index|[
name|ordinal
index|]
decl_stmt|;
assert|assert
name|rel0
operator|!=
literal|null
operator|:
literal|"QueryOperand should have been called first"
assert|;
return|return
name|rel0
operator|==
name|rel
operator|||
name|visitor
operator|.
name|equivalents
operator|.
name|get
argument_list|(
name|rel0
argument_list|)
operator|.
name|contains
argument_list|(
name|rel
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWeaker
parameter_list|(
name|SubstitutionVisitor
name|visitor
parameter_list|,
name|MutableRel
name|rel
parameter_list|)
block|{
specifier|final
name|MutableRel
name|rel0
init|=
name|visitor
operator|.
name|slots
index|[
name|ordinal
index|]
decl_stmt|;
assert|assert
name|rel0
operator|!=
literal|null
operator|:
literal|"QueryOperand should have been called first"
assert|;
return|return
name|visitor
operator|.
name|isWeaker
argument_list|(
name|rel0
argument_list|,
name|rel
argument_list|)
return|;
block|}
block|}
comment|/** Visitor that counts how many {@link QueryOperand} and    * {@link TargetOperand} in an operand tree. */
specifier|private
specifier|static
class|class
name|SlotCounter
block|{
name|int
name|queryCount
decl_stmt|;
name|int
name|targetCount
decl_stmt|;
name|void
name|visit
parameter_list|(
name|Operand
name|operand
parameter_list|)
block|{
if|if
condition|(
name|operand
operator|instanceof
name|QueryOperand
condition|)
block|{
operator|++
name|queryCount
expr_stmt|;
block|}
if|else if
condition|(
name|operand
operator|instanceof
name|TargetOperand
condition|)
block|{
operator|++
name|targetCount
expr_stmt|;
block|}
if|else if
condition|(
name|operand
operator|instanceof
name|AnyOperand
condition|)
block|{
comment|// nothing
block|}
else|else
block|{
for|for
control|(
name|Operand
name|input
range|:
operator|(
operator|(
name|InternalOperand
operator|)
name|operand
operator|)
operator|.
name|inputs
control|)
block|{
name|visit
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Rule that converts a {@link org.apache.calcite.rel.logical.LogicalFilter}    * on top of a {@link org.apache.calcite.rel.logical.LogicalProject} into a    * trivial filter (on a boolean column).    */
specifier|public
specifier|static
class|class
name|FilterOnProjectRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|LogicalFilter
argument_list|>
name|PREDICATE
init|=
operator|new
name|PredicateImpl
argument_list|<
name|LogicalFilter
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|LogicalFilter
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getCondition
argument_list|()
operator|instanceof
name|RexInputRef
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FilterOnProjectRule
name|INSTANCE
init|=
operator|new
name|FilterOnProjectRule
argument_list|()
decl_stmt|;
specifier|private
name|FilterOnProjectRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|LogicalFilter
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|PREDICATE
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|LogicalProject
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|LogicalFilter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LogicalProject
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
name|newProjects
operator|.
name|add
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|filter
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|RelDataType
name|newRowType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"condition"
argument_list|,
name|Util
operator|.
name|last
argument_list|(
name|newProjects
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|newProjects
argument_list|,
name|newRowType
argument_list|)
decl_stmt|;
specifier|final
name|RexInputRef
name|newCondition
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|newProject
argument_list|,
name|newProjects
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|LogicalFilter
operator|.
name|create
argument_list|(
name|newProject
argument_list|,
name|newCondition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SubstitutionVisitor.java
end_comment

end_unit

