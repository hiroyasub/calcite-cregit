begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|trace
operator|.
name|CalciteTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MarkerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Listener for logging useful debugging information on certain rule events.  */
end_comment

begin_class
specifier|public
class|class
name|RuleEventLogger
implements|implements
name|RelOptListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|CalciteTrace
operator|.
name|getPlannerTracer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Marker
name|FULL
init|=
name|MarkerFactory
operator|.
name|getMarker
argument_list|(
literal|"FULL_PLAN"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|relEquivalenceFound
parameter_list|(
specifier|final
name|RelEquivalenceEvent
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|ruleAttempted
parameter_list|(
specifier|final
name|RuleAttemptedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isBefore
argument_list|()
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RelOptRuleCall
name|call
init|=
name|event
operator|.
name|getRuleCall
argument_list|()
decl_stmt|;
name|String
name|ruleArgs
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|call
operator|.
name|rels
argument_list|)
operator|.
name|map
argument_list|(
name|rel
lambda|->
literal|"rel#"
operator|+
name|rel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|rel
operator|.
name|getRelTypeName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"call#{}: Apply rule [{}] to [{}]"
argument_list|,
name|call
operator|.
name|id
argument_list|,
name|call
operator|.
name|getRule
argument_list|()
argument_list|,
name|ruleArgs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|ruleProductionSucceeded
parameter_list|(
name|RuleProductionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isBefore
argument_list|()
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RelOptRuleCall
name|call
init|=
name|event
operator|.
name|getRuleCall
argument_list|()
decl_stmt|;
name|RelNode
name|newRel
init|=
name|event
operator|.
name|getRel
argument_list|()
decl_stmt|;
name|String
name|description
init|=
name|newRel
operator|==
literal|null
condition|?
literal|"null"
else|:
literal|"rel#"
operator|+
name|newRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|newRel
operator|.
name|getRelTypeName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"call#{}: Rule [{}] produced [{}]"
argument_list|,
name|call
operator|.
name|id
argument_list|,
name|call
operator|.
name|getRule
argument_list|()
argument_list|,
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRel
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|FULL
argument_list|,
literal|"call#{}: Full plan for [{}]:{}"
argument_list|,
name|call
operator|.
name|id
argument_list|,
name|description
argument_list|,
name|System
operator|.
name|lineSeparator
argument_list|()
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|newRel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|relDiscarded
parameter_list|(
specifier|final
name|RelDiscardedEvent
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|relChosen
parameter_list|(
specifier|final
name|RelChosenEvent
name|event
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

