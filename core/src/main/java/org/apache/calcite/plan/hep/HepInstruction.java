begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|MonotonicNonNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Nullness
operator|.
name|castNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * HepInstruction represents one instruction in a HepProgram. The actual  * instruction set is defined here via inner classes; if these grow too big,  * they should be moved out to top-level classes.  */
end_comment

begin_class
specifier|abstract
class|class
name|HepInstruction
block|{
comment|//~ Methods ----------------------------------------------------------------
comment|/** Creates runtime state for this instruction.    *    *<p>The state is mutable, knows how to execute the instruction, and is    * discarded after this execution. See {@link HepState}.    *    * @param px Preparation context; the state should copy from the context    * all information that it will need to execute    *    * @return Initialized state    */
specifier|abstract
name|HepState
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
function_decl|;
comment|//~ Inner Classes ----------------------------------------------------------
comment|/** Instruction that executes all rules of a given class. */
specifier|static
class|class
name|RuleClass
extends|extends
name|HepInstruction
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|RelOptRule
argument_list|>
name|ruleClass
decl_stmt|;
parameter_list|<
name|R
extends|extends
name|RelOptRule
parameter_list|>
name|RuleClass
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|ruleClass
parameter_list|)
block|{
name|this
operator|.
name|ruleClass
operator|=
name|requireNonNull
argument_list|(
name|ruleClass
argument_list|,
literal|"ruleClass"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link RuleClass} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
comment|/** Actual rule set instantiated during planning by filtering all the        * planner's rules through {@link #ruleClass}. */
annotation|@
name|Nullable
name|Set
argument_list|<
name|RelOptRule
argument_list|>
name|ruleSet
decl_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeRuleClass
argument_list|(
name|RuleClass
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that executes all rules in a given collection. */
specifier|static
class|class
name|RuleCollection
extends|extends
name|HepInstruction
block|{
comment|/** Collection of rules to apply. */
specifier|final
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|rules
decl_stmt|;
name|RuleCollection
parameter_list|(
name|Collection
argument_list|<
name|RelOptRule
argument_list|>
name|rules
parameter_list|)
block|{
name|this
operator|.
name|rules
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rules
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link RuleCollection} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeRuleCollection
argument_list|(
name|RuleCollection
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that executes converter rules. */
specifier|static
class|class
name|ConverterRules
extends|extends
name|HepInstruction
block|{
specifier|final
name|boolean
name|guaranteed
decl_stmt|;
name|ConverterRules
parameter_list|(
name|boolean
name|guaranteed
parameter_list|)
block|{
name|this
operator|.
name|guaranteed
operator|=
name|guaranteed
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link ConverterRules} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
comment|/** Actual rule set instantiated during planning by filtering all the        * planner's rules, looking for the desired converters. */
annotation|@
name|MonotonicNonNull
name|Set
argument_list|<
name|RelOptRule
argument_list|>
name|ruleSet
decl_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeConverterRules
argument_list|(
name|ConverterRules
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that finds common relational sub-expressions. */
specifier|static
class|class
name|CommonRelSubExprRules
extends|extends
name|HepInstruction
block|{
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link CommonRelSubExprRules} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
annotation|@
name|Nullable
name|Set
argument_list|<
name|RelOptRule
argument_list|>
name|ruleSet
decl_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeCommonRelSubExprRules
argument_list|(
name|CommonRelSubExprRules
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that executes a given rule. */
specifier|static
class|class
name|RuleInstance
extends|extends
name|HepInstruction
block|{
comment|/** Explicitly specified rule. */
specifier|final
name|RelOptRule
name|rule
decl_stmt|;
name|RuleInstance
parameter_list|(
name|RelOptRule
name|rule
parameter_list|)
block|{
name|this
operator|.
name|rule
operator|=
name|requireNonNull
argument_list|(
name|rule
argument_list|,
literal|"rule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link RuleInstance} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeRuleInstance
argument_list|(
name|RuleInstance
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that executes a rule that is looked up by description. */
specifier|static
class|class
name|RuleLookup
extends|extends
name|HepInstruction
block|{
comment|/** Description to look for. */
specifier|final
name|String
name|ruleDescription
decl_stmt|;
name|RuleLookup
parameter_list|(
name|String
name|ruleDescription
parameter_list|)
block|{
name|this
operator|.
name|ruleDescription
operator|=
name|requireNonNull
argument_list|(
name|ruleDescription
argument_list|,
literal|"ruleDescription"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link RuleLookup} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
comment|/** Rule looked up by planner from description. */
annotation|@
name|Nullable
name|RelOptRule
name|rule
decl_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|init
parameter_list|()
block|{
comment|// Look up anew each run.
name|rule
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeRuleLookup
argument_list|(
name|RuleLookup
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that sets match order. */
specifier|static
class|class
name|MatchOrder
extends|extends
name|HepInstruction
block|{
specifier|final
name|HepMatchOrder
name|order
decl_stmt|;
name|MatchOrder
parameter_list|(
name|HepMatchOrder
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|requireNonNull
argument_list|(
name|order
argument_list|,
literal|"order"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link MatchOrder} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeMatchOrder
argument_list|(
name|MatchOrder
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that sets match limit. */
specifier|static
class|class
name|MatchLimit
extends|extends
name|HepInstruction
block|{
specifier|final
name|int
name|limit
decl_stmt|;
name|MatchLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link MatchLimit} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeMatchLimit
argument_list|(
name|MatchLimit
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that executes a sub-program. */
specifier|static
class|class
name|SubProgram
extends|extends
name|HepInstruction
block|{
specifier|final
name|HepProgram
name|subProgram
decl_stmt|;
name|SubProgram
parameter_list|(
name|HepProgram
name|subProgram
parameter_list|)
block|{
name|this
operator|.
name|subProgram
operator|=
name|requireNonNull
argument_list|(
name|subProgram
argument_list|,
literal|"subProgram"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|HepProgram
operator|.
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
name|subProgram
operator|.
name|prepare
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link SubProgram} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
specifier|final
name|HepProgram
operator|.
name|State
name|subProgramState
decl_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
name|subProgramState
operator|=
name|subProgram
operator|.
name|prepare
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|init
parameter_list|()
block|{
name|subProgramState
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeSubProgram
argument_list|(
name|SubProgram
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Instruction that begins a group. */
specifier|static
class|class
name|BeginGroup
extends|extends
name|HepInstruction
block|{
specifier|final
name|EndGroup
name|endGroup
decl_stmt|;
name|BeginGroup
parameter_list|(
name|EndGroup
name|endGroup
parameter_list|)
block|{
name|this
operator|.
name|endGroup
operator|=
name|requireNonNull
argument_list|(
name|endGroup
argument_list|,
literal|"endGroup"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link BeginGroup} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
specifier|final
name|HepInstruction
operator|.
name|EndGroup
operator|.
name|State
name|endGroup
decl_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
name|this
operator|.
name|endGroup
operator|=
name|requireNonNull
argument_list|(
name|px
operator|.
name|endGroupState
argument_list|,
literal|"endGroupState"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeBeginGroup
argument_list|(
name|BeginGroup
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Placeholder instruction that marks the beginning of a group under    * construction. */
specifier|static
class|class
name|Placeholder
extends|extends
name|HepInstruction
block|{
annotation|@
name|Override
name|HepState
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/** Instruction that ends a group. */
specifier|static
class|class
name|EndGroup
extends|extends
name|HepInstruction
block|{
annotation|@
name|Override
name|State
name|prepare
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
return|return
operator|new
name|State
argument_list|(
name|px
argument_list|)
return|;
block|}
comment|/** State for a {@link EndGroup} instruction. */
class|class
name|State
extends|extends
name|HepState
block|{
comment|/** Actual rule set instantiated during planning by collecting grouped        * rules. */
specifier|final
name|Set
argument_list|<
name|RelOptRule
argument_list|>
name|ruleSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|collecting
init|=
literal|true
decl_stmt|;
name|State
parameter_list|(
name|PrepareContext
name|px
parameter_list|)
block|{
name|super
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|()
block|{
name|planner
operator|.
name|executeEndGroup
argument_list|(
name|EndGroup
operator|.
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|init
parameter_list|()
block|{
name|collecting
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/** All the information that might be necessary to initialize {@link HepState}    * for a particular instruction. */
specifier|static
class|class
name|PrepareContext
block|{
specifier|final
name|HepPlanner
name|planner
decl_stmt|;
specifier|final
name|HepProgram
operator|.
name|State
name|programState
decl_stmt|;
specifier|final
name|EndGroup
operator|.
name|State
name|endGroupState
decl_stmt|;
specifier|private
name|PrepareContext
parameter_list|(
name|HepPlanner
name|planner
parameter_list|,
name|HepProgram
operator|.
name|State
name|programState
parameter_list|,
name|EndGroup
operator|.
name|State
name|endGroupState
parameter_list|)
block|{
name|this
operator|.
name|planner
operator|=
name|planner
expr_stmt|;
name|this
operator|.
name|programState
operator|=
name|programState
expr_stmt|;
name|this
operator|.
name|endGroupState
operator|=
name|endGroupState
expr_stmt|;
block|}
specifier|static
name|PrepareContext
name|create
parameter_list|(
name|HepPlanner
name|planner
parameter_list|)
block|{
return|return
operator|new
name|PrepareContext
argument_list|(
name|planner
argument_list|,
name|castNonNull
argument_list|(
literal|null
argument_list|)
argument_list|,
name|castNonNull
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
name|PrepareContext
name|withProgramState
parameter_list|(
name|HepProgram
operator|.
name|State
name|programState
parameter_list|)
block|{
return|return
operator|new
name|PrepareContext
argument_list|(
name|planner
argument_list|,
name|programState
argument_list|,
name|endGroupState
argument_list|)
return|;
block|}
name|PrepareContext
name|withEndGroupState
parameter_list|(
name|EndGroup
operator|.
name|State
name|endGroupState
parameter_list|)
block|{
return|return
operator|new
name|PrepareContext
argument_list|(
name|planner
argument_list|,
name|programState
argument_list|,
name|endGroupState
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

