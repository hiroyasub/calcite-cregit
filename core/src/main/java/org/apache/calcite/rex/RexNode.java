begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteSystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|API
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Row expression.  *  *<p>Every row-expression has a type.  * (Compare with {@link org.apache.calcite.sql.SqlNode}, which is created before  * validation, and therefore types may not be available.)  *  *<p>Some common row-expressions are: {@link RexLiteral} (constant value),  * {@link RexVariable} (variable), {@link RexCall} (call to operator with  * operands). Expressions are generally created using a {@link RexBuilder}  * factory.</p>  *  *<p>All sub-classes of RexNode are immutable.</p>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RexNode
block|{
comment|/**    * Sometimes RexCall nodes are located deep (e.g. inside Lists),    * If the value is non-zero, then a non-normalized representation is printed.    * int is used to allow for re-entrancy.    */
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|AtomicInteger
argument_list|>
name|DESCRIBE_WITHOUT_NORMALIZE
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|AtomicInteger
operator|::
operator|new
argument_list|)
decl_stmt|;
comment|/** Removes a Hook after use. */
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.22"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|EXPERIMENTAL
argument_list|)
specifier|public
interface|interface
name|Closeable
extends|extends
name|AutoCloseable
block|{
comment|// override, removing "throws"
annotation|@
name|Override
name|void
name|close
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|Closeable
name|DECREMENT_ON_CLOSE
init|=
parameter_list|()
lambda|->
block|{
name|DESCRIBE_WITHOUT_NORMALIZE
operator|.
name|get
argument_list|()
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Closeable
name|EMPTY
init|=
parameter_list|()
lambda|->
block|{
block|}
decl_stmt|;
comment|/**    * The digest of {@code RexNode} is normalized by default, however, sometimes a non-normalized    * representation is required.    * This API enables to skip normalization.    * Note: the returned value must be closed, and the API is designed to be used with a    * try-with-resources.    * @param needNormalize true if normalization should be enabled or false if it should be skipped    * @return a handle that should be closed to revert normalization state    */
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.22"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|EXPERIMENTAL
argument_list|)
specifier|public
specifier|static
name|Closeable
name|withNormalize
parameter_list|(
name|boolean
name|needNormalize
parameter_list|)
block|{
return|return
name|needNormalize
condition|?
name|EMPTY
else|:
name|skipNormalize
argument_list|()
return|;
block|}
comment|/**    * The digest of {@code RexNode} is normalized by default, however, sometimes a non-normalized    * representation is required.    * This API enables to skip normalization.    * Note: the returned value must be closed, and the API is designed to be used with a    * try-with-resources.    * @return a handle that should be closed to revert normalization state    */
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.22"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|EXPERIMENTAL
argument_list|)
specifier|public
specifier|static
name|Closeable
name|skipNormalize
parameter_list|()
block|{
name|DESCRIBE_WITHOUT_NORMALIZE
operator|.
name|get
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|DECREMENT_ON_CLOSE
return|;
block|}
comment|/**    * The digest of {@code RexNode} is normalized by default, however, sometimes a non-normalized    * representation is required.    * This method enables subclasses to identify if normalization is required.    * @return true if the digest needs to be normalized    */
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.22"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|EXPERIMENTAL
argument_list|)
specifier|protected
specifier|static
name|boolean
name|needNormalize
parameter_list|()
block|{
return|return
name|DESCRIBE_WITHOUT_NORMALIZE
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|&&
name|CalciteSystemProperty
operator|.
name|ENABLE_REX_DIGEST_NORMALIZE
operator|.
name|value
argument_list|()
return|;
block|}
comment|//~ Instance fields --------------------------------------------------------
comment|// Effectively final. Set in each sub-class constructor, and never re-set.
specifier|protected
name|String
name|digest
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|public
specifier|abstract
name|RelDataType
name|getType
parameter_list|()
function_decl|;
comment|/**    * Returns whether this expression always returns true. (Such as if this    * expression is equal to the literal<code>TRUE</code>.)    */
specifier|public
name|boolean
name|isAlwaysTrue
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether this expression always returns false. (Such as if this    * expression is equal to the literal<code>FALSE</code>.)    */
specifier|public
name|boolean
name|isAlwaysFalse
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isA
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
return|return
name|getKind
argument_list|()
operator|==
name|kind
return|;
block|}
specifier|public
name|boolean
name|isA
parameter_list|(
name|Collection
argument_list|<
name|SqlKind
argument_list|>
name|kinds
parameter_list|)
block|{
return|return
name|getKind
argument_list|()
operator|.
name|belongsTo
argument_list|(
name|kinds
argument_list|)
return|;
block|}
comment|/**    * Returns the kind of node this is.    *    * @return Node kind, never null    */
specifier|public
name|SqlKind
name|getKind
parameter_list|()
block|{
return|return
name|SqlKind
operator|.
name|OTHER
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|digest
return|;
block|}
comment|/**    * Returns string representation of this node.    * @return the same as {@link #toString()}, but without normalizing the output    */
annotation|@
name|API
argument_list|(
name|since
operator|=
literal|"1.22"
argument_list|,
name|status
operator|=
name|API
operator|.
name|Status
operator|.
name|EXPERIMENTAL
argument_list|)
specifier|public
name|String
name|toStringRaw
parameter_list|()
block|{
try|try
init|(
name|Closeable
name|ignored
init|=
name|skipNormalize
argument_list|()
init|)
block|{
return|return
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** Returns the number of nodes in this expression.    *    *<p>Leaf nodes, such as {@link RexInputRef} or {@link RexLiteral}, have    * a count of 1. Calls have a count of 1 plus the sum of their operands.    *    *<p>Node count is a measure of expression complexity that is used by some    * planner rules to prevent deeply nested expressions.    */
specifier|public
name|int
name|nodeCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|/**    * Accepts a visitor, dispatching to the right overloaded    * {@link RexVisitor#visitInputRef visitXxx} method.    *    *<p>Also see {@link RexUtil#apply(RexVisitor, java.util.List, RexNode)},    * which applies a visitor to several expressions simultaneously.    */
specifier|public
specifier|abstract
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|RexVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
function_decl|;
comment|/**    * Accepts a visitor with a payload, dispatching to the right overloaded    * {@link RexBiVisitor#visitInputRef(RexInputRef, Object)} visitXxx} method.    */
specifier|public
specifier|abstract
parameter_list|<
name|R
parameter_list|,
name|P
parameter_list|>
name|R
name|accept
parameter_list|(
name|RexBiVisitor
argument_list|<
name|R
argument_list|,
name|P
argument_list|>
name|visitor
parameter_list|,
name|P
name|arg
parameter_list|)
function_decl|;
comment|/** {@inheritDoc}    *    *<p>Every node must implement {@link #equals} based on its content    */
annotation|@
name|Override
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
comment|/** {@inheritDoc}    *    *<p>Every node must implement {@link #hashCode} consistent with    * {@link #equals}    */
annotation|@
name|Override
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
block|}
end_class

end_unit

