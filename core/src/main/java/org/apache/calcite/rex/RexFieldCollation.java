begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Expression combined with sort flags (DESCENDING, NULLS LAST).  */
end_comment

begin_class
specifier|public
class|class
name|RexFieldCollation
extends|extends
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlKind
argument_list|>
argument_list|>
block|{
comment|/** Canonical map of all combinations of {@link SqlKind} values that can ever    * occur. We use a canonical map to save a bit of memory. Because the sets    * are EnumSets they have predictable order for toString(). */
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|Set
argument_list|<
name|SqlKind
argument_list|>
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlKind
argument_list|>
argument_list|>
name|KINDS
init|=
operator|new
name|Initializer
argument_list|()
operator|.
name|add
argument_list|()
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|NULLS_FIRST
argument_list|)
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|NULLS_LAST
argument_list|)
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|DESCENDING
argument_list|)
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|DESCENDING
argument_list|,
name|SqlKind
operator|.
name|NULLS_FIRST
argument_list|)
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|DESCENDING
argument_list|,
name|SqlKind
operator|.
name|NULLS_LAST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|public
name|RexFieldCollation
parameter_list|(
name|RexNode
name|left
parameter_list|,
name|Set
argument_list|<
name|SqlKind
argument_list|>
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|left
argument_list|,
name|KINDS
operator|.
name|get
argument_list|(
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|left
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|s
return|;
block|}
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|SqlKind
name|operator
range|:
name|right
control|)
block|{
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|DESCENDING
case|:
name|b
operator|.
name|append
argument_list|(
literal|" DESC"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NULLS_FIRST
case|:
name|b
operator|.
name|append
argument_list|(
literal|" NULLS FIRST"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NULLS_LAST
case|:
name|b
operator|.
name|append
argument_list|(
literal|" NULLS LAST"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|operator
argument_list|)
throw|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|RelFieldCollation
operator|.
name|Direction
name|getDirection
parameter_list|()
block|{
return|return
name|right
operator|.
name|contains
argument_list|(
name|SqlKind
operator|.
name|DESCENDING
argument_list|)
condition|?
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
else|:
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
return|;
block|}
specifier|public
name|RelFieldCollation
operator|.
name|NullDirection
name|getNullDirection
parameter_list|()
block|{
return|return
name|right
operator|.
name|contains
argument_list|(
name|SqlKind
operator|.
name|NULLS_LAST
argument_list|)
condition|?
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|LAST
else|:
name|right
operator|.
name|contains
argument_list|(
name|SqlKind
operator|.
name|NULLS_FIRST
argument_list|)
condition|?
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|FIRST
else|:
name|getDirection
argument_list|()
operator|.
name|defaultNullDirection
argument_list|()
return|;
block|}
comment|/** Helper, used during initialization, that builds a canonizing map from    * sets of {@code SqlKind} to immutable sets of {@code SqlKind}. */
specifier|private
specifier|static
class|class
name|Initializer
block|{
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Set
argument_list|<
name|SqlKind
argument_list|>
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlKind
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|public
name|Initializer
name|add
parameter_list|()
block|{
return|return
name|add
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Initializer
name|add
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|SqlKind
modifier|...
name|kinds
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|Sets
operator|.
name|immutableEnumSet
argument_list|(
name|kind
argument_list|,
name|kinds
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Initializer
name|add
parameter_list|(
name|ImmutableSet
argument_list|<
name|SqlKind
argument_list|>
name|set
parameter_list|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|set
argument_list|,
name|set
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ImmutableMap
argument_list|<
name|Set
argument_list|<
name|SqlKind
argument_list|>
argument_list|,
name|ImmutableSet
argument_list|<
name|SqlKind
argument_list|>
argument_list|>
name|build
parameter_list|()
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RexFieldCollation.java
end_comment

end_unit

