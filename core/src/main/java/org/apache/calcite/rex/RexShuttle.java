begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|PolyNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Passes over a row-expression, calling a handler method for each node,  * appropriate to the type of the node.  *  *<p>Like {@link RexVisitor}, this is an instance of the  * {@link org.apache.calcite.util.Glossary#VISITOR_PATTERN Visitor Pattern}. Use  *<code> RexShuttle</code> if you would like your methods to return a  * value.</p>  */
end_comment

begin_class
specifier|public
class|class
name|RexShuttle
implements|implements
name|RexVisitor
argument_list|<
name|RexNode
argument_list|>
block|{
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|RexNode
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
name|boolean
index|[]
name|update
init|=
block|{
literal|false
block|}
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|clonedOperands
init|=
name|visitList
argument_list|(
name|over
operator|.
name|operands
argument_list|,
name|update
argument_list|)
decl_stmt|;
name|RexWindow
name|window
init|=
name|visitWindow
argument_list|(
name|over
operator|.
name|getWindow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|update
index|[
literal|0
index|]
operator|||
operator|(
name|window
operator|!=
name|over
operator|.
name|getWindow
argument_list|()
operator|)
condition|)
block|{
comment|// REVIEW jvs 8-Mar-2005:  This doesn't take into account
comment|// the fact that a rewrite may have changed the result type.
comment|// To do that, we would need to take a RexBuilder and
comment|// watch out for special operators like CAST and NEW where
comment|// the type is embedded in the original call.
return|return
operator|new
name|RexOver
argument_list|(
name|over
operator|.
name|getType
argument_list|()
argument_list|,
name|over
operator|.
name|getAggOperator
argument_list|()
argument_list|,
name|clonedOperands
argument_list|,
name|window
argument_list|,
name|over
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|over
operator|.
name|ignoreNulls
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|over
return|;
block|}
block|}
specifier|public
name|RexWindow
name|visitWindow
parameter_list|(
name|RexWindow
name|window
parameter_list|)
block|{
name|boolean
index|[]
name|update
init|=
block|{
literal|false
block|}
decl_stmt|;
name|List
argument_list|<
name|RexFieldCollation
argument_list|>
name|clonedOrderKeys
init|=
name|visitFieldCollations
argument_list|(
name|window
operator|.
name|orderKeys
argument_list|,
name|update
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|clonedPartitionKeys
init|=
name|visitList
argument_list|(
name|window
operator|.
name|partitionKeys
argument_list|,
name|update
argument_list|)
decl_stmt|;
specifier|final
name|RexWindowBound
name|lowerBound
init|=
name|window
operator|.
name|getLowerBound
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|RexWindowBound
name|upperBound
init|=
name|window
operator|.
name|getUpperBound
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerBound
operator|==
literal|null
operator|||
name|upperBound
operator|==
literal|null
operator|||
operator|!
name|update
index|[
literal|0
index|]
operator|&&
name|lowerBound
operator|==
name|window
operator|.
name|getLowerBound
argument_list|()
operator|&&
name|upperBound
operator|==
name|window
operator|.
name|getUpperBound
argument_list|()
condition|)
block|{
return|return
name|window
return|;
block|}
name|boolean
name|rows
init|=
name|window
operator|.
name|isRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerBound
operator|.
name|isUnbounded
argument_list|()
operator|&&
name|lowerBound
operator|.
name|isPreceding
argument_list|()
operator|&&
name|upperBound
operator|.
name|isUnbounded
argument_list|()
operator|&&
name|upperBound
operator|.
name|isFollowing
argument_list|()
condition|)
block|{
comment|// RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
comment|//   is equivalent to
comment|// ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
comment|//   but we prefer "RANGE"
name|rows
operator|=
literal|false
expr_stmt|;
block|}
return|return
operator|new
name|RexWindow
argument_list|(
name|clonedPartitionKeys
argument_list|,
name|clonedOrderKeys
argument_list|,
name|lowerBound
argument_list|,
name|upperBound
argument_list|,
name|rows
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitSubQuery
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|)
block|{
name|boolean
index|[]
name|update
init|=
block|{
literal|false
block|}
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|clonedOperands
init|=
name|visitList
argument_list|(
name|subQuery
operator|.
name|operands
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|update
index|[
literal|0
index|]
condition|)
block|{
return|return
name|subQuery
operator|.
name|clone
argument_list|(
name|subQuery
operator|.
name|getType
argument_list|()
argument_list|,
name|clonedOperands
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|subQuery
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitTableInputRef
parameter_list|(
name|RexTableInputRef
name|ref
parameter_list|)
block|{
return|return
name|ref
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitPatternFieldRef
parameter_list|(
name|RexPatternFieldRef
name|fieldRef
parameter_list|)
block|{
return|return
name|fieldRef
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
specifier|final
name|RexCall
name|call
parameter_list|)
block|{
name|boolean
index|[]
name|update
init|=
block|{
literal|false
block|}
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|clonedOperands
init|=
name|visitList
argument_list|(
name|call
operator|.
name|operands
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|update
index|[
literal|0
index|]
condition|)
block|{
comment|// REVIEW jvs 8-Mar-2005:  This doesn't take into account
comment|// the fact that a rewrite may have changed the result type.
comment|// To do that, we would need to take a RexBuilder and
comment|// watch out for special operators like CAST and NEW where
comment|// the type is embedded in the original call.
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|clonedOperands
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|call
return|;
block|}
block|}
comment|/**    * Visits each of an array of expressions and returns an array of the    * results.    *    * @param exprs  Array of expressions    * @param update If not null, sets this to true if any of the expressions    *               was modified    * @return Array of visited expressions    */
specifier|protected
name|RexNode
index|[]
name|visitArray
argument_list|(
name|RexNode
index|[]
name|exprs
argument_list|,
name|boolean
expr|@
name|Nullable
index|[]
name|update
argument_list|)
block|{
name|RexNode
index|[]
name|clonedOperands
init|=
operator|new
name|RexNode
index|[
name|exprs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|exprs
index|[
name|i
index|]
decl_stmt|;
name|RexNode
name|clonedOperand
init|=
name|operand
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|clonedOperand
operator|!=
name|operand
operator|)
operator|&&
operator|(
name|update
operator|!=
literal|null
operator|)
condition|)
block|{
name|update
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|clonedOperands
index|[
name|i
index|]
operator|=
name|clonedOperand
expr_stmt|;
block|}
return|return
name|clonedOperands
return|;
block|}
comment|/**    * Visits each of a list of expressions and returns a list of the    * results.    *    * @param exprs  List of expressions    * @param update If not null, sets this to true if any of the expressions    *               was modified    * @return Array of visited expressions    */
specifier|protected
name|List
argument_list|<
name|RexNode
argument_list|>
name|visitList
argument_list|(
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|exprs
argument_list|,
name|boolean
expr|@
name|Nullable
index|[]
name|update
argument_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|clonedOperands
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|exprs
control|)
block|{
name|RexNode
name|clonedOperand
init|=
name|operand
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|clonedOperand
operator|!=
name|operand
operator|)
operator|&&
operator|(
name|update
operator|!=
literal|null
operator|)
condition|)
block|{
name|update
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|clonedOperands
operator|.
name|add
argument_list|(
name|clonedOperand
argument_list|)
expr_stmt|;
block|}
return|return
name|clonedOperands
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Visits each of a list of field collations and returns a list of the    * results.    *    * @param collations List of field collations    * @param update     If not null, sets this to true if any of the expressions    *                   was modified    * @return Array of visited field collations    */
specifier|protected
name|List
argument_list|<
name|RexFieldCollation
argument_list|>
name|visitFieldCollations
argument_list|(
name|List
argument_list|<
name|RexFieldCollation
argument_list|>
name|collations
argument_list|,
name|boolean
expr|@
name|Nullable
index|[]
name|update
argument_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexFieldCollation
argument_list|>
name|clonedOperands
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexFieldCollation
name|collation
range|:
name|collations
control|)
block|{
name|RexNode
name|clonedOperand
init|=
name|collation
operator|.
name|left
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|clonedOperand
operator|!=
name|collation
operator|.
name|left
operator|)
operator|&&
operator|(
name|update
operator|!=
literal|null
operator|)
condition|)
block|{
name|update
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|collation
operator|=
operator|new
name|RexFieldCollation
argument_list|(
name|clonedOperand
argument_list|,
name|requireNonNull
argument_list|(
name|collation
operator|.
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clonedOperands
operator|.
name|add
argument_list|(
name|collation
argument_list|)
expr_stmt|;
block|}
return|return
name|clonedOperands
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|variable
parameter_list|)
block|{
return|return
name|variable
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
name|RexNode
name|before
init|=
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
decl_stmt|;
name|RexNode
name|after
init|=
name|before
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|before
operator|==
name|after
condition|)
block|{
return|return
name|fieldAccess
return|;
block|}
else|else
block|{
return|return
operator|new
name|RexFieldAccess
argument_list|(
name|after
argument_list|,
name|fieldAccess
operator|.
name|getField
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
return|return
name|inputRef
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
block|{
return|return
name|localRef
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
name|literal
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitDynamicParam
parameter_list|(
name|RexDynamicParam
name|dynamicParam
parameter_list|)
block|{
return|return
name|dynamicParam
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitRangeRef
parameter_list|(
name|RexRangeRef
name|rangeRef
parameter_list|)
block|{
return|return
name|rangeRef
return|;
block|}
comment|/**    * Applies this shuttle to each expression in a list.    *    * @return whether any of the expressions changed    */
specifier|public
name|final
operator|<
name|T
expr|extends @
name|Nullable
name|RexNode
operator|>
name|boolean
name|mutate
argument_list|(
name|List
argument_list|<
name|T
argument_list|>
name|exprList
argument_list|)
block|{
name|int
name|changeCount
operator|=
literal|0
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|T
name|expr
init|=
name|exprList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|T
name|expr2
init|=
operator|(
name|T
operator|)
name|apply
argument_list|(
name|expr
argument_list|)
decl_stmt|;
comment|// Avoid NPE if expr is null
if|if
condition|(
name|expr
operator|!=
name|expr2
condition|)
block|{
operator|++
name|changeCount
expr_stmt|;
name|exprList
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|expr2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_return
return|return
name|changeCount
operator|>
literal|0
return|;
end_return

begin_comment
unit|}
comment|/**    * Applies this shuttle to each expression in a list and returns the    * resulting list. Does not modify the initial list.    *    *<p>Returns null if and only if {@code exprList} is null.    */
end_comment

begin_expr_stmt
unit|public
name|final
operator|<
name|T
expr|extends @
name|Nullable
name|RexNode
operator|>
expr|@
name|PolyNull
name|List
argument_list|<
name|T
argument_list|>
name|apply
argument_list|(
annotation|@
name|PolyNull
name|List
argument_list|<
name|T
argument_list|>
name|exprList
argument_list|)
block|{
if|if
condition|(
name|exprList
operator|==
literal|null
condition|)
block|{
return|return
name|exprList
return|;
block|}
name|final
name|List
argument_list|<
name|T
argument_list|>
name|list2
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|exprList
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if_stmt
if|if
condition|(
name|mutate
argument_list|(
name|list2
argument_list|)
condition|)
block|{
return|return
name|list2
return|;
block|}
else|else
block|{
return|return
name|exprList
return|;
block|}
end_if_stmt

begin_comment
unit|}
comment|/**    * Applies this shuttle to an expression, or returns null if the expression    * is null.    */
end_comment

begin_function
unit|public
specifier|final
annotation|@
name|PolyNull
name|RexNode
name|apply
parameter_list|(
annotation|@
name|PolyNull
name|RexNode
name|expr
parameter_list|)
block|{
return|return
operator|(
name|expr
operator|==
literal|null
operator|)
condition|?
name|expr
else|:
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

