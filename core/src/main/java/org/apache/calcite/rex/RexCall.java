begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSyntax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * An expression formed by a call to an operator with zero or more expressions  * as operands.  *  *<p>Operators may be binary, unary, functions, special syntactic constructs  * like<code>CASE ... WHEN ... END</code>, or even internally generated  * constructs like implicit type conversions. The syntax of the operator is  * really irrelevant, because row-expressions (unlike  * {@link org.apache.calcite.sql.SqlNode SQL expressions})  * do not directly represent a piece of source code.  *  *<p>It's not often necessary to sub-class this class. The smarts should be in  * the operator, rather than the call. Any extra information about the call can  * often be encoded as extra arguments. (These don't need to be hidden, because  * no one is going to be generating source code from this tree.)</p>  */
end_comment

begin_class
specifier|public
class|class
name|RexCall
extends|extends
name|RexNode
block|{
comment|/**    * Sort shorter digests first, then order by string representation.    * The result is designed for consistent output and better readability.    */
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|OPERAND_READABILITY_COMPARATOR
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|String
operator|::
name|length
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|Comparator
operator|.
name|naturalOrder
argument_list|()
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|public
specifier|final
name|SqlOperator
name|op
decl_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
specifier|public
specifier|final
name|RelDataType
name|type
decl_stmt|;
comment|/**    * Simple binary operators are those operators which expects operands from the same Domain.    *    *<p>Example: simple comparisions ({@code =}, {@code<}).    *    *<p>Note: it does not contain {@code IN} because that is defined on D x D^n.    */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|SqlKind
argument_list|>
name|SIMPLE_BINARY_OPS
decl_stmt|;
static|static
block|{
name|EnumSet
argument_list|<
name|SqlKind
argument_list|>
name|kinds
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|SqlKind
operator|.
name|PLUS
argument_list|,
name|SqlKind
operator|.
name|MINUS
argument_list|,
name|SqlKind
operator|.
name|TIMES
argument_list|,
name|SqlKind
operator|.
name|DIVIDE
argument_list|)
decl_stmt|;
name|kinds
operator|.
name|addAll
argument_list|(
name|SqlKind
operator|.
name|COMPARISON
argument_list|)
expr_stmt|;
name|kinds
operator|.
name|remove
argument_list|(
name|SqlKind
operator|.
name|IN
argument_list|)
expr_stmt|;
name|SIMPLE_BINARY_OPS
operator|=
name|Sets
operator|.
name|immutableEnumSet
argument_list|(
name|kinds
argument_list|)
expr_stmt|;
block|}
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|RexCall
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|SqlOperator
name|op
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|op
argument_list|,
literal|"operator"
argument_list|)
expr_stmt|;
name|this
operator|.
name|operands
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|operands
argument_list|)
expr_stmt|;
assert|assert
name|op
operator|.
name|getKind
argument_list|()
operator|!=
literal|null
operator|:
name|op
assert|;
assert|assert
name|op
operator|.
name|validRexOperands
argument_list|(
name|operands
operator|.
name|size
argument_list|()
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
operator|:
name|this
assert|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Appends call operands without parenthesis.    * {@link RexLiteral} might omit data type depending on the context.    * For instance, {@code null:BOOLEAN} vs {@code =(true, null)}.    * The idea here is to omit "obvious" types for readability purposes while    * still maintain {@link RelNode#getDigest()} contract.    *    * @see RexLiteral#computeDigest(RexDigestIncludeType)    * @param sb destination    * @return original StringBuilder for fluent API    */
specifier|protected
specifier|final
name|StringBuilder
name|appendOperands
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
if|if
condition|(
name|operands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|sb
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|operandDigests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|operands
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|operand
operator|instanceof
name|RexLiteral
operator|)
condition|)
block|{
name|operandDigests
operator|.
name|add
argument_list|(
name|operand
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Type information might be omitted in certain cases to improve readability
comment|// For instance, AND/OR arguments should be BOOLEAN, so
comment|// AND(true, null) is better than AND(true, null:BOOLEAN), and we keep the same info
comment|// +($0, 2) is better than +($0, 2:BIGINT). Note: if $0 has BIGINT, then 2 is expected to be
comment|// of BIGINT type as well.
name|RexDigestIncludeType
name|includeType
init|=
name|RexDigestIncludeType
operator|.
name|OPTIONAL
decl_stmt|;
if|if
condition|(
operator|(
name|isA
argument_list|(
name|SqlKind
operator|.
name|AND
argument_list|)
operator|||
name|isA
argument_list|(
name|SqlKind
operator|.
name|OR
argument_list|)
operator|)
operator|&&
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
name|includeType
operator|=
name|RexDigestIncludeType
operator|.
name|NO_TYPE
expr_stmt|;
block|}
if|if
condition|(
name|SIMPLE_BINARY_OPS
operator|.
name|contains
argument_list|(
name|getKind
argument_list|()
argument_list|)
operator|&&
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|RexNode
name|otherArg
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
operator|-
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
operator|(
name|otherArg
operator|instanceof
name|RexLiteral
operator|)
operator|||
operator|(
operator|(
name|RexLiteral
operator|)
name|otherArg
operator|)
operator|.
name|digestIncludesType
argument_list|()
operator|==
name|RexDigestIncludeType
operator|.
name|NO_TYPE
operator|)
operator|&&
name|equalSansNullability
argument_list|(
name|operand
operator|.
name|getType
argument_list|()
argument_list|,
name|otherArg
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|includeType
operator|=
name|RexDigestIncludeType
operator|.
name|NO_TYPE
expr_stmt|;
block|}
block|}
name|operandDigests
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|operand
operator|)
operator|.
name|computeDigest
argument_list|(
name|includeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|totalLength
init|=
operator|(
name|operandDigests
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|*
literal|2
decl_stmt|;
comment|// commas
for|for
control|(
name|String
name|s
range|:
name|operandDigests
control|)
block|{
name|totalLength
operator|+=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|ensureCapacity
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|+
name|totalLength
argument_list|)
expr_stmt|;
name|sortOperandsIfNeeded
argument_list|(
name|sb
argument_list|,
name|operands
argument_list|,
name|operandDigests
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operandDigests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|op
init|=
name|operandDigests
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
return|;
block|}
specifier|private
name|void
name|sortOperandsIfNeeded
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|operandDigests
parameter_list|)
block|{
if|if
condition|(
name|operands
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|needNormalize
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|SqlKind
name|kind
init|=
name|op
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|SqlKind
operator|.
name|SYMMETRICAL_SAME_ARG_TYPE
operator|.
name|contains
argument_list|(
name|kind
argument_list|)
condition|)
block|{
specifier|final
name|RelDataType
name|firstType
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equalSansNullability
argument_list|(
name|firstType
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Arguments have different type, thus they must not be sorted
return|return;
block|}
block|}
comment|// fall through: order arguments below
block|}
if|else if
condition|(
operator|!
name|SqlKind
operator|.
name|SYMMETRICAL
operator|.
name|contains
argument_list|(
name|kind
argument_list|)
operator|&&
operator|(
name|kind
operator|==
name|kind
operator|.
name|reverse
argument_list|()
operator|||
operator|!
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|kind
operator|.
name|sql
argument_list|)
operator|||
name|sb
operator|.
name|length
argument_list|()
operator|<
name|kind
operator|.
name|sql
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|||
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'('
operator|)
condition|)
block|{
comment|// The operations have to be either symmetrical or reversible
comment|// Nothing matched => we skip argument sorting
comment|// Note: RexCall digest uses op.getName() that might be different from kind.sql
comment|// for certain calls. So we skip normalizing the calls that have customized op.getName()
comment|// We ensure the current string contains enough room for preceding kind.sql otherwise
comment|// we won't have an option to replace the operator to reverse it in case the operands are
comment|// reordered.
return|return;
block|}
comment|// $0=$1 is the same as $1=$0, so we make sure the digest is the same for them
name|String
name|oldFirstArg
init|=
name|operandDigests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|operandDigests
operator|.
name|sort
argument_list|(
name|OPERAND_READABILITY_COMPARATOR
argument_list|)
expr_stmt|;
comment|// When $1> $0 is normalized, the operation needs to be flipped
comment|// So we sort arguments first, then flip the sign
if|if
condition|(
name|kind
operator|!=
name|kind
operator|.
name|reverse
argument_list|()
condition|)
block|{
assert|assert
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|:
literal|"Compare operation must have 2 arguments: "
operator|+
name|this
operator|+
literal|". Actual arguments are "
operator|+
name|operandDigests
assert|;
name|int
name|operatorEnd
init|=
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
comment|/* ( */
decl_stmt|;
name|int
name|operatorStart
init|=
name|operatorEnd
operator|-
name|op
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
assert|assert
name|op
operator|.
name|getName
argument_list|()
operator|.
name|contentEquals
argument_list|(
name|sb
operator|.
name|subSequence
argument_list|(
name|operatorStart
argument_list|,
name|operatorEnd
argument_list|)
argument_list|)
operator|:
literal|"Operation name must precede opening brace like in<=(x, y). Actual content is "
operator|+
name|sb
operator|.
name|subSequence
argument_list|(
name|operatorStart
argument_list|,
name|operatorEnd
argument_list|)
operator|+
literal|" at position "
operator|+
name|operatorStart
operator|+
literal|" in "
operator|+
name|sb
assert|;
name|SqlKind
name|newKind
init|=
name|kind
operator|.
name|reverse
argument_list|()
decl_stmt|;
comment|// If arguments are the same, then we normalize< vs>
comment|// '<' == 60, '>' == 62, so we prefer<
if|if
condition|(
name|operandDigests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|operandDigests
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|newKind
operator|.
name|compareTo
argument_list|(
name|kind
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// If reverse kind is greater, then skip reversing
return|return;
block|}
block|}
if|else if
condition|(
name|oldFirstArg
operator|.
name|equals
argument_list|(
name|operandDigests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
comment|// The sorting did not shuffle the operands, so we do not need to update operation name
comment|// in the digest
return|return;
block|}
comment|// Replace operator name in the digest
name|sb
operator|.
name|replace
argument_list|(
name|operatorStart
argument_list|,
name|operatorEnd
argument_list|,
name|newKind
operator|.
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is a poorman's    * {@link org.apache.calcite.sql.type.SqlTypeUtil#equalSansNullability(RelDataTypeFactory, RelDataType, RelDataType)}    *<p>{@code SqlTypeUtil} requires {@link RelDataTypeFactory} which we haven't, so we assume that    * "not null" is represented in the type's digest as a trailing "NOT NULL" (case sensitive)    * @param a first type    * @param b second type    * @return true if the types are equal or the only difference is nullability    */
specifier|private
specifier|static
name|boolean
name|equalSansNullability
parameter_list|(
name|RelDataType
name|a
parameter_list|,
name|RelDataType
name|b
parameter_list|)
block|{
name|String
name|x
init|=
name|a
operator|.
name|getFullTypeString
argument_list|()
decl_stmt|;
name|String
name|y
init|=
name|b
operator|.
name|getFullTypeString
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|length
argument_list|()
operator|<
name|y
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|c
init|=
name|x
decl_stmt|;
name|x
operator|=
name|y
expr_stmt|;
name|y
operator|=
name|c
expr_stmt|;
block|}
return|return
operator|(
name|x
operator|.
name|length
argument_list|()
operator|==
name|y
operator|.
name|length
argument_list|()
operator|||
name|x
operator|.
name|length
argument_list|()
operator|==
name|y
operator|.
name|length
argument_list|()
operator|+
literal|9
operator|&&
name|x
operator|.
name|endsWith
argument_list|(
literal|" NOT NULL"
argument_list|)
operator|)
operator|&&
name|x
operator|.
name|startsWith
argument_list|(
name|y
argument_list|)
return|;
block|}
specifier|protected
annotation|@
name|Nonnull
name|String
name|computeDigest
parameter_list|(
name|boolean
name|withType
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|op
operator|.
name|getSyntax
argument_list|()
operator|==
name|SqlSyntax
operator|.
name|FUNCTION_ID
operator|)
condition|)
block|{
comment|// Don't print params for empty arg list. For example, we want
comment|// "SYSTEM_USER", not "SYSTEM_USER()".
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|appendOperands
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withType
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
comment|// NOTE jvs 16-Jan-2005:  for digests, it is very important
comment|// to use the full type string.
name|sb
operator|.
name|append
argument_list|(
name|type
operator|.
name|getFullTypeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
annotation|@
name|Nonnull
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
operator|!
name|needNormalize
argument_list|()
condition|)
block|{
comment|// Non-normalize describe is requested
return|return
name|computeDigest
argument_list|(
name|digestWithType
argument_list|()
argument_list|)
return|;
block|}
comment|// This data race is intentional
name|String
name|localDigest
init|=
name|digest
decl_stmt|;
if|if
condition|(
name|localDigest
operator|==
literal|null
condition|)
block|{
name|localDigest
operator|=
name|computeDigest
argument_list|(
name|digestWithType
argument_list|()
argument_list|)
expr_stmt|;
name|digest
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|localDigest
argument_list|)
expr_stmt|;
block|}
return|return
name|localDigest
return|;
block|}
specifier|private
name|boolean
name|digestWithType
parameter_list|()
block|{
return|return
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
operator|||
name|isA
argument_list|(
name|SqlKind
operator|.
name|NEW_SPECIFICATION
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|RexVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitCall
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|,
name|P
parameter_list|>
name|R
name|accept
parameter_list|(
name|RexBiVisitor
argument_list|<
name|R
argument_list|,
name|P
argument_list|>
name|visitor
parameter_list|,
name|P
name|arg
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitCall
argument_list|(
name|this
argument_list|,
name|arg
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAlwaysTrue
parameter_list|()
block|{
comment|// "c IS NOT NULL" occurs when we expand EXISTS.
comment|// This reduction allows us to convert it to a semi-join.
switch|switch
condition|(
name|getKind
argument_list|()
condition|)
block|{
case|case
name|IS_NOT_NULL
case|:
return|return
operator|!
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
return|;
case|case
name|IS_NOT_TRUE
case|:
case|case
name|IS_FALSE
case|:
case|case
name|NOT
case|:
return|return
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAlwaysFalse
argument_list|()
return|;
case|case
name|IS_NOT_FALSE
case|:
case|case
name|IS_TRUE
case|:
case|case
name|CAST
case|:
return|return
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAlwaysTrue
argument_list|()
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAlwaysFalse
parameter_list|()
block|{
switch|switch
condition|(
name|getKind
argument_list|()
condition|)
block|{
case|case
name|IS_NULL
case|:
return|return
operator|!
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
return|;
case|case
name|IS_NOT_TRUE
case|:
case|case
name|IS_FALSE
case|:
case|case
name|NOT
case|:
return|return
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAlwaysTrue
argument_list|()
return|;
case|case
name|IS_NOT_FALSE
case|:
case|case
name|IS_TRUE
case|:
case|case
name|CAST
case|:
return|return
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAlwaysFalse
argument_list|()
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|SqlKind
name|getKind
parameter_list|()
block|{
return|return
name|op
operator|.
name|kind
return|;
block|}
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|getOperands
parameter_list|()
block|{
return|return
name|operands
return|;
block|}
specifier|public
name|SqlOperator
name|getOperator
parameter_list|()
block|{
return|return
name|op
return|;
block|}
comment|/**    * Creates a new call to the same operator with different operands.    *    * @param type     Return type    * @param operands Operands to call    * @return New call    */
specifier|public
name|RexCall
name|clone
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
return|return
operator|new
name|RexCall
argument_list|(
name|type
argument_list|,
name|op
argument_list|,
name|operands
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|RexCall
operator|&&
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

