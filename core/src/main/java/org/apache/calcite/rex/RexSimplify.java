begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Strong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|NullSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeCoercionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|RangeSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Sarg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableRangeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|RangeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeRangeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUnknownAs
operator|.
name|FALSE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUnknownAs
operator|.
name|TRUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUnknownAs
operator|.
name|UNKNOWN
import|;
end_import

begin_comment
comment|/**  * Context required to simplify a row-expression.  */
end_comment

begin_class
specifier|public
class|class
name|RexSimplify
block|{
specifier|private
specifier|final
name|boolean
name|paranoid
decl_stmt|;
specifier|public
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|RelOptPredicateList
name|predicates
decl_stmt|;
comment|/** How to treat UNKNOWN values, if one of the deprecated {@code    * simplify} methods without an {@code unknownAs} argument is called. */
specifier|final
name|RexUnknownAs
name|defaultUnknownAs
decl_stmt|;
specifier|final
name|boolean
name|predicateElimination
decl_stmt|;
specifier|private
specifier|final
name|RexExecutor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|Strong
name|strong
decl_stmt|;
comment|/**    * Creates a RexSimplify.    *    * @param rexBuilder Rex builder    * @param predicates Predicates known to hold on input fields    * @param executor Executor for constant reduction, not null    */
specifier|public
name|RexSimplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|,
name|RexExecutor
name|executor
parameter_list|)
block|{
name|this
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|UNKNOWN
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/** Internal constructor. */
specifier|private
name|RexSimplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|,
name|RexUnknownAs
name|defaultUnknownAs
parameter_list|,
name|boolean
name|predicateElimination
parameter_list|,
name|boolean
name|paranoid
parameter_list|,
name|RexExecutor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rexBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|predicates
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultUnknownAs
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|defaultUnknownAs
argument_list|)
expr_stmt|;
name|this
operator|.
name|predicateElimination
operator|=
name|predicateElimination
expr_stmt|;
name|this
operator|.
name|paranoid
operator|=
name|paranoid
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|strong
operator|=
operator|new
name|Strong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexSimplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|,
name|RexExecutor
name|executor
parameter_list|)
block|{
name|this
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|EMPTY
argument_list|,
name|RexUnknownAs
operator|.
name|falseIf
argument_list|(
name|unknownAsFalse
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexSimplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|,
name|RexExecutor
name|executor
parameter_list|)
block|{
name|this
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|RexUnknownAs
operator|.
name|falseIf
argument_list|(
name|unknownAsFalse
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Returns a RexSimplify the same as this but with a specified    * {@link #defaultUnknownAs} value.    *    * @deprecated Use methods with a {@link RexUnknownAs} argument, such as    * {@link #simplify(RexNode, RexUnknownAs)}. */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexSimplify
name|withUnknownAsFalse
parameter_list|(
name|boolean
name|unknownAsFalse
parameter_list|)
block|{
specifier|final
name|RexUnknownAs
name|defaultUnknownAs
init|=
name|RexUnknownAs
operator|.
name|falseIf
argument_list|(
name|unknownAsFalse
argument_list|)
decl_stmt|;
return|return
name|defaultUnknownAs
operator|==
name|this
operator|.
name|defaultUnknownAs
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|defaultUnknownAs
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Returns a RexSimplify the same as this but with a specified    * {@link #predicates} value. */
specifier|public
name|RexSimplify
name|withPredicates
parameter_list|(
name|RelOptPredicateList
name|predicates
parameter_list|)
block|{
return|return
name|predicates
operator|==
name|this
operator|.
name|predicates
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|defaultUnknownAs
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Returns a RexSimplify the same as this but which verifies that    * the expression before and after simplification are equivalent.    *    * @see #verify    */
specifier|public
name|RexSimplify
name|withParanoid
parameter_list|(
name|boolean
name|paranoid
parameter_list|)
block|{
return|return
name|paranoid
operator|==
name|this
operator|.
name|paranoid
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|defaultUnknownAs
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Returns a RexSimplify the same as this but with a specified    * {@link #predicateElimination} value.    *    *<p>This is introduced temporarily, until    * {@link Bug#CALCITE_2401_FIXED [CALCITE-2401] is fixed}.    */
specifier|private
name|RexSimplify
name|withPredicateElimination
parameter_list|(
name|boolean
name|predicateElimination
parameter_list|)
block|{
return|return
name|predicateElimination
operator|==
name|this
operator|.
name|predicateElimination
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|defaultUnknownAs
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Simplifies a boolean expression, always preserving its type and its    * nullability.    *    *<p>This is useful if you are simplifying expressions in a    * {@link Project}. */
specifier|public
name|RexNode
name|simplifyPreservingType
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|simplifyPreservingType
argument_list|(
name|e
argument_list|,
name|defaultUnknownAs
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|simplifyPreservingType
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|,
name|boolean
name|matchNullability
parameter_list|)
block|{
specifier|final
name|RexNode
name|e2
init|=
name|simplifyUnknownAs
argument_list|(
name|e
argument_list|,
name|unknownAs
argument_list|)
decl_stmt|;
if|if
condition|(
name|e2
operator|.
name|getType
argument_list|()
operator|==
name|e
operator|.
name|getType
argument_list|()
condition|)
block|{
return|return
name|e2
return|;
block|}
if|if
condition|(
operator|!
name|matchNullability
operator|&&
name|SqlTypeUtil
operator|.
name|equalSansNullability
argument_list|(
name|rexBuilder
operator|.
name|typeFactory
argument_list|,
name|e2
operator|.
name|getType
argument_list|()
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e2
return|;
block|}
specifier|final
name|RexNode
name|e3
init|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|e2
argument_list|,
name|matchNullability
argument_list|)
decl_stmt|;
if|if
condition|(
name|e3
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
return|return
name|e3
return|;
block|}
comment|/**    * Simplifies a boolean expression.    *    *<p>In particular:</p>    *<ul>    *<li>{@code simplify(x = 1 AND y = 2 AND NOT x = 1)}    * returns {@code y = 2}</li>    *<li>{@code simplify(x = 1 AND FALSE)}    * returns {@code FALSE}</li>    *</ul>    *    *<p>Handles UNKNOWN values using the policy specified when you created this    * {@code RexSimplify}. Unless you used a deprecated constructor, that policy    * is {@link RexUnknownAs#UNKNOWN}.    *    *<p>If the expression is a predicate in a WHERE clause, consider instead    * using {@link #simplifyUnknownAsFalse(RexNode)}.    *    * @param e Expression to simplify    */
specifier|public
name|RexNode
name|simplify
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|simplifyUnknownAs
argument_list|(
name|e
argument_list|,
name|defaultUnknownAs
argument_list|)
return|;
block|}
comment|/** As {@link #simplify(RexNode)}, but for a boolean expression    * for which a result of UNKNOWN will be treated as FALSE.    *    *<p>Use this form for expressions on a WHERE, ON, HAVING or FILTER(WHERE)    * clause.    *    *<p>This may allow certain additional simplifications. A result of UNKNOWN    * may yield FALSE, however it may still yield UNKNOWN. (If the simplified    * expression has type BOOLEAN NOT NULL, then of course it can only return    * FALSE.) */
specifier|public
specifier|final
name|RexNode
name|simplifyUnknownAsFalse
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|simplifyUnknownAs
argument_list|(
name|e
argument_list|,
name|FALSE
argument_list|)
return|;
block|}
comment|/** As {@link #simplify(RexNode)}, but specifying how UNKNOWN values are to be    * treated.    *    *<p>If UNKNOWN is treated as FALSE, this may allow certain additional    * simplifications. A result of UNKNOWN may yield FALSE, however it may still    * yield UNKNOWN. (If the simplified expression has type BOOLEAN NOT NULL,    * then of course it can only return FALSE.) */
specifier|public
name|RexNode
name|simplifyUnknownAs
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
specifier|final
name|RexNode
name|simplified
init|=
name|withParanoid
argument_list|(
literal|false
argument_list|)
operator|.
name|simplify
argument_list|(
name|e
argument_list|,
name|unknownAs
argument_list|)
decl_stmt|;
if|if
condition|(
name|paranoid
condition|)
block|{
name|verify
argument_list|(
name|e
argument_list|,
name|simplified
argument_list|,
name|unknownAs
argument_list|)
expr_stmt|;
block|}
return|return
name|simplified
return|;
block|}
comment|/** Internal method to simplify an expression.    *    *<p>Unlike the public {@link #simplify(RexNode)}    * and {@link #simplifyUnknownAsFalse(RexNode)} methods,    * never calls {@link #verify(RexNode, RexNode, RexUnknownAs)}.    * Verify adds an overhead that is only acceptable for a top-level call.    */
name|RexNode
name|simplify
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
if|if
condition|(
name|strong
operator|.
name|isNull
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// Only boolean NULL (aka UNKNOWN) can be converted to FALSE. Even in
comment|// unknownAs=FALSE mode, we must not convert a NULL integer (say) to FALSE
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
switch|switch
condition|(
name|unknownAs
condition|)
block|{
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|unknownAs
operator|.
name|toBoolean
argument_list|()
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
return|return
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
return|return
name|simplifyAnd
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|OR
case|:
return|return
name|simplifyOr
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|NOT
case|:
return|return
name|simplifyNot
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|CASE
case|:
return|return
name|simplifyCase
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|COALESCE
case|:
return|return
name|simplifyCoalesce
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|CAST
case|:
return|return
name|simplifyCast
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|CEIL
case|:
case|case
name|FLOOR
case|:
return|return
name|simplifyCeilFloor
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|IS_NOT_NULL
case|:
case|case
name|IS_TRUE
case|:
case|case
name|IS_NOT_TRUE
case|:
case|case
name|IS_FALSE
case|:
case|case
name|IS_NOT_FALSE
case|:
assert|assert
name|e
operator|instanceof
name|RexCall
assert|;
return|return
name|simplifyIs
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|NOT_EQUALS
case|:
return|return
name|simplifyComparison
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|SEARCH
case|:
return|return
name|simplifySearch
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|LIKE
case|:
return|return
name|simplifyLike
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|MINUS_PREFIX
case|:
return|return
name|simplifyUnaryMinus
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|PLUS_PREFIX
case|:
return|return
name|simplifyUnaryPlus
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAs
argument_list|)
return|;
default|default:
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|RexCall
operator|.
name|class
condition|)
block|{
return|return
name|simplifyGenericNode
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|e
return|;
block|}
block|}
block|}
comment|/**    * Runs simplification inside a non-specialized node.    */
specifier|private
name|RexNode
name|simplifyGenericNode
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|e
operator|.
name|operands
argument_list|)
decl_stmt|;
name|simplifyList
argument_list|(
name|operands
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|operands
operator|.
name|equals
argument_list|(
name|operands
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|e
operator|.
name|getOperator
argument_list|()
argument_list|,
name|operands
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|simplifyLike
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|equals
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
return|return
name|simplifyGenericNode
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|// e must be a comparison (=,>,>=,<,<=, !=)
specifier|private
name|RexNode
name|simplifyComparison
parameter_list|(
name|RexCall
name|e
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|simplifyComparison
argument_list|(
name|e
argument_list|,
name|unknownAs
argument_list|,
name|Comparable
operator|.
name|class
argument_list|)
return|;
block|}
comment|// e must be a comparison (=,>,>=,<,<=, !=)
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|simplifyComparison
parameter_list|(
name|RexCall
name|e
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|e
operator|.
name|operands
argument_list|)
decl_stmt|;
comment|// UNKNOWN mode is warranted: false = null
name|simplifyList
argument_list|(
name|operands
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
comment|// Simplify "x<op> x"
specifier|final
name|RexNode
name|o0
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|o1
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|o0
operator|.
name|equals
argument_list|(
name|o1
argument_list|)
operator|&&
name|RexUtil
operator|.
name|isDeterministic
argument_list|(
name|o0
argument_list|)
condition|)
block|{
name|RexNode
name|newExpr
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
comment|// "x = x" simplifies to "null or x is not null" (similarly<= and>=)
name|newExpr
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|o0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|simplify
argument_list|(
name|newExpr
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
comment|// "x != x" simplifies to "null and x is null" (similarly< and>)
name|newExpr
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|o0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|simplify
argument_list|(
name|newExpr
argument_list|,
name|unknownAs
argument_list|)
return|;
default|default:
comment|// unknown kind
block|}
block|}
if|if
condition|(
name|o0
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
name|Comparison
name|cmp
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|e
operator|.
name|getOperator
argument_list|()
argument_list|,
name|o0
argument_list|,
name|o1
argument_list|)
argument_list|,
name|node
lambda|->
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cmp
operator|.
name|literal
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|cmp
operator|.
name|kind
condition|)
block|{
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|EQUALS
case|:
comment|// x=true
return|return
name|cmp
operator|.
name|ref
return|;
case|case
name|LESS_THAN
case|:
case|case
name|NOT_EQUALS
case|:
comment|// x!=true
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|cmp
operator|.
name|ref
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
comment|/* this is false, but could be null if x is null */
if|if
condition|(
operator|!
name|cmp
operator|.
name|ref
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
break|break;
case|case
name|LESS_THAN_OR_EQUAL
case|:
comment|/* this is true, but could be null if x is null */
if|if
condition|(
operator|!
name|cmp
operator|.
name|ref
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|cmp
operator|.
name|literal
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|cmp
operator|.
name|kind
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|cmp
operator|.
name|ref
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
case|case
name|GREATER_THAN
case|:
return|return
name|cmp
operator|.
name|ref
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
comment|/* this is true, but could be null if x is null */
if|if
condition|(
operator|!
name|cmp
operator|.
name|ref
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
break|break;
case|case
name|LESS_THAN
case|:
comment|/* this is false, but could be null if x is null */
if|if
condition|(
operator|!
name|cmp
operator|.
name|ref
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
block|}
comment|// Simplify "<literal1><op><literal2>"
comment|// For example, "1 = 2" becomes FALSE;
comment|// "1 != 1" becomes FALSE;
comment|// "1 != NULL" becomes UNKNOWN (or FALSE if unknownAsFalse);
comment|// "1 != '1'" is unchanged because the types are not the same.
if|if
condition|(
name|o0
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
operator|&&
name|o1
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|equalSansNullability
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|o0
operator|.
name|getType
argument_list|()
argument_list|,
name|o1
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|C
name|v0
init|=
operator|(
operator|(
name|RexLiteral
operator|)
name|o0
operator|)
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|C
name|v1
init|=
operator|(
operator|(
name|RexLiteral
operator|)
name|o1
operator|)
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|v0
operator|==
literal|null
operator|||
name|v1
operator|==
literal|null
condition|)
block|{
return|return
name|unknownAs
operator|==
name|FALSE
condition|?
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
else|:
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|int
name|comparisonResult
init|=
name|v0
operator|.
name|compareTo
argument_list|(
name|v1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|==
literal|0
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|>
literal|0
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|>=
literal|0
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|<
literal|0
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|<=
literal|0
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|!=
literal|0
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|// If none of the arguments were simplified, return the call unchanged.
specifier|final
name|RexNode
name|e2
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|equals
argument_list|(
name|e
operator|.
name|operands
argument_list|)
condition|)
block|{
name|e2
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
name|e2
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|e
operator|.
name|op
argument_list|,
name|operands
argument_list|)
expr_stmt|;
block|}
return|return
name|simplifyUsingPredicates
argument_list|(
name|e2
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|/**    * Simplifies a conjunction of boolean expressions.    */
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexNode
name|simplifyAnds
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
name|ensureParanoidOff
argument_list|()
expr_stmt|;
return|return
name|simplifyAnds
argument_list|(
name|nodes
argument_list|,
name|defaultUnknownAs
argument_list|)
return|;
block|}
comment|// package-protected only for a deprecated method; treat as private
name|RexNode
name|simplifyAnds
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|nodes
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|nodes
control|)
block|{
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|e
argument_list|,
name|terms
argument_list|,
name|notTerms
argument_list|)
expr_stmt|;
block|}
name|simplifyList
argument_list|(
name|terms
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|simplifyList
argument_list|(
name|notTerms
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
if|if
condition|(
name|unknownAs
operator|==
name|FALSE
condition|)
block|{
return|return
name|simplifyAnd2ForUnknownAsFalse
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
return|return
name|simplifyAnd2
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
specifier|private
name|void
name|simplifyList
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|simplify
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|simplifyAndTerms
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
name|RexSimplify
name|simplify
init|=
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Predicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|,
name|unknownAs
argument_list|)
argument_list|)
expr_stmt|;
name|RelOptPredicateList
name|newPredicates
init|=
name|simplify
operator|.
name|predicates
operator|.
name|union
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|terms
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|simplify
operator|=
name|simplify
operator|.
name|withPredicates
argument_list|(
name|newPredicates
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Predicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|,
name|unknownAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|simplifyOrTerms
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
comment|// Suppose we are processing "e1(x) OR e2(x) OR e3(x)". When we are
comment|// visiting "e3(x)" we know both "e1(x)" and "e2(x)" are not true (they
comment|// may be unknown), because if either of them were true we would have
comment|// stopped.
name|RexSimplify
name|simplify
init|=
name|this
decl_stmt|;
comment|// 'doneTerms' prevents us from visiting a term in both first and second
comment|// loops. If we did this, the second visit would have a predicate saying
comment|// that 'term' is false. Effectively, we sort terms: visiting
comment|// 'allowedAsPredicate' terms in the first loop, and
comment|// non-'allowedAsPredicate' in the second. Each term is visited once.
specifier|final
name|BitSet
name|doneTerms
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|simplify
operator|.
name|allowedAsPredicateDuringOrSimplification
argument_list|(
name|t
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|doneTerms
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|t2
init|=
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|,
name|unknownAs
argument_list|)
decl_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|t2
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|inverse
init|=
name|simplify
operator|.
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_TRUE
argument_list|,
name|t2
argument_list|)
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|newPredicates
init|=
name|simplify
operator|.
name|predicates
operator|.
name|union
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|inverse
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|simplify
operator|=
name|simplify
operator|.
name|withPredicates
argument_list|(
name|newPredicates
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|doneTerms
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
comment|// we visited this term in the first loop
block|}
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|,
name|unknownAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Decides whether the given node could be used as a predicate during the simplification    * of other OR operands.    */
specifier|private
name|boolean
name|allowedAsPredicateDuringOrSimplification
parameter_list|(
specifier|final
name|RexNode
name|t
parameter_list|)
block|{
name|Predicate
name|predicate
init|=
name|Predicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
decl_stmt|;
return|return
name|predicate
operator|!=
literal|null
operator|&&
name|predicate
operator|.
name|allowedInOr
argument_list|(
name|predicates
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|simplifyNot
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
specifier|final
name|RexNode
name|a
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|a
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|NOT
case|:
comment|// NOT NOT x ==> x
return|return
name|simplify
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
case|case
name|LITERAL
case|:
if|if
condition|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
operator|&&
operator|!
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|!
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|a
argument_list|)
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
specifier|final
name|SqlKind
name|negateKind
init|=
name|a
operator|.
name|getKind
argument_list|()
operator|.
name|negate
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|!=
name|negateKind
condition|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|negateKind
argument_list|)
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
specifier|final
name|SqlKind
name|negateKind2
init|=
name|a
operator|.
name|getKind
argument_list|()
operator|.
name|negateNullSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|!=
name|negateKind2
condition|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|negateKind2
argument_list|)
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|AND
condition|)
block|{
comment|// NOT distributivity for AND
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|operand
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|newOperands
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
condition|)
block|{
comment|// NOT distributivity for OR
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|operand
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|newOperands
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CASE
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|operands
operator|.
name|size
argument_list|()
condition|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|newOperands
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|newOperands
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
name|RexNode
name|a2
init|=
name|simplify
argument_list|(
name|a
argument_list|,
name|unknownAs
operator|.
name|negate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
name|a2
condition|)
block|{
return|return
name|call
return|;
block|}
if|if
condition|(
name|a2
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|a2
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|a2
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|simplifyUnaryMinus
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
specifier|final
name|RexNode
name|a
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|MINUS_PREFIX
condition|)
block|{
comment|// -(-(x)) ==> x
return|return
name|simplify
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
return|return
name|simplifyGenericNode
argument_list|(
name|call
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|simplifyUnaryPlus
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
return|return
name|simplify
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
specifier|private
annotation|@
name|Nonnull
name|RexNode
name|simplifyIs
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
specifier|final
name|SqlKind
name|kind
init|=
name|call
operator|.
name|getKind
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|a
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|simplified
init|=
name|simplifyIs1
argument_list|(
name|kind
argument_list|,
name|a
argument_list|,
name|unknownAs
argument_list|)
decl_stmt|;
return|return
name|simplified
operator|==
literal|null
condition|?
name|call
else|:
name|simplified
return|;
block|}
specifier|private
name|RexNode
name|simplifyIs1
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|RexNode
name|a
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
comment|// UnknownAs.FALSE corresponds to x IS TRUE evaluation
comment|// UnknownAs.TRUE to x IS NOT FALSE
comment|// Note that both UnknownAs.TRUE and UnknownAs.FALSE only changes the meaning of Unknown
comment|// (1) if we are already in UnknownAs.FALSE mode; x IS TRUE can be simplified to x
comment|// (2) similarly in UnknownAs.TRUE mode; x IS NOT FALSE can be simplified to x
comment|// (3) x IS FALSE could be rewritten to (NOT x) IS TRUE and from there the 1. rule applies
comment|// (4) x IS NOT TRUE can be rewritten to (NOT x) IS NOT FALSE and from there the 2. rule applies
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|IS_TRUE
operator|&&
name|unknownAs
operator|==
name|RexUnknownAs
operator|.
name|FALSE
condition|)
block|{
return|return
name|simplify
argument_list|(
name|a
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|IS_FALSE
operator|&&
name|unknownAs
operator|==
name|RexUnknownAs
operator|.
name|FALSE
condition|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|a
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|IS_NOT_FALSE
operator|&&
name|unknownAs
operator|==
name|RexUnknownAs
operator|.
name|TRUE
condition|)
block|{
return|return
name|simplify
argument_list|(
name|a
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|IS_NOT_TRUE
operator|&&
name|unknownAs
operator|==
name|RexUnknownAs
operator|.
name|TRUE
condition|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|a
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
specifier|final
name|RexNode
name|pred
init|=
name|simplifyIsPredicate
argument_list|(
name|kind
argument_list|,
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|pred
operator|!=
literal|null
condition|)
block|{
return|return
name|pred
return|;
block|}
return|return
name|simplifyIs2
argument_list|(
name|kind
argument_list|,
name|a
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|simplifyIsPredicate
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|RexNode
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|a
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|RexNode
name|p
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
name|IsPredicate
name|pred
init|=
name|IsPredicate
operator|.
name|of
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|pred
operator|==
literal|null
operator|||
operator|!
name|a
operator|.
name|equals
argument_list|(
name|pred
operator|.
name|ref
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|kind
operator|==
name|pred
operator|.
name|kind
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|RexNode
name|simplifyIs2
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|RexNode
name|a
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
specifier|final
name|RexNode
name|simplified
decl_stmt|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|IS_NULL
case|:
comment|// x IS NULL ==> FALSE (if x is not nullable)
name|validateStrongPolicy
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|simplified
operator|=
name|simplifyIsNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|simplified
operator|!=
literal|null
condition|)
block|{
return|return
name|simplified
return|;
block|}
break|break;
case|case
name|IS_NOT_NULL
case|:
comment|// x IS NOT NULL ==> TRUE (if x is not nullable)
name|validateStrongPolicy
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|simplified
operator|=
name|simplifyIsNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|simplified
operator|!=
literal|null
condition|)
block|{
return|return
name|simplified
return|;
block|}
break|break;
case|case
name|IS_TRUE
case|:
case|case
name|IS_NOT_FALSE
case|:
comment|// x IS TRUE ==> x (if x is not nullable)
comment|// x IS NOT FALSE ==> x (if x is not nullable)
if|if
condition|(
name|predicates
operator|.
name|isEffectivelyNotNull
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|simplify
argument_list|(
name|a
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
else|else
block|{
name|RexNode
name|newSub
init|=
name|simplify
argument_list|(
name|a
argument_list|,
name|kind
operator|==
name|SqlKind
operator|.
name|IS_TRUE
condition|?
name|RexUnknownAs
operator|.
name|FALSE
else|:
name|RexUnknownAs
operator|.
name|TRUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSub
operator|==
name|a
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|kind
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newSub
argument_list|)
argument_list|)
return|;
block|}
case|case
name|IS_FALSE
case|:
case|case
name|IS_NOT_TRUE
case|:
comment|// x IS NOT TRUE ==> NOT x (if x is not nullable)
comment|// x IS FALSE ==> NOT x (if x is not nullable)
if|if
condition|(
name|predicates
operator|.
name|isEffectivelyNotNull
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|a
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
switch|switch
condition|(
name|a
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|NOT
case|:
comment|// (NOT x) IS TRUE ==> x IS FALSE
comment|// Similarly for IS NOT TRUE, IS FALSE, etc.
comment|//
comment|// Note that
comment|//   (NOT x) IS TRUE !=> x IS FALSE
comment|// because of null values.
specifier|final
name|SqlOperator
name|notKind
init|=
name|RexUtil
operator|.
name|op
argument_list|(
name|kind
operator|.
name|negateNullSafe
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|arg
init|=
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|notKind
argument_list|,
name|arg
argument_list|)
argument_list|,
name|UNKNOWN
argument_list|)
return|;
default|default:
break|break;
block|}
specifier|final
name|RexNode
name|a2
init|=
name|simplify
argument_list|(
name|a
argument_list|,
name|UNKNOWN
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|a2
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|kind
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|a2
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// cannot be simplified
block|}
specifier|private
name|RexNode
name|simplifyIsNotNull
parameter_list|(
name|RexNode
name|a
parameter_list|)
block|{
comment|// Simplify the argument first,
comment|// call ourselves recursively to see whether we can make more progress.
comment|// For example, given
comment|// "(CASE WHEN FALSE THEN 1 ELSE 2) IS NOT NULL" we first simplify the
comment|// argument to "2", and only then we can simplify "2 IS NOT NULL" to "TRUE".
name|a
operator|=
name|simplify
argument_list|(
name|a
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
operator|&&
name|isSafeExpression
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|predicates
operator|.
name|pulledUpPredicates
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|hasCustomNullabilityRules
argument_list|(
name|a
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|Strong
operator|.
name|policy
argument_list|(
name|a
argument_list|)
condition|)
block|{
case|case
name|NOT_NULL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
case|case
name|ANY
case|:
comment|// "f" is a strong operator, so "f(operand0, operand1) IS NOT NULL"
comment|// simplifies to "operand0 IS NOT NULL AND operand1 IS NOT NULL"
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
specifier|final
name|RexNode
name|simplified
init|=
name|simplifyIsNotNull
argument_list|(
name|operand
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplified
operator|==
literal|null
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|simplified
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
else|else
block|{
name|operands
operator|.
name|add
argument_list|(
name|simplified
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|operands
argument_list|)
return|;
case|case
name|CUSTOM
case|:
switch|switch
condition|(
name|a
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|!
operator|(
operator|(
name|RexLiteral
operator|)
name|a
operator|)
operator|.
name|isNull
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"every CUSTOM policy needs a handler, "
operator|+
name|a
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
case|case
name|AS_IS
case|:
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|RexNode
name|simplifyIsNull
parameter_list|(
name|RexNode
name|a
parameter_list|)
block|{
comment|// Simplify the argument first,
comment|// call ourselves recursively to see whether we can make more progress.
comment|// For example, given
comment|// "(CASE WHEN FALSE THEN 1 ELSE 2) IS NULL" we first simplify the
comment|// argument to "2", and only then we can simplify "2 IS NULL" to "FALSE".
name|a
operator|=
name|simplify
argument_list|(
name|a
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
operator|&&
name|isSafeExpression
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|RexUtil
operator|.
name|isNull
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|hasCustomNullabilityRules
argument_list|(
name|a
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|Strong
operator|.
name|policy
argument_list|(
name|a
argument_list|)
condition|)
block|{
case|case
name|NOT_NULL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|ANY
case|:
comment|// "f" is a strong operator, so "f(operand0, operand1) IS NULL" simplifies
comment|// to "operand0 IS NULL OR operand1 IS NULL"
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
specifier|final
name|RexNode
name|simplified
init|=
name|simplifyIsNull
argument_list|(
name|operand
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplified
operator|==
literal|null
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operands
operator|.
name|add
argument_list|(
name|simplified
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|operands
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|AS_IS
case|:
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Validates strong policy for specified {@link RexNode}.    *    * @param rexNode Rex node to validate the strong policy    * @throws AssertionError If the validation fails    */
specifier|private
name|void
name|validateStrongPolicy
parameter_list|(
name|RexNode
name|rexNode
parameter_list|)
block|{
if|if
condition|(
name|hasCustomNullabilityRules
argument_list|(
name|rexNode
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|Strong
operator|.
name|policy
argument_list|(
name|rexNode
argument_list|)
condition|)
block|{
case|case
name|NOT_NULL
case|:
assert|assert
operator|!
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
assert|;
break|break;
case|case
name|ANY
case|:
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|rexNode
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
assert|assert
name|operands
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RexNode
operator|::
name|getType
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|RelDataType
operator|::
name|isNullable
argument_list|)
assert|;
block|}
else|else
block|{
assert|assert
name|operands
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RexNode
operator|::
name|getType
argument_list|)
operator|.
name|noneMatch
argument_list|(
name|RelDataType
operator|::
name|isNullable
argument_list|)
assert|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
comment|/**    * Returns {@code true} if specified {@link SqlKind} has custom nullability rules which    * depend not only on the nullability of input operands.    *    *<p>For example, CAST may be used to change the nullability of its operand type,    * so it may be nullable, though the argument type was non-nullable.    *    * @param sqlKind Sql kind to check    * @return {@code true} if specified {@link SqlKind} has custom nullability rules    */
specifier|private
name|boolean
name|hasCustomNullabilityRules
parameter_list|(
name|SqlKind
name|sqlKind
parameter_list|)
block|{
switch|switch
condition|(
name|sqlKind
condition|)
block|{
case|case
name|CAST
case|:
case|case
name|ITEM
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|RexNode
name|simplifyCoalesce
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|operandSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|operand
operator|=
name|simplify
argument_list|(
name|operand
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isNull
argument_list|(
name|operand
argument_list|)
operator|&&
name|operandSet
operator|.
name|add
argument_list|(
name|operand
argument_list|)
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|operand
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
switch|switch
condition|(
name|operands
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|call
operator|.
name|type
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
if|if
condition|(
name|operands
operator|.
name|equals
argument_list|(
name|call
operator|.
name|operands
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|type
argument_list|,
name|operands
argument_list|)
return|;
block|}
block|}
specifier|private
name|RexNode
name|simplifyCase
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|inputBranches
init|=
name|CaseBranch
operator|.
name|fromCaseOperands
argument_list|(
name|rexBuilder
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// run simplification on all operands
name|RexSimplify
name|condSimplifier
init|=
name|this
operator|.
name|withPredicates
argument_list|(
name|RelOptPredicateList
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|RexSimplify
name|valueSimplifier
init|=
name|this
decl_stmt|;
name|RelDataType
name|caseType
init|=
name|call
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|conditionNeedsSimplify
init|=
literal|false
decl_stmt|;
name|CaseBranch
name|lastBranch
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|branches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CaseBranch
name|inputBranch
range|:
name|inputBranches
control|)
block|{
comment|// simplify the condition
name|RexNode
name|newCond
init|=
name|condSimplifier
operator|.
name|simplify
argument_list|(
name|inputBranch
operator|.
name|cond
argument_list|,
name|RexUnknownAs
operator|.
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCond
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
comment|// If the condition is false, we do not need to add it
continue|continue;
block|}
comment|// simplify the value
name|RexNode
name|newValue
init|=
name|valueSimplifier
operator|.
name|simplify
argument_list|(
name|inputBranch
operator|.
name|value
argument_list|,
name|unknownAs
argument_list|)
decl_stmt|;
comment|// create new branch
if|if
condition|(
name|lastBranch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lastBranch
operator|.
name|value
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|&&
name|isSafeExpression
argument_list|(
name|newCond
argument_list|)
condition|)
block|{
comment|// in this case, last branch and new branch have the same conclusion,
comment|// hence we create a new composite condition and we do not add it to
comment|// the final branches for the time being
name|newCond
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|lastBranch
operator|.
name|cond
argument_list|,
name|newCond
argument_list|)
expr_stmt|;
name|conditionNeedsSimplify
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// if we reach here, the new branch is not mergeable with the last one,
comment|// hence we are going to add the last branch to the final branches.
comment|// if the last branch was merged, then we will simplify it first.
comment|// otherwise, we just add it
name|CaseBranch
name|branch
init|=
name|generateBranch
argument_list|(
name|conditionNeedsSimplify
argument_list|,
name|condSimplifier
argument_list|,
name|lastBranch
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|cond
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
comment|// If the condition is not false, we add it to the final result
name|branches
operator|.
name|add
argument_list|(
name|branch
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
operator|.
name|cond
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
comment|// If the condition is always true, we are done
name|lastBranch
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
name|conditionNeedsSimplify
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|lastBranch
operator|=
operator|new
name|CaseBranch
argument_list|(
name|newCond
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|newCond
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
comment|// If the condition is always true, we are done (useful in first loop iteration)
break|break;
block|}
block|}
if|if
condition|(
name|lastBranch
operator|!=
literal|null
condition|)
block|{
comment|// we need to add the last pending branch once we have finished
comment|// with the for loop
name|CaseBranch
name|branch
init|=
name|generateBranch
argument_list|(
name|conditionNeedsSimplify
argument_list|,
name|condSimplifier
argument_list|,
name|lastBranch
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|cond
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
name|branches
operator|.
name|add
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|branches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// we can just return the value in this case (matching the case type)
specifier|final
name|RexNode
name|value
init|=
name|branches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|sameTypeOrNarrowsNullability
argument_list|(
name|caseType
argument_list|,
name|value
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeAbstractCast
argument_list|(
name|caseType
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|call
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
specifier|final
name|RexNode
name|result
init|=
name|simplifyBooleanCase
argument_list|(
name|rexBuilder
argument_list|,
name|branches
argument_list|,
name|unknownAs
argument_list|,
name|caseType
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sameTypeOrNarrowsNullability
argument_list|(
name|caseType
argument_list|,
name|result
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|simplify
argument_list|(
name|result
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
else|else
block|{
comment|// If the simplification would widen the nullability
name|RexNode
name|simplified
init|=
name|simplify
argument_list|(
name|result
argument_list|,
name|UNKNOWN
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|simplified
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|simplified
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|simplified
argument_list|)
return|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
name|CaseBranch
operator|.
name|toCaseOperands
argument_list|(
name|branches
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOperands
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|newOperands
argument_list|)
return|;
block|}
comment|/**    * If boolean is true, simplify cond in input branch and return new branch.    * Otherwise, simply return input branch.    */
specifier|private
name|CaseBranch
name|generateBranch
parameter_list|(
name|boolean
name|simplifyCond
parameter_list|,
name|RexSimplify
name|simplifier
parameter_list|,
name|CaseBranch
name|branch
parameter_list|)
block|{
if|if
condition|(
name|simplifyCond
condition|)
block|{
comment|// the previous branch was merged, time to simplify it and
comment|// add it to the final result
return|return
operator|new
name|CaseBranch
argument_list|(
name|simplifier
operator|.
name|simplify
argument_list|(
name|branch
operator|.
name|cond
argument_list|,
name|RexUnknownAs
operator|.
name|FALSE
argument_list|)
argument_list|,
name|branch
operator|.
name|value
argument_list|)
return|;
block|}
return|return
name|branch
return|;
block|}
comment|/**    * Return if the new type is the same and at most narrows the nullability.    */
specifier|private
name|boolean
name|sameTypeOrNarrowsNullability
parameter_list|(
name|RelDataType
name|oldType
parameter_list|,
name|RelDataType
name|newType
parameter_list|)
block|{
return|return
name|oldType
operator|.
name|equals
argument_list|(
name|newType
argument_list|)
operator|||
operator|(
name|SqlTypeUtil
operator|.
name|equalSansNullability
argument_list|(
name|rexBuilder
operator|.
name|typeFactory
argument_list|,
name|oldType
argument_list|,
name|newType
argument_list|)
operator|&&
name|oldType
operator|.
name|isNullable
argument_list|()
operator|)
return|;
block|}
comment|/** Object to describe a CASE branch. */
specifier|static
specifier|final
class|class
name|CaseBranch
block|{
specifier|private
specifier|final
name|RexNode
name|cond
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|value
decl_stmt|;
name|CaseBranch
parameter_list|(
name|RexNode
name|cond
parameter_list|,
name|RexNode
name|value
parameter_list|)
block|{
name|this
operator|.
name|cond
operator|=
name|cond
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|cond
operator|+
literal|" => "
operator|+
name|value
return|;
block|}
comment|/** Given "CASE WHEN p1 THEN v1 ... ELSE e END"      * returns [(p1, v1), ..., (true, e)]. */
specifier|private
specifier|static
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|fromCaseOperands
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|CaseBranch
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|CaseBranch
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|,
name|Util
operator|.
name|last
argument_list|(
name|operands
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RexNode
argument_list|>
name|toCaseOperands
parameter_list|(
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|branches
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|branches
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|CaseBranch
name|branch
init|=
name|branches
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|branch
operator|.
name|cond
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|branch
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|CaseBranch
name|lastBranch
init|=
name|Util
operator|.
name|last
argument_list|(
name|branches
argument_list|)
decl_stmt|;
assert|assert
name|lastBranch
operator|.
name|cond
operator|.
name|isAlwaysTrue
argument_list|()
assert|;
name|ret
operator|.
name|add
argument_list|(
name|lastBranch
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
comment|/**    * Decides whether it is safe to flatten the given CASE part into ANDs/ORs.    */
enum|enum
name|SafeRexVisitor
implements|implements
name|RexVisitor
argument_list|<
name|Boolean
argument_list|>
block|{
name|INSTANCE
block|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ImmutableEnumChecker"
argument_list|)
specifier|private
specifier|final
name|Set
argument_list|<
name|SqlKind
argument_list|>
name|safeOps
decl_stmt|;
name|SafeRexVisitor
parameter_list|()
block|{
name|Set
argument_list|<
name|SqlKind
argument_list|>
name|safeOps
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|SqlKind
operator|.
name|class
argument_list|)
decl_stmt|;
name|safeOps
operator|.
name|addAll
argument_list|(
name|SqlKind
operator|.
name|COMPARISON
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|PLUS_PREFIX
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|MINUS_PREFIX
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|PLUS
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|MINUS
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|TIMES
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_FALSE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_NOT_FALSE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_TRUE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_NOT_TRUE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_NULL
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_NOT_NULL
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_DISTINCT_FROM
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|IN
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|OR
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|AND
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|NOT
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|CASE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|LIKE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|COALESCE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|TRIM
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|LTRIM
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|RTRIM
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|BETWEEN
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|CEIL
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|FLOOR
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|TIMESTAMP_ADD
argument_list|)
expr_stmt|;
name|safeOps
operator|.
name|add
argument_list|(
name|SqlKind
operator|.
name|TIMESTAMP_DIFF
argument_list|)
expr_stmt|;
name|this
operator|.
name|safeOps
operator|=
name|Sets
operator|.
name|immutableEnumSet
argument_list|(
name|safeOps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
operator|!
name|safeOps
operator|.
name|contains
argument_list|(
name|call
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|RexVisitorImpl
operator|.
name|visitArrayAnd
argument_list|(
name|this
argument_list|,
name|call
operator|.
name|operands
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|correlVariable
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitDynamicParam
parameter_list|(
name|RexDynamicParam
name|dynamicParam
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitRangeRef
parameter_list|(
name|RexRangeRef
name|rangeRef
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitSubQuery
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitTableInputRef
parameter_list|(
name|RexTableInputRef
name|fieldRef
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|visitPatternFieldRef
parameter_list|(
name|RexPatternFieldRef
name|fieldRef
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** Analyzes a given {@link RexNode} and decides whenever it is safe to    * unwind.   *   *<p>"Safe" means that it only contains a combination of known good operators.   *   *<p>Division is an unsafe operator; consider the following:   *<pre>case when a&gt; 0 then 1 / a else null end</pre>   */
specifier|static
name|boolean
name|isSafeExpression
parameter_list|(
name|RexNode
name|r
parameter_list|)
block|{
return|return
name|r
operator|.
name|accept
argument_list|(
name|SafeRexVisitor
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RexNode
name|simplifyBooleanCase
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|inputBranches
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|RexUnknownAs
name|unknownAs
parameter_list|,
name|RelDataType
name|branchType
parameter_list|)
block|{
name|RexNode
name|result
decl_stmt|;
comment|// prepare all condition/branches for boolean interpretation
comment|// It's done here make these interpretation changes available to case2or simplifications
comment|// but not interfere with the normal simplifcation recursion
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|branches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CaseBranch
name|branch
range|:
name|inputBranches
control|)
block|{
if|if
condition|(
operator|(
name|branches
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|isSafeExpression
argument_list|(
name|branch
operator|.
name|cond
argument_list|)
operator|)
operator|||
operator|!
name|isSafeExpression
argument_list|(
name|branch
operator|.
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RexNode
name|cond
decl_stmt|;
name|RexNode
name|value
decl_stmt|;
if|if
condition|(
name|branch
operator|.
name|cond
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
name|cond
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
argument_list|,
name|branch
operator|.
name|cond
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cond
operator|=
name|branch
operator|.
name|cond
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|branchType
operator|.
name|equals
argument_list|(
name|branch
operator|.
name|value
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|=
name|rexBuilder
operator|.
name|makeAbstractCast
argument_list|(
name|branchType
argument_list|,
name|branch
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|branch
operator|.
name|value
expr_stmt|;
block|}
name|branches
operator|.
name|add
argument_list|(
operator|new
name|CaseBranch
argument_list|(
name|cond
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|simplifyBooleanCaseGeneric
argument_list|(
name|rexBuilder
argument_list|,
name|branches
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Generic boolean case simplification.    *    *<p>Rewrites:    *<pre>    * CASE    *   WHEN p1 THEN x    *   WHEN p2 THEN y    *   ELSE z    * END    *</pre>    * to    *<pre>(p1 and x) or (p2 and y and not(p1)) or (true and z and not(p1) and not(p2))</pre>    */
specifier|private
specifier|static
name|RexNode
name|simplifyBooleanCaseGeneric
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|CaseBranch
argument_list|>
name|branches
parameter_list|)
block|{
name|boolean
name|booleanBranches
init|=
name|branches
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|branch
lambda|->
name|branch
operator|.
name|value
operator|.
name|isAlwaysTrue
argument_list|()
operator|||
name|branch
operator|.
name|value
operator|.
name|isAlwaysFalse
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CaseBranch
name|branch
range|:
name|branches
control|)
block|{
name|boolean
name|useBranch
init|=
operator|!
name|branch
operator|.
name|value
operator|.
name|isAlwaysFalse
argument_list|()
decl_stmt|;
if|if
condition|(
name|useBranch
condition|)
block|{
specifier|final
name|RexNode
name|branchTerm
decl_stmt|;
if|if
condition|(
name|branch
operator|.
name|value
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|branchTerm
operator|=
name|branch
operator|.
name|cond
expr_stmt|;
block|}
else|else
block|{
name|branchTerm
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|branch
operator|.
name|cond
argument_list|,
name|branch
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|terms
operator|.
name|add
argument_list|(
name|RexUtil
operator|.
name|andNot
argument_list|(
name|rexBuilder
argument_list|,
name|branchTerm
argument_list|,
name|notTerms
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|booleanBranches
operator|&&
name|useBranch
condition|)
block|{
comment|// we are safe to ignore this branch because for boolean true branches:
comment|// a || (b&& !a) === a || b
block|}
else|else
block|{
name|notTerms
operator|.
name|add
argument_list|(
name|branch
operator|.
name|cond
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexNode
name|simplifyAnd
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
name|ensureParanoidOff
argument_list|()
expr_stmt|;
return|return
name|simplifyAnd
argument_list|(
name|e
argument_list|,
name|defaultUnknownAs
argument_list|)
return|;
block|}
name|RexNode
name|simplifyAnd
parameter_list|(
name|RexCall
name|e
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|unknownAs
operator|==
name|FALSE
operator|&&
name|predicateElimination
condition|)
block|{
name|simplifyAndTerms
argument_list|(
name|operands
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|simplifyList
argument_list|(
name|operands
argument_list|,
name|unknownAs
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SargCollector
name|sargCollector
init|=
operator|new
name|SargCollector
argument_list|(
name|rexBuilder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|operands
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|sargCollector
operator|.
name|accept
argument_list|(
name|t
argument_list|,
name|terms
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sargCollector
operator|.
name|map
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|b
lambda|->
name|b
operator|.
name|complexity
argument_list|()
operator|>
literal|1
argument_list|)
condition|)
block|{
name|operands
operator|.
name|clear
argument_list|()
block|;
name|terms
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|operands
operator|.
name|add
argument_list|(
name|sargCollector
operator|.
name|fix
argument_list|(
name|rexBuilder
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|)
empty_stmt|;
block|}
name|terms
operator|.
name|clear
parameter_list|()
constructor_decl|;
for|for
control|(
name|RexNode
name|o
range|:
name|operands
control|)
block|{
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|o
argument_list|,
name|terms
argument_list|,
name|notTerms
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|unknownAs
condition|)
block|{
case|case
name|FALSE
case|:
return|return
name|simplifyAnd2ForUnknownAsFalse
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|,
name|Comparable
operator|.
name|class
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|simplifyAnd2
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
end_class

begin_comment
comment|// package-protected only to support a deprecated method; treat as private
end_comment

begin_function
name|RexNode
name|simplifyAnd2
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|term
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|// If one of the not-disjunctions is a disjunction that is wholly
comment|// contained in the disjunctions list, the expression is not
comment|// satisfiable.
comment|//
comment|// Example #1. x AND y AND z AND NOT (x AND y)  - not satisfiable
comment|// Example #2. x AND y AND NOT (x AND y)        - not satisfiable
comment|// Example #3. x AND y AND NOT (x AND y AND z)  - may be satisfiable
name|List
argument_list|<
name|RexNode
argument_list|>
name|notSatisfiableNullables
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms2
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|notDisjunction
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|terms
operator|.
name|containsAll
argument_list|(
name|terms2
argument_list|)
condition|)
block|{
comment|// may be satisfiable ==> check other terms
continue|continue;
block|}
if|if
condition|(
operator|!
name|notDisjunction
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
comment|// x is NOT nullable, then x AND NOT(x) ==> FALSE
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// x AND NOT(x) is UNKNOWN for NULL input
comment|// So we search for the shortest notDisjunction then convert
comment|// original expression to NULL and x IS NULL
if|if
condition|(
name|notSatisfiableNullables
operator|==
literal|null
condition|)
block|{
name|notSatisfiableNullables
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|notSatisfiableNullables
operator|.
name|add
argument_list|(
name|notDisjunction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notSatisfiableNullables
operator|!=
literal|null
condition|)
block|{
comment|// Remove the intersection of "terms" and "notTerms"
name|terms
operator|.
name|removeAll
argument_list|(
name|notSatisfiableNullables
argument_list|)
expr_stmt|;
name|notTerms
operator|.
name|removeAll
argument_list|(
name|notSatisfiableNullables
argument_list|)
expr_stmt|;
comment|// The intersection simplify to "null and x1 is null and x2 is null..."
name|terms
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|notSatisfiableNullables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|notSatisfiableNullable
range|:
name|notSatisfiableNullables
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|simplifyIs
argument_list|(
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|notSatisfiableNullable
argument_list|)
argument_list|,
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the NOT disjunctions back in.
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|notDisjunction
argument_list|)
argument_list|,
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** As {@link #simplifyAnd2(List, List)} but we assume that if the expression    * returns UNKNOWN it will be interpreted as FALSE. */
end_comment

begin_function
name|RexNode
name|simplifyAnd2ForUnknownAsFalse
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|simplifyAnd2ForUnknownAsFalse
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|,
name|Comparable
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|simplifyAnd2ForUnknownAsFalse
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|term
operator|.
name|isAlwaysFalse
argument_list|()
operator|||
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|term
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Make sure "x OR y OR x" (a single-term conjunction) gets simplified.
return|return
name|simplify
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|FALSE
argument_list|)
return|;
block|}
comment|// Try to simplify the expression
specifier|final
name|Multimap
argument_list|<
name|RexNode
argument_list|,
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|equalityTerms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Pair
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
argument_list|>
name|rangeTerms
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|RexLiteral
argument_list|>
name|equalityConstantTerms
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|negatedTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|nullOperands
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|notNullOperands
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|comparedOperands
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add the predicates from the source to the range terms.
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
specifier|final
name|Comparison
name|comparison
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparison
operator|!=
literal|null
operator|&&
name|comparison
operator|.
name|kind
operator|!=
name|SqlKind
operator|.
name|NOT_EQUALS
condition|)
block|{
comment|// not supported yet
specifier|final
name|C
name|v0
init|=
name|comparison
operator|.
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|v0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RexNode
name|result
init|=
name|processRange
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
name|rangeTerms
argument_list|,
name|predicate
argument_list|,
name|comparison
operator|.
name|ref
argument_list|,
name|v0
argument_list|,
name|comparison
operator|.
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// Not satisfiable
return|return
name|result
return|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|term
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isDeterministic
argument_list|(
name|term
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Simplify BOOLEAN expressions if possible
while|while
condition|(
name|term
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|term
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|term
operator|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|term
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|term
operator|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|term
argument_list|)
expr_stmt|;
continue|continue;
block|}
break|break;
block|}
switch|switch
condition|(
name|term
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|term
decl_stmt|;
specifier|final
name|RexNode
name|left
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
comment|// if it is a cast, we include the inner reference
if|if
condition|(
name|left
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|RexCall
name|leftCast
init|=
operator|(
name|RexCall
operator|)
name|left
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|leftCast
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|right
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
comment|// if it is a cast, we include the inner reference
if|if
condition|(
name|right
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|RexCall
name|rightCast
init|=
operator|(
name|RexCall
operator|)
name|right
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|rightCast
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Comparison
name|comparison
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|term
argument_list|)
decl_stmt|;
comment|// Check for comparison with null values
if|if
condition|(
name|comparison
operator|!=
literal|null
operator|&&
name|comparison
operator|.
name|literal
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// Check for equality on different constants. If the same ref or CAST(ref)
comment|// is equal to different constants, this condition cannot be satisfied,
comment|// and hence it can be evaluated to FALSE
if|if
condition|(
name|term
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
if|if
condition|(
name|comparison
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RexLiteral
name|literal
init|=
name|comparison
operator|.
name|literal
decl_stmt|;
specifier|final
name|RexLiteral
name|prevLiteral
init|=
name|equalityConstantTerms
operator|.
name|put
argument_list|(
name|comparison
operator|.
name|ref
argument_list|,
name|literal
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevLiteral
operator|!=
literal|null
operator|&&
operator|!
name|literal
operator|.
name|equals
argument_list|(
name|prevLiteral
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|left
argument_list|,
literal|true
argument_list|)
operator|&&
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|right
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|equalityTerms
operator|.
name|put
argument_list|(
name|left
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|right
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Assume the expression a> 5 is part of a Filter condition.
comment|// Then we can derive the negated term: a<= 5.
comment|// But as the comparison is string based and thus operands order dependent,
comment|// we should also add the inverted negated term: 5>= a.
comment|// Observe that for creating the inverted term we invert the list of operands.
name|RexNode
name|negatedTerm
init|=
name|RexUtil
operator|.
name|negate
argument_list|(
name|rexBuilder
argument_list|,
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|negatedTerm
operator|!=
literal|null
condition|)
block|{
name|negatedTerms
operator|.
name|add
argument_list|(
name|negatedTerm
argument_list|)
expr_stmt|;
name|RexNode
name|invertNegatedTerm
init|=
name|RexUtil
operator|.
name|invert
argument_list|(
name|rexBuilder
argument_list|,
operator|(
name|RexCall
operator|)
name|negatedTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|invertNegatedTerm
operator|!=
literal|null
condition|)
block|{
name|negatedTerms
operator|.
name|add
argument_list|(
name|invertNegatedTerm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove terms that are implied by predicates on the input,
comment|// or weaken terms that are partially implied.
comment|// E.g. given predicate "x>= 5" and term "x between 3 and 10"
comment|// we weaken to term to "x between 5 and 10".
specifier|final
name|RexNode
name|term2
init|=
name|simplifyUsingPredicates
argument_list|(
name|term
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|term2
operator|!=
name|term
condition|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|term
operator|=
name|term2
argument_list|)
expr_stmt|;
block|}
comment|// Range
if|if
condition|(
name|comparison
operator|!=
literal|null
operator|&&
name|comparison
operator|.
name|kind
operator|!=
name|SqlKind
operator|.
name|NOT_EQUALS
condition|)
block|{
comment|// not supported yet
specifier|final
name|C
name|constant
init|=
name|comparison
operator|.
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|result
init|=
name|processRange
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
name|rangeTerms
argument_list|,
name|term
argument_list|,
name|comparison
operator|.
name|ref
argument_list|,
name|constant
argument_list|,
name|comparison
operator|.
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// Not satisfiable
return|return
name|result
return|;
block|}
block|}
break|break;
case|case
name|IN
case|:
name|comparedOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BETWEEN
case|:
name|comparedOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|IS_NOT_NULL
case|:
name|notNullOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
break|break;
case|case
name|IS_NULL
case|:
name|nullOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
comment|// If one column should be null and is in a comparison predicate,
comment|// it is not satisfiable.
comment|// Example. IS NULL(x) AND x< 5  - not satisfiable
if|if
condition|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|nullOperands
argument_list|,
name|comparedOperands
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// Check for equality of two refs wrt equality with constants
comment|// Example #1. x=5 AND y=5 AND x=y : x=5 AND y=5
comment|// Example #2. x=5 AND y=6 AND x=y - not satisfiable
for|for
control|(
name|RexNode
name|ref1
range|:
name|equalityTerms
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|RexLiteral
name|literal1
init|=
name|equalityConstantTerms
operator|.
name|get
argument_list|(
name|ref1
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal1
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Collection
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|references
init|=
name|equalityTerms
operator|.
name|get
argument_list|(
name|ref1
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|ref2
range|:
name|references
control|)
block|{
specifier|final
name|RexLiteral
name|literal2
init|=
name|equalityConstantTerms
operator|.
name|get
argument_list|(
name|ref2
operator|.
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal2
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|literal1
operator|.
name|equals
argument_list|(
name|literal2
argument_list|)
condition|)
block|{
comment|// If an expression is equal to two different constants,
comment|// it is not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// Otherwise we can remove the term, as we already know that
comment|// the expression is equal to two constants
name|terms
operator|.
name|remove
argument_list|(
name|ref2
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove not necessary IS NOT NULL expressions.
comment|//
comment|// Example. IS NOT NULL(x) AND x< 5  : x< 5
for|for
control|(
name|RexNode
name|operand
range|:
name|notNullOperands
control|)
block|{
if|if
condition|(
operator|!
name|comparedOperands
operator|.
name|contains
argument_list|(
name|operand
argument_list|)
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If one of the not-disjunctions is a disjunction that is wholly
comment|// contained in the disjunctions list, the expression is not
comment|// satisfiable.
comment|//
comment|// Example #1. x AND y AND z AND NOT (x AND y)  - not satisfiable
comment|// Example #2. x AND y AND NOT (x AND y)        - not satisfiable
comment|// Example #3. x AND y AND NOT (x AND y AND z)  - may be satisfiable
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|termsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|terms
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isDeterministic
argument_list|(
name|notDisjunction
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms2Set
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|notDisjunction
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsSet
operator|.
name|containsAll
argument_list|(
name|terms2Set
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
comment|// Add the NOT disjunctions back in.
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|notDisjunction
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The negated terms: only deterministic expressions
for|for
control|(
name|RexNode
name|negatedTerm
range|:
name|negatedTerms
control|)
block|{
if|if
condition|(
name|termsSet
operator|.
name|contains
argument_list|(
name|negatedTerm
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"BetaApi"
argument_list|)
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|simplifyUsingPredicates
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|predicates
operator|.
name|pulledUpPredicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|e
return|;
block|}
specifier|final
name|Comparison
name|comparison
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|e
argument_list|)
decl_stmt|;
comment|// Check for comparison with null values
if|if
condition|(
name|comparison
operator|==
literal|null
operator|||
name|comparison
operator|.
name|literal
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|e
return|;
block|}
specifier|final
name|C
name|v0
init|=
name|comparison
operator|.
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
init|=
name|rangeSet
argument_list|(
name|comparison
operator|.
name|kind
argument_list|,
name|v0
argument_list|)
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet2
init|=
name|residue
argument_list|(
name|comparison
operator|.
name|ref
argument_list|,
name|rangeSet
argument_list|,
name|predicates
operator|.
name|pulledUpPredicates
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeSet2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Term is impossible to satisfy given these predicates
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|rangeSet2
operator|.
name|equals
argument_list|(
name|rangeSet
argument_list|)
condition|)
block|{
comment|// no change
return|return
name|e
return|;
block|}
if|else if
condition|(
name|rangeSet2
operator|.
name|equals
argument_list|(
name|RangeSets
operator|.
name|rangeSetAll
argument_list|()
argument_list|)
condition|)
block|{
comment|// Range is always satisfied given these predicates; but nullability might
comment|// be problematic
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|comparison
operator|.
name|ref
argument_list|)
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|)
return|;
block|}
if|else if
condition|(
name|rangeSet2
operator|.
name|asRanges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rangeSet2
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasLowerBound
argument_list|()
operator|&&
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rangeSet2
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rangeSet2
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|lowerEndpoint
argument_list|()
operator|.
name|equals
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rangeSet2
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|r
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rangeSet2
operator|.
name|asRanges
argument_list|()
argument_list|)
decl_stmt|;
comment|// range is now a point; it's worth simplifying
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|comparison
operator|.
name|ref
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
name|comparison
operator|.
name|literal
operator|.
name|getType
argument_list|()
argument_list|,
name|comparison
operator|.
name|literal
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// range has been reduced but it's not worth simplifying
return|return
name|e
return|;
block|}
block|}
end_function

begin_comment
comment|/** Weakens a term so that it checks only what is not implied by predicates.    *    *<p>The term is broken into "ref comparison constant",    * for example "$0&lt; 5".    *    *<p>Examples:    *<ul>    *    *<li>{@code residue($0< 10, [$0< 5])} returns {@code true}    *    *<li>{@code residue($0< 10, [$0< 20, $0> 0])} returns {@code $0< 10}    *</ul>    */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"BetaApi"
argument_list|)
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RangeSet
argument_list|<
name|C
argument_list|>
name|residue
parameter_list|(
name|RexNode
name|ref
parameter_list|,
name|RangeSet
argument_list|<
name|C
argument_list|>
name|r0
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|predicates
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
name|RangeSet
argument_list|<
name|C
argument_list|>
name|result
init|=
name|r0
decl_stmt|;
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
control|)
block|{
switch|switch
condition|(
name|predicate
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|predicate
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
operator|&&
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|C
name|c1
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|predicate
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|NOT_EQUALS
case|:
comment|// We want to intersect result with the range set of everything but
comment|// c1. We subtract the point c1 from result, which is equivalent.
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|pointRange
init|=
name|range
argument_list|(
name|SqlKind
operator|.
name|EQUALS
argument_list|,
name|c1
argument_list|)
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|C
argument_list|>
name|notEqualsRangeSet
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|pointRange
argument_list|)
operator|.
name|complement
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|enclosesAll
argument_list|(
name|notEqualsRangeSet
argument_list|)
condition|)
block|{
name|result
operator|=
name|RangeSets
operator|.
name|rangeSetAll
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|result
operator|=
name|RangeSets
operator|.
name|minus
argument_list|(
name|result
argument_list|,
name|pointRange
argument_list|)
expr_stmt|;
break|break;
default|default:
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|r1
init|=
name|range
argument_list|(
name|predicate
operator|.
name|getKind
argument_list|()
argument_list|,
name|c1
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|encloses
argument_list|(
name|r1
argument_list|)
condition|)
block|{
comment|// Given these predicates, term is always satisfied.
comment|// e.g. r0 is "$0< 10", r1 is "$0< 5"
name|result
operator|=
name|RangeSets
operator|.
name|rangeSetAll
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|result
operator|=
name|result
operator|.
name|subRangeSet
argument_list|(
name|r1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
comment|// short-cut
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/** Simplifies OR(x, x) into x, and similar.    * The simplified expression returns UNKNOWN values as is (not as FALSE). */
end_comment

begin_function
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexNode
name|simplifyOr
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|ensureParanoidOff
argument_list|()
expr_stmt|;
return|return
name|simplifyOr
argument_list|(
name|call
argument_list|,
name|UNKNOWN
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|RexNode
name|simplifyOr
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
assert|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms0
init|=
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|call
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
decl_stmt|;
if|if
condition|(
name|predicateElimination
condition|)
block|{
name|terms
operator|=
name|Util
operator|.
name|moveToHead
argument_list|(
name|terms0
argument_list|,
name|e
lambda|->
name|e
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|IS_NULL
argument_list|)
expr_stmt|;
name|simplifyOrTerms
argument_list|(
name|terms
argument_list|,
name|unknownAs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|terms
operator|=
name|terms0
expr_stmt|;
name|simplifyList
argument_list|(
name|terms
argument_list|,
name|unknownAs
argument_list|)
expr_stmt|;
block|}
return|return
name|simplifyOrs
argument_list|(
name|terms
argument_list|,
name|unknownAs
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Simplifies a list of terms and combines them into an OR.    * Modifies the list in place.    * The simplified expression returns UNKNOWN values as is (not as FALSE). */
end_comment

begin_function
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexNode
name|simplifyOrs
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|)
block|{
name|ensureParanoidOff
argument_list|()
expr_stmt|;
return|return
name|simplifyOrs
argument_list|(
name|terms
argument_list|,
name|UNKNOWN
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|ensureParanoidOff
parameter_list|()
block|{
if|if
condition|(
name|paranoid
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Paranoid is not supported for this method"
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/** Simplifies a list of terms and combines them into an OR.    * Modifies the list in place. */
end_comment

begin_function
specifier|private
name|RexNode
name|simplifyOrs
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
specifier|final
name|SargCollector
name|sargCollector
init|=
operator|new
name|SargCollector
argument_list|(
name|rexBuilder
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|terms
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|sargCollector
operator|.
name|accept
argument_list|(
name|t
argument_list|,
name|newTerms
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sargCollector
operator|.
name|map
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|b
lambda|->
name|b
operator|.
name|complexity
argument_list|()
operator|>
literal|1
argument_list|)
condition|)
block|{
name|terms
operator|.
name|clear
argument_list|()
block|;
name|newTerms
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|terms
operator|.
name|add
argument_list|(
name|sargCollector
operator|.
name|fix
argument_list|(
name|rexBuilder
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|)
empty_stmt|;
block|}
end_function

begin_comment
comment|// CALCITE-3198 Auxiliary map to simplify cases like:
end_comment

begin_comment
comment|//   X<> A OR X<> B => X IS NOT NULL or NULL
end_comment

begin_comment
comment|// The map key will be the 'X'; and the value the first call 'X<>A' that is found,
end_comment

begin_comment
comment|// or 'X IS NOT NULL' if a simplification takes place (because another 'X<>B' is found)
end_comment

begin_decl_stmt
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|notEqualsComparisonMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|RexLiteral
name|trueLiteral
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|term
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|term
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|unknownAs
operator|==
name|FALSE
condition|)
block|{
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|unknownAs
operator|==
name|TRUE
condition|)
block|{
return|return
name|trueLiteral
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|term
argument_list|)
condition|)
block|{
return|return
name|term
return|;
comment|// true
block|}
else|else
block|{
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
continue|continue;
block|}
block|}
break|break;
case|case
name|NOT_EQUALS
case|:
specifier|final
name|Comparison
name|notEqualsComparison
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|notEqualsComparison
operator|!=
literal|null
condition|)
block|{
comment|// We are dealing with a X<>A term, check if we saw before another NOT_EQUALS involving X
specifier|final
name|RexNode
name|prevNotEquals
init|=
name|notEqualsComparisonMap
operator|.
name|get
argument_list|(
name|notEqualsComparison
operator|.
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevNotEquals
operator|==
literal|null
condition|)
block|{
comment|// This is the first NOT_EQUALS involving X, put it in the map
name|notEqualsComparisonMap
operator|.
name|put
argument_list|(
name|notEqualsComparison
operator|.
name|ref
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// There is already in the map another NOT_EQUALS involving X:
comment|//   - if it is already an IS_NOT_NULL: it was already simplified, ignore this term
comment|//   - if it is not an IS_NOT_NULL (i.e. it is a NOT_EQUALS): check comparison values
if|if
condition|(
name|prevNotEquals
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|IS_NOT_NULL
condition|)
block|{
specifier|final
name|Comparable
name|comparable1
init|=
name|notEqualsComparison
operator|.
name|literal
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Comparable
name|comparable2
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|prevNotEquals
argument_list|)
operator|.
name|literal
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//noinspection unchecked
if|if
condition|(
name|comparable1
operator|.
name|compareTo
argument_list|(
name|comparable2
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// X<> A OR X<> B => X IS NOT NULL OR NULL
specifier|final
name|RexNode
name|isNotNull
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|notEqualsComparison
operator|.
name|ref
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|constantNull
init|=
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|trueLiteral
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|newCondition
init|=
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|isNotNull
argument_list|,
name|constantNull
argument_list|)
argument_list|,
name|unknownAs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCondition
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return
name|trueLiteral
return|;
block|}
name|notEqualsComparisonMap
operator|.
name|put
argument_list|(
name|notEqualsComparison
operator|.
name|ref
argument_list|,
name|isNotNull
argument_list|)
expr_stmt|;
specifier|final
name|int
name|pos
init|=
name|terms
operator|.
name|indexOf
argument_list|(
name|prevNotEquals
argument_list|)
decl_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|pos
argument_list|,
name|newCondition
argument_list|)
expr_stmt|;
block|}
block|}
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
continue|continue;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
end_for

begin_return
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
return|;
end_return

begin_function
unit|}    private
name|void
name|verify
parameter_list|(
name|RexNode
name|before
parameter_list|,
name|RexNode
name|simplified
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
if|if
condition|(
name|simplified
operator|.
name|isAlwaysFalse
argument_list|()
operator|&&
name|before
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"always true ["
operator|+
name|before
operator|+
literal|"] simplified to always false ["
operator|+
name|simplified
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|simplified
operator|.
name|isAlwaysTrue
argument_list|()
operator|&&
name|before
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"always false ["
operator|+
name|before
operator|+
literal|"] simplified to always true ["
operator|+
name|simplified
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|RexAnalyzer
name|foo0
init|=
operator|new
name|RexAnalyzer
argument_list|(
name|before
argument_list|,
name|predicates
argument_list|)
decl_stmt|;
specifier|final
name|RexAnalyzer
name|foo1
init|=
operator|new
name|RexAnalyzer
argument_list|(
name|simplified
argument_list|,
name|predicates
argument_list|)
decl_stmt|;
if|if
condition|(
name|foo0
operator|.
name|unsupportedCount
operator|>
literal|0
operator|||
name|foo1
operator|.
name|unsupportedCount
operator|>
literal|0
condition|)
block|{
comment|// Analyzer cannot handle this expression currently
return|return;
block|}
if|if
condition|(
operator|!
name|foo0
operator|.
name|variables
operator|.
name|containsAll
argument_list|(
name|foo1
operator|.
name|variables
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"variable mismatch: "
operator|+
name|before
operator|+
literal|" has "
operator|+
name|foo0
operator|.
name|variables
operator|+
literal|", "
operator|+
name|simplified
operator|+
literal|" has "
operator|+
name|foo1
operator|.
name|variables
argument_list|)
throw|;
block|}
name|assignment_loop
label|:
for|for
control|(
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Comparable
argument_list|>
name|map
range|:
name|foo0
operator|.
name|assignments
argument_list|()
control|)
block|{
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
specifier|final
name|Comparable
name|v
init|=
name|RexInterpreter
operator|.
name|evaluate
argument_list|(
name|predicate
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|equals
argument_list|(
literal|true
argument_list|)
condition|)
block|{
continue|continue
name|assignment_loop
continue|;
block|}
block|}
name|Comparable
name|v0
init|=
name|RexInterpreter
operator|.
name|evaluate
argument_list|(
name|foo0
operator|.
name|e
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|v0
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"interpreter returned null for "
operator|+
name|foo0
operator|.
name|e
argument_list|)
throw|;
block|}
name|Comparable
name|v1
init|=
name|RexInterpreter
operator|.
name|evaluate
argument_list|(
name|foo1
operator|.
name|e
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"interpreter returned null for "
operator|+
name|foo1
operator|.
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|before
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
switch|switch
condition|(
name|unknownAs
condition|)
block|{
case|case
name|FALSE
case|:
case|case
name|TRUE
case|:
if|if
condition|(
name|v0
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
name|v0
operator|=
name|unknownAs
operator|.
name|toBoolean
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|v1
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
name|v1
operator|=
name|unknownAs
operator|.
name|toBoolean
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|v0
operator|.
name|equals
argument_list|(
name|v1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"result mismatch: when applied to "
operator|+
name|map
operator|+
literal|", "
operator|+
name|before
operator|+
literal|" yielded "
operator|+
name|v0
operator|+
literal|", and "
operator|+
name|simplified
operator|+
literal|" yielded "
operator|+
name|v1
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|RexNode
name|simplifySearch
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|RexUnknownAs
name|unknownAs
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|SEARCH
assert|;
specifier|final
name|RexNode
name|a
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Sarg
name|sarg
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Sarg
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sarg
operator|.
name|containsNull
condition|)
block|{
specifier|final
name|RexNode
name|simplified
init|=
name|simplifyIs1
argument_list|(
name|SqlKind
operator|.
name|IS_NULL
argument_list|,
name|a
argument_list|,
name|unknownAs
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplified
operator|!=
literal|null
operator|&&
name|simplified
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
specifier|final
name|Sarg
name|sarg2
init|=
name|Sarg
operator|.
name|of
argument_list|(
literal|false
argument_list|,
name|sarg
operator|.
name|rangeSet
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal2
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|sarg2
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|,
name|literal
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|type
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|a
argument_list|,
name|literal2
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|call
return|;
block|}
end_function

begin_function
specifier|private
name|RexNode
name|simplifyCast
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
name|RexNode
name|operand
init|=
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|operand
operator|=
name|simplify
argument_list|(
name|operand
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
if|if
condition|(
name|sameTypeOrNarrowsNullability
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|operand
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|operand
return|;
block|}
if|if
condition|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|operand
argument_list|)
condition|)
block|{
comment|// x :: y below means cast(x as y) (which is PostgreSQL-specifiic cast by the way)
comment|// A) Remove lossless casts:
comment|// A.1) intExpr :: bigint :: int => intExpr
comment|// A.2) char2Expr :: char(5) :: char(2) => char2Expr
comment|// B) There are cases when we can't remove two casts, but we could probably remove inner one
comment|// B.1) char2expression :: char(4) :: char(5) -> char2expression :: char(5)
comment|// B.2) char2expression :: char(10) :: char(5) -> char2expression :: char(5)
comment|// B.3) char2expression :: varchar(10) :: char(5) -> char2expression :: char(5)
comment|// B.4) char6expression :: varchar(10) :: char(5) -> char6expression :: char(5)
comment|// C) Simplification is not possible:
comment|// C.1) char6expression :: char(3) :: char(5) -> must not be changed
comment|//      the input is truncated to 3 chars, so we can't use char6expression :: char(5)
comment|// C.2) varchar2Expr :: char(5) :: varchar(2) -> must not be changed
comment|//      the input have to be padded with spaces (up to 2 chars)
comment|// C.3) char2expression :: char(4) :: varchar(5) -> must not be changed
comment|//      would not have the padding
comment|// The approach seems to be:
comment|// 1) Ensure inner cast is lossless (see if above)
comment|// 2) If operand of the inner cast has the same type as the outer cast,
comment|//    remove two casts except C.2 or C.3-like pattern (== inner cast is CHAR)
comment|// 3) If outer cast is lossless, remove inner cast (B-like cases)
comment|// Here we try to remove two casts in one go (A-like cases)
name|RexNode
name|intExpr
init|=
operator|(
operator|(
name|RexCall
operator|)
name|operand
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// intExpr == CHAR detects A.1
comment|// operand != CHAR detects C.2
if|if
condition|(
operator|(
name|intExpr
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|CHAR
operator|||
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|!=
name|SqlTypeName
operator|.
name|CHAR
operator|)
operator|&&
name|sameTypeOrNarrowsNullability
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|intExpr
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|intExpr
return|;
block|}
comment|// Here we try to remove inner cast (B-like cases)
if|if
condition|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|intExpr
operator|.
name|getType
argument_list|()
argument_list|,
name|operand
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
operator|(
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|||
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|CHAR
operator|||
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|!=
name|SqlTypeName
operator|.
name|CHAR
operator|)
operator|&&
name|SqlTypeCoercionRule
operator|.
name|instance
argument_list|()
operator|.
name|canApplyFrom
argument_list|(
name|intExpr
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|intExpr
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|operand
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|operand
decl_stmt|;
specifier|final
name|Comparable
name|value
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SqlTypeName
name|typeName
init|=
name|literal
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
comment|// First, try to remove the cast without changing the value.
comment|// makeCast and canRemoveCastFromLiteral have the same logic, so we are
comment|// sure to be able to remove the cast.
if|if
condition|(
name|rexBuilder
operator|.
name|canRemoveCastFromLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|value
argument_list|,
name|typeName
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|operand
argument_list|)
return|;
block|}
comment|// Next, try to convert the value to a different type,
comment|// e.g. CAST('123' as integer)
switch|switch
condition|(
name|literal
operator|.
name|getTypeName
argument_list|()
condition|)
block|{
case|case
name|TIME
case|:
switch|switch
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|TIMESTAMP
case|:
return|return
name|e
return|;
block|}
break|break;
default|default:
break|break;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|simplifiedExpr
init|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|operand
argument_list|)
decl_stmt|;
name|executor
operator|.
name|reduce
argument_list|(
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|simplifiedExpr
argument_list|)
argument_list|,
name|reducedValues
argument_list|)
expr_stmt|;
return|return
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|reducedValues
argument_list|)
argument_list|)
return|;
default|default:
if|if
condition|(
name|operand
operator|==
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|operand
argument_list|)
return|;
block|}
block|}
block|}
end_function

begin_comment
comment|/** Tries to simplify CEIL/FLOOR function on top of CEIL/FLOOR.    *    *<p>Examples:    *<ul>    *    *<li>{@code floor(floor($0, flag(hour)), flag(day))} returns {@code floor($0, flag(day))}    *    *<li>{@code ceil(ceil($0, flag(second)), flag(day))} returns {@code ceil($0, flag(day))}    *    *<li>{@code floor(floor($0, flag(day)), flag(second))} does not change    *    *</ul>    */
end_comment

begin_function
specifier|private
name|RexNode
name|simplifyCeilFloor
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
comment|// Bail out since we only simplify floor<date>
return|return
name|e
return|;
block|}
specifier|final
name|RexNode
name|operand
init|=
name|simplify
argument_list|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|UNKNOWN
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKind
argument_list|()
operator|==
name|operand
operator|.
name|getKind
argument_list|()
condition|)
block|{
assert|assert
name|e
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CEIL
operator|||
name|e
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FLOOR
assert|;
comment|// CEIL/FLOOR on top of CEIL/FLOOR
specifier|final
name|RexCall
name|child
init|=
operator|(
name|RexCall
operator|)
name|operand
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
comment|// Bail out since we only simplify ceil/floor<date>
return|return
name|e
return|;
block|}
specifier|final
name|RexLiteral
name|parentFlag
init|=
operator|(
name|RexLiteral
operator|)
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TimeUnitRange
name|parentFlagValue
init|=
operator|(
name|TimeUnitRange
operator|)
name|parentFlag
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|RexLiteral
name|childFlag
init|=
operator|(
name|RexLiteral
operator|)
name|child
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TimeUnitRange
name|childFlagValue
init|=
operator|(
name|TimeUnitRange
operator|)
name|childFlag
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentFlagValue
operator|!=
literal|null
operator|&&
name|childFlagValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|canRollUp
argument_list|(
name|parentFlagValue
operator|.
name|startUnit
argument_list|,
name|childFlagValue
operator|.
name|startUnit
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|clone
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|child
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|parentFlag
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|e
operator|.
name|clone
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|operand
argument_list|,
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Method that returns whether we can rollup from inner time unit    * to outer time unit. */
end_comment

begin_function
specifier|private
specifier|static
name|boolean
name|canRollUp
parameter_list|(
name|TimeUnit
name|outer
parameter_list|,
name|TimeUnit
name|inner
parameter_list|)
block|{
comment|// Special handling for QUARTER as it is not in the expected
comment|// order in TimeUnit
switch|switch
condition|(
name|outer
condition|)
block|{
case|case
name|YEAR
case|:
case|case
name|MONTH
case|:
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MILLISECOND
case|:
case|case
name|MICROSECOND
case|:
switch|switch
condition|(
name|inner
condition|)
block|{
case|case
name|YEAR
case|:
case|case
name|QUARTER
case|:
case|case
name|MONTH
case|:
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MILLISECOND
case|:
case|case
name|MICROSECOND
case|:
if|if
condition|(
name|inner
operator|==
name|TimeUnit
operator|.
name|QUARTER
condition|)
block|{
return|return
name|outer
operator|==
name|TimeUnit
operator|.
name|YEAR
return|;
block|}
return|return
name|outer
operator|.
name|ordinal
argument_list|()
operator|<=
name|inner
operator|.
name|ordinal
argument_list|()
return|;
default|default:
break|break;
block|}
break|break;
case|case
name|QUARTER
case|:
switch|switch
condition|(
name|inner
condition|)
block|{
case|case
name|QUARTER
case|:
case|case
name|MONTH
case|:
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MILLISECOND
case|:
case|case
name|MICROSECOND
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/** Removes any casts that change nullability but not type.    *    *<p>For example, {@code CAST(1 = 0 AS BOOLEAN)} becomes {@code 1 = 0}. */
end_comment

begin_function
specifier|public
name|RexNode
name|removeNullabilityCast
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|RexUtil
operator|.
name|removeNullabilityCast
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|processRange
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Pair
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
argument_list|>
name|rangeTerms
parameter_list|,
name|RexNode
name|term
parameter_list|,
name|RexNode
name|ref
parameter_list|,
name|C
name|v0
parameter_list|,
name|SqlKind
name|comparison
parameter_list|)
block|{
name|Pair
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|p
init|=
name|rangeTerms
operator|.
name|get
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|range
argument_list|(
name|comparison
argument_list|,
name|v0
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Exists
name|boolean
name|removeUpperBound
init|=
literal|false
decl_stmt|;
name|boolean
name|removeLowerBound
init|=
literal|false
decl_stmt|;
name|Range
argument_list|<
name|C
argument_list|>
name|r
init|=
name|p
operator|.
name|left
decl_stmt|;
specifier|final
name|RexLiteral
name|trueLiteral
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|EQUALS
case|:
if|if
condition|(
operator|!
name|r
operator|.
name|contains
argument_list|(
name|v0
argument_list|)
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
name|v0
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove
for|for
control|(
name|RexNode
name|e
range|:
name|p
operator|.
name|right
control|)
block|{
name|replaceLast
argument_list|(
name|terms
argument_list|,
name|e
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LESS_THAN
case|:
block|{
name|int
name|comparisonResult
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|<=
literal|0
condition|)
block|{
comment|// 1) No upper bound, or
comment|// 2) We need to open the upper bound, or
comment|// 3) New upper bound is lower than old upper bound
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a<= x< b OR a< x< b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|lowerBoundType
argument_list|()
argument_list|,
name|v0
argument_list|,
name|BoundType
operator|.
name|OPEN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x< b
name|r
operator|=
name|Range
operator|.
name|lessThan
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev upper bound
name|removeUpperBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current upper bound
name|replaceLast
argument_list|(
name|terms
argument_list|,
name|term
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LESS_THAN_OR_EQUAL
case|:
block|{
name|int
name|comparisonResult
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|<
literal|0
condition|)
block|{
comment|// 1) No upper bound, or
comment|// 2) New upper bound is lower than old upper bound
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a<= x<= b OR a< x<= b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|lowerBoundType
argument_list|()
argument_list|,
name|v0
argument_list|,
name|BoundType
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x<= b
name|r
operator|=
name|Range
operator|.
name|atMost
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev upper bound
name|removeUpperBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current upper bound
name|replaceLast
argument_list|(
name|terms
argument_list|,
name|term
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|GREATER_THAN
case|:
block|{
name|int
name|comparisonResult
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|>=
literal|0
condition|)
block|{
comment|// 1) No lower bound, or
comment|// 2) We need to open the lower bound, or
comment|// 3) New lower bound is greater than old lower bound
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a< x<= b OR a< x< b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|v0
argument_list|,
name|BoundType
operator|.
name|OPEN
argument_list|,
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x> a
name|r
operator|=
name|Range
operator|.
name|greaterThan
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev lower bound
name|removeLowerBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current lower bound
name|replaceLast
argument_list|(
name|terms
argument_list|,
name|term
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|GREATER_THAN_OR_EQUAL
case|:
block|{
name|int
name|comparisonResult
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|>
literal|0
condition|)
block|{
comment|// 1) No lower bound, or
comment|// 2) New lower bound is greater than old lower bound
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a<= x<= b OR a<= x< b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|v0
argument_list|,
name|BoundType
operator|.
name|CLOSED
argument_list|,
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x>= a
name|r
operator|=
name|Range
operator|.
name|atLeast
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev lower bound
name|removeLowerBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current lower bound
name|replaceLast
argument_list|(
name|terms
argument_list|,
name|term
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
if|if
condition|(
name|removeUpperBound
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|newBounds
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|p
operator|.
name|right
control|)
block|{
if|if
condition|(
name|isUpperBound
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|replaceLast
argument_list|(
name|terms
argument_list|,
name|e
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newBounds
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|newBounds
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|r
argument_list|,
name|newBounds
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|removeLowerBound
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|newBounds
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|p
operator|.
name|right
control|)
block|{
if|if
condition|(
name|isLowerBound
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|replaceLast
argument_list|(
name|terms
argument_list|,
name|e
argument_list|,
name|trueLiteral
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newBounds
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|newBounds
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|r
argument_list|,
name|newBounds
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Default
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|(
name|SqlKind
name|comparison
parameter_list|,
name|C
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|Range
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
name|Range
operator|.
name|lessThan
argument_list|(
name|c
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|Range
operator|.
name|atMost
argument_list|(
name|c
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|Range
operator|.
name|greaterThan
argument_list|(
name|c
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|Range
operator|.
name|atLeast
argument_list|(
name|c
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"BetaApi"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RangeSet
argument_list|<
name|C
argument_list|>
name|rangeSet
parameter_list|(
name|SqlKind
name|comparison
parameter_list|,
name|C
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|range
argument_list|(
name|comparison
argument_list|,
name|c
argument_list|)
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|ImmutableRangeSet
operator|.
expr|<
name|C
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|range
argument_list|(
name|SqlKind
operator|.
name|LESS_THAN
argument_list|,
name|c
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|range
argument_list|(
name|SqlKind
operator|.
name|GREATER_THAN
argument_list|,
name|c
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
end_function

begin_comment
comment|/** Marker interface for predicates (expressions that evaluate to BOOLEAN). */
end_comment

begin_interface
specifier|private
interface|interface
name|Predicate
block|{
comment|/** Wraps an expression in a Predicate or returns null. */
specifier|static
name|Predicate
name|of
parameter_list|(
name|RexNode
name|t
parameter_list|)
block|{
specifier|final
name|Predicate
name|p
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
return|;
block|}
return|return
name|IsPredicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/** Returns whether this predicate can be used while simplifying other OR      * operands. */
specifier|default
name|boolean
name|allowedInOr
parameter_list|(
name|RelOptPredicateList
name|predicates
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_interface

begin_comment
comment|/** Represents a simple Comparison.    *    *<p>Left hand side is a {@link RexNode}, right hand side is a literal.    */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|Comparison
implements|implements
name|Predicate
block|{
specifier|final
name|RexNode
name|ref
decl_stmt|;
specifier|final
name|SqlKind
name|kind
decl_stmt|;
specifier|final
name|RexLiteral
name|literal
decl_stmt|;
specifier|private
name|Comparison
parameter_list|(
name|RexNode
name|ref
parameter_list|,
name|SqlKind
name|kind
parameter_list|,
name|RexLiteral
name|literal
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|kind
argument_list|)
expr_stmt|;
name|this
operator|.
name|literal
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a comparison, between a {@link RexInputRef} or {@link RexFieldAccess} or      * deterministic {@link RexCall} and a literal. */
specifier|static
name|Comparison
name|of
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|e
argument_list|,
name|node
lambda|->
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
operator|||
name|RexUtil
operator|.
name|isDeterministic
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a comparison, or returns null. */
specifier|static
name|Comparison
name|of
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
argument_list|<
name|RexNode
argument_list|>
name|nodePredicate
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|e
decl_stmt|;
specifier|final
name|RexNode
name|left
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|right
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|right
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
name|nodePredicate
operator|.
name|test
argument_list|(
name|left
argument_list|)
condition|)
block|{
return|return
operator|new
name|Comparison
argument_list|(
name|left
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
argument_list|,
operator|(
name|RexLiteral
operator|)
name|right
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|left
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
name|nodePredicate
operator|.
name|test
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
operator|new
name|Comparison
argument_list|(
name|right
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|,
operator|(
name|RexLiteral
operator|)
name|left
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowedInOr
parameter_list|(
name|RelOptPredicateList
name|predicates
parameter_list|)
block|{
return|return
operator|!
name|ref
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
operator|||
name|predicates
operator|.
name|isEffectivelyNotNull
argument_list|(
name|ref
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/** Represents an IS Predicate. */
end_comment

begin_class
specifier|private
specifier|static
class|class
name|IsPredicate
implements|implements
name|Predicate
block|{
specifier|final
name|RexNode
name|ref
decl_stmt|;
specifier|final
name|SqlKind
name|kind
decl_stmt|;
specifier|private
name|IsPredicate
parameter_list|(
name|RexNode
name|ref
parameter_list|,
name|SqlKind
name|kind
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|kind
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an IS predicate, or returns null. */
specifier|static
name|IsPredicate
name|of
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|IS_NULL
case|:
case|case
name|IS_NOT_NULL
case|:
name|RexNode
name|pA
init|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|pA
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|IsPredicate
argument_list|(
name|pA
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

begin_function
specifier|private
specifier|static
name|boolean
name|isUpperBound
parameter_list|(
specifier|final
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|isLowerBound
parameter_list|(
specifier|final
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Combines predicates AND, optimizes, and returns null if the result is    * always false.    *    *<p>The expression is simplified on the assumption that an UNKNOWN value    * is always treated as FALSE. Therefore the simplified expression may    * sometimes evaluate to FALSE where the original expression would evaluate to    * UNKNOWN.    *    * @param predicates Filter condition predicates    * @return simplified conjunction of predicates for the filter, null if always false    */
end_comment

begin_function
specifier|public
name|RexNode
name|simplifyFilterPredicates
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|predicates
parameter_list|)
block|{
specifier|final
name|RexNode
name|simplifiedAnds
init|=
name|withPredicateElimination
argument_list|(
name|Bug
operator|.
name|CALCITE_2401_FIXED
argument_list|)
operator|.
name|simplifyUnknownAsFalse
argument_list|(
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplifiedAnds
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Remove cast of BOOLEAN NOT NULL to BOOLEAN or vice versa. Filter accepts
comment|// nullable and not-nullable conditions, but a CAST might get in the way of
comment|// other rewrites.
return|return
name|removeNullabilityCast
argument_list|(
name|simplifiedAnds
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Replaces the last occurrence of one specified value in a list with    * another.    *    *<p>Does not change the size of the list.    *    *<p>Returns whether the value was found.    */
end_comment

begin_function
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|boolean
name|replaceLast
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|,
name|E
name|oldVal
parameter_list|,
name|E
name|newVal
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|list
operator|.
name|lastIndexOf
argument_list|(
name|oldVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|/** Gathers expressions that can be converted into    * {@link Sarg search arguments}. */
end_comment

begin_class
specifier|static
class|class
name|SargCollector
block|{
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|RexSargBuilder
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|negate
decl_stmt|;
name|SargCollector
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|boolean
name|negate
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|this
operator|.
name|negate
operator|=
name|negate
expr_stmt|;
block|}
specifier|private
name|void
name|accept
parameter_list|(
name|RexNode
name|term
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|newTerms
parameter_list|)
block|{
if|if
condition|(
operator|!
name|accept_
argument_list|(
name|term
argument_list|,
name|newTerms
argument_list|)
condition|)
block|{
name|newTerms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|accept_
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|newTerms
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|SEARCH
case|:
return|return
name|accept2
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
argument_list|,
name|newTerms
argument_list|)
return|;
case|case
name|IS_NULL
case|:
if|if
condition|(
name|negate
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RexNode
name|arg
init|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|accept1
argument_list|(
name|arg
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|arg
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|newTerms
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|accept2
parameter_list|(
name|RexNode
name|left
parameter_list|,
name|RexNode
name|right
parameter_list|,
name|SqlKind
name|kind
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|newTerms
parameter_list|)
block|{
switch|switch
condition|(
name|left
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
case|case
name|FIELD_ACCESS
case|:
switch|switch
condition|(
name|right
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
return|return
name|accept1
argument_list|(
name|left
argument_list|,
name|kind
argument_list|,
operator|(
name|RexLiteral
operator|)
name|right
argument_list|,
name|newTerms
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
case|case
name|LITERAL
case|:
switch|switch
condition|(
name|right
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
case|case
name|FIELD_ACCESS
case|:
return|return
name|accept1
argument_list|(
name|right
argument_list|,
name|kind
operator|.
name|reverse
argument_list|()
argument_list|,
operator|(
name|RexLiteral
operator|)
name|left
argument_list|,
name|newTerms
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|E
name|addFluent
parameter_list|(
name|List
argument_list|<
name|?
super|super
name|E
argument_list|>
name|list
parameter_list|,
name|E
name|e
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
comment|// always returns true
specifier|private
name|boolean
name|accept1
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|SqlKind
name|kind
parameter_list|,
annotation|@
name|Nonnull
name|RexLiteral
name|literal
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|newTerms
parameter_list|)
block|{
specifier|final
name|RexSargBuilder
name|b
init|=
name|map
operator|.
name|computeIfAbsent
argument_list|(
name|e
argument_list|,
name|e2
lambda|->
name|addFluent
argument_list|(
name|newTerms
argument_list|,
operator|new
name|RexSargBuilder
argument_list|(
name|e2
argument_list|,
name|rexBuilder
argument_list|,
name|negate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|negate
condition|)
block|{
name|kind
operator|=
name|kind
operator|.
name|negateNullSafe
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Comparable
name|value
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|LESS_THAN
case|:
name|b
operator|.
name|addRange
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
name|value
argument_list|)
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|b
operator|.
name|addRange
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
name|value
argument_list|)
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|GREATER_THAN
case|:
name|b
operator|.
name|addRange
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
name|value
argument_list|)
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|b
operator|.
name|addRange
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
name|value
argument_list|)
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|EQUALS
case|:
name|b
operator|.
name|addRange
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|NOT_EQUALS
case|:
name|b
operator|.
name|addRange
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
name|value
argument_list|)
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addRange
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
name|value
argument_list|)
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|SEARCH
case|:
specifier|final
name|Sarg
name|sarg
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Sarg
operator|.
name|class
argument_list|)
decl_stmt|;
name|b
operator|.
name|addSarg
argument_list|(
name|sarg
argument_list|,
name|negate
argument_list|,
name|literal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|IS_NULL
case|:
if|if
condition|(
name|negate
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"negate is not supported for IS_NULL"
argument_list|)
throw|;
block|}
name|b
operator|.
name|containsNull
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
comment|/** If a term is a call to {@code SEARCH} on a {@link RexSargBuilder},      * converts it to a {@code SEARCH} on a {@link Sarg}. */
name|RexNode
name|fix
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|instanceof
name|RexSargBuilder
condition|)
block|{
name|RexSargBuilder
name|sargBuilder
init|=
operator|(
name|RexSargBuilder
operator|)
name|term
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SEARCH
argument_list|,
name|sargBuilder
operator|.
name|ref
argument_list|,
name|rexBuilder
operator|.
name|makeSearchArgumentLiteral
argument_list|(
name|sargBuilder
operator|.
name|build
argument_list|(
name|negate
argument_list|)
argument_list|,
name|term
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|term
return|;
block|}
block|}
end_class

begin_comment
comment|/** Equivalent to a {@link RexLiteral} whose value is a {@link Sarg},    * but mutable, so that the Sarg can be expanded as {@link SargCollector}    * traverses a list of OR or AND terms.    *    *<p>The {@link SargCollector#fix} method converts it to an immutable    * literal. */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"BetaApi"
argument_list|)
specifier|static
class|class
name|RexSargBuilder
extends|extends
name|RexNode
block|{
specifier|final
name|RexNode
name|ref
decl_stmt|;
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Comparable
argument_list|>
name|rangeSet
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
decl_stmt|;
name|boolean
name|containsNull
decl_stmt|;
name|RexSargBuilder
parameter_list|(
name|RexNode
name|ref
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|,
name|boolean
name|negate
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|rexBuilder
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rexBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|containsNull
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SEARCH("
operator|+
name|ref
operator|+
literal|", "
operator|+
name|rangeSet
operator|+
operator|(
name|containsNull
condition|?
literal|" + null)"
else|:
literal|")"
operator|)
return|;
block|}
comment|/** Returns a rough estimate of whether it is worth converting to a Sarg.      *      *<p>Examples:      *<ul>      *<li>{@code x = 1}, {@code x<> 1}, {@code x> 1} have complexity 1      *<li>{@code x> 1 or x is null} has complexity 2      *<li>{@code x in (2, 4, 6) or x> 20} has complexity 4      *</ul>      */
name|int
name|complexity
parameter_list|()
block|{
name|int
name|complexity
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rangeSet
operator|.
name|asRanges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rangeSet
operator|.
name|complement
argument_list|()
operator|.
name|asRanges
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|complexity
operator|++
expr_stmt|;
block|}
else|else
block|{
name|complexity
operator|+=
name|rangeSet
operator|.
name|asRanges
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|containsNull
condition|)
block|{
operator|++
name|complexity
expr_stmt|;
block|}
return|return
name|complexity
return|;
block|}
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|Sarg
argument_list|<
name|C
argument_list|>
name|build
parameter_list|(
name|boolean
name|negate
parameter_list|)
block|{
specifier|final
name|RangeSet
name|rangeSet
init|=
name|negate
condition|?
name|this
operator|.
name|rangeSet
operator|.
name|complement
argument_list|()
else|:
name|this
operator|.
name|rangeSet
decl_stmt|;
return|return
name|Sarg
operator|.
name|of
argument_list|(
name|containsNull
argument_list|,
name|rangeSet
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getType
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Expression is "x IS NULL"
return|return
name|ref
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|distinctTypes
init|=
name|Util
operator|.
name|distinctList
argument_list|(
name|this
operator|.
name|types
argument_list|)
decl_stmt|;
return|return
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rexBuilder
operator|.
name|typeFactory
operator|.
name|leastRestrictive
argument_list|(
name|distinctTypes
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"Can't find leastRestrictive type among "
operator|+
name|distinctTypes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|accept
parameter_list|(
name|RexVisitor
argument_list|<
name|R
argument_list|>
name|visitor
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|,
name|P
parameter_list|>
name|R
name|accept
parameter_list|(
name|RexBiVisitor
argument_list|<
name|R
argument_list|,
name|P
argument_list|>
name|visitor
parameter_list|,
name|P
name|arg
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|void
name|addRange
parameter_list|(
name|Range
argument_list|<
name|Comparable
argument_list|>
name|range
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|void
name|addSarg
parameter_list|(
name|Sarg
name|sarg
parameter_list|,
name|boolean
name|negate
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|rangeSet
operator|.
name|addAll
argument_list|(
name|negate
condition|?
name|sarg
operator|.
name|rangeSet
operator|.
name|complement
argument_list|()
else|:
name|sarg
operator|.
name|rangeSet
argument_list|)
expr_stmt|;
name|containsNull
operator||=
name|sarg
operator|.
name|containsNull
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

