begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Strong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|NullSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Context required to simplify a row-expression.  */
end_comment

begin_class
specifier|public
class|class
name|RexSimplify
block|{
specifier|private
specifier|final
name|boolean
name|paranoid
decl_stmt|;
specifier|public
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|RelOptPredicateList
name|predicates
decl_stmt|;
specifier|final
name|boolean
name|unknownAsFalse
decl_stmt|;
specifier|final
name|boolean
name|predicateElimination
decl_stmt|;
specifier|private
specifier|final
name|RexExecutor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|Strong
name|strong
decl_stmt|;
comment|/**    * Creates a RexSimplify.    *    * @param rexBuilder Rex builder    * @param predicates Predicates known to hold on input fields    * @param unknownAsFalse Whether to convert UNKNOWN values to FALSE    * @param executor Executor for constant reduction, not null    */
specifier|public
name|RexSimplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|,
name|RexExecutor
name|executor
parameter_list|)
block|{
name|this
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|unknownAsFalse
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/** Internal constructor. */
specifier|private
name|RexSimplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|,
name|boolean
name|predicateElimination
parameter_list|,
name|boolean
name|paranoid
parameter_list|,
name|RexExecutor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|rexBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|predicates
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
name|this
operator|.
name|unknownAsFalse
operator|=
name|unknownAsFalse
expr_stmt|;
name|this
operator|.
name|predicateElimination
operator|=
name|predicateElimination
expr_stmt|;
name|this
operator|.
name|paranoid
operator|=
name|paranoid
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|strong
operator|=
operator|new
name|Strong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 2.0
specifier|public
name|RexSimplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|,
name|RexExecutor
name|executor
parameter_list|)
block|{
name|this
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|EMPTY
argument_list|,
name|unknownAsFalse
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/** Returns a RexSimplify the same as this but with a specified    * {@link #unknownAsFalse} value. */
specifier|public
name|RexSimplify
name|withUnknownAsFalse
parameter_list|(
name|boolean
name|unknownAsFalse
parameter_list|)
block|{
return|return
name|unknownAsFalse
operator|==
name|this
operator|.
name|unknownAsFalse
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|unknownAsFalse
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Returns a RexSimplify the same as this but with a specified    * {@link #predicates} value. */
specifier|public
name|RexSimplify
name|withPredicates
parameter_list|(
name|RelOptPredicateList
name|predicates
parameter_list|)
block|{
return|return
name|predicates
operator|==
name|this
operator|.
name|predicates
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|unknownAsFalse
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Returns a RexSimplify the same as this but which verifies that    * the expression before and after simplification are equivalent.    *    * @see #verify    */
specifier|public
name|RexSimplify
name|withParanoid
parameter_list|(
name|boolean
name|paranoid
parameter_list|)
block|{
return|return
name|paranoid
operator|==
name|this
operator|.
name|paranoid
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|unknownAsFalse
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Returns a RexSimplify the same as this but with a specified {@link #predicateElimination}    * value.    * This is introduced temporarily; until CALCITE-2401 is fixed    */
specifier|private
name|RexSimplify
name|withPredicateElimination
parameter_list|(
name|boolean
name|predicateElimination
parameter_list|)
block|{
return|return
name|predicateElimination
operator|==
name|this
operator|.
name|predicateElimination
condition|?
name|this
else|:
operator|new
name|RexSimplify
argument_list|(
name|rexBuilder
argument_list|,
name|predicates
argument_list|,
name|unknownAsFalse
argument_list|,
name|predicateElimination
argument_list|,
name|paranoid
argument_list|,
name|executor
argument_list|)
return|;
block|}
comment|/** Simplifies a boolean expression, always preserving its type and its    * nullability.    *    *<p>This is useful if you are simplifying expressions in a    * {@link Project}. */
specifier|public
name|RexNode
name|simplifyPreservingType
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|RexNode
name|e2
init|=
name|simplify
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|e2
operator|.
name|getType
argument_list|()
operator|==
name|e
operator|.
name|getType
argument_list|()
condition|)
block|{
return|return
name|e2
return|;
block|}
specifier|final
name|RexNode
name|e3
init|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|e2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|e3
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
return|return
name|e3
return|;
block|}
comment|/**    * Simplifies a boolean expression.    *    *<p>In particular:</p>    *<ul>    *<li>{@code simplify(x = 1 AND y = 2 AND NOT x = 1)}    * returns {@code y = 2}</li>    *<li>{@code simplify(x = 1 AND FALSE)}    * returns {@code FALSE}</li>    *</ul>    *    *<p>If the expression is a predicate in a WHERE clause, UNKNOWN values have    * the same effect as FALSE. In situations like this, specify    * {@code unknownAsFalse = true}, so and we can switch from 3-valued logic to    * simpler 2-valued logic and make more optimizations.    *    * @param e Expression to simplify    */
specifier|public
name|RexNode
name|simplify
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|verify
argument_list|(
name|e
argument_list|,
name|simplifier
lambda|->
name|simplifier
operator|.
name|simplify_
argument_list|(
name|e
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|simplify_
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
if|if
condition|(
name|strong
operator|.
name|isNull
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// NULL integer must not be converted to FALSE even in unknownAsFalse mode
if|if
condition|(
name|unknownAsFalse
operator|&&
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
return|return
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
return|return
name|simplifyAnd
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|OR
case|:
return|return
name|simplifyOr
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|NOT
case|:
return|return
name|simplifyNot
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|CASE
case|:
return|return
name|simplifyCase
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|COALESCE
case|:
return|return
name|simplifyCoalesce
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|CAST
case|:
return|return
name|simplifyCast
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|CEIL
case|:
case|case
name|FLOOR
case|:
return|return
name|simplifyCeilFloor
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|IS_NOT_NULL
case|:
case|case
name|IS_TRUE
case|:
case|case
name|IS_NOT_TRUE
case|:
case|case
name|IS_FALSE
case|:
case|case
name|IS_NOT_FALSE
case|:
assert|assert
name|e
operator|instanceof
name|RexCall
assert|;
return|return
name|simplifyIs
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|NOT_EQUALS
case|:
return|return
name|simplifyComparison
argument_list|(
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
default|default:
return|return
name|e
return|;
block|}
block|}
comment|// e must be a comparison (=,>,>=,<,<=, !=)
specifier|private
name|RexNode
name|simplifyComparison
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|simplifyComparison
argument_list|(
name|e
argument_list|,
name|Comparable
operator|.
name|class
argument_list|)
return|;
block|}
comment|// e must be a comparison (=,>,>=,<,<=, !=)
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|simplifyComparison
parameter_list|(
name|RexCall
name|e
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|e
operator|.
name|operands
argument_list|)
decl_stmt|;
name|simplifyList
argument_list|(
name|operands
argument_list|)
expr_stmt|;
comment|// Simplify "x<op> x"
specifier|final
name|RexNode
name|o0
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|o1
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|eq
argument_list|(
name|o0
argument_list|,
name|o1
argument_list|)
operator|&&
operator|(
name|unknownAsFalse
operator|||
operator|(
operator|!
name|o0
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
operator|&&
operator|!
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
operator|)
operator|)
condition|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
comment|// "x = x" simplifies to "x is not null" (similarly<= and>=)
return|return
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|o0
argument_list|)
argument_list|)
return|;
default|default:
comment|// "x != x" simplifies to "false" (similarly< and>)
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
comment|// Simplify "<literal1><op><literal2>"
comment|// For example, "1 = 2" becomes FALSE;
comment|// "1 != 1" becomes FALSE;
comment|// "1 != NULL" becomes UNKNOWN (or FALSE if unknownAsFalse);
comment|// "1 != '1'" is unchanged because the types are not the same.
if|if
condition|(
name|o0
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
operator|&&
name|o1
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
operator|&&
name|SqlTypeUtil
operator|.
name|equalSansNullability
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|o0
operator|.
name|getType
argument_list|()
argument_list|,
name|o1
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|C
name|v0
init|=
operator|(
operator|(
name|RexLiteral
operator|)
name|o0
operator|)
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|C
name|v1
init|=
operator|(
operator|(
name|RexLiteral
operator|)
name|o1
operator|)
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|v0
operator|==
literal|null
operator|||
name|v1
operator|==
literal|null
condition|)
block|{
return|return
name|unknownAsFalse
condition|?
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
else|:
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|int
name|comparisonResult
init|=
name|v0
operator|.
name|compareTo
argument_list|(
name|v1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|==
literal|0
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|>
literal|0
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|>=
literal|0
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|<
literal|0
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|<=
literal|0
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|comparisonResult
operator|!=
literal|0
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|// If none of the arguments were simplified, return the call unchanged.
specifier|final
name|RexNode
name|e2
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|equals
argument_list|(
name|e
operator|.
name|operands
argument_list|)
condition|)
block|{
name|e2
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
name|e2
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|e
operator|.
name|op
argument_list|,
name|operands
argument_list|)
expr_stmt|;
block|}
return|return
name|simplifyUsingPredicates
argument_list|(
name|e2
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|/**    * Simplifies a conjunction of boolean expressions.    */
specifier|public
name|RexNode
name|simplifyAnds
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|nodes
control|)
block|{
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|e
argument_list|,
name|terms
argument_list|,
name|notTerms
argument_list|)
expr_stmt|;
block|}
name|simplifyList
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|simplifyList
argument_list|(
name|notTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|unknownAsFalse
condition|)
block|{
return|return
name|simplifyAnd2ForUnknownAsFalse
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
return|return
name|simplifyAnd2
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
specifier|private
name|void
name|simplifyList
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|withUnknownAsFalse
argument_list|(
literal|false
argument_list|)
operator|.
name|simplify_
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|simplifyAndTerms
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|)
block|{
name|RexSimplify
name|simplify
init|=
name|withUnknownAsFalse
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Predicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|RelOptPredicateList
name|newPredicates
init|=
name|simplify
operator|.
name|predicates
operator|.
name|union
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|terms
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|simplify
operator|=
name|simplify
operator|.
name|withPredicates
argument_list|(
name|newPredicates
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Predicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|simplifyOrTerms
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|)
block|{
comment|// Suppose we are processing "e1(x) OR e2(x) OR e3(x)". When we are
comment|// visiting "e3(x)" we know both "e1(x)" and "e2(x)" are not true (they
comment|// may be unknown), because if either of them were true we would have
comment|// stopped.
name|RexSimplify
name|simplify
init|=
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Predicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|RexNode
name|t2
init|=
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|t2
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|inverse
init|=
name|simplify
operator|.
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|t2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|newPredicates
init|=
name|simplify
operator|.
name|predicates
operator|.
name|union
argument_list|(
name|rexBuilder
argument_list|,
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|inverse
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|simplify
operator|=
name|simplify
operator|.
name|withPredicates
argument_list|(
name|newPredicates
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|t
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Predicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|simplify
operator|.
name|simplify
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RexNode
name|simplifyNot
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|RexNode
name|a
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|a
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|NOT
case|:
comment|// NOT NOT x ==> x
return|return
name|simplify_
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|LITERAL
case|:
if|if
condition|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
operator|&&
operator|!
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|!
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|a
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|final
name|SqlKind
name|negateKind
init|=
name|a
operator|.
name|getKind
argument_list|()
operator|.
name|negate
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|!=
name|negateKind
condition|)
block|{
return|return
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|negateKind
argument_list|)
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|SqlKind
name|negateKind2
init|=
name|a
operator|.
name|getKind
argument_list|()
operator|.
name|negateNullSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|!=
name|negateKind2
condition|)
block|{
return|return
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|negateKind2
argument_list|)
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|AND
condition|)
block|{
comment|// NOT distributivity for AND
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|operand
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|newOperands
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
condition|)
block|{
comment|// NOT distributivity for OR
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|operand
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|newOperands
argument_list|)
argument_list|)
return|;
block|}
return|return
name|call
return|;
block|}
specifier|private
name|RexNode
name|simplifyIs
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|SqlKind
name|kind
init|=
name|call
operator|.
name|getKind
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|a
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|pred
init|=
name|simplifyIsPredicate
argument_list|(
name|kind
argument_list|,
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|pred
operator|!=
literal|null
condition|)
block|{
return|return
name|pred
return|;
block|}
specifier|final
name|RexNode
name|simplified
init|=
name|simplifyIs2
argument_list|(
name|kind
argument_list|,
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplified
operator|!=
literal|null
condition|)
block|{
return|return
name|simplified
return|;
block|}
return|return
name|call
return|;
block|}
specifier|private
name|RexNode
name|simplifyIsPredicate
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|RexNode
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|a
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|RexNode
name|p
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
name|IsPredicate
name|pred
init|=
name|IsPredicate
operator|.
name|of
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|pred
operator|==
literal|null
operator|||
operator|!
name|a
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|pred
operator|.
name|ref
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|kind
operator|==
name|pred
operator|.
name|kind
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|RexNode
name|simplifyIs2
parameter_list|(
name|SqlKind
name|kind
parameter_list|,
name|RexNode
name|a
parameter_list|)
block|{
specifier|final
name|RexNode
name|simplified
decl_stmt|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|IS_NULL
case|:
comment|// x IS NULL ==> FALSE (if x is not nullable)
name|simplified
operator|=
name|simplifyIsNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|simplified
operator|!=
literal|null
condition|)
block|{
return|return
name|simplified
return|;
block|}
break|break;
case|case
name|IS_NOT_NULL
case|:
comment|// x IS NOT NULL ==> TRUE (if x is not nullable)
name|simplified
operator|=
name|simplifyIsNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|simplified
operator|!=
literal|null
condition|)
block|{
return|return
name|simplified
return|;
block|}
break|break;
case|case
name|IS_TRUE
case|:
case|case
name|IS_NOT_FALSE
case|:
comment|// x IS TRUE ==> x (if x is not nullable)
comment|// x IS NOT FALSE ==> x (if x is not nullable)
if|if
condition|(
operator|!
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|simplify_
argument_list|(
name|a
argument_list|)
return|;
block|}
break|break;
case|case
name|IS_FALSE
case|:
case|case
name|IS_NOT_TRUE
case|:
comment|// x IS NOT TRUE ==> NOT x (if x is not nullable)
comment|// x IS FALSE ==> NOT x (if x is not nullable)
if|if
condition|(
operator|!
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|a
argument_list|)
argument_list|)
return|;
block|}
break|break;
block|}
switch|switch
condition|(
name|a
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|NOT
case|:
comment|// (NOT x) IS TRUE ==> x IS FALSE
comment|// Similarly for IS NOT TRUE, IS FALSE, etc.
comment|//
comment|// Note that
comment|//   (NOT x) IS TRUE !=> x IS FALSE
comment|// because of null values.
specifier|final
name|SqlOperator
name|notKind
init|=
name|RexUtil
operator|.
name|op
argument_list|(
name|kind
operator|.
name|negateNullSafe
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|arg
init|=
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|notKind
argument_list|,
name|arg
argument_list|)
argument_list|)
return|;
block|}
name|RexNode
name|a2
init|=
name|withUnknownAsFalse
argument_list|(
literal|false
argument_list|)
operator|.
name|simplify_
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|a2
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|RexUtil
operator|.
name|op
argument_list|(
name|kind
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|a2
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
comment|// cannot be simplified
block|}
specifier|private
name|RexNode
name|simplifyIsNotNull
parameter_list|(
name|RexNode
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|predicates
operator|.
name|pulledUpPredicates
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
switch|switch
condition|(
name|Strong
operator|.
name|policy
argument_list|(
name|a
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|NOT_NULL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
case|case
name|ANY
case|:
comment|// "f" is a strong operator, so "f(operand0, operand1) IS NOT NULL"
comment|// simplifies to "operand0 IS NOT NULL AND operand1 IS NOT NULL"
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
specifier|final
name|RexNode
name|simplified
init|=
name|simplifyIsNotNull
argument_list|(
name|operand
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplified
operator|==
literal|null
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|simplified
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
else|else
block|{
name|operands
operator|.
name|add
argument_list|(
name|simplified
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|operands
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|CUSTOM
case|:
switch|switch
condition|(
name|a
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|!
operator|(
operator|(
name|RexLiteral
operator|)
name|a
operator|)
operator|.
name|isNull
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"every CUSTOM policy needs a handler, "
operator|+
name|a
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
case|case
name|AS_IS
case|:
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|RexNode
name|simplifyIsNull
parameter_list|(
name|RexNode
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|RexUtil
operator|.
name|isNull
argument_list|(
name|a
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
switch|switch
condition|(
name|Strong
operator|.
name|policy
argument_list|(
name|a
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|NOT_NULL
case|:
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|ANY
case|:
comment|// "f" is a strong operator, so "f(operand0, operand1) IS NULL" simplifies
comment|// to "operand0 IS NULL OR operand1 IS NULL"
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
specifier|final
name|RexNode
name|simplified
init|=
name|simplifyIsNull
argument_list|(
name|operand
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplified
operator|==
literal|null
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operands
operator|.
name|add
argument_list|(
name|simplified
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|operands
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|AS_IS
case|:
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|RexNode
name|simplifyCoalesce
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|digests
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|operand
operator|=
name|simplify_
argument_list|(
name|operand
argument_list|)
expr_stmt|;
if|if
condition|(
name|digests
operator|.
name|add
argument_list|(
name|operand
operator|.
name|digest
argument_list|)
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|operand
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
switch|switch
condition|(
name|operands
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|call
operator|.
name|type
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
if|if
condition|(
name|operands
operator|.
name|equals
argument_list|(
name|call
operator|.
name|operands
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|type
argument_list|,
name|operands
argument_list|)
return|;
block|}
block|}
specifier|private
name|RexNode
name|simplifyCase
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|isCasePredicate
argument_list|(
name|call
argument_list|,
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|operand
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
comment|// Predicate is always TRUE. Make value the ELSE and quit.
name|newOperands
operator|.
name|add
argument_list|(
name|operands
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unknownAsFalse
operator|&&
name|RexUtil
operator|.
name|isNull
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|else if
condition|(
name|operand
operator|.
name|isAlwaysFalse
argument_list|()
operator|||
name|RexUtil
operator|.
name|isNull
argument_list|(
name|operand
argument_list|)
condition|)
block|{
comment|// Predicate is always FALSE or NULL. Skip predicate and value.
operator|++
name|i
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
if|if
condition|(
name|unknownAsFalse
operator|&&
name|RexUtil
operator|.
name|isNull
argument_list|(
name|operand
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|operand
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|newOperands
operator|.
name|add
argument_list|(
name|operand
argument_list|)
expr_stmt|;
block|}
assert|assert
name|newOperands
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
assert|;
if|if
condition|(
name|newOperands
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|RexNode
name|last
init|=
name|Util
operator|.
name|last
argument_list|(
name|newOperands
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|call
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|last
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeAbstractCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|last
argument_list|)
return|;
block|}
return|return
name|last
return|;
block|}
name|trueFalse
label|:
if|if
condition|(
name|call
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
comment|// Optimize CASE where every branch returns constant true or constant
comment|// false.
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|pairs
init|=
name|casePairs
argument_list|(
name|rexBuilder
argument_list|,
name|newOperands
argument_list|)
decl_stmt|;
comment|// 1) Possible simplification if unknown is treated as false:
comment|//   CASE
comment|//   WHEN p1 THEN TRUE
comment|//   WHEN p2 THEN TRUE
comment|//   ELSE FALSE
comment|//   END
comment|// can be rewritten to: (p1 or p2)
if|if
condition|(
name|unknownAsFalse
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|pos
operator|<
name|pairs
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
comment|// True block
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|pair
init|=
name|pairs
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
break|break;
block|}
name|terms
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|pos
operator|<
name|pairs
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
comment|// False block
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|pair
init|=
name|pairs
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysFalse
argument_list|()
operator|&&
operator|!
name|RexUtil
operator|.
name|isNull
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|pos
operator|==
name|pairs
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|final
name|RexNode
name|disjunction
init|=
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|call
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|disjunction
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|disjunction
argument_list|)
return|;
block|}
return|return
name|disjunction
return|;
block|}
block|}
comment|// 2) Another simplification
comment|//   CASE
comment|//   WHEN p1 THEN TRUE
comment|//   WHEN p2 THEN FALSE
comment|//   WHEN p3 THEN TRUE
comment|//   ELSE FALSE
comment|//   END
comment|// if p1...pn cannot be nullable
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|pair
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|pairs
argument_list|)
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
break|break
name|trueFalse
break|;
block|}
if|if
condition|(
operator|!
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
operator|&&
operator|!
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysFalse
argument_list|()
operator|&&
operator|(
operator|!
name|unknownAsFalse
operator|||
operator|!
name|RexUtil
operator|.
name|isNull
argument_list|(
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
condition|)
block|{
break|break
name|trueFalse
break|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|pair
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|pairs
argument_list|)
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|RexUtil
operator|.
name|andNot
argument_list|(
name|rexBuilder
argument_list|,
name|pair
operator|.
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|notTerms
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notTerms
operator|.
name|add
argument_list|(
name|pair
operator|.
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|RexNode
name|disjunction
init|=
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|call
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|disjunction
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|disjunction
operator|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|disjunction
argument_list|)
expr_stmt|;
block|}
return|return
name|simplify_
argument_list|(
name|disjunction
argument_list|)
return|;
block|}
if|if
condition|(
name|newOperands
operator|.
name|equals
argument_list|(
name|operands
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|newOperands
argument_list|)
return|;
block|}
comment|/** Given "CASE WHEN p1 THEN v1 ... ELSE e END"    * returns [(p1, v1), ..., (true, e)]. */
specifier|private
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|casePairs
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
operator|(
name|RexNode
operator|)
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|,
name|Util
operator|.
name|last
argument_list|(
name|operands
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// public only to support a deprecated method; treat as private
specifier|public
name|RexNode
name|simplifyAnd
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|e
argument_list|,
name|terms
argument_list|,
name|notTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|unknownAsFalse
operator|&&
name|predicateElimination
condition|)
block|{
name|simplifyAndTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|simplifyList
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
name|simplifyList
argument_list|(
name|notTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|unknownAsFalse
condition|)
block|{
return|return
name|simplifyAnd2ForUnknownAsFalse
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
return|return
name|simplifyAnd2
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
comment|// package-protected only to support a deprecated method; treat as private
name|RexNode
name|simplifyAnd2
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|term
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|// If one of the not-disjunctions is a disjunction that is wholly
comment|// contained in the disjunctions list, the expression is not
comment|// satisfiable.
comment|//
comment|// Example #1. x AND y AND z AND NOT (x AND y)  - not satisfiable
comment|// Example #2. x AND y AND NOT (x AND y)        - not satisfiable
comment|// Example #3. x AND y AND NOT (x AND y AND z)  - may be satisfiable
name|List
argument_list|<
name|RexNode
argument_list|>
name|notSatisfiableNullables
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms2
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|notDisjunction
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|terms
operator|.
name|containsAll
argument_list|(
name|terms2
argument_list|)
condition|)
block|{
comment|// may be satisfiable ==> check other terms
continue|continue;
block|}
if|if
condition|(
operator|!
name|notDisjunction
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
comment|// x is NOT nullable, then x AND NOT(x) ==> FALSE
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// x AND NOT(x) is UNKNOWN for NULL input
comment|// So we search for the shortest notDisjunction then convert
comment|// original expression to NULL and x IS NULL
if|if
condition|(
name|notSatisfiableNullables
operator|==
literal|null
condition|)
block|{
name|notSatisfiableNullables
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|notSatisfiableNullables
operator|.
name|add
argument_list|(
name|notDisjunction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notSatisfiableNullables
operator|!=
literal|null
condition|)
block|{
comment|// Remove the intersection of "terms" and "notTerms"
name|terms
operator|.
name|removeAll
argument_list|(
name|notSatisfiableNullables
argument_list|)
expr_stmt|;
name|notTerms
operator|.
name|removeAll
argument_list|(
name|notSatisfiableNullables
argument_list|)
expr_stmt|;
comment|// The intersection simplify to "null and x1 is null and x2 is null..."
name|terms
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|notSatisfiableNullables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|notSatisfiableNullable
range|:
name|notSatisfiableNullables
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|simplifyIs
argument_list|(
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|notSatisfiableNullable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the NOT disjunctions back in.
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|simplify_
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|notDisjunction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** As {@link #simplifyAnd2(List, List)} but we assume that if the expression    * returns UNKNOWN it will be interpreted as FALSE. */
name|RexNode
name|simplifyAnd2ForUnknownAsFalse
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
name|simplifyAnd2ForUnknownAsFalse
argument_list|(
name|terms
argument_list|,
name|notTerms
argument_list|,
name|Comparable
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|simplifyAnd2ForUnknownAsFalse
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|term
operator|.
name|isAlwaysFalse
argument_list|()
operator|||
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|term
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Make sure "x OR y OR x" (a single-term conjunction) gets simplified.
return|return
name|simplify_
argument_list|(
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|// Try to simplify the expression
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|equalityTerms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
argument_list|>
name|rangeTerms
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|equalityConstantTerms
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|negatedTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nullOperands
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|notNullOperands
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|comparedOperands
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add the predicates from the source to the range terms.
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
specifier|final
name|Comparison
name|comparison
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparison
operator|!=
literal|null
operator|&&
name|comparison
operator|.
name|kind
operator|!=
name|SqlKind
operator|.
name|NOT_EQUALS
condition|)
block|{
comment|// not supported yet
specifier|final
name|C
name|v0
init|=
name|comparison
operator|.
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|v0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RexNode
name|result
init|=
name|processRange
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
name|rangeTerms
argument_list|,
name|predicate
argument_list|,
name|comparison
operator|.
name|ref
argument_list|,
name|v0
argument_list|,
name|comparison
operator|.
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// Not satisfiable
return|return
name|result
return|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|term
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isDeterministic
argument_list|(
name|term
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Simplify BOOLEAN expressions if possible
while|while
condition|(
name|term
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|term
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|term
operator|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|term
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|term
operator|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|term
argument_list|)
expr_stmt|;
continue|continue;
block|}
break|break;
block|}
switch|switch
condition|(
name|term
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|term
decl_stmt|;
name|RexNode
name|left
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|left
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// if it is a cast, we include the inner reference
if|if
condition|(
name|left
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|RexCall
name|leftCast
init|=
operator|(
name|RexCall
operator|)
name|left
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|leftCast
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RexNode
name|right
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// if it is a cast, we include the inner reference
if|if
condition|(
name|right
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|RexCall
name|rightCast
init|=
operator|(
name|RexCall
operator|)
name|right
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|rightCast
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Comparison
name|comparison
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|term
argument_list|)
decl_stmt|;
comment|// Check for comparison with null values
if|if
condition|(
name|comparison
operator|!=
literal|null
operator|&&
name|comparison
operator|.
name|literal
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// Check for equality on different constants. If the same ref or CAST(ref)
comment|// is equal to different constants, this condition cannot be satisfied,
comment|// and hence it can be evaluated to FALSE
if|if
condition|(
name|term
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
if|if
condition|(
name|comparison
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|literal
init|=
name|comparison
operator|.
name|literal
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|prevLiteral
init|=
name|equalityConstantTerms
operator|.
name|put
argument_list|(
name|comparison
operator|.
name|ref
operator|.
name|toString
argument_list|()
argument_list|,
name|literal
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevLiteral
operator|!=
literal|null
operator|&&
operator|!
name|literal
operator|.
name|equals
argument_list|(
name|prevLiteral
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|left
argument_list|,
literal|true
argument_list|)
operator|&&
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|right
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|equalityTerms
operator|.
name|put
argument_list|(
name|left
operator|.
name|toString
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Assume the expression a> 5 is part of a Filter condition.
comment|// Then we can derive the negated term: a<= 5.
comment|// But as the comparison is string based and thus operands order dependent,
comment|// we should also add the inverted negated term: 5>= a.
comment|// Observe that for creating the inverted term we invert the list of operands.
name|RexNode
name|negatedTerm
init|=
name|RexUtil
operator|.
name|negate
argument_list|(
name|rexBuilder
argument_list|,
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|negatedTerm
operator|!=
literal|null
condition|)
block|{
name|negatedTerms
operator|.
name|add
argument_list|(
name|negatedTerm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RexNode
name|invertNegatedTerm
init|=
name|RexUtil
operator|.
name|invert
argument_list|(
name|rexBuilder
argument_list|,
operator|(
name|RexCall
operator|)
name|negatedTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|invertNegatedTerm
operator|!=
literal|null
condition|)
block|{
name|negatedTerms
operator|.
name|add
argument_list|(
name|invertNegatedTerm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove terms that are implied by predicates on the input,
comment|// or weaken terms that are partially implied.
comment|// E.g. given predicate "x>= 5" and term "x between 3 and 10"
comment|// we weaken to term to "x between 5 and 10".
specifier|final
name|RexNode
name|term2
init|=
name|simplifyUsingPredicates
argument_list|(
name|term
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|term2
operator|!=
name|term
condition|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|term
operator|=
name|term2
argument_list|)
expr_stmt|;
block|}
comment|// Range
if|if
condition|(
name|comparison
operator|!=
literal|null
operator|&&
name|comparison
operator|.
name|kind
operator|!=
name|SqlKind
operator|.
name|NOT_EQUALS
condition|)
block|{
comment|// not supported yet
specifier|final
name|C
name|constant
init|=
name|comparison
operator|.
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|result
init|=
name|processRange
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
name|rangeTerms
argument_list|,
name|term
argument_list|,
name|comparison
operator|.
name|ref
argument_list|,
name|constant
argument_list|,
name|comparison
operator|.
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// Not satisfiable
return|return
name|result
return|;
block|}
block|}
break|break;
case|case
name|IN
case|:
name|comparedOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BETWEEN
case|:
name|comparedOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|IS_NOT_NULL
case|:
name|notNullOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
break|break;
case|case
name|IS_NULL
case|:
name|nullOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If one column should be null and is in a comparison predicate,
comment|// it is not satisfiable.
comment|// Example. IS NULL(x) AND x< 5  - not satisfiable
if|if
condition|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|nullOperands
argument_list|,
name|comparedOperands
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// Check for equality of two refs wrt equality with constants
comment|// Example #1. x=5 AND y=5 AND x=y : x=5 AND y=5
comment|// Example #2. x=5 AND y=6 AND x=y - not satisfiable
for|for
control|(
name|String
name|ref1
range|:
name|equalityTerms
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|literal1
init|=
name|equalityConstantTerms
operator|.
name|get
argument_list|(
name|ref1
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal1
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Collection
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|references
init|=
name|equalityTerms
operator|.
name|get
argument_list|(
name|ref1
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|ref2
range|:
name|references
control|)
block|{
specifier|final
name|String
name|literal2
init|=
name|equalityConstantTerms
operator|.
name|get
argument_list|(
name|ref2
operator|.
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal2
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|literal1
operator|.
name|equals
argument_list|(
name|literal2
argument_list|)
condition|)
block|{
comment|// If an expression is equal to two different constants,
comment|// it is not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// Otherwise we can remove the term, as we already know that
comment|// the expression is equal to two constants
name|terms
operator|.
name|remove
argument_list|(
name|ref2
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove not necessary IS NOT NULL expressions.
comment|//
comment|// Example. IS NOT NULL(x) AND x< 5  : x< 5
for|for
control|(
name|RexNode
name|operand
range|:
name|notNullOperands
control|)
block|{
if|if
condition|(
operator|!
name|comparedOperands
operator|.
name|contains
argument_list|(
name|operand
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If one of the not-disjunctions is a disjunction that is wholly
comment|// contained in the disjunctions list, the expression is not
comment|// satisfiable.
comment|//
comment|// Example #1. x AND y AND z AND NOT (x AND y)  - not satisfiable
comment|// Example #2. x AND y AND NOT (x AND y)        - not satisfiable
comment|// Example #3. x AND y AND NOT (x AND y AND z)  - may be satisfiable
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|termsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|RexUtil
operator|.
name|strings
argument_list|(
name|terms
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isDeterministic
argument_list|(
name|notDisjunction
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|terms2Set
init|=
name|RexUtil
operator|.
name|strings
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|notDisjunction
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsSet
operator|.
name|containsAll
argument_list|(
name|terms2Set
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
comment|// Add the NOT disjunctions back in.
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
specifier|final
name|RexNode
name|call
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|notDisjunction
argument_list|)
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
name|simplify_
argument_list|(
name|call
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The negated terms: only deterministic expressions
for|for
control|(
name|String
name|negatedTerm
range|:
name|negatedTerms
control|)
block|{
if|if
condition|(
name|termsSet
operator|.
name|contains
argument_list|(
name|negatedTerm
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|simplifyUsingPredicates
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|Comparison
name|comparison
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|e
argument_list|)
decl_stmt|;
comment|// Check for comparison with null values
if|if
condition|(
name|comparison
operator|==
literal|null
operator|||
name|comparison
operator|.
name|kind
operator|==
name|SqlKind
operator|.
name|NOT_EQUALS
operator|||
name|comparison
operator|.
name|literal
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|e
return|;
block|}
specifier|final
name|C
name|v0
init|=
name|comparison
operator|.
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|range
init|=
name|range
argument_list|(
name|comparison
operator|.
name|kind
argument_list|,
name|v0
argument_list|)
decl_stmt|;
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|range2
init|=
name|residue
argument_list|(
name|comparison
operator|.
name|ref
argument_list|,
name|range
argument_list|,
name|predicates
operator|.
name|pulledUpPredicates
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|range2
operator|==
literal|null
condition|)
block|{
comment|// Term is impossible to satisfy given these predicates
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|range2
operator|.
name|equals
argument_list|(
name|range
argument_list|)
condition|)
block|{
comment|// no change
return|return
name|e
return|;
block|}
if|else if
condition|(
name|range2
operator|.
name|equals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
condition|)
block|{
comment|// Range is always satisfied given these predicates; but nullability might
comment|// be problematic
return|return
name|simplify
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|comparison
operator|.
name|ref
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|range2
operator|.
name|lowerEndpoint
argument_list|()
operator|.
name|equals
argument_list|(
name|range2
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|range2
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
operator|||
name|range2
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
comment|// range is a point, but does not include its endpoint, therefore is
comment|// effectively empty
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// range is now a point; it's worth simplifying
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|comparison
operator|.
name|ref
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|range2
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
name|comparison
operator|.
name|literal
operator|.
name|getType
argument_list|()
argument_list|,
name|comparison
operator|.
name|literal
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// range has been reduced but it's not worth simplifying
return|return
name|e
return|;
block|}
block|}
comment|/** Weakens a term so that it checks only what is not implied by predicates.    *    *<p>The term is broken into "ref comparison constant",    * for example "$0&lt; 5".    *    *<p>Examples:    *<ul>    *    *<li>{@code residue($0< 10, [$0< 5])} returns {@code true}    *    *<li>{@code residue($0< 10, [$0< 20, $0> 0])} returns {@code $0< 10}    *</ul>    */
specifier|private
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|residue
parameter_list|(
name|RexNode
name|ref
parameter_list|,
name|Range
argument_list|<
name|C
argument_list|>
name|r0
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|predicates
parameter_list|,
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
control|)
block|{
switch|switch
condition|(
name|predicate
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|predicate
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
operator|&&
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|C
name|c1
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|Range
argument_list|<
name|C
argument_list|>
name|r1
init|=
name|range
argument_list|(
name|predicate
operator|.
name|getKind
argument_list|()
argument_list|,
name|c1
argument_list|)
decl_stmt|;
if|if
condition|(
name|r0
operator|.
name|encloses
argument_list|(
name|r1
argument_list|)
condition|)
block|{
comment|// Given these predicates, term is always satisfied.
comment|// e.g. r0 is "$0< 10", r1 is "$0< 5"
return|return
name|Range
operator|.
name|all
argument_list|()
return|;
block|}
if|if
condition|(
name|r0
operator|.
name|isConnected
argument_list|(
name|r1
argument_list|)
condition|)
block|{
return|return
name|r0
operator|.
name|intersection
argument_list|(
name|r1
argument_list|)
return|;
block|}
comment|// Ranges do not intersect. Return null meaning the empty range.
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|r0
return|;
block|}
comment|/** Simplifies OR(x, x) into x, and similar. */
specifier|public
name|RexNode
name|simplifyOr
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
assert|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicateElimination
condition|)
block|{
name|simplifyOrTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
return|return
name|simplifyOrs
argument_list|(
name|terms
argument_list|)
return|;
block|}
comment|/** Simplifies a list of terms and combines them into an OR.    * Modifies the list in place. */
specifier|public
name|RexNode
name|simplifyOrs
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|)
block|{
if|if
condition|(
name|paranoid
condition|)
block|{
specifier|final
name|RexNode
name|before
init|=
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
decl_stmt|;
return|return
name|verify
argument_list|(
name|before
argument_list|,
name|simplifier
lambda|->
name|simplifier
operator|.
name|simplifyOrs
argument_list|(
name|terms
argument_list|)
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|term
init|=
name|simplify_
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|term
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|unknownAsFalse
condition|)
block|{
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
if|if
condition|(
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|term
argument_list|)
condition|)
block|{
return|return
name|term
return|;
comment|// true
block|}
else|else
block|{
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|terms
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|verify
parameter_list|(
name|RexNode
name|before
parameter_list|,
name|Function
argument_list|<
name|RexSimplify
argument_list|,
name|RexNode
argument_list|>
name|simplifier
parameter_list|)
block|{
specifier|final
name|RexNode
name|simplified
init|=
name|simplifier
operator|.
name|apply
argument_list|(
name|withParanoid
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|paranoid
condition|)
block|{
return|return
name|simplified
return|;
block|}
specifier|final
name|RexAnalyzer
name|foo0
init|=
operator|new
name|RexAnalyzer
argument_list|(
name|before
argument_list|,
name|predicates
argument_list|)
decl_stmt|;
specifier|final
name|RexAnalyzer
name|foo1
init|=
operator|new
name|RexAnalyzer
argument_list|(
name|simplified
argument_list|,
name|predicates
argument_list|)
decl_stmt|;
if|if
condition|(
name|foo0
operator|.
name|unsupportedCount
operator|>
literal|0
operator|||
name|foo1
operator|.
name|unsupportedCount
operator|>
literal|0
condition|)
block|{
comment|// Analyzer cannot handle this expression currently
return|return
name|simplified
return|;
block|}
if|if
condition|(
operator|!
name|foo0
operator|.
name|variables
operator|.
name|containsAll
argument_list|(
name|foo1
operator|.
name|variables
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"variable mismatch: "
operator|+
name|before
operator|+
literal|" has "
operator|+
name|foo0
operator|.
name|variables
operator|+
literal|", "
operator|+
name|simplified
operator|+
literal|" has "
operator|+
name|foo1
operator|.
name|variables
argument_list|)
throw|;
block|}
name|assignment_loop
label|:
for|for
control|(
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Comparable
argument_list|>
name|map
range|:
name|foo0
operator|.
name|assignments
argument_list|()
control|)
block|{
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
specifier|final
name|Comparable
name|v
init|=
name|RexInterpreter
operator|.
name|evaluate
argument_list|(
name|predicate
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|equals
argument_list|(
literal|true
argument_list|)
condition|)
block|{
continue|continue
name|assignment_loop
continue|;
block|}
block|}
name|Comparable
name|v0
init|=
name|RexInterpreter
operator|.
name|evaluate
argument_list|(
name|foo0
operator|.
name|e
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|v0
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"interpreter returned null for "
operator|+
name|foo0
operator|.
name|e
argument_list|)
throw|;
block|}
name|Comparable
name|v1
init|=
name|RexInterpreter
operator|.
name|evaluate
argument_list|(
name|foo1
operator|.
name|e
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"interpreter returned null for "
operator|+
name|foo1
operator|.
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|unknownAsFalse
operator|&&
name|before
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
if|if
condition|(
name|v0
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
name|v0
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|v1
operator|==
name|NullSentinel
operator|.
name|INSTANCE
condition|)
block|{
name|v1
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|v0
operator|.
name|equals
argument_list|(
name|v1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"result mismatch: when applied to "
operator|+
name|map
operator|+
literal|", "
operator|+
name|before
operator|+
literal|" yielded "
operator|+
name|v0
operator|+
literal|", and "
operator|+
name|simplified
operator|+
literal|" yielded "
operator|+
name|v1
argument_list|)
throw|;
block|}
block|}
return|return
name|simplified
return|;
block|}
specifier|private
name|RexNode
name|simplifyCast
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
specifier|final
name|RexNode
name|operand
init|=
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operand
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|operand
decl_stmt|;
specifier|final
name|Comparable
name|value
init|=
name|literal
operator|.
name|getValueAs
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SqlTypeName
name|typeName
init|=
name|literal
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
comment|// First, try to remove the cast without changing the value.
comment|// makeCast and canRemoveCastFromLiteral have the same logic, so we are
comment|// sure to be able to remove the cast.
if|if
condition|(
name|rexBuilder
operator|.
name|canRemoveCastFromLiteral
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|value
argument_list|,
name|typeName
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|operand
argument_list|)
return|;
block|}
comment|// Next, try to convert the value to a different type,
comment|// e.g. CAST('123' as integer)
switch|switch
condition|(
name|literal
operator|.
name|getTypeName
argument_list|()
condition|)
block|{
case|case
name|TIME
case|:
switch|switch
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|TIMESTAMP
case|:
return|return
name|e
return|;
block|}
break|break;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|executor
operator|.
name|reduce
argument_list|(
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|e
argument_list|)
argument_list|,
name|reducedValues
argument_list|)
expr_stmt|;
return|return
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|reducedValues
argument_list|)
argument_list|)
return|;
default|default:
if|if
condition|(
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|simplify_
argument_list|(
name|operand
argument_list|)
return|;
block|}
return|return
name|e
return|;
block|}
block|}
comment|/** Tries to simplify CEIL/FLOOR function on top of CEIL/FLOOR.    *    *<p>Examples:    *<ul>    *    *<li>{@code floor(floor($0, flag(hour)), flag(day))} returns {@code floor($0, flag(day))}    *    *<li>{@code ceil(ceil($0, flag(second)), flag(day))} returns {@code ceil($0, flag(day))}    *    *<li>{@code floor(floor($0, flag(day)), flag(second))} does not change    *    *</ul>    */
specifier|private
name|RexNode
name|simplifyCeilFloor
parameter_list|(
name|RexCall
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
comment|// Bail out since we only simplify floor<date>
return|return
name|e
return|;
block|}
specifier|final
name|RexNode
name|operand
init|=
name|simplify_
argument_list|(
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKind
argument_list|()
operator|==
name|operand
operator|.
name|getKind
argument_list|()
condition|)
block|{
assert|assert
name|e
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CEIL
operator|||
name|e
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FLOOR
assert|;
comment|// CEIL/FLOOR on top of CEIL/FLOOR
specifier|final
name|RexCall
name|child
init|=
operator|(
name|RexCall
operator|)
name|operand
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
comment|// Bail out since we only simplify ceil/floor<date>
return|return
name|e
return|;
block|}
specifier|final
name|RexLiteral
name|parentFlag
init|=
operator|(
name|RexLiteral
operator|)
name|e
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TimeUnitRange
name|parentFlagValue
init|=
operator|(
name|TimeUnitRange
operator|)
name|parentFlag
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|RexLiteral
name|childFlag
init|=
operator|(
name|RexLiteral
operator|)
name|child
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TimeUnitRange
name|childFlagValue
init|=
operator|(
name|TimeUnitRange
operator|)
name|childFlag
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentFlagValue
operator|!=
literal|null
operator|&&
name|childFlagValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|canRollUp
argument_list|(
name|parentFlagValue
operator|.
name|startUnit
argument_list|,
name|childFlagValue
operator|.
name|startUnit
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|clone
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|child
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|parentFlag
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|e
operator|.
name|clone
argument_list|(
name|e
operator|.
name|getType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|operand
argument_list|,
name|e
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Method that returns whether we can rollup from inner time unit    * to outer time unit. */
specifier|private
specifier|static
name|boolean
name|canRollUp
parameter_list|(
name|TimeUnit
name|outer
parameter_list|,
name|TimeUnit
name|inner
parameter_list|)
block|{
comment|// Special handling for QUARTER as it is not in the expected
comment|// order in TimeUnit
switch|switch
condition|(
name|outer
condition|)
block|{
case|case
name|YEAR
case|:
case|case
name|MONTH
case|:
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MILLISECOND
case|:
case|case
name|MICROSECOND
case|:
switch|switch
condition|(
name|inner
condition|)
block|{
case|case
name|YEAR
case|:
case|case
name|QUARTER
case|:
case|case
name|MONTH
case|:
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MILLISECOND
case|:
case|case
name|MICROSECOND
case|:
if|if
condition|(
name|inner
operator|==
name|TimeUnit
operator|.
name|QUARTER
condition|)
block|{
return|return
name|outer
operator|==
name|TimeUnit
operator|.
name|YEAR
operator|||
name|outer
operator|==
name|TimeUnit
operator|.
name|QUARTER
return|;
block|}
return|return
name|outer
operator|.
name|ordinal
argument_list|()
operator|<=
name|inner
operator|.
name|ordinal
argument_list|()
return|;
block|}
break|break;
case|case
name|QUARTER
case|:
switch|switch
condition|(
name|inner
condition|)
block|{
case|case
name|QUARTER
case|:
case|case
name|MONTH
case|:
case|case
name|DAY
case|:
case|case
name|HOUR
case|:
case|case
name|MINUTE
case|:
case|case
name|SECOND
case|:
case|case
name|MILLISECOND
case|:
case|case
name|MICROSECOND
case|:
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Removes any casts that change nullability but not type.    *    *<p>For example, {@code CAST(1 = 0 AS BOOLEAN)} becomes {@code 1 = 0}. */
specifier|public
name|RexNode
name|removeNullabilityCast
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|RexUtil
operator|.
name|removeNullabilityCast
argument_list|(
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|RexNode
name|processRange
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
argument_list|>
name|rangeTerms
parameter_list|,
name|RexNode
name|term
parameter_list|,
name|RexNode
name|ref
parameter_list|,
name|C
name|v0
parameter_list|,
name|SqlKind
name|comparison
parameter_list|)
block|{
name|Pair
argument_list|<
name|Range
argument_list|<
name|C
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|p
init|=
name|rangeTerms
operator|.
name|get
argument_list|(
name|ref
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
operator|.
name|toString
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|range
argument_list|(
name|comparison
argument_list|,
name|v0
argument_list|)
argument_list|,
operator|(
name|List
argument_list|<
name|RexNode
argument_list|>
operator|)
name|ImmutableList
operator|.
name|of
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Exists
name|boolean
name|removeUpperBound
init|=
literal|false
decl_stmt|;
name|boolean
name|removeLowerBound
init|=
literal|false
decl_stmt|;
name|Range
argument_list|<
name|C
argument_list|>
name|r
init|=
name|p
operator|.
name|left
decl_stmt|;
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|EQUALS
case|:
if|if
condition|(
operator|!
name|r
operator|.
name|contains
argument_list|(
name|v0
argument_list|)
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
operator|.
name|toString
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
name|v0
argument_list|)
argument_list|,
operator|(
name|List
argument_list|<
name|RexNode
argument_list|>
operator|)
name|ImmutableList
operator|.
name|of
argument_list|(
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove
for|for
control|(
name|RexNode
name|e
range|:
name|p
operator|.
name|right
control|)
block|{
name|Collections
operator|.
name|replaceAll
argument_list|(
name|terms
argument_list|,
name|e
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LESS_THAN
case|:
block|{
name|int
name|comparisonResult
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|<=
literal|0
condition|)
block|{
comment|// 1) No upper bound, or
comment|// 2) We need to open the upper bound, or
comment|// 3) New upper bound is lower than old upper bound
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a<= x< b OR a< x< b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|lowerBoundType
argument_list|()
argument_list|,
name|v0
argument_list|,
name|BoundType
operator|.
name|OPEN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x< b
name|r
operator|=
name|Range
operator|.
name|lessThan
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev upper bound
name|removeUpperBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current upper bound
specifier|final
name|int
name|index
init|=
name|terms
operator|.
name|indexOf
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|LESS_THAN_OR_EQUAL
case|:
block|{
name|int
name|comparisonResult
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|<
literal|0
condition|)
block|{
comment|// 1) No upper bound, or
comment|// 2) New upper bound is lower than old upper bound
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a<= x<= b OR a< x<= b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|lowerBoundType
argument_list|()
argument_list|,
name|v0
argument_list|,
name|BoundType
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x<= b
name|r
operator|=
name|Range
operator|.
name|atMost
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev upper bound
name|removeUpperBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current upper bound
specifier|final
name|int
name|index
init|=
name|terms
operator|.
name|indexOf
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|GREATER_THAN
case|:
block|{
name|int
name|comparisonResult
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|>=
literal|0
condition|)
block|{
comment|// 1) No lower bound, or
comment|// 2) We need to open the lower bound, or
comment|// 3) New lower bound is greater than old lower bound
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a< x<= b OR a< x< b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|v0
argument_list|,
name|BoundType
operator|.
name|OPEN
argument_list|,
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x> a
name|r
operator|=
name|Range
operator|.
name|greaterThan
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev lower bound
name|removeLowerBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current lower bound
specifier|final
name|int
name|index
init|=
name|terms
operator|.
name|indexOf
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|GREATER_THAN_OR_EQUAL
case|:
block|{
name|int
name|comparisonResult
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|comparisonResult
operator|=
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comparisonResult
operator|>
literal|0
condition|)
block|{
comment|// 1) No lower bound, or
comment|// 2) New lower bound is greater than old lower bound
if|if
condition|(
name|r
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
if|if
condition|(
name|v0
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// a<= x<= b OR a<= x< b
name|r
operator|=
name|Range
operator|.
name|range
argument_list|(
name|v0
argument_list|,
name|BoundType
operator|.
name|CLOSED
argument_list|,
name|r
operator|.
name|upperEndpoint
argument_list|()
argument_list|,
name|r
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// x>= a
name|r
operator|=
name|Range
operator|.
name|atLeast
argument_list|(
name|v0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Range is empty, not satisfiable
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// remove prev lower bound
name|removeLowerBound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Remove this term as it is contained in current lower bound
specifier|final
name|int
name|index
init|=
name|terms
operator|.
name|indexOf
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|terms
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
if|if
condition|(
name|removeUpperBound
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|newBounds
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|p
operator|.
name|right
control|)
block|{
if|if
condition|(
name|isUpperBound
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|replaceAll
argument_list|(
name|terms
argument_list|,
name|e
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newBounds
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|newBounds
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
operator|.
name|toString
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|r
argument_list|,
operator|(
name|List
argument_list|<
name|RexNode
argument_list|>
operator|)
name|newBounds
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|removeLowerBound
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|>
name|newBounds
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|p
operator|.
name|right
control|)
block|{
if|if
condition|(
name|isLowerBound
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|replaceAll
argument_list|(
name|terms
argument_list|,
name|e
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newBounds
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|newBounds
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|rangeTerms
operator|.
name|put
argument_list|(
name|ref
operator|.
name|toString
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|r
argument_list|,
operator|(
name|List
argument_list|<
name|RexNode
argument_list|>
operator|)
name|newBounds
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Default
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|C
argument_list|>
parameter_list|>
name|Range
argument_list|<
name|C
argument_list|>
name|range
parameter_list|(
name|SqlKind
name|comparison
parameter_list|,
name|C
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|Range
operator|.
name|singleton
argument_list|(
name|c
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
name|Range
operator|.
name|lessThan
argument_list|(
name|c
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|Range
operator|.
name|atMost
argument_list|(
name|c
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|Range
operator|.
name|greaterThan
argument_list|(
name|c
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|Range
operator|.
name|atLeast
argument_list|(
name|c
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
comment|/** Marker interface for predicates (expressions that evaluate to BOOLEAN). */
specifier|private
interface|interface
name|Predicate
block|{
comment|/** Wraps an expression in a Predicate or returns null. */
specifier|static
name|Predicate
name|of
parameter_list|(
name|RexNode
name|t
parameter_list|)
block|{
specifier|final
name|Predicate
name|p
init|=
name|Comparison
operator|.
name|of
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
return|;
block|}
return|return
name|IsPredicate
operator|.
name|of
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
comment|/** Comparison between a {@link RexInputRef} or {@link RexFieldAccess} and a    * literal. Literal may be on left or right side, and may be null. */
specifier|private
specifier|static
class|class
name|Comparison
implements|implements
name|Predicate
block|{
specifier|final
name|RexNode
name|ref
decl_stmt|;
specifier|final
name|SqlKind
name|kind
decl_stmt|;
specifier|final
name|RexLiteral
name|literal
decl_stmt|;
specifier|private
name|Comparison
parameter_list|(
name|RexNode
name|ref
parameter_list|,
name|SqlKind
name|kind
parameter_list|,
name|RexLiteral
name|literal
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|kind
argument_list|)
expr_stmt|;
name|this
operator|.
name|literal
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a comparison, or returns null. */
specifier|static
name|Comparison
name|of
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|e
decl_stmt|;
specifier|final
name|RexNode
name|left
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|right
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|right
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|left
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
operator|new
name|Comparison
argument_list|(
name|left
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
argument_list|,
operator|(
name|RexLiteral
operator|)
name|right
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|left
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|right
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
operator|new
name|Comparison
argument_list|(
name|right
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|,
operator|(
name|RexLiteral
operator|)
name|left
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/** Represents an IS Predicate. */
specifier|private
specifier|static
class|class
name|IsPredicate
implements|implements
name|Predicate
block|{
specifier|final
name|RexNode
name|ref
decl_stmt|;
specifier|final
name|SqlKind
name|kind
decl_stmt|;
specifier|private
name|IsPredicate
parameter_list|(
name|RexNode
name|ref
parameter_list|,
name|SqlKind
name|kind
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|kind
argument_list|)
expr_stmt|;
block|}
comment|/** Creates an IS predicate, or returns null. */
specifier|static
name|IsPredicate
name|of
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|IS_NULL
case|:
case|case
name|IS_NOT_NULL
case|:
name|RexNode
name|pA
init|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|pA
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|IsPredicate
argument_list|(
name|pA
argument_list|,
name|e
operator|.
name|getKind
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isUpperBound
parameter_list|(
specifier|final
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isLowerBound
parameter_list|(
specifier|final
name|RexNode
name|e
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
return|return
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Combines predicates AND, optimizes, and returns null if the result is    * always false.    *    * @param predicates Filter condition predicates    * @return simplified conjunction of predicates for the filter, null if always false    */
specifier|public
name|RexNode
name|simplifyFilterPredicates
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|predicates
parameter_list|)
block|{
specifier|final
name|RexNode
name|simplifiedAnds
init|=
name|withPredicateElimination
argument_list|(
name|Bug
operator|.
name|CALCITE_2401_FIXED
argument_list|)
operator|.
name|simplifyAnds
argument_list|(
name|predicates
argument_list|)
decl_stmt|;
if|if
condition|(
name|simplifiedAnds
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Remove cast of BOOLEAN NOT NULL to BOOLEAN or vice versa. Filter accepts
comment|// nullable and not-nullable conditions, but a CAST might get in the way of
comment|// other rewrites.
return|return
name|removeNullabilityCast
argument_list|(
name|simplifiedAnds
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RexSimplify.java
end_comment

end_unit

