begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Visitor pattern for traversing a tree of {@link RexNode} objects.  *  * @see org.apache.calcite.util.Glossary#VISITOR_PATTERN  * @see RexShuttle  * @see RexVisitorImpl  *  * @param<R> Return type  */
end_comment

begin_interface
specifier|public
interface|interface
name|RexVisitor
parameter_list|<
name|R
parameter_list|>
block|{
comment|//~ Methods ----------------------------------------------------------------
name|R
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
function_decl|;
name|R
name|visitLocalRef
parameter_list|(
name|RexLocalRef
name|localRef
parameter_list|)
function_decl|;
name|R
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
function_decl|;
name|R
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
function_decl|;
name|R
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
function_decl|;
name|R
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|correlVariable
parameter_list|)
function_decl|;
name|R
name|visitDynamicParam
parameter_list|(
name|RexDynamicParam
name|dynamicParam
parameter_list|)
function_decl|;
name|R
name|visitRangeRef
parameter_list|(
name|RexRangeRef
name|rangeRef
parameter_list|)
function_decl|;
name|R
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
function_decl|;
name|R
name|visitSubQuery
parameter_list|(
name|RexSubQuery
name|subQuery
parameter_list|)
function_decl|;
name|R
name|visitTableInputRef
parameter_list|(
name|RexTableInputRef
name|fieldRef
parameter_list|)
function_decl|;
name|R
name|visitPatternFieldRef
parameter_list|(
name|RexPatternFieldRef
name|fieldRef
parameter_list|)
function_decl|;
comment|/** Visits a list and writes the results to another list. */
specifier|default
name|void
name|visitList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|exprs
parameter_list|,
name|List
argument_list|<
name|R
argument_list|>
name|out
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|expr
range|:
name|exprs
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Visits a list and returns a list of the results.    * The resulting list is immutable and does not contain nulls. */
specifier|default
name|List
argument_list|<
name|R
argument_list|>
name|visitList
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|exprs
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|R
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|visitList
argument_list|(
name|exprs
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|out
argument_list|)
return|;
block|}
comment|/** Visits a list of expressions. */
specifier|default
name|void
name|visitEach
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|exprs
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|expr
range|:
name|exprs
control|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

