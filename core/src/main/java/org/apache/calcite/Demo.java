begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Demo.  */
end_comment

begin_class
specifier|public
class|class
name|Demo
block|{
specifier|private
name|Demo
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"John"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"Paul"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"George"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"Ringo"
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|nameIterable
init|=
name|names
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameIterable
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

