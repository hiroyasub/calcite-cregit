begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to the Apache Software Foundation (ASF) under one or more // contributor license agreements.  See the NOTICE file distributed with // this work for additional information regarding copyright ownership. // The ASF licenses this file to you under the Apache License, Version 2.0 // (the "License"); you may not use this file except in compliance with // the License.  You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|util
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link DirectedGraph}.  */
end_comment

begin_class
specifier|public
class|class
name|DirectedGraphTest
block|{
specifier|public
name|DirectedGraphTest
parameter_list|()
block|{
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOne
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|g
init|=
name|DefaultDirectedGraph
operator|.
name|create
argument_list|()
decl_stmt|;
name|g
operator|.
name|addVertex
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addVertex
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addVertex
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addVertex
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addVertex
argument_list|(
literal|"E"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addVertex
argument_list|(
literal|"F"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
literal|"D"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
literal|"E"
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[A, B, C, D]"
argument_list|,
name|shortestPath
argument_list|(
name|g
argument_list|,
literal|"A"
argument_list|,
literal|"D"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
literal|"B"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[A, B, D]"
argument_list|,
name|shortestPath
argument_list|(
name|g
argument_list|,
literal|"A"
argument_list|,
literal|"D"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"There is no path from A to E"
argument_list|,
name|shortestPath
argument_list|(
name|g
argument_list|,
literal|"A"
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|shortestPath
argument_list|(
name|g
argument_list|,
literal|"D"
argument_list|,
literal|"D"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Node X is not in the graph"
argument_list|,
name|shortestPath
argument_list|(
name|g
argument_list|,
literal|"X"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[A, B, C, D], [A, B, D]]"
argument_list|,
name|paths
argument_list|(
name|g
argument_list|,
literal|"A"
argument_list|,
literal|"D"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|V
parameter_list|>
name|List
argument_list|<
name|V
argument_list|>
name|shortestPath
parameter_list|(
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|DefaultEdge
argument_list|>
name|g
parameter_list|,
name|V
name|source
parameter_list|,
name|V
name|target
parameter_list|)
block|{
return|return
name|Graphs
operator|.
name|makeImmutable
argument_list|(
name|g
argument_list|)
operator|.
name|getShortestPath
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|V
parameter_list|>
name|List
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|paths
parameter_list|(
name|DirectedGraph
argument_list|<
name|V
argument_list|,
name|DefaultEdge
argument_list|>
name|g
parameter_list|,
name|V
name|source
parameter_list|,
name|V
name|target
parameter_list|)
block|{
return|return
name|Graphs
operator|.
name|makeImmutable
argument_list|(
name|g
argument_list|)
operator|.
name|getPaths
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVertexMustExist
parameter_list|()
block|{
name|DirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|g
init|=
name|DefaultDirectedGraph
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|b
init|=
name|g
operator|.
name|addVertex
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|b2
init|=
name|g
operator|.
name|addVertex
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|b2
argument_list|)
expr_stmt|;
try|try
block|{
name|DefaultEdge
name|x
init|=
name|g
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|g
operator|.
name|addVertex
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|DefaultEdge
name|x
init|=
name|g
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|DefaultEdge
name|x2
init|=
name|g
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|x2
argument_list|)
expr_stmt|;
try|try
block|{
name|DefaultEdge
name|x3
init|=
name|g
operator|.
name|addEdge
argument_list|(
literal|"Z"
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|x3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|g
operator|.
name|addVertex
argument_list|(
literal|"Z"
argument_list|)
expr_stmt|;
name|DefaultEdge
name|x3
init|=
name|g
operator|.
name|addEdge
argument_list|(
literal|"Z"
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|x3
argument_list|)
expr_stmt|;
name|DefaultEdge
name|x4
init|=
name|g
operator|.
name|addEdge
argument_list|(
literal|"Z"
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|x4
argument_list|)
expr_stmt|;
comment|// Attempting to add a vertex already present does not change the graph.
specifier|final
name|List
argument_list|<
name|DefaultEdge
argument_list|>
name|in1
init|=
name|g
operator|.
name|getInwardEdges
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DefaultEdge
argument_list|>
name|out1
init|=
name|g
operator|.
name|getOutwardEdges
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|b3
init|=
name|g
operator|.
name|addVertex
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|b3
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DefaultEdge
argument_list|>
name|in2
init|=
name|g
operator|.
name|getInwardEdges
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DefaultEdge
argument_list|>
name|out2
init|=
name|g
operator|.
name|getOutwardEdges
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|in1
argument_list|,
name|in2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out1
argument_list|,
name|out2
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link DepthFirstIterator}. */
annotation|@
name|Test
specifier|public
name|void
name|testDepthFirst
parameter_list|()
block|{
specifier|final
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|createDag
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|DepthFirstIterator
operator|.
name|of
argument_list|(
name|graph
argument_list|,
literal|"A"
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"[A, B, C, D, E, C, D, F]"
argument_list|,
name|list
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link DepthFirstIterator}. */
annotation|@
name|Test
specifier|public
name|void
name|testPredecessorList
parameter_list|()
block|{
specifier|final
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|createDag
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Graphs
operator|.
name|predecessorListOf
argument_list|(
name|graph
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[B, E]"
argument_list|,
name|list
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for    * {@link DefaultDirectedGraph#removeAllVertices(java.util.Collection)}. */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAllVertices
parameter_list|()
block|{
specifier|final
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|createDag
argument_list|()
decl_stmt|;
name|graph
operator|.
name|removeAllVertices
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"B"
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[A, C, D, F]"
argument_list|,
name|graph
operator|.
name|vertexSet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link TopologicalOrderIterator}. */
annotation|@
name|Test
specifier|public
name|void
name|testTopologicalOrderIterator
parameter_list|()
block|{
specifier|final
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|createDag
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|TopologicalOrderIterator
operator|.
name|of
argument_list|(
name|graph
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"[A, B, E, C, F, D]"
argument_list|,
name|list
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|createDag
parameter_list|()
block|{
comment|// A - B - C - D
comment|//  \     /
comment|//   +- E - F
specifier|final
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|DefaultDirectedGraph
operator|.
name|create
argument_list|()
decl_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"E"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"F"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"E"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"E"
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
return|return
name|graph
return|;
block|}
comment|/** Unit test for    * {@link net.hydromatic.optiq.util.graph.Graphs.FrozenGraph}. */
annotation|@
name|Test
specifier|public
name|void
name|testPaths
parameter_list|()
block|{
comment|//       B -> C
comment|//      /      \
comment|//     A        E
comment|//      \      /
comment|//       D -->
specifier|final
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|DefaultDirectedGraph
operator|.
name|create
argument_list|()
decl_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"E"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addVertex
argument_list|(
literal|"F"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"A"
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"C"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
specifier|final
name|Graphs
operator|.
name|FrozenGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|frozenGraph
init|=
name|Graphs
operator|.
name|makeImmutable
argument_list|(
name|graph
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[A, B]"
argument_list|,
name|frozenGraph
operator|.
name|getShortestPath
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[A, B]]"
argument_list|,
name|frozenGraph
operator|.
name|getPaths
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[A, D, E]"
argument_list|,
name|frozenGraph
operator|.
name|getShortestPath
argument_list|(
literal|"A"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[A, B, C, E], [A, D, E]]"
argument_list|,
name|frozenGraph
operator|.
name|getPaths
argument_list|(
literal|"A"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|frozenGraph
operator|.
name|getShortestPath
argument_list|(
literal|"B"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|frozenGraph
operator|.
name|getShortestPath
argument_list|(
literal|"D"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[D, E]]"
argument_list|,
name|frozenGraph
operator|.
name|getPaths
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[D, E]"
argument_list|,
name|frozenGraph
operator|.
name|getShortestPath
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link net.hydromatic.optiq.util.graph.CycleDetector}. */
annotation|@
name|Test
specifier|public
name|void
name|testCycleDetection
parameter_list|()
block|{
comment|// A - B - C - D
comment|//  \     /
comment|//   +- E - F
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|createDag
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|CycleDetector
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
argument_list|(
name|graph
argument_list|)
operator|.
name|findCycles
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add cycle C-D-E-C
comment|//
comment|// A - B - C - D
comment|//  \     /     \
comment|//   +- E - F   |
comment|//      ^      /
comment|//      \_____/
name|graph
operator|.
name|addEdge
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|CycleDetector
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
argument_list|(
name|graph
argument_list|)
operator|.
name|findCycles
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add another cycle, D-C-D in addition to C-D-E-C.
comment|//           __
comment|//          /  \
comment|// A - B - C - D
comment|//  \     /     \
comment|//   +- E - F   |
comment|//      ^      /
comment|//      \_____/
name|graph
operator|.
name|addEdge
argument_list|(
literal|"D"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|CycleDetector
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
argument_list|(
name|graph
argument_list|)
operator|.
name|findCycles
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|removeEdge
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|removeEdge
argument_list|(
literal|"D"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"C"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
comment|// Add cycle of length 2, C-B-C
comment|//       __
comment|//      /  \
comment|// A - B - C - D
comment|//  \     /
comment|//   +- E - F
comment|//
comment|// Detected cycle contains "D", which is downstream from the cycle but not
comment|// in the cycle. Not sure whether that is correct.
name|assertThat
argument_list|(
operator|new
name|CycleDetector
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
argument_list|(
name|graph
argument_list|)
operator|.
name|findCycles
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add single-node cycle, C-C
comment|//
comment|//        ___
comment|//        \ /
comment|// A - B - C - D
comment|//  \     /
comment|//   +- E - F
name|graph
operator|.
name|removeEdge
argument_list|(
literal|"C"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addEdge
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|CycleDetector
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
argument_list|(
name|graph
argument_list|)
operator|.
name|findCycles
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty graph is not cyclic.
name|graph
operator|.
name|removeAllVertices
argument_list|(
name|graph
operator|.
name|vertexSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|CycleDetector
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
argument_list|(
name|graph
argument_list|)
operator|.
name|findCycles
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for    * {@link net.hydromatic.optiq.util.graph.BreadthFirstIterator}. */
annotation|@
name|Test
specifier|public
name|void
name|testBreadthFirstIterator
parameter_list|()
block|{
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
init|=
name|createDag
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getA
argument_list|(
name|graph
argument_list|,
literal|"A"
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"E"
argument_list|,
literal|"C"
argument_list|,
literal|"F"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getA
parameter_list|(
name|DefaultDirectedGraph
argument_list|<
name|String
argument_list|,
name|DefaultEdge
argument_list|>
name|graph
parameter_list|,
name|String
name|root
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|BreadthFirstIterator
operator|.
name|of
argument_list|(
name|graph
argument_list|,
name|root
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

begin_comment
comment|// End DirectedGraphTest.java
end_comment

end_unit

