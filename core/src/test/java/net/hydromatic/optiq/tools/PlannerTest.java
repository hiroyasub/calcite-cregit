begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|config
operator|.
name|Lex
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|ReflectiveSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcProjectRel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|EnumerableConvention
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|JavaRules
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|JavaRules
operator|.
name|EnumerableProjectRel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
operator|.
name|JdbcTest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
operator|.
name|OptiqAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|hep
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|parser
operator|.
name|impl
operator|.
name|SqlParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|ChainedSqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|util
operator|.
name|ListSqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql2rel
operator|.
name|StandardConvertletTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Planner}.  */
end_comment

begin_class
specifier|public
class|class
name|PlannerTest
block|{
specifier|private
name|void
name|checkParseAndConvert
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|queryFromParseTree
parameter_list|,
name|String
name|expectedRelExpr
parameter_list|)
throws|throws
name|Exception
block|{
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|toLinux
argument_list|(
name|parse
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|queryFromParseTree
argument_list|)
argument_list|)
expr_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|rel
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|rel
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedRelExpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseAndConvert
parameter_list|()
throws|throws
name|Exception
block|{
name|checkParseAndConvert
argument_list|(
literal|"select * from \"emps\" where \"name\" like '%e%'"
argument_list|,
literal|"SELECT *\n"
operator|+
literal|"FROM `emps`\n"
operator|+
literal|"WHERE `name` LIKE '%e%'"
argument_list|,
literal|"ProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"  FilterRel(condition=[LIKE($2, '%e%')])\n"
operator|+
literal|"    EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that parses, validates and converts the query using    * order by and offset. */
annotation|@
name|Test
specifier|public
name|void
name|testParseAndConvertWithOrderByAndOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|checkParseAndConvert
argument_list|(
literal|"select * from \"emps\" "
operator|+
literal|"order by \"emps\".\"deptno\" offset 10"
argument_list|,
literal|"SELECT *\n"
operator|+
literal|"FROM `emps`\n"
operator|+
literal|"ORDER BY `emps`.`deptno`\n"
operator|+
literal|"OFFSET 10 ROWS"
argument_list|,
literal|"SortRel(sort0=[$1], dir0=[ASC], offset=[10])\n"
operator|+
literal|"  ProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"    EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
return|return
name|Util
operator|.
name|toLinux
argument_list|(
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|rel
argument_list|,
literal|false
argument_list|,
name|SqlExplainLevel
operator|.
name|DIGEST_ATTRIBUTES
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseFails
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * * from \"emps\""
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|parse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Encountered \"*\" at line 1, column 10."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateFails
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * from \"emps\" where \"Xname\" like '%e%'"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|toLinux
argument_list|(
name|parse
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"SELECT *\n"
operator|+
literal|"FROM `emps`\n"
operator|+
literal|"WHERE `Xname` LIKE '%e%'"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|validate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Util
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"Column 'Xname' not found in any table"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateUserDefinedAggregate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SqlStdOperatorTable
name|stdOpTab
init|=
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
decl_stmt|;
name|SqlOperatorTable
name|opTab
init|=
operator|new
name|ChainedSqlOperatorTable
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|stdOpTab
argument_list|,
operator|new
name|ListSqlOperatorTable
argument_list|(
name|ImmutableList
operator|.
expr|<
name|SqlOperator
operator|>
name|of
argument_list|(
operator|new
name|MyCountAggFunction
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Planner
name|planner
init|=
name|Frameworks
operator|.
name|getPlanner
argument_list|(
name|Lex
operator|.
name|ORACLE
argument_list|,
name|SqlParserImpl
operator|.
name|FACTORY
argument_list|,
name|createHrSchema
argument_list|()
argument_list|,
name|opTab
argument_list|,
literal|null
argument_list|,
name|StandardConvertletTable
operator|.
name|INSTANCE
argument_list|,
name|ImmutableList
operator|.
expr|<
name|Program
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select \"deptno\", my_count(\"empid\") from \"emps\"\n"
operator|+
literal|"group by \"deptno\""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|toLinux
argument_list|(
name|parse
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"SELECT `deptno`, `MY_COUNT`(`empid`)\n"
operator|+
literal|"FROM `emps`\n"
operator|+
literal|"GROUP BY `deptno`"
argument_list|)
argument_list|)
expr_stmt|;
comment|// MY_COUNT is recognized as an aggregate function, and therefore it is OK
comment|// that its argument empid is not in the GROUP BY clause.
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|validate
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// The presence of an aggregate function in the SELECT clause causes it
comment|// to become an aggregate query. Non-aggregate expressions become illegal.
name|planner
operator|.
name|close
argument_list|()
expr_stmt|;
name|planner
operator|.
name|reset
argument_list|()
expr_stmt|;
name|parse
operator|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select \"deptno\", count(1) from \"emps\""
argument_list|)
expr_stmt|;
try|try
block|{
name|validate
operator|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|validate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Expression 'deptno' is not being grouped"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SchemaPlus
name|createHrSchema
parameter_list|()
block|{
return|return
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Planner
name|getPlanner
parameter_list|(
name|List
argument_list|<
name|RelTraitDef
argument_list|>
name|traitDefs
parameter_list|,
name|Program
modifier|...
name|programs
parameter_list|)
block|{
return|return
name|Frameworks
operator|.
name|getPlanner
argument_list|(
name|Lex
operator|.
name|ORACLE
argument_list|,
name|SqlParserImpl
operator|.
name|FACTORY
argument_list|,
name|createHrSchema
argument_list|()
argument_list|,
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|traitDefs
argument_list|,
name|StandardConvertletTable
operator|.
name|INSTANCE
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|programs
argument_list|)
argument_list|)
return|;
block|}
comment|/** Tests that planner throws an error if you pass to    * {@link Planner#convert(org.eigenbase.sql.SqlNode)}    * a {@link org.eigenbase.sql.SqlNode} that has been parsed but not    * validated. */
annotation|@
name|Test
specifier|public
name|void
name|testConvertWithoutValidateFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * from \"emps\""
argument_list|)
decl_stmt|;
try|try
block|{
name|RelNode
name|rel
init|=
name|planner
operator|.
name|convert
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|rel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot move from STATE_3_PARSED to STATE_4_VALIDATED"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Unit test that parses, validates, converts and plans. */
annotation|@
name|Test
specifier|public
name|void
name|testPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|Program
name|program
init|=
name|Programs
operator|.
name|ofRules
argument_list|(
name|MergeFilterRule
operator|.
name|INSTANCE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_FILTER_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|)
decl_stmt|;
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|,
name|program
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * from \"emps\""
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"  EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that parses, validates, converts and    * plans for query using order by */
annotation|@
name|Test
specifier|public
name|void
name|testSortPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|RuleSet
name|ruleSet
init|=
name|RuleSets
operator|.
name|ofList
argument_list|(
name|RemoveSortRule
operator|.
name|INSTANCE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|)
decl_stmt|;
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|,
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * from \"emps\" "
operator|+
literal|"order by \"emps\".\"deptno\""
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|convert
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EnumerableSortRel(sort0=[$1], dir0=[ASC])\n"
operator|+
literal|"  EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"    EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that parses, validates, converts and    * plans for query using two duplicate order by.    * The duplicate order by should be removed by RemoveSortRule*/
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateSortPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|RuleSet
name|ruleSet
init|=
name|RuleSets
operator|.
name|ofList
argument_list|(
name|RemoveSortRule
operator|.
name|INSTANCE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|)
decl_stmt|;
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|,
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select \"empid\" from ( "
operator|+
literal|"select * "
operator|+
literal|"from \"emps\" "
operator|+
literal|"order by \"emps\".\"deptno\") "
operator|+
literal|"order by \"deptno\""
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EnumerableProjectRel(empid=[$0])\n"
operator|+
literal|"  EnumerableProjectRel(empid=[$0], deptno=[$1])\n"
operator|+
literal|"    EnumerableSortRel(sort0=[$1], dir0=[ASC])\n"
operator|+
literal|"      EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"        EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that parses, validates, converts and    * plans for query using two duplicate order by.*/
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateSortPlanWORemoveSortRule
parameter_list|()
throws|throws
name|Exception
block|{
name|RuleSet
name|ruleSet
init|=
name|RuleSets
operator|.
name|ofList
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|)
decl_stmt|;
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|,
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select \"empid\" from ( "
operator|+
literal|"select * "
operator|+
literal|"from \"emps\" "
operator|+
literal|"order by \"emps\".\"deptno\") "
operator|+
literal|"order by \"deptno\""
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EnumerableProjectRel(empid=[$0])\n"
operator|+
literal|"  EnumerableSortRel(sort0=[$1], dir0=[ASC])\n"
operator|+
literal|"    EnumerableProjectRel(empid=[$0], deptno=[$1])\n"
operator|+
literal|"      EnumerableSortRel(sort0=[$1], dir0=[ASC])\n"
operator|+
literal|"        EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"          EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that parses, validates, converts and plans. Planner is    * provided with a list of RelTraitDefs to register. */
annotation|@
name|Test
specifier|public
name|void
name|testPlanWithExplicitTraitDefs
parameter_list|()
throws|throws
name|Exception
block|{
name|RuleSet
name|ruleSet
init|=
name|RuleSets
operator|.
name|ofList
argument_list|(
name|MergeFilterRule
operator|.
name|INSTANCE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_FILTER_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelTraitDef
argument_list|>
name|traitDefs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelTraitDef
argument_list|>
argument_list|()
decl_stmt|;
name|traitDefs
operator|.
name|add
argument_list|(
name|ConventionTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|traitDefs
operator|.
name|add
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
name|traitDefs
argument_list|,
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * from \"emps\""
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"  EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that calls {@link Planner#transform} twice. */
annotation|@
name|Test
specifier|public
name|void
name|testPlanTransformTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|RuleSet
name|ruleSet
init|=
name|RuleSets
operator|.
name|ofList
argument_list|(
name|MergeFilterRule
operator|.
name|INSTANCE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_FILTER_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|)
decl_stmt|;
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|,
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * from \"emps\""
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|RelNode
name|transform2
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|transform
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EnumerableProjectRel(empid=[$0], deptno=[$1], name=[$2], salary=[$3], commission=[$4])\n"
operator|+
literal|"  EnumerableTableAccessRel(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that Hive dialect does not generate "AS". */
annotation|@
name|Test
specifier|public
name|void
name|testHiveDialect
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select * from (select * from \"emps\") as t\n"
operator|+
literal|"where \"name\" like '%e%'"
argument_list|)
decl_stmt|;
specifier|final
name|SqlDialect
name|hiveDialect
init|=
operator|new
name|SqlDialect
argument_list|(
name|SqlDialect
operator|.
name|DatabaseProduct
operator|.
name|HIVE
argument_list|,
literal|"Hive"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|toLinux
argument_list|(
name|parse
operator|.
name|toSqlString
argument_list|(
name|hiveDialect
argument_list|)
operator|.
name|getSql
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"SELECT *\n"
operator|+
literal|"FROM (SELECT *\n"
operator|+
literal|"FROM emps) T\n"
operator|+
literal|"WHERE name LIKE '%e%'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that calls {@link Planner#transform} twice,    * with different rule sets, with different conventions.    *    *<p>{@link net.hydromatic.optiq.impl.jdbc.JdbcConvention} is different    * from the typical convention in that it is not a singleton. Switching to    * a different instance causes problems unless planner state is wiped clean    * between calls to {@link Planner#transform}. */
annotation|@
name|Test
specifier|public
name|void
name|testPlanTransformWithDiffRuleSetAndConvention
parameter_list|()
throws|throws
name|Exception
block|{
name|Program
name|program0
init|=
name|Programs
operator|.
name|ofRules
argument_list|(
name|MergeFilterRule
operator|.
name|INSTANCE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_FILTER_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|)
decl_stmt|;
name|JdbcConvention
name|out
init|=
operator|new
name|JdbcConvention
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"myjdbc"
argument_list|)
decl_stmt|;
name|Program
name|program1
init|=
name|Programs
operator|.
name|ofRules
argument_list|(
operator|new
name|MockJdbcProjectRule
argument_list|(
name|out
argument_list|)
argument_list|,
operator|new
name|MockJdbcTableRule
argument_list|(
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|,
name|program0
argument_list|,
name|program1
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
literal|"select T1.\"name\" from \"emps\" as T1 "
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet0
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet1
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet0
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|RelNode
name|transform2
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|1
argument_list|,
name|traitSet1
argument_list|,
name|transform
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"JdbcProjectRel(name=[$2])\n"
operator|+
literal|"  MockJdbcTableScan(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test that plans a query with a large number of joins. */
annotation|@
name|Test
specifier|public
name|void
name|testPlanNWayJoin
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Here the times before and after enabling LoptOptimizeJoinRule.
comment|//
comment|// Note the jump between N=6 and N=7; LoptOptimizeJoinRule is disabled if
comment|// there are fewer than 6 joins (7 relations).
comment|//
comment|//       N    Before     After
comment|//         time (ms) time (ms)
comment|// ======= ========= =========
comment|//       5                 382
comment|//       6                 790
comment|//       7                  26
comment|//       9    6,000         39
comment|//      10    9,000         47
comment|//      11   19,000         67
comment|//      12   40,000         63
comment|//      13 OOM              96
comment|//      35 OOM           1,716
comment|//      60 OOM          12,230
name|checkJoinNWay
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// LoptOptimizeJoinRule disabled; takes about .4s
name|checkJoinNWay
argument_list|(
literal|9
argument_list|)
expr_stmt|;
comment|// LoptOptimizeJoinRule enabled; takes about 0.04s
name|checkJoinNWay
argument_list|(
literal|35
argument_list|)
expr_stmt|;
comment|// takes about 2s
if|if
condition|(
name|OptiqAssert
operator|.
name|ENABLE_SLOW
condition|)
block|{
name|checkJoinNWay
argument_list|(
literal|60
argument_list|)
expr_stmt|;
comment|// takes about 15s
block|}
block|}
specifier|private
name|void
name|checkJoinNWay
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"select *"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|"\nfrom "
else|:
literal|",\n "
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"depts\" as d"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|i
operator|==
literal|1
condition|?
literal|"\nwhere"
else|:
literal|"\nand"
argument_list|)
operator|.
name|append
argument_list|(
literal|" d"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|".\"deptno\" = d"
argument_list|)
operator|.
name|append
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|".\"deptno\""
argument_list|)
expr_stmt|;
block|}
name|Planner
name|planner
init|=
name|getPlanner
argument_list|(
literal|null
argument_list|,
name|adaptiveJoinProgram
argument_list|(
name|RULE_SET
argument_list|)
argument_list|)
decl_stmt|;
name|SqlNode
name|parse
init|=
name|planner
operator|.
name|parse
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SqlNode
name|validate
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parse
argument_list|)
decl_stmt|;
name|RelNode
name|convert
init|=
name|planner
operator|.
name|convert
argument_list|(
name|validate
argument_list|)
decl_stmt|;
name|RelTraitSet
name|traitSet
init|=
name|planner
operator|.
name|getEmptyTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|transform
init|=
name|planner
operator|.
name|transform
argument_list|(
literal|0
argument_list|,
name|traitSet
argument_list|,
name|convert
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|(
name|transform
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"EnumerableJoinRel(condition=[=($3, $0)], joinType=[inner])"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a program that invokes heuristic join-order optimization    * (via {@link org.eigenbase.rel.rules.ConvertMultiJoinRule},    * {@link org.eigenbase.rel.rules.MultiJoinRel} and    * {@link org.eigenbase.rel.rules.LoptOptimizeJoinRule})    * if there are 6 or more joins (7 or more relations). */
specifier|private
specifier|static
name|Program
name|adaptiveJoinProgram
parameter_list|(
specifier|final
name|RuleSet
name|ruleSet
parameter_list|)
block|{
return|return
operator|new
name|Program
argument_list|()
block|{
specifier|public
name|RelNode
name|run
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|RelTraitSet
name|requiredOutputTraits
parameter_list|)
block|{
specifier|final
name|int
name|joinCount
init|=
name|RelOptUtil
operator|.
name|countJoins
argument_list|(
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|Program
name|program
decl_stmt|;
if|if
condition|(
name|joinCount
operator|<
literal|6
condition|)
block|{
name|program
operator|=
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|HepProgram
name|hep
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|PushFilterPastJoinRule
operator|.
name|FILTER_ON_JOIN
argument_list|)
operator|.
name|addMatchOrder
argument_list|(
name|HepMatchOrder
operator|.
name|BOTTOM_UP
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|ConvertMultiJoinRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelOptRule
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RelOptRule
argument_list|>
argument_list|()
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|list
argument_list|,
name|ruleSet
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeAll
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|SwapJoinRule
operator|.
name|INSTANCE
argument_list|,
name|PushJoinThroughJoinRule
operator|.
name|LEFT
argument_list|,
name|PushJoinThroughJoinRule
operator|.
name|RIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|LoptOptimizeJoinRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|program
operator|=
name|Programs
operator|.
name|sequence
argument_list|(
name|Programs
operator|.
name|of
argument_list|(
name|hep
argument_list|)
argument_list|,
name|Programs
operator|.
name|ofRules
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|program
operator|.
name|run
argument_list|(
name|planner
argument_list|,
name|rel
argument_list|,
name|requiredOutputTraits
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Rule to convert a {@link EnumerableProjectRel} to an    * {@link JdbcProjectRel}.    */
specifier|private
class|class
name|MockJdbcProjectRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|MockJdbcProjectRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|EnumerableProjectRel
operator|.
name|class
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
name|out
argument_list|,
literal|"MockJdbcProjectRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|EnumerableProjectRel
name|project
init|=
operator|(
name|EnumerableProjectRel
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|JdbcProjectRel
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|getOutConvention
argument_list|()
argument_list|)
argument_list|,
name|convert
argument_list|(
name|project
operator|.
name|getChild
argument_list|()
argument_list|,
name|project
operator|.
name|getChild
argument_list|()
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|getOutConvention
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
name|ProjectRelBase
operator|.
name|Flags
operator|.
name|BOXED
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to convert a {@link JavaRules.EnumerableTableAccessRel} to an    * {@link MockJdbcTableScan}.    */
specifier|private
class|class
name|MockJdbcTableRule
extends|extends
name|ConverterRule
block|{
specifier|private
name|MockJdbcTableRule
parameter_list|(
name|JdbcConvention
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|JavaRules
operator|.
name|EnumerableTableAccessRel
operator|.
name|class
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
name|out
argument_list|,
literal|"MockJdbcTableRule"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|JavaRules
operator|.
name|EnumerableTableAccessRel
name|scan
init|=
operator|(
name|JavaRules
operator|.
name|EnumerableTableAccessRel
operator|)
name|rel
decl_stmt|;
return|return
operator|new
name|MockJdbcTableScan
argument_list|(
name|scan
operator|.
name|getCluster
argument_list|()
argument_list|,
name|scan
operator|.
name|getTable
argument_list|()
argument_list|,
operator|(
name|JdbcConvention
operator|)
name|getOutConvention
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Relational expression representing a "mock" scan of a table in a    * JDBC data source.    */
specifier|private
class|class
name|MockJdbcTableScan
extends|extends
name|TableAccessRelBase
implements|implements
name|JdbcRel
block|{
specifier|public
name|MockJdbcTableScan
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|JdbcConvention
name|jdbcConvention
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|jdbcConvention
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|MockJdbcTableScan
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|table
argument_list|,
operator|(
name|JdbcConvention
operator|)
name|getConvention
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
specifier|final
name|JdbcConvention
name|out
init|=
operator|(
name|JdbcConvention
operator|)
name|getConvention
argument_list|()
decl_stmt|;
for|for
control|(
name|RelOptRule
name|rule
range|:
name|JdbcRules
operator|.
name|rules
argument_list|(
name|out
argument_list|)
control|)
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|JdbcImplementor
operator|.
name|Result
name|implement
parameter_list|(
name|JdbcImplementor
name|implementor
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|RuleSet
name|RULE_SET
init|=
operator|new
name|RuleSet
argument_list|()
block|{
specifier|final
name|Set
argument_list|<
name|RelOptRule
argument_list|>
name|setOfRules
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JavaRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_FILTER_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_AGGREGATE_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_LIMIT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_UNION_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_INTERSECT_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_MINUS_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_TABLE_MODIFICATION_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_VALUES_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_WINDOW_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_ONE_ROW_RULE
argument_list|,
name|JavaRules
operator|.
name|ENUMERABLE_EMPTY_RULE
argument_list|,
name|TableAccessRule
operator|.
name|INSTANCE
argument_list|,
name|MergeProjectRule
operator|.
name|INSTANCE
argument_list|,
name|PushFilterPastProjectRule
operator|.
name|INSTANCE
argument_list|,
name|PushFilterPastJoinRule
operator|.
name|FILTER_ON_JOIN
argument_list|,
name|RemoveDistinctAggregateRule
operator|.
name|INSTANCE
argument_list|,
name|ReduceAggregatesRule
operator|.
name|INSTANCE
argument_list|,
name|SwapJoinRule
operator|.
name|INSTANCE
argument_list|,
name|PushJoinThroughJoinRule
operator|.
name|RIGHT
argument_list|,
name|PushJoinThroughJoinRule
operator|.
name|LEFT
argument_list|,
name|PushSortPastProjectRule
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|public
name|Iterator
argument_list|<
name|RelOptRule
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|setOfRules
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Test to determine whether de-correlation correctly removes CorrelatorRel.    */
annotation|@
name|Test
specifier|public
name|void
name|testOldJoinStyleDeCorrelation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|checkTpchQuery
argument_list|(
literal|"select\n p.`pPartkey`\n"
operator|+
literal|"from\n"
operator|+
literal|"  `tpch`.`part` p,\n"
operator|+
literal|"  `tpch`.`partsupp` ps1\n"
operator|+
literal|"where\n"
operator|+
literal|"  p.`pPartkey` = ps1.`psPartkey`\n"
operator|+
literal|"  and ps1.`psSupplyCost` = (\n"
operator|+
literal|"    select\n"
operator|+
literal|"      min(ps.`psSupplyCost`)\n"
operator|+
literal|"    from\n"
operator|+
literal|"      `tpch`.`partsupp` ps\n"
operator|+
literal|"    where\n"
operator|+
literal|"      p.`pPartkey` = ps.`psPartkey`\n"
operator|+
literal|"  )\n"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"CorrelatorRel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|checkTpchQuery
parameter_list|(
name|String
name|tpchTestQuery
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SchemaPlus
name|schema
init|=
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
operator|.
name|add
argument_list|(
literal|"tpch"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|TpchSchema
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Planner
name|p
init|=
name|Frameworks
operator|.
name|getPlanner
argument_list|(
name|Lex
operator|.
name|MYSQL
argument_list|,
name|schema
argument_list|,
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|RULE_SET
argument_list|)
decl_stmt|;
name|SqlNode
name|n
init|=
name|p
operator|.
name|parse
argument_list|(
name|tpchTestQuery
argument_list|)
decl_stmt|;
name|n
operator|=
name|p
operator|.
name|validate
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|RelNode
name|r
init|=
name|p
operator|.
name|convert
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|String
name|plan
init|=
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|plan
return|;
block|}
comment|/** User-defined aggregate function. */
specifier|public
specifier|static
class|class
name|MyCountAggFunction
extends|extends
name|SqlAggFunction
block|{
specifier|public
name|MyCountAggFunction
parameter_list|()
block|{
name|super
argument_list|(
literal|"MY_COUNT"
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
name|ReturnTypes
operator|.
name|BIGINT
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|ANY
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RelDataType
argument_list|>
name|getParameterTypes
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|getReturnType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|deriveType
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|SqlValidatorScope
name|scope
parameter_list|,
name|SqlCall
name|call
parameter_list|)
block|{
comment|// Check for COUNT(*) function.  If it is we don't
comment|// want to try and derive the "*"
if|if
condition|(
name|call
operator|.
name|isCountStar
argument_list|()
condition|)
block|{
return|return
name|validator
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|deriveType
argument_list|(
name|validator
argument_list|,
name|scope
argument_list|,
name|call
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End PlannerTest.java
end_comment

end_unit

