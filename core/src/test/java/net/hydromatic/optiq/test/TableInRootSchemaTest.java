begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|expressions
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|TableInSchemaImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqConnection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|EnumerableConvention
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|rules
operator|.
name|java
operator|.
name|JavaRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TableInRootSchemaTest
block|{
comment|/** Test case for issue 85, "Adding a table to the root schema causes breakage    * in OptiqPrepareImpl". */
annotation|@
name|Test
specifier|public
name|void
name|testAddingTableInRootSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
argument_list|)
decl_stmt|;
name|OptiqConnection
name|optiqConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SimpleTable
operator|.
name|create
argument_list|(
name|optiqConnection
operator|.
name|getRootSchema
argument_list|()
argument_list|,
literal|"SAMPLE"
argument_list|)
expr_stmt|;
name|Statement
name|statement
init|=
name|optiqConnection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select A, SUM(B) from SAMPLE group by A"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"A=foo; EXPR$1=8"
argument_list|,
literal|"A=bar; EXPR$1=4"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|OptiqAssert
operator|.
name|toSet
argument_list|(
name|resultSet
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|resultSetMetaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getTableName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"SAMPLE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getSchemaName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Per JDBC, column name should be null. But DBUnit requires every column
comment|// to have a name, so the driver uses the label.
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EXPR$1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getTableName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getSchemaName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|SimpleTable
extends|extends
name|AbstractQueryable
argument_list|<
name|Object
index|[]
argument_list|>
implements|implements
name|TranslatableTable
argument_list|<
name|Object
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
name|String
index|[]
name|columnNames
init|=
block|{
literal|"A"
block|,
literal|"B"
block|}
decl_stmt|;
specifier|private
name|Class
index|[]
name|columnTypes
init|=
block|{
name|String
operator|.
name|class
block|,
name|Integer
operator|.
name|class
block|}
decl_stmt|;
specifier|private
name|Object
index|[]
index|[]
name|rows
init|=
operator|new
name|Object
index|[
literal|3
index|]
index|[]
decl_stmt|;
name|SimpleTable
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
assert|assert
name|schema
operator|!=
literal|null
assert|;
assert|assert
name|tableName
operator|!=
literal|null
assert|;
name|this
operator|.
name|rowType
operator|=
name|deduceTypes
argument_list|(
name|schema
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|rows
index|[
literal|0
index|]
operator|=
operator|new
name|Object
index|[]
block|{
literal|"foo"
block|,
literal|5
block|}
expr_stmt|;
name|rows
index|[
literal|1
index|]
operator|=
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|,
literal|4
block|}
expr_stmt|;
name|rows
index|[
literal|2
index|]
operator|=
operator|new
name|Object
index|[]
block|{
literal|"foo"
block|,
literal|3
block|}
expr_stmt|;
block|}
name|RelDataType
name|deduceTypes
parameter_list|(
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|int
name|columnCount
init|=
name|columnNames
operator|.
name|length
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
name|columnDesc
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
argument_list|(
name|columnCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelDataType
name|colType
init|=
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|columnTypes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|columnDesc
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|columnNames
index|[
name|i
index|]
argument_list|,
name|colType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|columnDesc
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SimpleTable
name|create
parameter_list|(
name|MutableSchema
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|SimpleTable
name|table
init|=
operator|new
name|SimpleTable
argument_list|(
name|schema
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addTable
argument_list|(
operator|new
name|TableInSchemaImpl
argument_list|(
name|schema
argument_list|,
name|tableName
argument_list|,
name|Schema
operator|.
name|TableType
operator|.
name|TABLE
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SimpleTable {"
operator|+
name|tableName
operator|+
literal|"}"
return|;
block|}
specifier|public
name|QueryProvider
name|getProvider
parameter_list|()
block|{
return|return
name|schema
operator|.
name|getQueryProvider
argument_list|()
return|;
block|}
specifier|public
name|Class
name|getElementType
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|Expressions
operator|.
name|convert_
argument_list|(
name|Expressions
operator|.
name|call
argument_list|(
name|schema
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"getTable"
argument_list|,
name|Expressions
operator|.
expr|<
name|Expression
operator|>
name|list
argument_list|()
operator|.
name|append
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|Expressions
operator|.
name|constant
argument_list|(
name|getElementType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|SimpleTable
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Object
index|[]
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Linq4j
operator|.
name|enumeratorIterator
argument_list|(
name|enumerator
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|enumeratorImpl
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumeratorImpl
parameter_list|(
specifier|final
name|int
index|[]
name|fields
parameter_list|)
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|Object
index|[]
name|current
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Object
index|[]
argument_list|>
name|iterator
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rows
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|full
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|current
operator|=
name|fields
operator|!=
literal|null
condition|?
name|convertRow
argument_list|(
name|full
argument_list|)
else|:
name|full
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// noop
block|}
specifier|private
name|Object
index|[]
name|convertRow
parameter_list|(
name|Object
index|[]
name|full
parameter_list|)
block|{
specifier|final
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|objects
index|[
name|i
index|]
operator|=
name|full
index|[
name|fields
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|objects
return|;
block|}
block|}
return|;
block|}
comment|// keep
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
return|return
operator|new
name|JavaRules
operator|.
name|EnumerableTableAccessRel
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|context
operator|.
name|getCluster
argument_list|()
operator|.
name|traitSetOf
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|relOptTable
argument_list|,
name|getExpression
argument_list|()
argument_list|,
name|getElementType
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End TableInRootSchemaTest.java
end_comment

end_unit

