begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|MutableSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|clone
operator|.
name|CloneSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|java
operator|.
name|ReflectiveSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
operator|.
name|JdbcQueryProvider
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|impl
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|MetaImpl
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|jdbc
operator|.
name|OptiqConnection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|optiq
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Fluid DSL for testing Optiq connections and queries.  */
end_comment

begin_class
specifier|public
class|class
name|OptiqAssert
block|{
comment|/** Which database to use for tests that require a JDBC data source. By    * default the test suite runs against the embedded hsqldb database.    *    *<p>We recommend that casual users use hsqldb, and frequent Optiq developers    * use MySQL. The test suite runs faster against the MySQL database (mainly    * because of the 0.1s versus 6s startup time). You have to populate MySQL    * manually with the foodmart data set, otherwise there will be test failures.    * To run against MySQL, specify '-Doptiq.test.db=mysql' on the java command    * line.</p> */
specifier|public
specifier|static
specifier|final
name|ConnectionSpec
name|CONNECTION_SPEC
init|=
name|Util
operator|.
name|first
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"optiq.test.db"
argument_list|)
argument_list|,
literal|"hsqldb"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"mysql"
argument_list|)
condition|?
name|ConnectionSpec
operator|.
name|MYSQL
else|:
name|ConnectionSpec
operator|.
name|HSQLDB
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateFormat
name|UTC_DATE_FORMAT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateFormat
name|UTC_TIME_FORMAT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateFormat
name|UTC_TIMESTAMP_FORMAT
decl_stmt|;
static|static
block|{
specifier|final
name|TimeZone
name|utc
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
name|UTC_DATE_FORMAT
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
expr_stmt|;
name|UTC_DATE_FORMAT
operator|.
name|setTimeZone
argument_list|(
name|utc
argument_list|)
expr_stmt|;
name|UTC_TIME_FORMAT
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss"
argument_list|)
expr_stmt|;
name|UTC_TIME_FORMAT
operator|.
name|setTimeZone
argument_list|(
name|utc
argument_list|)
expr_stmt|;
name|UTC_TIMESTAMP_FORMAT
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
expr_stmt|;
name|UTC_TIMESTAMP_FORMAT
operator|.
name|setTimeZone
argument_list|(
name|utc
argument_list|)
expr_stmt|;
block|}
comment|/** Implementation of {@link AssertThat} that does nothing. */
specifier|private
specifier|static
specifier|final
name|AssertThat
name|DISABLED
init|=
operator|new
name|AssertThat
argument_list|(
operator|(
name|Config
operator|)
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|AssertThat
name|with
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertThat
name|with
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertThat
name|with
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|schema
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertThat
name|withModel
parameter_list|(
name|String
name|model
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|query
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|NopAssertQuery
operator|.
name|of
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|connectThrows
parameter_list|(
name|String
name|message
parameter_list|)
block|{
comment|// nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|connectThrows
parameter_list|(
name|Function1
argument_list|<
name|Throwable
argument_list|,
name|Void
argument_list|>
name|exceptionChecker
parameter_list|)
block|{
comment|// nothing
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|AssertThat
name|doWithConnection
parameter_list|(
name|Function1
argument_list|<
name|OptiqConnection
argument_list|,
name|T
argument_list|>
name|fn
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertThat
name|withSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertThat
name|enable
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
return|return
name|this
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|AssertThat
name|assertThat
parameter_list|()
block|{
return|return
operator|new
name|AssertThat
argument_list|(
name|Config
operator|.
name|REGULAR
argument_list|)
return|;
block|}
specifier|static
name|Function1
argument_list|<
name|Throwable
argument_list|,
name|Void
argument_list|>
name|checkException
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|)
block|{
return|return
operator|new
name|Function1
argument_list|<
name|Throwable
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|Throwable
name|p0
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"expected exception but none was thrown"
argument_list|,
name|p0
argument_list|)
expr_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|printWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|stringWriter
argument_list|)
decl_stmt|;
name|p0
operator|.
name|printStackTrace
argument_list|(
name|printWriter
argument_list|)
expr_stmt|;
name|printWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|stack
init|=
name|stringWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|stack
argument_list|,
name|stack
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|static
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checkResult
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|)
block|{
return|return
operator|new
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|resultString
init|=
name|OptiqAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|resultString
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|static
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checkResultCount
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|)
block|{
return|return
operator|new
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
try|try
block|{
specifier|final
name|int
name|count
init|=
name|OptiqAssert
operator|.
name|countRows
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/** Checks that the result of the second and subsequent executions is the same    * as the first.    *    * @param ordered Whether order should be the same both times    */
specifier|static
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|consistentResult
parameter_list|(
specifier|final
name|boolean
name|ordered
parameter_list|)
block|{
return|return
operator|new
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
name|int
name|executeCount
init|=
literal|0
decl_stmt|;
name|Collection
name|expected
decl_stmt|;
specifier|public
name|Void
name|apply
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
operator|++
name|executeCount
expr_stmt|;
try|try
block|{
specifier|final
name|Collection
name|result
init|=
name|OptiqAssert
operator|.
name|toStringList
argument_list|(
name|resultSet
argument_list|,
name|ordered
condition|?
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
else|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|executeCount
operator|==
literal|1
condition|)
block|{
name|expected
operator|=
name|result
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// compare strings to get better error message
name|assertEquals
argument_list|(
name|newlineList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|newlineList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"oops"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|static
name|String
name|newlineList
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|o
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checkResultUnordered
parameter_list|(
specifier|final
name|String
modifier|...
name|lines
parameter_list|)
block|{
return|return
operator|new
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|actualSet
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|OptiqAssert
operator|.
name|toStringList
argument_list|(
name|resultSet
argument_list|,
name|actualSet
argument_list|)
expr_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|expectedSet
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lines
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSet
argument_list|,
name|actualSet
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checkResultContains
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|)
block|{
return|return
operator|new
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|ResultSet
name|s
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|actual
init|=
name|OptiqAssert
operator|.
name|toString
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|actual
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"contains"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checkResultType
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|)
block|{
return|return
operator|new
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|ResultSet
name|s
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|actual
init|=
name|typeString
argument_list|(
name|s
operator|.
name|getMetaData
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|String
name|typeString
parameter_list|(
name|ResultSetMetaData
name|metaData
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metaData
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|metaData
operator|.
name|getColumnName
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|" "
operator|+
name|metaData
operator|.
name|getColumnTypeName
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
operator|(
name|metaData
operator|.
name|isNullable
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
name|ResultSetMetaData
operator|.
name|columnNoNulls
condition|?
literal|" NOT NULL"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|void
name|assertQuery
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|sql
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|materializationsEnabled
parameter_list|,
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|resultChecker
parameter_list|,
name|Function1
argument_list|<
name|Throwable
argument_list|,
name|Void
argument_list|>
name|exceptionChecker
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|message
init|=
literal|"With materializationsEnabled="
operator|+
name|materializationsEnabled
operator|+
literal|", limit="
operator|+
name|limit
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|OptiqConnection
operator|)
name|connection
operator|)
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"materializationsEnabled"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|materializationsEnabled
argument_list|)
argument_list|)
expr_stmt|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|statement
operator|.
name|setMaxRows
argument_list|(
name|limit
operator|<=
literal|0
condition|?
name|limit
else|:
name|Math
operator|.
name|max
argument_list|(
name|limit
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
decl_stmt|;
try|try
block|{
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptionChecker
operator|!=
literal|null
condition|)
block|{
name|exceptionChecker
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|exceptionChecker
operator|!=
literal|null
condition|)
block|{
name|exceptionChecker
operator|.
name|apply
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
if|if
condition|(
name|exceptionChecker
operator|!=
literal|null
condition|)
block|{
name|exceptionChecker
operator|.
name|apply
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|resultChecker
operator|!=
literal|null
condition|)
block|{
name|resultChecker
operator|.
name|apply
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|String
name|toString
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|n
init|=
name|metaData
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|metaData
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|n
condition|)
block|{
break|break;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|int
name|countRows
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|toStringList
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|n
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|resultSet
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|n
condition|)
block|{
break|break;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|static
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|toSet
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|toStringList
argument_list|(
name|resultSet
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Calls a non-static method via reflection. Useful for testing methods that    * don't exist in certain versions of the JDK. */
specifier|static
name|Object
name|call
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|InvocationTargetException
throws|,
name|IllegalAccessException
block|{
return|return
name|method
argument_list|(
name|o
argument_list|,
name|methodName
argument_list|,
name|args
argument_list|)
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/** Finds a non-static method based on its target, name and arguments.    * Throws if not found. */
specifier|static
name|Method
name|method
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|o
operator|.
name|getClass
argument_list|()
init|;
condition|;
control|)
block|{
name|loop
label|:
for|for
control|(
name|Method
name|method1
range|:
name|aClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|method1
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
name|args
operator|.
name|length
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method1
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|Object
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|args
argument_list|,
name|method1
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|pair
operator|.
name|right
operator|.
name|isInstance
argument_list|(
name|pair
operator|.
name|left
argument_list|)
condition|)
block|{
continue|continue
name|loop
continue|;
block|}
block|}
return|return
name|method1
return|;
block|}
block|}
if|if
condition|(
name|aClass
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
operator|&&
name|aClass
operator|.
name|getSuperclass
argument_list|()
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|aClass
operator|=
name|aClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
name|aClass
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|aClass
operator|=
name|interfaces
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"method "
operator|+
name|methodName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
specifier|static
name|OptiqConnection
name|getConnection
parameter_list|(
name|String
modifier|...
name|schema
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|SQLException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemaList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
name|String
name|suffix
init|=
name|schemaList
operator|.
name|contains
argument_list|(
literal|"spark"
argument_list|)
condition|?
literal|"spark=true"
else|:
literal|""
decl_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
operator|+
name|suffix
argument_list|)
decl_stmt|;
name|OptiqConnection
name|optiqConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|MutableSchema
name|rootSchema
init|=
name|optiqConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|schemaList
operator|.
name|contains
argument_list|(
literal|"hr"
argument_list|)
condition|)
block|{
name|ReflectiveSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
literal|"hr"
argument_list|,
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaList
operator|.
name|contains
argument_list|(
literal|"foodmart"
argument_list|)
condition|)
block|{
name|ReflectiveSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
literal|"foodmart"
argument_list|,
operator|new
name|JdbcTest
operator|.
name|FoodmartSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaList
operator|.
name|contains
argument_list|(
literal|"lingual"
argument_list|)
condition|)
block|{
name|ReflectiveSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
literal|"SALES"
argument_list|,
operator|new
name|JdbcTest
operator|.
name|LingualSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaList
operator|.
name|contains
argument_list|(
literal|"metadata"
argument_list|)
condition|)
block|{
comment|// always present
block|}
return|return
name|optiqConnection
return|;
block|}
comment|/**    * Creates a connection with a given query provider. If provider is null,    * uses the connection as its own provider. The connection contains a    * schema called "foodmart" backed by a JDBC connection to MySQL.    *    * @param queryProvider Query provider    * @param withClone Whether to create a "foodmart2" schema as in-memory    *     clone    * @return Connection    * @throws ClassNotFoundException    * @throws java.sql.SQLException    */
specifier|static
name|OptiqConnection
name|getConnection
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|boolean
name|withClone
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|SQLException
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
argument_list|)
decl_stmt|;
name|OptiqConnection
name|optiqConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|JdbcSchema
name|foodmart
init|=
name|JdbcSchema
operator|.
name|create
argument_list|(
name|optiqConnection
operator|.
name|getRootSchema
argument_list|()
argument_list|,
name|JdbcSchema
operator|.
name|dataSource
argument_list|(
name|CONNECTION_SPEC
operator|.
name|url
argument_list|,
name|CONNECTION_SPEC
operator|.
name|driver
argument_list|,
name|CONNECTION_SPEC
operator|.
name|username
argument_list|,
name|CONNECTION_SPEC
operator|.
name|password
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"foodmart"
argument_list|,
literal|"foodmart"
argument_list|)
decl_stmt|;
if|if
condition|(
name|withClone
condition|)
block|{
name|CloneSchema
operator|.
name|create
argument_list|(
name|optiqConnection
operator|.
name|getRootSchema
argument_list|()
argument_list|,
literal|"foodmart2"
argument_list|,
name|foodmart
argument_list|)
expr_stmt|;
block|}
name|optiqConnection
operator|.
name|setSchema
argument_list|(
literal|"foodmart2"
argument_list|)
expr_stmt|;
return|return
name|optiqConnection
return|;
block|}
comment|/**    * Result of calling {@link OptiqAssert#assertThat}.    */
specifier|public
specifier|static
class|class
name|AssertThat
block|{
specifier|private
specifier|final
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|AssertThat
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ConfigConnectionFactory
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AssertThat
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
specifier|public
name|AssertThat
name|with
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
return|return
operator|new
name|AssertThat
argument_list|(
name|config
argument_list|)
return|;
block|}
specifier|public
name|AssertThat
name|with
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
return|return
operator|new
name|AssertThat
argument_list|(
name|connectionFactory
argument_list|)
return|;
block|}
comment|/** Sets the default schema to a reflective schema based on a given      * object. */
specifier|public
name|AssertThat
name|with
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Object
name|schema
parameter_list|)
block|{
return|return
name|with
argument_list|(
operator|new
name|OptiqAssert
operator|.
name|ConnectionFactory
argument_list|()
block|{
specifier|public
name|OptiqConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
argument_list|)
decl_stmt|;
name|OptiqConnection
name|optiqConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|OptiqConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|MutableSchema
name|rootSchema
init|=
name|optiqConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|ReflectiveSchema
operator|.
name|create
argument_list|(
name|rootSchema
argument_list|,
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|optiqConnection
operator|.
name|setSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|optiqConnection
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|AssertThat
name|withModel
parameter_list|(
specifier|final
name|String
name|model
parameter_list|)
block|{
return|return
operator|new
name|AssertThat
argument_list|(
operator|new
name|OptiqAssert
operator|.
name|ConnectionFactory
argument_list|()
block|{
specifier|public
name|OptiqConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"net.hydromatic.optiq.jdbc.Driver"
argument_list|)
expr_stmt|;
specifier|final
name|Properties
name|info
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
literal|"model"
argument_list|,
literal|"inline:"
operator|+
name|model
argument_list|)
expr_stmt|;
return|return
operator|(
name|OptiqConnection
operator|)
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:optiq:"
argument_list|,
name|info
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Adds materializations to the schema. */
specifier|public
name|AssertThat
name|withMaterializations
parameter_list|(
name|String
name|model
parameter_list|,
name|String
modifier|...
name|materializations
parameter_list|)
block|{
assert|assert
name|materializations
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
assert|;
specifier|final
name|JsonBuilder
name|builder
init|=
operator|new
name|JsonBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|builder
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|materializations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|table
init|=
name|materializations
index|[
name|i
operator|++
index|]
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|builder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"view"
argument_list|,
name|table
operator|+
literal|"v"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
name|materializations
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|String
name|sql2
init|=
name|sql
operator|.
name|replaceAll
argument_list|(
literal|"`"
argument_list|,
literal|"\""
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
name|sql2
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|buf
init|=
literal|"materializations: "
operator|+
name|builder
operator|.
name|toJsonString
argument_list|(
name|list
argument_list|)
decl_stmt|;
specifier|final
name|String
name|model2
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|contains
argument_list|(
literal|"defaultSchema: 'foodmart'"
argument_list|)
condition|)
block|{
name|model2
operator|=
name|model
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|", { name: 'mat', "
operator|+
name|buf
operator|+
literal|"}\n"
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|model
operator|.
name|contains
argument_list|(
literal|"type: "
argument_list|)
condition|)
block|{
name|model2
operator|=
name|model
operator|.
name|replace
argument_list|(
literal|"type: "
argument_list|,
name|buf
operator|+
literal|",\n"
operator|+
literal|"type: "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"do not know where to splice"
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|model2
argument_list|)
expr_stmt|;
return|return
name|withModel
argument_list|(
name|model2
argument_list|)
return|;
block|}
specifier|public
name|AssertQuery
name|query
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sql
argument_list|)
expr_stmt|;
return|return
operator|new
name|AssertQuery
argument_list|(
name|connectionFactory
argument_list|,
name|sql
argument_list|)
return|;
block|}
comment|/** Asserts that there is an exception with the given message while      * creating a connection. */
specifier|public
name|void
name|connectThrows
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|connectThrows
argument_list|(
name|checkException
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Asserts that there is an exception that matches the given predicate      * while creating a connection. */
specifier|public
name|void
name|connectThrows
parameter_list|(
name|Function1
argument_list|<
name|Throwable
argument_list|,
name|Void
argument_list|>
name|exceptionChecker
parameter_list|)
block|{
name|Throwable
name|throwable
decl_stmt|;
try|try
block|{
name|Connection
name|x
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|x
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|throwable
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|throwable
operator|=
name|e
expr_stmt|;
block|}
name|exceptionChecker
operator|.
name|apply
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a {@link OptiqConnection} and executes a callback. */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|AssertThat
name|doWithConnection
parameter_list|(
name|Function1
argument_list|<
name|OptiqConnection
argument_list|,
name|T
argument_list|>
name|fn
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|T
name|t
init|=
name|fn
operator|.
name|apply
argument_list|(
operator|(
name|OptiqConnection
operator|)
name|connection
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|AssertThat
operator|.
name|this
return|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Creates a {@link DataContext} and executes a callback. */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|AssertThat
name|doWithDataContext
parameter_list|(
name|Function1
argument_list|<
name|DataContext
argument_list|,
name|T
argument_list|>
name|fn
parameter_list|)
throws|throws
name|Exception
block|{
name|OptiqConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
specifier|final
name|DataContext
name|dataContext
init|=
name|MetaImpl
operator|.
name|createDataContext
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|T
name|t
init|=
name|fn
operator|.
name|apply
argument_list|(
name|dataContext
argument_list|)
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|AssertThat
operator|.
name|this
return|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|AssertThat
name|withSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
return|return
operator|new
name|AssertThat
argument_list|(
operator|new
name|SchemaConnectionFactory
argument_list|(
name|connectionFactory
argument_list|,
name|schema
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|AssertThat
name|enable
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
return|return
name|enabled
condition|?
name|this
else|:
name|DISABLED
return|;
block|}
block|}
specifier|public
interface|interface
name|ConnectionFactory
block|{
name|OptiqConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|ConfigConnectionFactory
implements|implements
name|ConnectionFactory
block|{
specifier|private
specifier|final
name|Config
name|config
decl_stmt|;
specifier|public
name|ConfigConnectionFactory
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|OptiqConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|config
condition|)
block|{
case|case
name|REGULAR
case|:
return|return
name|getConnection
argument_list|(
literal|"hr"
argument_list|,
literal|"foodmart"
argument_list|)
return|;
case|case
name|REGULAR_PLUS_METADATA
case|:
return|return
name|getConnection
argument_list|(
literal|"hr"
argument_list|,
literal|"foodmart"
argument_list|,
literal|"metadata"
argument_list|)
return|;
case|case
name|LINGUAL
case|:
return|return
name|getConnection
argument_list|(
literal|"lingual"
argument_list|)
return|;
case|case
name|JDBC_FOODMART2
case|:
return|return
name|getConnection
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|JDBC_FOODMART
case|:
return|return
name|getConnection
argument_list|(
name|JdbcQueryProvider
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|FOODMART_CLONE
case|:
return|return
name|getConnection
argument_list|(
name|JdbcQueryProvider
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|)
return|;
case|case
name|SPARK
case|:
return|return
name|getConnection
argument_list|(
literal|"spark"
argument_list|)
return|;
default|default:
throw|throw
name|Util
operator|.
name|unexpected
argument_list|(
name|config
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|DelegatingConnectionFactory
implements|implements
name|ConnectionFactory
block|{
specifier|private
specifier|final
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|public
name|DelegatingConnectionFactory
parameter_list|(
name|ConnectionFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
specifier|public
name|OptiqConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|factory
operator|.
name|createConnection
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SchemaConnectionFactory
extends|extends
name|DelegatingConnectionFactory
block|{
specifier|private
specifier|final
name|String
name|schema
decl_stmt|;
specifier|public
name|SchemaConnectionFactory
parameter_list|(
name|ConnectionFactory
name|factory
parameter_list|,
name|String
name|schema
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OptiqConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|OptiqConnection
name|connection
init|=
name|super
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AssertQuery
block|{
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|String
name|plan
decl_stmt|;
specifier|private
name|int
name|limit
decl_stmt|;
specifier|private
name|boolean
name|materializationsEnabled
init|=
literal|false
decl_stmt|;
specifier|private
name|AssertQuery
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connectionFactory
operator|.
name|createConnection
argument_list|()
return|;
block|}
specifier|public
name|AssertQuery
name|enable
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
return|return
name|enabled
condition|?
name|this
else|:
name|NopAssertQuery
operator|.
name|of
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|AssertQuery
name|returns
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
return|return
name|returns
argument_list|(
name|checkResult
argument_list|(
name|expected
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|AssertQuery
name|returnsCount
parameter_list|(
name|int
name|expectedCount
parameter_list|)
block|{
return|return
name|returns
argument_list|(
name|checkResultCount
argument_list|(
name|expectedCount
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|AssertQuery
name|returns
parameter_list|(
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checker
parameter_list|)
block|{
try|try
block|{
name|assertQuery
argument_list|(
name|createConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
name|limit
argument_list|,
name|materializationsEnabled
argument_list|,
name|checker
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception while executing ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AssertQuery
name|returnsUnordered
parameter_list|(
name|String
modifier|...
name|lines
parameter_list|)
block|{
return|return
name|returns
argument_list|(
name|checkResultUnordered
argument_list|(
name|lines
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|AssertQuery
name|throws_
parameter_list|(
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|assertQuery
argument_list|(
name|createConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
name|limit
argument_list|,
name|materializationsEnabled
argument_list|,
literal|null
argument_list|,
name|checkException
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception while executing ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AssertQuery
name|runs
parameter_list|()
block|{
try|try
block|{
name|assertQuery
argument_list|(
name|createConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
name|limit
argument_list|,
name|materializationsEnabled
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception while executing ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AssertQuery
name|typeIs
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
try|try
block|{
name|assertQuery
argument_list|(
name|createConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
name|limit
argument_list|,
literal|false
argument_list|,
name|checkResultType
argument_list|(
name|expected
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception while executing ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AssertQuery
name|explainContains
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
name|String
name|explainSql
init|=
literal|"explain plan for "
operator|+
name|sql
decl_stmt|;
try|try
block|{
name|assertQuery
argument_list|(
name|createConnection
argument_list|()
argument_list|,
name|explainSql
argument_list|,
name|limit
argument_list|,
name|materializationsEnabled
argument_list|,
name|checkResultContains
argument_list|(
name|expected
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception while executing ["
operator|+
name|explainSql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AssertQuery
name|planContains
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
name|ensurePlan
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Plan ["
operator|+
name|plan
operator|+
literal|"] contains ["
operator|+
name|expected
operator|+
literal|"]"
argument_list|,
name|plan
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AssertQuery
name|planHasSql
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
return|return
name|planContains
argument_list|(
literal|"getDataSource(), \""
operator|+
name|expected
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"\\\\"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\\\\n"
argument_list|)
operator|+
literal|"\""
argument_list|)
return|;
block|}
specifier|private
name|void
name|ensurePlan
parameter_list|()
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|Hook
operator|.
name|Closeable
name|hook
init|=
name|Hook
operator|.
name|JAVA_PLAN
operator|.
name|add
argument_list|(
operator|new
name|Function1
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|apply
parameter_list|(
name|Object
name|a0
parameter_list|)
block|{
name|plan
operator|=
operator|(
name|String
operator|)
name|a0
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|assertQuery
argument_list|(
name|createConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
name|limit
argument_list|,
name|materializationsEnabled
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception while executing ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hook
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Runs the query and applies a checker to the generated third-party      * queries. The checker should throw to fail the test if it does not see      * what it wants. This method can be used to check whether a particular      * MongoDB or SQL query is generated, for instance. */
specifier|public
name|AssertQuery
name|queryContains
parameter_list|(
name|Function1
argument_list|<
name|List
argument_list|,
name|Void
argument_list|>
name|predicate1
parameter_list|)
block|{
specifier|final
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|final
name|Hook
operator|.
name|Closeable
name|hook
init|=
name|Hook
operator|.
name|QUERY_PLAN
operator|.
name|add
argument_list|(
operator|new
name|Function1
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|apply
parameter_list|(
name|Object
name|a0
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|a0
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|assertQuery
argument_list|(
name|createConnection
argument_list|()
argument_list|,
name|sql
argument_list|,
name|limit
argument_list|,
name|materializationsEnabled
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|predicate1
operator|.
name|apply
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception while executing ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hook
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Sets a limit on the number of rows returned. -1 means no limit. */
specifier|public
name|AssertQuery
name|limit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|sameResultWithMaterializationsDisabled
parameter_list|()
block|{
name|boolean
name|save
init|=
name|materializationsEnabled
decl_stmt|;
try|try
block|{
name|materializationsEnabled
operator|=
literal|false
expr_stmt|;
specifier|final
name|boolean
name|ordered
init|=
name|sql
operator|.
name|toUpperCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ORDER BY"
argument_list|)
decl_stmt|;
specifier|final
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checker
init|=
name|consistentResult
argument_list|(
name|ordered
argument_list|)
decl_stmt|;
name|returns
argument_list|(
name|checker
argument_list|)
expr_stmt|;
name|materializationsEnabled
operator|=
literal|true
expr_stmt|;
name|returns
argument_list|(
name|checker
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|materializationsEnabled
operator|=
name|save
expr_stmt|;
block|}
block|}
specifier|public
name|AssertQuery
name|enableMaterializations
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|this
operator|.
name|materializationsEnabled
operator|=
name|enable
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
enum|enum
name|Config
block|{
comment|/**      * Configuration that creates a connection with two in-memory data sets:      * {@link net.hydromatic.optiq.test.JdbcTest.HrSchema} and      * {@link net.hydromatic.optiq.test.JdbcTest.FoodmartSchema}.      */
name|REGULAR
block|,
comment|/**      * Configuration that creates a connection with an in-memory data set      * similar to the smoke test in Cascading Lingual.      */
name|LINGUAL
block|,
comment|/**      * Configuration that creates a connection to a MySQL server. Tables      * such as "customer" and "sales_fact_1997" are available. Queries      * are processed by generating Java that calls linq4j operators      * such as      * {@link net.hydromatic.linq4j.Enumerable#where(net.hydromatic.linq4j.function.Predicate1)}.      */
name|JDBC_FOODMART
block|,
name|JDBC_FOODMART2
block|,
comment|/** Configuration that contains an in-memory clone of the FoodMart      * database. */
name|FOODMART_CLONE
block|,
comment|/** Configuration that includes the metadata schema. */
name|REGULAR_PLUS_METADATA
block|,
comment|/** Configuration that loads Spark. */
name|SPARK
block|,   }
comment|/** Implementation of {@link AssertQuery} that does nothing. */
specifier|private
specifier|static
class|class
name|NopAssertQuery
extends|extends
name|AssertQuery
block|{
specifier|private
name|NopAssertQuery
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/** Returns an implementation of {@link AssertQuery} that does nothing. */
specifier|static
name|AssertQuery
name|of
parameter_list|(
specifier|final
name|String
name|sql
parameter_list|)
block|{
return|return
operator|new
name|NopAssertQuery
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"disabled"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|returns
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|returns
parameter_list|(
name|Function1
argument_list|<
name|ResultSet
argument_list|,
name|Void
argument_list|>
name|checker
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|throws_
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|runs
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|explainContains
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|planContains
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssertQuery
name|planHasSql
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
return|return
name|this
return|;
block|}
block|}
comment|/** Information necessary to create a JDBC connection. Specify one to run    * tests against a different database. (hsqldb is the default.) */
specifier|public
specifier|static
class|class
name|ConnectionSpec
block|{
specifier|public
specifier|final
name|String
name|url
decl_stmt|;
specifier|public
specifier|final
name|String
name|username
decl_stmt|;
specifier|public
specifier|final
name|String
name|password
decl_stmt|;
specifier|public
specifier|final
name|String
name|driver
decl_stmt|;
specifier|public
name|ConnectionSpec
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|driver
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|ConnectionSpec
name|HSQLDB
init|=
operator|new
name|ConnectionSpec
argument_list|(
literal|"jdbc:hsqldb:res:foodmart"
argument_list|,
literal|"FOODMART"
argument_list|,
literal|"FOODMART"
argument_list|,
literal|"org.hsqldb.jdbcDriver"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ConnectionSpec
name|MYSQL
init|=
operator|new
name|ConnectionSpec
argument_list|(
literal|"jdbc:mysql://localhost/foodmart"
argument_list|,
literal|"foodmart"
argument_list|,
literal|"foodmart"
argument_list|,
literal|"com.mysql.jdbc.Driver"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End OptiqAssert.java
end_comment

end_unit

