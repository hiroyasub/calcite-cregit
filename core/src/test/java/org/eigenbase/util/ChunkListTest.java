begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function0
import|;
end_import

begin_import
import|import
name|net
operator|.
name|hydromatic
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit and performance test for {@link ChunkList}.  */
end_comment

begin_class
specifier|public
class|class
name|ChunkListTest
block|{
comment|/** Unit test for {@link ChunkList}. */
annotation|@
name|Test
specifier|public
name|void
name|testChunkList
parameter_list|()
block|{
specifier|final
name|ChunkList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ChunkList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|list
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|list
operator|.
name|add
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
name|int
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7]"
argument_list|,
name|list
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
name|int
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
operator|(
name|int
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
operator|(
name|int
operator|)
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7, 9, null, 11]"
argument_list|,
name|list
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|40
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|44
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|list
operator|.
name|get
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|list
control|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|integer
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|n
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|list
operator|.
name|indexOf
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// can't sort if null is present
name|list
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|i
operator|=
name|list
operator|.
name|indexOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|(
operator|(
name|Integer
operator|)
literal|7
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove all instances of a value that exists
name|boolean
name|b
init|=
name|list
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|9
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// remove all instances of a non-existent value
name|b
operator|=
name|list
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// remove all instances of a value that occurs in the last chunk
name|list
operator|.
name|add
argument_list|(
literal|12345
argument_list|)
expr_stmt|;
name|b
operator|=
name|list
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|12345
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// remove all instances of a value that occurs in the last chunk but
comment|// not as the last value
name|list
operator|.
name|add
argument_list|(
literal|12345
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|b
operator|=
name|list
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|12345
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
operator|new
name|ChunkList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|1000
argument_list|,
literal|77
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add to an empty list via iterator
comment|//noinspection MismatchedQueryAndUpdateOfCollection
specifier|final
name|ChunkList
argument_list|<
name|String
argument_list|>
name|list2
init|=
operator|new
name|ChunkList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list2
operator|.
name|listIterator
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[x]"
argument_list|,
name|list2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add at start
name|list2
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[y, x]"
argument_list|,
name|list2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link ChunkList} that applies random    * operations. */
annotation|@
name|Test
specifier|public
name|void
name|testRandom
parameter_list|()
block|{
specifier|final
name|int
name|ITERATION_COUNT
init|=
literal|10000
decl_stmt|;
name|checkRandom
argument_list|(
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|ChunkList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|,
name|ITERATION_COUNT
argument_list|)
expr_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|checkRandom
argument_list|(
name|random
argument_list|,
operator|new
name|ChunkList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|,
name|ITERATION_COUNT
argument_list|)
expr_stmt|;
block|}
name|checkRandom
argument_list|(
operator|new
name|Random
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|ChunkList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|1000
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|ITERATION_COUNT
argument_list|)
expr_stmt|;
block|}
name|void
name|checkRandom
parameter_list|(
name|Random
name|random
parameter_list|,
name|ChunkList
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|,
name|int
name|iterationCount
parameter_list|)
block|{
name|int
name|removeCount
init|=
literal|0
decl_stmt|;
name|int
name|addCount
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|initialCount
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterationCount
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|list
operator|.
name|isValid
argument_list|(
literal|true
argument_list|)
assert|;
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// remove last
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|++
name|removeCount
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// add to end
name|list
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|addCount
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|int
name|n
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|list
control|)
block|{
name|Util
operator|.
name|discard
argument_list|(
name|integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n
operator|++
operator|<
name|size
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// remove all instances of a particular value
name|int
name|sizeBefore
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|list
operator|.
name|removeAll
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|assertTrue
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|<
name|sizeBefore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
name|sizeBefore
argument_list|)
expr_stmt|;
block|}
name|removeCount
operator|+=
operator|(
name|sizeBefore
operator|-
name|list
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// remove at random position
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|removeCount
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// add at random position
name|int
name|count
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|list
operator|.
name|listIterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|it
operator|.
name|add
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|addCount
expr_stmt|;
break|break;
default|default:
comment|// add at random position
name|list
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|addCount
expr_stmt|;
break|break;
block|}
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|initialCount
operator|+
name|addCount
operator|-
name|removeCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerformance
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Benchmark
operator|.
name|enabled
argument_list|()
condition|)
block|{
return|return;
block|}
comment|//noinspection unchecked
specifier|final
name|Iterable
argument_list|<
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|factories0
init|=
name|Pair
operator|.
name|zip
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|apply
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
block|}
block|}
argument_list|,
operator|new
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|apply
parameter_list|()
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
block|}
block|}
argument_list|,
operator|new
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|apply
parameter_list|()
block|{
return|return
operator|new
name|ChunkList
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ArrayList"
argument_list|,
literal|"LinkedList"
argument_list|,
literal|"ChunkList-64"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|factories1
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|factories0
control|)
block|{
name|factories1
operator|.
name|add
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|factories
init|=
name|factories1
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|sizes
init|=
name|Pair
operator|.
name|zip
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|100000
argument_list|,
literal|1000000
argument_list|,
literal|10000000
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"100k"
argument_list|,
literal|"1m"
argument_list|,
literal|"10m"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|factories
control|)
block|{
operator|new
name|Benchmark
argument_list|(
literal|"add 10m values, "
operator|+
name|pair
operator|.
name|right
argument_list|,
operator|new
name|Function1
argument_list|<
name|Benchmark
operator|.
name|Statistician
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|Benchmark
operator|.
name|Statistician
name|statistician
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|pair
operator|.
name|left
operator|.
name|apply
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000000
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistician
operator|.
name|record
argument_list|(
name|start
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|factories
control|)
block|{
operator|new
name|Benchmark
argument_list|(
literal|"iterate over 10m values, "
operator|+
name|pair
operator|.
name|right
argument_list|,
operator|new
name|Function1
argument_list|<
name|Benchmark
operator|.
name|Statistician
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|Benchmark
operator|.
name|Statistician
name|statistician
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|pair
operator|.
name|left
operator|.
name|apply
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|10000000
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|list
control|)
block|{
name|count
operator|+=
name|integer
expr_stmt|;
block|}
name|statistician
operator|.
name|record
argument_list|(
name|start
argument_list|)
expr_stmt|;
assert|assert
name|count
operator|==
literal|10000000
assert|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|factories
control|)
block|{
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|size
range|:
name|sizes
control|)
block|{
if|if
condition|(
name|size
operator|.
name|left
operator|>
literal|1000000
condition|)
block|{
continue|continue;
block|}
operator|new
name|Benchmark
argument_list|(
literal|"delete 10% of "
operator|+
name|size
operator|.
name|right
operator|+
literal|" values, "
operator|+
name|pair
operator|.
name|right
argument_list|,
operator|new
name|Function1
argument_list|<
name|Benchmark
operator|.
name|Statistician
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|Benchmark
operator|.
name|Statistician
name|statistician
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|pair
operator|.
name|left
operator|.
name|apply
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|size
operator|.
name|left
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Integer
name|integer
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|integer
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|++
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|statistician
operator|.
name|record
argument_list|(
name|start
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|factories
control|)
block|{
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|size
range|:
name|sizes
control|)
block|{
if|if
condition|(
name|size
operator|.
name|left
operator|>
literal|1000000
condition|)
block|{
continue|continue;
block|}
operator|new
name|Benchmark
argument_list|(
literal|"get from "
operator|+
name|size
operator|.
name|right
operator|+
literal|" values, "
operator|+
operator|(
name|size
operator|.
name|left
operator|/
literal|1000
operator|)
operator|+
literal|" times, "
operator|+
name|pair
operator|.
name|right
argument_list|,
operator|new
name|Function1
argument_list|<
name|Benchmark
operator|.
name|Statistician
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|Benchmark
operator|.
name|Statistician
name|statistician
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|pair
operator|.
name|left
operator|.
name|apply
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|size
operator|.
name|left
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|probeCount
init|=
name|size
operator|.
name|left
operator|/
literal|1000
decl_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|probeCount
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|+=
name|list
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
assert|assert
name|n
operator|==
name|probeCount
assert|;
name|statistician
operator|.
name|record
argument_list|(
name|start
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Function0
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|factories
control|)
block|{
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|size
range|:
name|sizes
control|)
block|{
if|if
condition|(
name|size
operator|.
name|left
operator|>
literal|1000000
condition|)
block|{
continue|continue;
block|}
operator|new
name|Benchmark
argument_list|(
literal|"add "
operator|+
name|size
operator|.
name|right
operator|+
literal|" values, delete 10%, insert 20%, get 1%, using "
operator|+
name|pair
operator|.
name|right
argument_list|,
operator|new
name|Function1
argument_list|<
name|Benchmark
operator|.
name|Statistician
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|Benchmark
operator|.
name|Statistician
name|statistician
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|pair
operator|.
name|left
operator|.
name|apply
argument_list|()
decl_stmt|;
specifier|final
name|int
name|probeCount
init|=
name|size
operator|.
name|left
operator|/
literal|100
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|size
operator|.
name|left
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Integer
name|integer
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|integer
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|ListIterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|list
operator|.
name|listIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Integer
name|integer
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|integer
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
name|it
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|probeCount
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|+=
name|list
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
assert|assert
name|n
operator|>
name|probeCount
assert|;
name|statistician
operator|.
name|record
argument_list|(
name|start
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End ChunkListTest.java
end_comment

end_unit

