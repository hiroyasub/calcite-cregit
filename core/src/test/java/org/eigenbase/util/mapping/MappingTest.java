begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|util
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Unit test for mappings.  *  * @see Mapping  * @see Mappings  */
end_comment

begin_class
specifier|public
class|class
name|MappingTest
block|{
specifier|public
name|MappingTest
parameter_list|()
block|{
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMappings
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PartialSurjection
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PartialSurjection
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PartialSurjection
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Mappings#createShiftMapping}. */
annotation|@
name|Test
specifier|public
name|void
name|testMappingsCreateShiftMapping
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[size=5, sourceCount=20, targetCount=13, elements=[6:3, 7:4, 15:10, 16:11, 17:12]]"
argument_list|,
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
literal|20
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// no triples makes for a mapping with 0 targets, 20 sources, but still
comment|// valid
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=0, sourceCount=20, targetCount=0, elements=[]]"
argument_list|,
name|mapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|mapping
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Mappings#append}. */
annotation|@
name|Test
specifier|public
name|void
name|testMappingsAppend
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|append
argument_list|(
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mapping
name|mapping0
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PartialSurjection
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|mapping0
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mapping0
operator|.
name|set
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mapping0
operator|.
name|set
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[size=5, sourceCount=7, targetCount=5, elements=[0:2, 3:1, 4:0, 5:3, 6:4]]"
argument_list|,
name|Mappings
operator|.
name|append
argument_list|(
name|mapping0
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Mappings#offsetSource}. */
annotation|@
name|Test
specifier|public
name|void
name|testMappingsOffsetSource
parameter_list|()
block|{
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|target
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=2, sourceCount=2, targetCount=8, elements=[0:5, 1:7]]"
argument_list|,
name|mapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapping
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping1
init|=
name|Mappings
operator|.
name|offsetSource
argument_list|(
name|mapping
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=2, sourceCount=5, targetCount=8, elements=[3:5, 4:7]]"
argument_list|,
name|mapping1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|mapping1
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mapping1
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// mapping that extends RHS
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping2
init|=
name|Mappings
operator|.
name|offsetSource
argument_list|(
name|mapping
argument_list|,
literal|3
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=2, sourceCount=15, targetCount=8, elements=[3:5, 4:7]]"
argument_list|,
name|mapping2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|mapping2
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mapping2
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping3
init|=
name|Mappings
operator|.
name|offsetSource
argument_list|(
name|mapping
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|mapping3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
block|}
end_class

begin_comment
comment|// End MappingTest.java
end_comment

end_unit

