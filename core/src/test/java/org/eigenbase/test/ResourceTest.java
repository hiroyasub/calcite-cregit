begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eigenbase
operator|.
name|resource
operator|.
name|Resources
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link Resources} framework.  */
end_comment

begin_class
specifier|public
class|class
name|ResourceTest
block|{
specifier|final
name|FooResource
name|fooResource
init|=
name|Resources
operator|.
name|create
argument_list|(
literal|"org.eigenbase.test.ResourceTest"
argument_list|,
name|FooResource
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
name|assertThat
argument_list|(
name|fooResource
operator|.
name|helloWorld
argument_list|()
operator|.
name|str
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"hello, world!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|differentMessageInPropertiesFile
argument_list|()
operator|.
name|str
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"message in properties file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|onlyInClass
argument_list|()
operator|.
name|str
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"only in class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|onlyInPropertiesFile
argument_list|()
operator|.
name|str
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"message in properties file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProperty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|fooResource
operator|.
name|helloWorld
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|withProperty
argument_list|(
literal|0
argument_list|)
operator|.
name|str
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"with properties 0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|withProperty
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|withProperty
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"my value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|withProperty
argument_list|(
literal|1000
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"prop"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"my value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableResultOfMethodCallIgnored"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testException
parameter_list|()
block|{
name|assertThat
argument_list|(
name|fooResource
operator|.
name|illArg
argument_list|(
literal|"xyz"
argument_list|)
operator|.
name|ex
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bad arg xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|illArg
argument_list|(
literal|"xyz"
argument_list|)
operator|.
name|ex
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Throwable
name|npe
init|=
operator|new
name|NullPointerException
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|illArg
argument_list|(
literal|""
argument_list|)
operator|.
name|ex
argument_list|(
name|npe
argument_list|)
operator|.
name|getCause
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|npe
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableResultOfMethodCallIgnored"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testSuperChainException
parameter_list|()
block|{
name|assertThat
argument_list|(
name|fooResource
operator|.
name|exceptionSuperChain
argument_list|()
operator|.
name|ex
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"super chain exception"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooResource
operator|.
name|exceptionSuperChain
argument_list|()
operator|.
name|ex
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IllegalStateException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that get validation error if bundle does not contain resource. */
annotation|@
name|Test
specifier|public
name|void
name|testValidateBundleHasResource
parameter_list|()
block|{
try|try
block|{
name|Resources
operator|.
name|validate
argument_list|(
name|fooResource
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|BUNDLE_HAS_RESOURCE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"key 'OnlyInClass' not found for resource 'onlyInClass' in bundle 'java.util.PropertyResourceBundle@"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateAtLeastOne
parameter_list|()
block|{
comment|// succeeds - has several resources
name|Resources
operator|.
name|validate
argument_list|(
name|fooResource
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|AT_LEAST_ONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// fails validation - has no resources
try|try
block|{
name|Resources
operator|.
name|validate
argument_list|(
literal|"foo"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|AT_LEAST_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"resource object foo contains no resources"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateMessageSpecified
parameter_list|()
block|{
try|try
block|{
name|Resources
operator|.
name|validate
argument_list|(
name|fooResource
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|MESSAGE_SPECIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"resource 'onlyInPropertiesFile' must specify BaseMessage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateMessageMatchDifferentMessageInPropertiesFile
parameter_list|()
block|{
try|try
block|{
name|fooResource
operator|.
name|differentMessageInPropertiesFile
argument_list|()
operator|.
name|validate
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|MESSAGE_MATCH
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"message for resource 'differentMessageInPropertiesFile' is different between class and resource file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateOddQuotes
parameter_list|()
block|{
try|try
block|{
name|fooResource
operator|.
name|oddQuotes
argument_list|()
operator|.
name|validate
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|EVEN_QUOTES
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"resource 'oddQuotes' should have even number of quotes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateCreateException
parameter_list|()
block|{
try|try
block|{
name|fooResource
operator|.
name|myException
argument_list|()
operator|.
name|validate
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|CREATE_EXCEPTION
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"error instantiating exception for resource 'myException'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"java.lang.NoSuchMethodException: org.eigenbase.test.ResourceTest$MyException.<init>(java.lang.String, java.lang.Throwable)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateCauselessFail
parameter_list|()
block|{
try|try
block|{
name|fooResource
operator|.
name|causelessFail
argument_list|()
operator|.
name|validate
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|CREATE_EXCEPTION
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"error instantiating exception for resource "
operator|+
literal|"'causelessFail'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Cause is required, message = can't be used causeless"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateExceptionWithCause
parameter_list|()
block|{
name|fooResource
operator|.
name|exceptionWithCause
argument_list|()
operator|.
name|validate
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|CREATE_EXCEPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateMatchArguments
parameter_list|()
block|{
try|try
block|{
name|Resources
operator|.
name|validate
argument_list|(
name|fooResource
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Validation
operator|.
name|ARGUMENT_MATCH
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type mismatch in method 'mismatchedArguments' between message format elements [class java.lang.String, int] and method parameters [class java.lang.String, int, class java.lang.String]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: check that each resource in the bundle is used by precisely
comment|//  one method
comment|/** Exception that cannot be thrown by {@link ExInst} because it does not have    * a (String, Throwable) constructor, nor does it have a (String)    * constructor. */
specifier|public
specifier|static
class|class
name|MyException
extends|extends
name|RuntimeException
block|{
specifier|public
name|MyException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Abstract class used to test identification of exception classes via    * superclass chains */
specifier|public
specifier|abstract
specifier|static
class|class
name|MyExInst
parameter_list|<
name|W
extends|extends
name|Exception
parameter_list|>
extends|extends
name|ExInst
argument_list|<
name|W
argument_list|>
block|{
specifier|public
name|MyExInst
parameter_list|(
name|String
name|base
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|,
name|locale
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Subtype of ExInst, however exception type is not directly    * passed to ExInst. The test must still detect the correct class. */
specifier|public
specifier|static
class|class
name|MyExInstImpl
extends|extends
name|MyExInst
argument_list|<
name|IllegalStateException
argument_list|>
block|{
specifier|public
name|MyExInstImpl
parameter_list|(
name|String
name|base
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|,
name|locale
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Exception that always requires cause    */
specifier|public
specifier|static
class|class
name|MyExceptionRequiresCause
extends|extends
name|RuntimeException
block|{
specifier|public
name|MyExceptionRequiresCause
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cause is required, "
operator|+
literal|"message = "
operator|+
name|message
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** A resource object to be tested. Has one of each flaw. */
specifier|public
interface|interface
name|FooResource
block|{
annotation|@
name|BaseMessage
argument_list|(
literal|"hello, world!"
argument_list|)
name|Inst
name|helloWorld
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"message in class"
argument_list|)
name|Inst
name|differentMessageInPropertiesFile
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"only in class"
argument_list|)
name|Inst
name|onlyInClass
parameter_list|()
function_decl|;
name|Inst
name|onlyInPropertiesFile
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"with properties {0,number}"
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"prop"
argument_list|,
name|value
operator|=
literal|"my value"
argument_list|)
name|Inst
name|withProperty
parameter_list|(
name|int
name|x
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"bad arg {0}"
argument_list|)
name|ExInst
argument_list|<
name|IllegalArgumentException
argument_list|>
name|illArg
parameter_list|(
name|String
name|s
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"should return inst"
argument_list|)
name|String
name|shouldReturnInst
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"exception isn''t throwable"
argument_list|)
name|ExInst
argument_list|<
name|MyException
argument_list|>
name|myException
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"Can't use odd quotes"
argument_list|)
name|Inst
name|oddQuotes
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"can''t be used causeless"
argument_list|)
name|ExInst
argument_list|<
name|MyExceptionRequiresCause
argument_list|>
name|causelessFail
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"should work since cause is provided"
argument_list|)
name|ExInstWithCause
argument_list|<
name|MyExceptionRequiresCause
argument_list|>
name|exceptionWithCause
parameter_list|()
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"argument {0} does not match {1,number,#}"
argument_list|)
name|Inst
name|mismatchedArguments
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|s2
parameter_list|)
function_decl|;
annotation|@
name|BaseMessage
argument_list|(
literal|"super chain exception"
argument_list|)
name|MyExInstImpl
name|exceptionSuperChain
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

