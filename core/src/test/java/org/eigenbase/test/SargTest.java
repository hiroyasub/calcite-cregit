begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sarg
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for the {@code org.eigenbase.sarg} class library.  *  *<p>NOTE: This class lives in org.eigenbase.test rather than  * org.eigenbase.sarg by design: we want to make sure we're only testing via the  * public interface.  */
end_comment

begin_class
specifier|public
class|class
name|SargTest
block|{
comment|//~ Enums ------------------------------------------------------------------
enum|enum
name|Zodiac
block|{
name|AQUARIUS
block|,
name|ARIES
block|,
name|CANCER
block|,
name|CAPRICORN
block|,
name|GEMINI
block|,
name|LEO
block|,
name|LIBRA
block|,
name|PISCES
block|,
name|SAGITTARIUS
block|,
name|SCORPIO
block|,
name|TAURUS
block|,
name|VIRGO
block|}
comment|//~ Instance fields --------------------------------------------------------
specifier|private
name|SargFactory
name|sargFactory
decl_stmt|;
specifier|private
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
name|RelDataType
name|intType
decl_stmt|;
specifier|private
name|RelDataType
name|stringType
decl_stmt|;
specifier|private
name|RexNode
name|intLiteral7
decl_stmt|;
specifier|private
name|RexNode
name|intLiteral8point5
decl_stmt|;
specifier|private
name|RexNode
name|intLiteral490
decl_stmt|;
specifier|private
name|SargIntervalExpr
index|[]
name|exprs
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a SargTest.    */
specifier|public
name|SargTest
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
comment|// create some reusable fixtures
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|intType
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|intType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stringType
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|stringType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|stringType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rexBuilder
operator|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
name|intLiteral7
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|intLiteral490
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|490
argument_list|)
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|intLiteral8point5
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"8.5"
argument_list|)
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|sargFactory
operator|=
operator|new
name|SargFactory
argument_list|(
name|rexBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultEndpoint
parameter_list|()
block|{
name|SargMutableEndpoint
name|ep
init|=
name|sargFactory
operator|.
name|newEndpoint
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"-infinity"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInfiniteEndpoint
parameter_list|()
block|{
name|SargMutableEndpoint
name|ep
init|=
name|sargFactory
operator|.
name|newEndpoint
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|ep
operator|.
name|setInfinity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+infinity"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setInfinity
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-infinity"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiniteEndpoint
parameter_list|()
block|{
name|SargMutableEndpoint
name|ep
init|=
name|sargFactory
operator|.
name|newEndpoint
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"> 7"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">= 7"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|UPPER
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"< 7"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|UPPER
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<= 7"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// after rounding, "> 8.5" is equivalent to ">= 9" over the domain
comment|// of integers
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|,
name|intLiteral8point5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">= 9"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|,
name|intLiteral8point5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">= 9"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|UPPER
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|,
name|intLiteral8point5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"< 9"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|UPPER
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|,
name|intLiteral8point5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"< 9"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullEndpoint
parameter_list|()
block|{
name|SargMutableEndpoint
name|ep
init|=
name|sargFactory
operator|.
name|newEndpoint
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|ep
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|,
name|sargFactory
operator|.
name|newNullLiteral
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"> null"
argument_list|,
name|ep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTouchingEndpoint
parameter_list|()
block|{
name|SargMutableEndpoint
name|ep1
init|=
name|sargFactory
operator|.
name|newEndpoint
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|SargMutableEndpoint
name|ep2
init|=
name|sargFactory
operator|.
name|newEndpoint
argument_list|(
name|intType
argument_list|)
decl_stmt|;
comment|// "-infinity" does not touch "-infinity" (seems like something you
comment|// could argue for hours late at night in a college dorm)
name|assertFalse
argument_list|(
name|ep1
operator|.
name|isTouching
argument_list|(
name|ep2
argument_list|)
argument_list|)
expr_stmt|;
comment|// "< 7" does not touch "> 7"
name|ep1
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|UPPER
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|ep2
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ep1
operator|.
name|isTouching
argument_list|(
name|ep2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ep1
operator|.
name|compareTo
argument_list|(
name|ep2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// "< 7" does touch ">= 7"
name|ep2
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ep1
operator|.
name|isTouching
argument_list|(
name|ep2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ep1
operator|.
name|compareTo
argument_list|(
name|ep2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// "<= 7" does touch ">= 7"
name|ep1
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ep1
operator|.
name|isTouching
argument_list|(
name|ep2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ep1
operator|.
name|compareTo
argument_list|(
name|ep2
argument_list|)
argument_list|)
expr_stmt|;
comment|// "<= 7" does not touch ">= 490"
name|ep2
operator|.
name|setFinite
argument_list|(
name|SargBoundType
operator|.
name|LOWER
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|,
name|intLiteral490
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ep1
operator|.
name|isTouching
argument_list|(
name|ep2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ep1
operator|.
name|compareTo
argument_list|(
name|ep2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultIntervalExpr
parameter_list|()
block|{
name|SargIntervalExpr
name|interval
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(-infinity, +infinity)"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPointExpr
parameter_list|()
block|{
name|SargIntervalExpr
name|interval
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|interval
operator|.
name|setPoint
argument_list|(
name|intLiteral7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|interval
operator|.
name|isPoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isUnconstrained
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7]"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7]"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeIntervalExpr
parameter_list|()
block|{
name|SargIntervalExpr
name|interval
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|interval
operator|.
name|setLower
argument_list|(
name|intLiteral7
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|interval
operator|.
name|setUpper
argument_list|(
name|intLiteral490
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7, 490]"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7, 490]"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|interval
operator|.
name|unsetLower
argument_list|()
expr_stmt|;
name|assertRange
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-infinity, 490]"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(null, 490]"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|interval
operator|.
name|setLower
argument_list|(
name|intLiteral7
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|interval
operator|.
name|unsetUpper
argument_list|()
expr_stmt|;
name|assertRange
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7, +infinity)"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7, +infinity)"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|interval
operator|.
name|setUpper
argument_list|(
name|intLiteral490
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7, 490)"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[7, 490)"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|interval
operator|.
name|setLower
argument_list|(
name|intLiteral7
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(7, 490)"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(7, 490)"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertRange
parameter_list|(
name|SargIntervalExpr
name|interval
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|interval
operator|.
name|isPoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isUnconstrained
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullExpr
parameter_list|()
block|{
name|SargIntervalExpr
name|interval
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|interval
operator|.
name|setNull
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|interval
operator|.
name|isPoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isUnconstrained
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[null] NULL_MATCHES_NULL"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[null]"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyExpr
parameter_list|()
block|{
name|SargIntervalExpr
name|interval
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|interval
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|interval
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isUnconstrained
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"()"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"()"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnconstrainedExpr
parameter_list|()
block|{
name|SargIntervalExpr
name|interval
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|interval
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isUnconstrained
argument_list|()
argument_list|)
expr_stmt|;
name|interval
operator|.
name|setUnconstrained
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|interval
operator|.
name|isUnconstrained
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|interval
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-infinity, +infinity)"
argument_list|,
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-infinity, +infinity)"
argument_list|,
name|interval
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetExpr
parameter_list|()
block|{
name|SargIntervalExpr
name|interval1
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|SargIntervalExpr
name|interval2
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|interval1
operator|.
name|setLower
argument_list|(
name|intLiteral7
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|interval2
operator|.
name|setUpper
argument_list|(
name|intLiteral490
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|SargSetExpr
name|intersectExpr
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|INTERSECTION
argument_list|)
decl_stmt|;
name|intersectExpr
operator|.
name|addChild
argument_list|(
name|interval1
argument_list|)
expr_stmt|;
name|intersectExpr
operator|.
name|addChild
argument_list|(
name|interval2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"INTERSECTION( (7, +infinity) (-infinity, 490) )"
argument_list|,
name|intersectExpr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(7, 490)"
argument_list|,
name|intersectExpr
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SargSetExpr
name|unionExpr
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|UNION
argument_list|)
decl_stmt|;
name|unionExpr
operator|.
name|addChild
argument_list|(
name|interval1
argument_list|)
expr_stmt|;
name|unionExpr
operator|.
name|addChild
argument_list|(
name|interval2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (7, +infinity) (-infinity, 490) )"
argument_list|,
name|unionExpr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(null, +infinity)"
argument_list|,
name|unionExpr
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// NOTE jvs 17-Apr-2006:  See
comment|// http://issues.eigenbase.org/browse/LDB-60) for why the
comment|// expected result is what it is.
name|SargSetExpr
name|complementExpr
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|COMPLEMENT
argument_list|)
decl_stmt|;
name|complementExpr
operator|.
name|addChild
argument_list|(
name|interval1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COMPLEMENT( (7, +infinity) )"
argument_list|,
name|complementExpr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(null, 7]"
argument_list|,
name|complementExpr
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplement
parameter_list|()
block|{
comment|// test
comment|//   complement ( union (interval1, interval2) )
comment|// it is evaluated as
comment|//   intersect (complement(interval1), complement(interval2))
comment|//
comment|// commonly seen in sql expressins like
comment|//   not (a in ( list))
comment|// or
comment|//   a not in (list)
comment|// (rchen 2006-08-18) note the latter does not have SQL support yet.
comment|//
name|SargIntervalExpr
name|interval1
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|SargIntervalExpr
name|interval2
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|SargIntervalExpr
name|interval3
init|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|intType
argument_list|)
decl_stmt|;
name|interval1
operator|.
name|setLower
argument_list|(
name|intLiteral7
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|interval1
operator|.
name|setUpper
argument_list|(
name|intLiteral7
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|interval2
operator|.
name|setLower
argument_list|(
name|intLiteral490
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|interval2
operator|.
name|setUpper
argument_list|(
name|intLiteral490
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|interval3
operator|.
name|setUpper
argument_list|(
name|intLiteral490
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
comment|// REVIEW (ruchen 2006-08-18) lower and upper extremems are different
comment|// in the complement result:
comment|//     the lower is null while the upper is +infinity.
comment|// Not sure why the lower needs to be null.
name|SargSetExpr
name|complementExpr1
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|COMPLEMENT
argument_list|)
decl_stmt|;
name|complementExpr1
operator|.
name|addChild
argument_list|(
name|interval1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (null, 7) (7, +infinity) )"
argument_list|,
name|complementExpr1
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SargSetExpr
name|complementExpr2
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|COMPLEMENT
argument_list|)
decl_stmt|;
name|complementExpr2
operator|.
name|addChild
argument_list|(
name|interval2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (null, 490) (490, +infinity) )"
argument_list|,
name|complementExpr2
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SargSetExpr
name|intersectExpr1
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|INTERSECTION
argument_list|)
decl_stmt|;
name|intersectExpr1
operator|.
name|addChild
argument_list|(
name|complementExpr1
argument_list|)
expr_stmt|;
name|intersectExpr1
operator|.
name|addChild
argument_list|(
name|complementExpr2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (null, 7) (7, 490) (490, +infinity) )"
argument_list|,
name|intersectExpr1
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SargSetExpr
name|intersectExpr2
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|INTERSECTION
argument_list|)
decl_stmt|;
name|intersectExpr2
operator|.
name|addChild
argument_list|(
name|complementExpr2
argument_list|)
expr_stmt|;
name|intersectExpr2
operator|.
name|addChild
argument_list|(
name|complementExpr1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (null, 7) (7, 490) (490, +infinity) )"
argument_list|,
name|intersectExpr2
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SargSetExpr
name|intersectExpr3
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|INTERSECTION
argument_list|)
decl_stmt|;
name|intersectExpr3
operator|.
name|addChild
argument_list|(
name|complementExpr1
argument_list|)
expr_stmt|;
name|intersectExpr3
operator|.
name|addChild
argument_list|(
name|interval3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (null, 7) (7, 490) )"
argument_list|,
name|intersectExpr3
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SargSetExpr
name|unionExpr1
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|UNION
argument_list|)
decl_stmt|;
name|unionExpr1
operator|.
name|addChild
argument_list|(
name|interval1
argument_list|)
expr_stmt|;
name|unionExpr1
operator|.
name|addChild
argument_list|(
name|interval2
argument_list|)
expr_stmt|;
name|SargSetExpr
name|complementExpr3
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|COMPLEMENT
argument_list|)
decl_stmt|;
name|complementExpr3
operator|.
name|addChild
argument_list|(
name|unionExpr1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (null, 7) (7, 490) (490, +infinity) )"
argument_list|,
name|complementExpr3
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SargSetExpr
name|unionExpr2
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|UNION
argument_list|)
decl_stmt|;
name|unionExpr2
operator|.
name|addChild
argument_list|(
name|interval2
argument_list|)
expr_stmt|;
name|unionExpr2
operator|.
name|addChild
argument_list|(
name|interval1
argument_list|)
expr_stmt|;
name|SargSetExpr
name|complementExpr4
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|intType
argument_list|,
name|SargSetOperator
operator|.
name|COMPLEMENT
argument_list|)
decl_stmt|;
name|complementExpr4
operator|.
name|addChild
argument_list|(
name|unionExpr2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (null, 7) (7, 490) (490, +infinity) )"
argument_list|,
name|complementExpr4
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnion
parameter_list|()
block|{
name|exprs
operator|=
operator|new
name|SargIntervalExpr
index|[
literal|11
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
operator|++
name|i
control|)
block|{
name|exprs
index|[
name|i
index|]
operator|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|stringType
argument_list|)
expr_stmt|;
block|}
name|exprs
index|[
literal|0
index|]
operator|.
name|setPoint
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|AQUARIUS
argument_list|)
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|1
index|]
operator|.
name|setPoint
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|LEO
argument_list|)
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|2
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|CAPRICORN
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|3
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|4
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|5
index|]
operator|.
name|setNull
argument_list|()
expr_stmt|;
name|exprs
index|[
literal|6
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|6
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|PISCES
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|7
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|7
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|SCORPIO
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|8
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|ARIES
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|8
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|9
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|ARIES
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|9
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|10
index|]
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|checkUnion
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|"[null, 'CAPRICORN']"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|"[null, 'CAPRICORN']"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|"UNION( [null] ['GEMINI', 'SCORPIO'] )"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|"UNION( [null] ['ARIES', +infinity) )"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|9
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|"UNION( [null] ['ARIES', +infinity) )"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|"['ARIES', 'SCORPIO']"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|,
literal|10
argument_list|,
literal|"['GEMINI', 'SCORPIO']"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|"UNION( [null] ['AQUARIUS'] ['GEMINI', 'PISCES'] )"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|,
literal|5
argument_list|,
literal|"UNION( [null] ['ARIES', 'GEMINI') )"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|9
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|"['ARIES', 'SCORPIO']"
argument_list|)
expr_stmt|;
name|checkUnion
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|"UNION( ['ARIES', 'GEMINI') ('GEMINI', +infinity) )"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntersection
parameter_list|()
block|{
name|exprs
operator|=
operator|new
name|SargIntervalExpr
index|[
literal|11
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
operator|++
name|i
control|)
block|{
name|exprs
index|[
name|i
index|]
operator|=
name|sargFactory
operator|.
name|newIntervalExpr
argument_list|(
name|stringType
argument_list|)
expr_stmt|;
block|}
name|exprs
index|[
literal|0
index|]
operator|.
name|setUnconstrained
argument_list|()
expr_stmt|;
name|exprs
index|[
literal|1
index|]
operator|.
name|setPoint
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|LEO
argument_list|)
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|2
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|CAPRICORN
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|3
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|CANCER
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|4
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|5
index|]
operator|.
name|setNull
argument_list|()
expr_stmt|;
name|exprs
index|[
literal|6
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|6
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|PISCES
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|7
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|7
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|SCORPIO
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|8
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|ARIES
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|8
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|9
index|]
operator|.
name|setLower
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|ARIES
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|9
index|]
operator|.
name|setUpper
argument_list|(
name|createCoordinate
argument_list|(
name|Zodiac
operator|.
name|GEMINI
argument_list|)
argument_list|,
name|SargStrictness
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|exprs
index|[
literal|10
index|]
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|checkIntersection
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|"('CANCER', 'CAPRICORN']"
argument_list|)
expr_stmt|;
name|checkIntersection
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|"('CANCER', 'CAPRICORN']"
argument_list|)
expr_stmt|;
name|checkIntersection
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
literal|"['GEMINI', 'PISCES']"
argument_list|)
expr_stmt|;
name|checkIntersection
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|"['GEMINI']"
argument_list|)
expr_stmt|;
name|checkIntersection
argument_list|(
literal|8
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|"['GEMINI']"
argument_list|)
expr_stmt|;
name|checkIntersection
argument_list|(
literal|9
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|"()"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkUnion
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|,
name|int
name|i3
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|checkSetOp
argument_list|(
name|SargSetOperator
operator|.
name|UNION
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIntersection
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|,
name|int
name|i3
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|checkSetOp
argument_list|(
name|SargSetOperator
operator|.
name|INTERSECTION
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSetOp
parameter_list|(
name|SargSetOperator
name|setOp
parameter_list|,
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|,
name|int
name|i3
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|SargSetExpr
name|setExpr
init|=
name|sargFactory
operator|.
name|newSetExpr
argument_list|(
name|stringType
argument_list|,
name|setOp
argument_list|)
decl_stmt|;
name|setExpr
operator|.
name|addChild
argument_list|(
name|exprs
index|[
name|i1
index|]
argument_list|)
expr_stmt|;
name|setExpr
operator|.
name|addChild
argument_list|(
name|exprs
index|[
name|i2
index|]
argument_list|)
expr_stmt|;
name|setExpr
operator|.
name|addChild
argument_list|(
name|exprs
index|[
name|i3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|setExpr
operator|.
name|evaluate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RexNode
name|createCoordinate
parameter_list|(
name|Zodiac
name|z
parameter_list|)
block|{
return|return
name|sargFactory
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeLiteral
argument_list|(
name|z
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRexAnalyzer
parameter_list|()
block|{
name|SargRexAnalyzer
name|rexAnalyzer
init|=
name|sargFactory
operator|.
name|newRexAnalyzer
argument_list|()
decl_stmt|;
name|RexNode
name|pred1
decl_stmt|;
name|RexNode
name|pred2
decl_stmt|;
name|RexNode
name|pred3
decl_stmt|;
name|SargBinding
name|binding
decl_stmt|;
name|RexNode
name|inputRef8
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|RexNode
name|inputRef9
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// test variable before literal
name|pred1
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|inputRef8
argument_list|,
name|intLiteral7
argument_list|)
expr_stmt|;
name|binding
operator|=
name|rexAnalyzer
operator|.
name|analyze
argument_list|(
name|pred1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-infinity, 7)"
argument_list|,
name|binding
operator|.
name|getExpr
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test literal before variable
name|pred2
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|,
name|intLiteral490
argument_list|,
name|inputRef9
argument_list|)
expr_stmt|;
name|binding
operator|=
name|rexAnalyzer
operator|.
name|analyze
argument_list|(
name|pred2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-infinity, 490]"
argument_list|,
name|binding
operator|.
name|getExpr
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test AND
name|pred3
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|pred1
argument_list|,
name|pred2
argument_list|)
expr_stmt|;
name|binding
operator|=
name|rexAnalyzer
operator|.
name|analyze
argument_list|(
name|pred3
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"INTERSECTION( (-infinity, 7) (-infinity, 490] )"
argument_list|,
name|binding
operator|.
name|getExpr
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test OR
name|pred3
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|pred1
argument_list|,
name|pred2
argument_list|)
expr_stmt|;
name|binding
operator|=
name|rexAnalyzer
operator|.
name|analyze
argument_list|(
name|pred3
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UNION( (-infinity, 7) (-infinity, 490] )"
argument_list|,
name|binding
operator|.
name|getExpr
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test NOT
name|pred3
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|pred1
argument_list|)
expr_stmt|;
name|binding
operator|=
name|rexAnalyzer
operator|.
name|analyze
argument_list|(
name|pred3
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COMPLEMENT( (-infinity, 7) )"
argument_list|,
name|binding
operator|.
name|getExpr
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// This one should fail:  two variables
name|pred1
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|inputRef8
argument_list|,
name|inputRef9
argument_list|)
expr_stmt|;
name|binding
operator|=
name|rexAnalyzer
operator|.
name|analyze
argument_list|(
name|pred1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
comment|// This one should fail:  two literals
name|pred1
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|intLiteral7
argument_list|,
name|intLiteral490
argument_list|)
expr_stmt|;
name|binding
operator|=
name|rexAnalyzer
operator|.
name|analyze
argument_list|(
name|pred1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SargTest.java
end_comment

end_unit

