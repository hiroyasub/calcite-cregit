begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|EigenbaseTestCase
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|protected
name|EigenbaseTestCase
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
specifier|static
name|void
name|assertEqualsDeep
parameter_list|(
name|Object
name|o
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|o
operator|instanceof
name|Object
index|[]
operator|)
operator|&&
operator|(
name|o2
operator|instanceof
name|Object
index|[]
operator|)
condition|)
block|{
name|Object
index|[]
name|a
init|=
operator|(
name|Object
index|[]
operator|)
name|o
decl_stmt|;
name|Object
index|[]
name|a2
init|=
operator|(
name|Object
index|[]
operator|)
name|o2
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|a
operator|.
name|length
argument_list|,
name|a2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEqualsDeep
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|a2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|(
name|o
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|o2
operator|!=
literal|null
operator|)
operator|&&
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
operator|(
name|o
operator|.
name|getClass
argument_list|()
operator|==
name|o2
operator|.
name|getClass
argument_list|()
operator|)
condition|)
block|{
name|boolean
name|eq
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|boolean
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|boolean
index|[]
operator|)
name|o
argument_list|,
operator|(
name|boolean
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|o
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|char
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|char
index|[]
operator|)
name|o
argument_list|,
operator|(
name|char
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|short
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|short
index|[]
operator|)
name|o
argument_list|,
operator|(
name|short
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|int
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|int
index|[]
operator|)
name|o
argument_list|,
operator|(
name|int
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|long
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|long
index|[]
operator|)
name|o
argument_list|,
operator|(
name|long
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|float
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|float
index|[]
operator|)
name|o
argument_list|,
operator|(
name|float
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|double
index|[]
condition|)
block|{
name|eq
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|double
index|[]
operator|)
name|o
argument_list|,
operator|(
name|double
index|[]
operator|)
name|o2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eq
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
condition|)
block|{
name|fail
argument_list|(
literal|"arrays not equal"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// will handle the case 'o instanceof int[]' ok, because
comment|// shallow comparison is ok for ints
name|Assert
operator|.
name|assertEquals
argument_list|(
name|o
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Fails if<code>throwable</code> is null, or if its message does not    * contain the string<code>pattern</code>.    */
specifier|protected
name|void
name|assertThrowableContains
parameter_list|(
name|Throwable
name|throwable
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|throwable
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"expected exception containing pattern<"
operator|+
name|pattern
operator|+
literal|"> but got none"
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|throwable
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|message
operator|==
literal|null
operator|)
operator|||
operator|(
name|message
operator|.
name|indexOf
argument_list|(
name|pattern
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"expected pattern<"
operator|+
name|pattern
operator|+
literal|"> in exception<"
operator|+
name|throwable
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns an iterator over the elements of an array.    */
specifier|public
specifier|static
name|Iterator
name|makeIterator
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|a
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * Checks that an iterator returns the same objects as the contents of an    * array.    */
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|Iterator
name|iterator
parameter_list|,
name|Object
index|[]
name|a
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|list
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that a list has the same contents as an array.    */
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|List
name|list
parameter_list|,
name|Object
index|[]
name|a
parameter_list|)
block|{
name|Object
index|[]
name|b
init|=
name|list
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that two arrays are equal.    */
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|Object
index|[]
name|expected
parameter_list|,
name|Object
index|[]
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|length
operator|==
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|Object
index|[]
name|expected
parameter_list|,
name|Object
name|actual
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// They're different. Let assertEquals(Object,Object) give the
comment|// error.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End EigenbaseTestCase.java
end_comment

end_unit

