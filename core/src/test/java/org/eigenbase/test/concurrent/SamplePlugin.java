begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* // Licensed to Julian Hyde under one or more contributor license // agreements. See the NOTICE file distributed with this work for // additional information regarding copyright ownership. // // Julian Hyde licenses this file to you under the Apache License, // Version 2.0 (the "License"); you may not use this file except in // compliance with the License. You may obtain a copy of the License at: // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an "AS IS" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|eigenbase
operator|.
name|test
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Sample mtsql plugin. To use add at start of script  * "@plugin org.eigenbase.test.concurrent.SamplePlugin".  After doing a prepare  * you can then do "@describeResultSet" to show columns returned by query.  */
end_comment

begin_class
specifier|public
class|class
name|SamplePlugin
extends|extends
name|ConcurrentTestPlugin
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIBE_RESULT_SET_CMD
init|=
literal|"@describeResultSet"
decl_stmt|;
specifier|public
name|ConcurrentTestPluginCommand
name|getCommandFor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|params
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DESCRIBE_RESULT_SET_CMD
argument_list|)
condition|)
block|{
return|return
operator|new
name|DescribeResultSet
argument_list|()
return|;
block|}
assert|assert
operator|(
literal|false
operator|)
assert|;
return|return
literal|null
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getSupportedThreadCommands
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|DESCRIBE_RESULT_SET_CMD
block|}
argument_list|)
return|;
block|}
specifier|static
class|class
name|DescribeResultSet
implements|implements
name|ConcurrentTestPluginCommand
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|TestContext
name|testContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Statement
name|stmt
init|=
operator|(
name|PreparedStatement
operator|)
name|testContext
operator|.
name|getCurrentStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|stmt
operator|==
literal|null
condition|)
block|{
name|testContext
operator|.
name|storeMessage
argument_list|(
literal|"No current statement"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
operator|(
name|stmt
operator|instanceof
name|PreparedStatement
operator|)
condition|)
block|{
block|}
else|else
block|{
try|try
block|{
name|ResultSetMetaData
name|metadata
init|=
operator|(
operator|(
name|PreparedStatement
operator|)
name|stmt
operator|)
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|metadata
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|testContext
operator|.
name|storeMessage
argument_list|(
name|metadata
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
operator|+
literal|": "
operator|+
name|metadata
operator|.
name|getColumnTypeName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End SamplePlugin.java
end_comment

end_unit

