begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptMaterialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptMaterializations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|SqlToRelTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|isLinux
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/** Tests trimming unused fields before materialized view matching. */
end_comment

begin_class
specifier|public
class|class
name|NormalizationTrimFieldTest
extends|extends
name|SqlToRelTestBase
block|{
specifier|public
specifier|static
name|Frameworks
operator|.
name|ConfigBuilder
name|config
parameter_list|()
block|{
specifier|final
name|SchemaPlus
name|rootSchema
init|=
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
literal|"mv0"
argument_list|,
operator|new
name|AbstractTable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"deptno"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"count_sal"
argument_list|,
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|Config
operator|.
name|DEFAULT
argument_list|)
operator|.
name|defaultSchema
argument_list|(
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|rootSchema
argument_list|,
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|SCOTT_WITH_TEMPORAL
argument_list|)
argument_list|)
operator|.
name|traitDefs
argument_list|(
operator|(
name|List
argument_list|<
name|RelTraitDef
argument_list|>
operator|)
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testMVTrimUnusedFiled
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LogicalProject
name|project
init|=
operator|(
name|LogicalProject
operator|)
name|relBuilder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|relBuilder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|LogicalAggregate
name|aggregate
init|=
operator|(
name|LogicalAggregate
operator|)
name|relBuilder
operator|.
name|push
argument_list|(
name|project
argument_list|)
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|relBuilder
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|"DEPTNO"
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|count
argument_list|(
name|relBuilder
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|"SAL"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|groupSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|count
init|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AggregateCall
name|call
init|=
name|AggregateCall
operator|.
name|create
argument_list|(
name|count
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|count
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|count
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|count
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3
argument_list|)
argument_list|,
name|count
operator|.
name|filterArg
argument_list|,
name|count
operator|.
name|collation
argument_list|,
name|count
operator|.
name|getType
argument_list|()
argument_list|,
name|count
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|query
init|=
name|LogicalAggregate
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|aggregate
operator|.
name|getHints
argument_list|()
argument_list|,
name|groupSet
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|groupSet
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|call
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|target
init|=
name|aggregate
decl_stmt|;
specifier|final
name|RelNode
name|replacement
init|=
name|relBuilder
operator|.
name|scan
argument_list|(
literal|"mv0"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelOptMaterialization
name|relOptMaterialization
init|=
operator|new
name|RelOptMaterialization
argument_list|(
name|replacement
argument_list|,
name|target
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"mv0"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|<
name|RelOptMaterialization
argument_list|>
argument_list|>
argument_list|>
name|relOptimized
init|=
name|RelOptMaterializations
operator|.
name|useMaterializedViews
argument_list|(
name|query
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|relOptMaterialization
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|optimized
init|=
literal|""
operator|+
literal|"LogicalProject(deptno=[CAST($0):TINYINT], count_sal=[$1])\n"
operator|+
literal|"  LogicalTableScan(table=[[mv0]])\n"
decl_stmt|;
specifier|final
name|String
name|relOptimizedStr
init|=
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|relOptimized
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|isLinux
argument_list|(
name|optimized
argument_list|)
operator|.
name|matches
argument_list|(
name|relOptimizedStr
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

