begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptMaterialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptMaterializations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|SubstitutionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|SubstitutionVisitor
operator|.
name|UnifyRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|mutable
operator|.
name|MutableCalc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|SqlToRelTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NlsString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|isLinux
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link RelOptMaterializations#useMaterializedViews}.  */
end_comment

begin_class
specifier|public
class|class
name|CustomMaterializedViewRecognitionRuleTest
extends|extends
name|SqlToRelTestBase
block|{
specifier|public
specifier|static
name|Frameworks
operator|.
name|ConfigBuilder
name|config
parameter_list|()
block|{
specifier|final
name|SchemaPlus
name|rootSchema
init|=
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
literal|"mv0"
argument_list|,
operator|new
name|AbstractTable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"empno"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"ename"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"job"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"mgr"
argument_list|,
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
operator|.
name|add
argument_list|(
literal|"hiredate"
argument_list|,
name|SqlTypeName
operator|.
name|DATE
argument_list|)
operator|.
name|add
argument_list|(
literal|"sal"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
operator|.
name|add
argument_list|(
literal|"comm"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
operator|.
name|add
argument_list|(
literal|"deptno"
argument_list|,
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|Config
operator|.
name|DEFAULT
argument_list|)
operator|.
name|defaultSchema
argument_list|(
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|rootSchema
argument_list|,
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|SCOTT_WITH_TEMPORAL
argument_list|)
argument_list|)
operator|.
name|traitDefs
argument_list|(
operator|(
name|List
argument_list|<
name|RelTraitDef
argument_list|>
operator|)
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testCushionLikeOperatorRecognitionRule
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|query
init|=
name|relBuilder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|filter
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LIKE
argument_list|,
name|relBuilder
operator|.
name|field
argument_list|(
literal|1
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|"ABCD%"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|target
init|=
name|relBuilder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|filter
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LIKE
argument_list|,
name|relBuilder
operator|.
name|field
argument_list|(
literal|1
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|"ABC%"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|replacement
init|=
name|relBuilder
operator|.
name|scan
argument_list|(
literal|"mv0"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelOptMaterialization
name|relOptMaterialization
init|=
operator|new
name|RelOptMaterialization
argument_list|(
name|replacement
argument_list|,
name|target
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"mv0"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|UnifyRule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|addAll
argument_list|(
name|SubstitutionVisitor
operator|.
name|DEFAULT_RULES
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|CustomizedMaterializationRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RelNode
argument_list|,
name|List
argument_list|<
name|RelOptMaterialization
argument_list|>
argument_list|>
argument_list|>
name|relOptimized
init|=
name|RelOptMaterializations
operator|.
name|useMaterializedViews
argument_list|(
name|query
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|relOptMaterialization
argument_list|)
argument_list|,
name|rules
argument_list|)
decl_stmt|;
specifier|final
name|String
name|optimized
init|=
literal|""
operator|+
literal|"LogicalCalc(expr#0..7=[{inputs}], expr#8=['ABCD%'], expr#9=[LIKE($t1, $t8)], proj#0."
operator|+
literal|".7=[{exprs}], $condition=[$t9])\n"
operator|+
literal|"  LogicalProject(empno=[CAST($0):SMALLINT NOT NULL], ename=[CAST($1):VARCHAR(10)], "
operator|+
literal|"job=[CAST($2):VARCHAR(9)], mgr=[CAST($3):SMALLINT], hiredate=[CAST($4):DATE], "
operator|+
literal|"sal=[CAST($5):DECIMAL(7, 2)], comm=[CAST($6):DECIMAL(7, 2)], deptno=[CAST($7)"
operator|+
literal|":TINYINT])\n"
operator|+
literal|"    LogicalTableScan(table=[[mv0]])\n"
decl_stmt|;
specifier|final
name|String
name|relOptimizedStr
init|=
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|relOptimized
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|relOptimizedStr
argument_list|,
name|isLinux
argument_list|(
name|optimized
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A customized materialization rule, which match expression of 'LIKE'    * and match by compensation.    */
specifier|private
specifier|static
class|class
name|CustomizedMaterializationRule
extends|extends
name|SubstitutionVisitor
operator|.
name|AbstractUnifyRule
block|{
specifier|public
specifier|static
specifier|final
name|CustomizedMaterializationRule
name|INSTANCE
init|=
operator|new
name|CustomizedMaterializationRule
argument_list|()
decl_stmt|;
specifier|private
name|CustomizedMaterializationRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|MutableCalc
operator|.
name|class
argument_list|,
name|query
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|MutableCalc
operator|.
name|class
argument_list|,
name|target
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SubstitutionVisitor
operator|.
name|UnifyResult
name|apply
parameter_list|(
name|SubstitutionVisitor
operator|.
name|UnifyRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|MutableCalc
name|query
init|=
operator|(
name|MutableCalc
operator|)
name|call
operator|.
name|query
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|queryExplained
init|=
name|SubstitutionVisitor
operator|.
name|explainCalc
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|queryCond
init|=
name|queryExplained
operator|.
name|left
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|queryProjs
init|=
name|queryExplained
operator|.
name|right
decl_stmt|;
specifier|final
name|MutableCalc
name|target
init|=
operator|(
name|MutableCalc
operator|)
name|call
operator|.
name|target
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|targetExplained
init|=
name|SubstitutionVisitor
operator|.
name|explainCalc
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|targetCond
init|=
name|targetExplained
operator|.
name|left
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|targetProjs
init|=
name|targetExplained
operator|.
name|right
decl_stmt|;
specifier|final
name|List
name|parsedQ
init|=
name|parseLikeCondition
argument_list|(
name|queryCond
argument_list|)
decl_stmt|;
specifier|final
name|List
name|parsedT
init|=
name|parseLikeCondition
argument_list|(
name|targetCond
argument_list|)
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|isIdentity
argument_list|(
name|queryProjs
argument_list|,
name|query
operator|.
name|getInput
argument_list|()
operator|.
name|rowType
argument_list|)
operator|&&
name|RexUtil
operator|.
name|isIdentity
argument_list|(
name|targetProjs
argument_list|,
name|target
operator|.
name|getInput
argument_list|()
operator|.
name|rowType
argument_list|)
operator|&&
name|parsedQ
operator|!=
literal|null
operator|&&
name|parsedT
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parsedQ
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|parsedT
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|literalQ
init|=
operator|(
operator|(
name|NlsString
operator|)
name|parsedQ
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|literalT
init|=
operator|(
operator|(
name|NlsString
operator|)
name|parsedT
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|literalQ
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
operator|&&
name|literalT
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
operator|&&
operator|!
name|literalQ
operator|.
name|equals
argument_list|(
name|literalT
argument_list|)
operator|&&
name|literalQ
operator|.
name|startsWith
argument_list|(
name|literalT
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|literalT
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|call
operator|.
name|result
argument_list|(
name|MutableCalc
operator|.
name|of
argument_list|(
name|target
argument_list|,
name|query
operator|.
name|program
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
name|parseLikeCondition
parameter_list|(
name|RexNode
name|rexNode
parameter_list|)
block|{
if|if
condition|(
name|rexNode
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|rexCall
init|=
operator|(
name|RexCall
operator|)
name|rexNode
decl_stmt|;
if|if
condition|(
name|rexCall
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LIKE
operator|&&
name|rexCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
name|rexCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
operator|(
name|RexLiteral
operator|)
operator|(
name|rexCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

