begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Calc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|HintPredicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|HintStrategyTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|RelHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|CalcMergeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|FilterToCalcRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|ProjectToCalcRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Programs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|hasTree
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
class|class
name|RelFieldTrimmerTest
block|{
specifier|public
specifier|static
name|Frameworks
operator|.
name|ConfigBuilder
name|config
parameter_list|()
block|{
specifier|final
name|SchemaPlus
name|rootSchema
init|=
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|Config
operator|.
name|DEFAULT
argument_list|)
operator|.
name|defaultSchema
argument_list|(
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|rootSchema
argument_list|,
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|SCOTT_WITH_TEMPORAL
argument_list|)
argument_list|)
operator|.
name|traitDefs
argument_list|(
operator|(
name|List
argument_list|<
name|RelTraitDef
argument_list|>
operator|)
literal|null
argument_list|)
operator|.
name|programs
argument_list|(
name|Programs
operator|.
name|heuristicJoinOrder
argument_list|(
name|Programs
operator|.
name|RULE_SET
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testSortExchangeFieldTrimmer
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|sortExchange
argument_list|(
name|RelDistributions
operator|.
name|hash
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSortExchangeFieldTrimmerWhenProjectCannotBeMerged
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|sortExchange
argument_list|(
name|RelDistributions
operator|.
name|hash
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject(EMPNO=[$0])\n"
operator|+
literal|"  LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\n"
operator|+
literal|"    LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSortExchangeFieldTrimmerWithEmptyCollation
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|sortExchange
argument_list|(
name|RelDistributions
operator|.
name|hash
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalSortExchange(distribution=[hash[1]], collation=[[]])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSortExchangeFieldTrimmerWithSingletonDistribution
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|sortExchange
argument_list|(
name|RelDistributions
operator|.
name|SINGLETON
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalSortExchange(distribution=[single], collation=[[0]])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testExchangeFieldTrimmer
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|hash
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalExchange(distribution=[hash[1]])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testExchangeFieldTrimmerWhenProjectCannotBeMerged
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|hash
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject(EMPNO=[$0])\n"
operator|+
literal|"  LogicalExchange(distribution=[hash[1]])\n"
operator|+
literal|"    LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testExchangeFieldTrimmerWithSingletonDistribution
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|SINGLETON
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalExchange(distribution=[single])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-4055">[CALCITE-4055]    * RelFieldTrimmer loses hints</a>. */
annotation|@
name|Test
name|void
name|testJoinWithHints
parameter_list|()
block|{
specifier|final
name|RelHint
name|noHashJoinHint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"no_hash_join"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getCluster
argument_list|()
operator|.
name|setHintStrategies
argument_list|(
name|HintStrategyTable
operator|.
name|builder
argument_list|()
operator|.
name|hintStrategy
argument_list|(
literal|"no_hash_join"
argument_list|,
name|HintPredicates
operator|.
name|JOIN
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|original
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|scan
argument_list|(
literal|"DEPT"
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|"DEPTNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"DEPTNO"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hints
argument_list|(
name|noHashJoinHint
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DNAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|original
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject(ENAME=[$1], DNAME=[$4])\n"
operator|+
literal|"  LogicalJoin(condition=[=($2, $3)], joinType=[inner])\n"
operator|+
literal|"    LogicalProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, EMP]])\n"
operator|+
literal|"    LogicalProject(DEPTNO=[$0], DNAME=[$1])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, DEPT]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Join
argument_list|)
expr_stmt|;
specifier|final
name|Join
name|originalJoin
init|=
operator|(
name|Join
operator|)
name|original
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|originalJoin
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|noHashJoinHint
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trimmed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Join
argument_list|)
expr_stmt|;
specifier|final
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|trimmed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|join
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|noHashJoinHint
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-4055">[CALCITE-4055]    * RelFieldTrimmer loses hints</a>. */
annotation|@
name|Test
name|void
name|testAggregateWithHints
parameter_list|()
block|{
specifier|final
name|RelHint
name|aggHint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"resource"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getCluster
argument_list|()
operator|.
name|setHintStrategies
argument_list|(
name|HintStrategyTable
operator|.
name|builder
argument_list|()
operator|.
name|hintStrategy
argument_list|(
literal|"resource"
argument_list|,
name|HintPredicates
operator|.
name|AGGREGATE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|original
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"C"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hints
argument_list|(
name|aggHint
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|original
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalAggregate(group=[{1}], C=[COUNT($0)])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0], DEPTNO=[$7])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|original
operator|instanceof
name|Aggregate
argument_list|)
expr_stmt|;
specifier|final
name|Aggregate
name|originalAggregate
init|=
operator|(
name|Aggregate
operator|)
name|original
decl_stmt|;
name|assertTrue
argument_list|(
name|originalAggregate
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|aggHint
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trimmed
operator|instanceof
name|Aggregate
argument_list|)
expr_stmt|;
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|trimmed
decl_stmt|;
name|assertTrue
argument_list|(
name|aggregate
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|aggHint
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-4055">[CALCITE-4055]    * RelFieldTrimmer loses hints</a>. */
annotation|@
name|Test
name|void
name|testProjectWithHints
parameter_list|()
block|{
specifier|final
name|RelHint
name|projectHint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"resource"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getCluster
argument_list|()
operator|.
name|setHintStrategies
argument_list|(
name|HintStrategyTable
operator|.
name|builder
argument_list|()
operator|.
name|hintStrategy
argument_list|(
literal|"resource"
argument_list|,
name|HintPredicates
operator|.
name|PROJECT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|original
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|hints
argument_list|(
name|projectHint
argument_list|)
operator|.
name|sort
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|original
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalSort(sort0=[$0], dir0=[ASC])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Project
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|originalProject
init|=
operator|(
name|Project
operator|)
name|original
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|originalProject
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|projectHint
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trimmed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Project
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|trimmed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|project
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|projectHint
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testCalcFieldTrimmer0
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|SINGLETON
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepProgram
name|hepProgram
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|ProjectToCalcRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|hepProgram
argument_list|)
decl_stmt|;
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|relNode
init|=
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|relNode
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalCalc(expr#0..1=[{inputs}], proj#0..1=[{exprs}])\n"
operator|+
literal|"  LogicalExchange(distribution=[single])\n"
operator|+
literal|"    LogicalCalc(expr#0..1=[{inputs}], proj#0..1=[{exprs}])\n"
operator|+
literal|"      LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"        LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testCalcFieldTrimmer1
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|SINGLETON
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepProgram
name|hepProgram
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|ProjectToCalcRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|FilterToCalcRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|hepProgram
argument_list|)
decl_stmt|;
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|relNode
init|=
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|relNode
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalCalc(expr#0..2=[{inputs}], expr#3=[100], expr#4=[>($t0, $t3)], proj#0."
operator|+
literal|".2=[{exprs}], $condition=[$t4])\n"
operator|+
literal|"  LogicalExchange(distribution=[single])\n"
operator|+
literal|"    LogicalCalc(expr#0..2=[{inputs}], proj#0..2=[{exprs}])\n"
operator|+
literal|"      LogicalProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n"
operator|+
literal|"        LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testCalcFieldTrimmer2
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|SINGLETON
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepProgram
name|hepProgram
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|ProjectToCalcRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|FilterToCalcRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|CalcMergeRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|hepProgram
argument_list|)
decl_stmt|;
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|relNode
init|=
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|relNode
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalCalc(expr#0..1=[{inputs}], expr#2=[100], expr#3=[>($t0, $t2)], proj#0."
operator|+
literal|".1=[{exprs}], $condition=[$t3])\n"
operator|+
literal|"  LogicalExchange(distribution=[single])\n"
operator|+
literal|"    LogicalCalc(expr#0..1=[{inputs}], proj#0..1=[{exprs}])\n"
operator|+
literal|"      LogicalProject(EMPNO=[$0], ENAME=[$1])\n"
operator|+
literal|"        LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testCalcWithHints
parameter_list|()
block|{
specifier|final
name|RelHint
name|calcHint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"resource"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getCluster
argument_list|()
operator|.
name|setHintStrategies
argument_list|(
name|HintStrategyTable
operator|.
name|builder
argument_list|()
operator|.
name|hintStrategy
argument_list|(
literal|"resource"
argument_list|,
name|HintPredicates
operator|.
name|CALC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|original
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|hints
argument_list|(
name|calcHint
argument_list|)
operator|.
name|sort
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepProgram
name|hepProgram
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|ProjectToCalcRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|hepProgram
argument_list|)
decl_stmt|;
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|original
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|relNode
init|=
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
specifier|final
name|RelFieldTrimmer
name|fieldTrimmer
init|=
operator|new
name|RelFieldTrimmer
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|trimmed
init|=
name|fieldTrimmer
operator|.
name|trim
argument_list|(
name|relNode
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalCalc(expr#0=[{inputs}], EMPNO=[$t0])\n"
operator|+
literal|"  LogicalSort(sort0=[$0], dir0=[ASC])\n"
operator|+
literal|"    LogicalCalc(expr#0=[{inputs}], EMPNO=[$t0])\n"
operator|+
literal|"      LogicalProject(EMPNO=[$0])\n"
operator|+
literal|"        LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|trimmed
argument_list|,
name|hasTree
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Project
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|originalProject
init|=
operator|(
name|Project
operator|)
name|original
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|originalProject
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|calcHint
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|relNode
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Calc
argument_list|)
expr_stmt|;
specifier|final
name|Calc
name|originalCalc
init|=
operator|(
name|Calc
operator|)
name|relNode
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|originalCalc
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|calcHint
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trimmed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Calc
argument_list|)
expr_stmt|;
specifier|final
name|Calc
name|calc
init|=
operator|(
name|Calc
operator|)
name|trimmed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|calc
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|calcHint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

