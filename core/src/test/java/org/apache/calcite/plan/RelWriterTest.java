begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|ReflectiveSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelShuttleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|externalize
operator|.
name|RelJson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|externalize
operator|.
name|RelJsonReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|externalize
operator|.
name|RelJsonWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCalc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexWindowBounds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibraryOperators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlTrimFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|MockSqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|RelBuilderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|schemata
operator|.
name|hr
operator|.
name|HrSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|ParameterizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|params
operator|.
name|provider
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|isLinux
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link org.apache.calcite.rel.externalize.RelJson}.  */
end_comment

begin_class
class|class
name|RelWriterTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|XX
init|=
literal|"{\n"
operator|+
literal|"  \"rels\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"0\",\n"
operator|+
literal|"      \"relOp\": \"LogicalTableScan\",\n"
operator|+
literal|"      \"table\": [\n"
operator|+
literal|"        \"hr\",\n"
operator|+
literal|"        \"emps\"\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"inputs\": []\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"1\",\n"
operator|+
literal|"      \"relOp\": \"LogicalFilter\",\n"
operator|+
literal|"      \"condition\": {\n"
operator|+
literal|"        \"op\": {\n"
operator|+
literal|"          \"name\": \"=\",\n"
operator|+
literal|"          \"kind\": \"EQUALS\",\n"
operator|+
literal|"          \"syntax\": \"BINARY\"\n"
operator|+
literal|"        },\n"
operator|+
literal|"        \"operands\": [\n"
operator|+
literal|"          {\n"
operator|+
literal|"            \"input\": 1,\n"
operator|+
literal|"            \"name\": \"$1\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          {\n"
operator|+
literal|"            \"literal\": 10,\n"
operator|+
literal|"            \"type\": {\n"
operator|+
literal|"              \"type\": \"INTEGER\",\n"
operator|+
literal|"              \"nullable\": false\n"
operator|+
literal|"            }\n"
operator|+
literal|"          }\n"
operator|+
literal|"        ]\n"
operator|+
literal|"      }\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"2\",\n"
operator|+
literal|"      \"relOp\": \"LogicalAggregate\",\n"
operator|+
literal|"      \"group\": [\n"
operator|+
literal|"        0\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"aggs\": [\n"
operator|+
literal|"        {\n"
operator|+
literal|"          \"agg\": {\n"
operator|+
literal|"            \"name\": \"COUNT\",\n"
operator|+
literal|"            \"kind\": \"COUNT\",\n"
operator|+
literal|"            \"syntax\": \"FUNCTION_STAR\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"type\": {\n"
operator|+
literal|"            \"type\": \"BIGINT\",\n"
operator|+
literal|"            \"nullable\": false\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"distinct\": true,\n"
operator|+
literal|"          \"operands\": [\n"
operator|+
literal|"            1\n"
operator|+
literal|"          ],\n"
operator|+
literal|"          \"name\": \"c\"\n"
operator|+
literal|"        },\n"
operator|+
literal|"        {\n"
operator|+
literal|"          \"agg\": {\n"
operator|+
literal|"            \"name\": \"COUNT\",\n"
operator|+
literal|"            \"kind\": \"COUNT\",\n"
operator|+
literal|"            \"syntax\": \"FUNCTION_STAR\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"type\": {\n"
operator|+
literal|"            \"type\": \"BIGINT\",\n"
operator|+
literal|"            \"nullable\": false\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"distinct\": false,\n"
operator|+
literal|"          \"operands\": [],\n"
operator|+
literal|"          \"name\": \"d\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"      ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XXNULL
init|=
literal|"{\n"
operator|+
literal|"  \"rels\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"0\",\n"
operator|+
literal|"      \"relOp\": \"LogicalTableScan\",\n"
operator|+
literal|"      \"table\": [\n"
operator|+
literal|"        \"hr\",\n"
operator|+
literal|"        \"emps\"\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"inputs\": []\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"1\",\n"
operator|+
literal|"      \"relOp\": \"LogicalFilter\",\n"
operator|+
literal|"      \"condition\": {\n"
operator|+
literal|"        \"op\": {"
operator|+
literal|"            \"name\": \"=\",\n"
operator|+
literal|"            \"kind\": \"EQUALS\",\n"
operator|+
literal|"            \"syntax\": \"BINARY\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"        \"operands\": [\n"
operator|+
literal|"          {\n"
operator|+
literal|"            \"input\": 1,\n"
operator|+
literal|"            \"name\": \"$1\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          {\n"
operator|+
literal|"            \"literal\": null,\n"
operator|+
literal|"            \"type\": \"INTEGER\"\n"
operator|+
literal|"          }\n"
operator|+
literal|"        ]\n"
operator|+
literal|"      }\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"2\",\n"
operator|+
literal|"      \"relOp\": \"LogicalAggregate\",\n"
operator|+
literal|"      \"group\": [\n"
operator|+
literal|"        0\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"aggs\": [\n"
operator|+
literal|"        {\n"
operator|+
literal|"        \"agg\": {\n"
operator|+
literal|"            \"name\": \"COUNT\",\n"
operator|+
literal|"            \"kind\": \"COUNT\",\n"
operator|+
literal|"            \"syntax\": \"FUNCTION_STAR\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"type\": {\n"
operator|+
literal|"            \"type\": \"BIGINT\",\n"
operator|+
literal|"            \"nullable\": false\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"distinct\": true,\n"
operator|+
literal|"          \"operands\": [\n"
operator|+
literal|"            1\n"
operator|+
literal|"          ]\n"
operator|+
literal|"        },\n"
operator|+
literal|"        {\n"
operator|+
literal|"        \"agg\": {\n"
operator|+
literal|"            \"name\": \"COUNT\",\n"
operator|+
literal|"            \"kind\": \"COUNT\",\n"
operator|+
literal|"            \"syntax\": \"FUNCTION_STAR\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"type\": {\n"
operator|+
literal|"            \"type\": \"BIGINT\",\n"
operator|+
literal|"            \"nullable\": false\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"distinct\": false,\n"
operator|+
literal|"          \"operands\": []\n"
operator|+
literal|"        }\n"
operator|+
literal|"      ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XX2
init|=
literal|"{\n"
operator|+
literal|"  \"rels\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"0\",\n"
operator|+
literal|"      \"relOp\": \"LogicalTableScan\",\n"
operator|+
literal|"      \"table\": [\n"
operator|+
literal|"        \"hr\",\n"
operator|+
literal|"        \"emps\"\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"inputs\": []\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"1\",\n"
operator|+
literal|"      \"relOp\": \"LogicalProject\",\n"
operator|+
literal|"      \"fields\": [\n"
operator|+
literal|"        \"field0\",\n"
operator|+
literal|"        \"field1\",\n"
operator|+
literal|"        \"field2\"\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"exprs\": [\n"
operator|+
literal|"        {\n"
operator|+
literal|"          \"input\": 0,\n"
operator|+
literal|"          \"name\": \"$0\"\n"
operator|+
literal|"        },\n"
operator|+
literal|"        {\n"
operator|+
literal|"          \"op\": {\n"
operator|+
literal|"            \"name\": \"COUNT\",\n"
operator|+
literal|"            \"kind\": \"COUNT\",\n"
operator|+
literal|"            \"syntax\": \"FUNCTION_STAR\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"operands\": [\n"
operator|+
literal|"            {\n"
operator|+
literal|"              \"input\": 0,\n"
operator|+
literal|"              \"name\": \"$0\"\n"
operator|+
literal|"            }\n"
operator|+
literal|"          ],\n"
operator|+
literal|"          \"distinct\": false,\n"
operator|+
literal|"          \"type\": {\n"
operator|+
literal|"            \"type\": \"BIGINT\",\n"
operator|+
literal|"            \"nullable\": false\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"window\": {\n"
operator|+
literal|"            \"partition\": [\n"
operator|+
literal|"              {\n"
operator|+
literal|"                \"input\": 2,\n"
operator|+
literal|"                \"name\": \"$2\"\n"
operator|+
literal|"              }\n"
operator|+
literal|"            ],\n"
operator|+
literal|"            \"order\": [\n"
operator|+
literal|"              {\n"
operator|+
literal|"                \"expr\": {\n"
operator|+
literal|"                  \"input\": 1,\n"
operator|+
literal|"                  \"name\": \"$1\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"direction\": \"ASCENDING\",\n"
operator|+
literal|"                \"null-direction\": \"LAST\"\n"
operator|+
literal|"              }\n"
operator|+
literal|"            ],\n"
operator|+
literal|"            \"rows-lower\": {\n"
operator|+
literal|"              \"type\": \"UNBOUNDED_PRECEDING\"\n"
operator|+
literal|"            },\n"
operator|+
literal|"            \"rows-upper\": {\n"
operator|+
literal|"              \"type\": \"CURRENT_ROW\"\n"
operator|+
literal|"            }\n"
operator|+
literal|"          }\n"
operator|+
literal|"        },\n"
operator|+
literal|"        {\n"
operator|+
literal|"          \"op\": {\n"
operator|+
literal|"            \"name\": \"SUM\",\n"
operator|+
literal|"            \"kind\": \"SUM\",\n"
operator|+
literal|"            \"syntax\": \"FUNCTION\"\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"operands\": [\n"
operator|+
literal|"            {\n"
operator|+
literal|"              \"input\": 0,\n"
operator|+
literal|"              \"name\": \"$0\"\n"
operator|+
literal|"            }\n"
operator|+
literal|"          ],\n"
operator|+
literal|"          \"distinct\": false,\n"
operator|+
literal|"          \"type\": {\n"
operator|+
literal|"            \"type\": \"BIGINT\",\n"
operator|+
literal|"            \"nullable\": false\n"
operator|+
literal|"          },\n"
operator|+
literal|"          \"window\": {\n"
operator|+
literal|"            \"partition\": [\n"
operator|+
literal|"              {\n"
operator|+
literal|"                \"input\": 2,\n"
operator|+
literal|"                \"name\": \"$2\"\n"
operator|+
literal|"              }\n"
operator|+
literal|"            ],\n"
operator|+
literal|"            \"order\": [\n"
operator|+
literal|"              {\n"
operator|+
literal|"                \"expr\": {\n"
operator|+
literal|"                  \"input\": 1,\n"
operator|+
literal|"                  \"name\": \"$1\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"direction\": \"ASCENDING\",\n"
operator|+
literal|"                \"null-direction\": \"LAST\"\n"
operator|+
literal|"              }\n"
operator|+
literal|"            ],\n"
operator|+
literal|"            \"range-lower\": {\n"
operator|+
literal|"              \"type\": \"CURRENT_ROW\"\n"
operator|+
literal|"            },\n"
operator|+
literal|"            \"range-upper\": {\n"
operator|+
literal|"              \"type\": \"FOLLOWING\",\n"
operator|+
literal|"              \"offset\": {\n"
operator|+
literal|"                \"literal\": 1,\n"
operator|+
literal|"                \"type\": {\n"
operator|+
literal|"                  \"type\": \"INTEGER\",\n"
operator|+
literal|"                  \"nullable\": false\n"
operator|+
literal|"                }\n"
operator|+
literal|"              }\n"
operator|+
literal|"            }\n"
operator|+
literal|"          }\n"
operator|+
literal|"        }\n"
operator|+
literal|"      ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XX3
init|=
literal|"{\n"
operator|+
literal|"  \"rels\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"0\",\n"
operator|+
literal|"      \"relOp\": \"LogicalTableScan\",\n"
operator|+
literal|"      \"table\": [\n"
operator|+
literal|"        \"scott\",\n"
operator|+
literal|"        \"EMP\"\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"inputs\": []\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"1\",\n"
operator|+
literal|"      \"relOp\": \"LogicalSortExchange\",\n"
operator|+
literal|"      \"distribution\": {\n"
operator|+
literal|"        \"type\": \"HASH_DISTRIBUTED\",\n"
operator|+
literal|"        \"keys\": [\n"
operator|+
literal|"          0\n"
operator|+
literal|"        ]\n"
operator|+
literal|"      },\n"
operator|+
literal|"      \"collation\": [\n"
operator|+
literal|"        {\n"
operator|+
literal|"          \"field\": 0,\n"
operator|+
literal|"          \"direction\": \"ASCENDING\",\n"
operator|+
literal|"          \"nulls\": \"LAST\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"      ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HASH_DIST_WITHOUT_KEYS
init|=
literal|"{\n"
operator|+
literal|"  \"rels\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"0\",\n"
operator|+
literal|"      \"relOp\": \"LogicalTableScan\",\n"
operator|+
literal|"      \"table\": [\n"
operator|+
literal|"        \"scott\",\n"
operator|+
literal|"        \"EMP\"\n"
operator|+
literal|"      ],\n"
operator|+
literal|"      \"inputs\": []\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"id\": \"1\",\n"
operator|+
literal|"      \"relOp\": \"LogicalSortExchange\",\n"
operator|+
literal|"      \"distribution\": {\n"
operator|+
literal|"        \"type\": \"HASH_DISTRIBUTED\"\n"
operator|+
literal|"      },\n"
operator|+
literal|"      \"collation\": [\n"
operator|+
literal|"        {\n"
operator|+
literal|"          \"field\": 0,\n"
operator|+
literal|"          \"direction\": \"ASCENDING\",\n"
operator|+
literal|"          \"nulls\": \"LAST\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"      ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|static
name|Stream
argument_list|<
name|SqlExplainFormat
argument_list|>
name|explainFormats
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|SqlExplainFormat
operator|.
name|TEXT
argument_list|,
name|SqlExplainFormat
operator|.
name|DOT
argument_list|)
return|;
block|}
comment|/** Creates a fixture. */
specifier|private
specifier|static
name|Fixture
name|relFn
parameter_list|(
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
parameter_list|)
block|{
return|return
operator|new
name|Fixture
argument_list|(
name|relFn
argument_list|,
literal|false
argument_list|,
name|SqlExplainFormat
operator|.
name|TEXT
argument_list|)
return|;
block|}
comment|/** Unit test for {@link RelJson#toJson(Object)} for an object of type    * {@link RelDataType}. */
annotation|@
name|Test
name|void
name|testTypeJson
parameter_list|()
block|{
name|int
name|i
init|=
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|)
operator|.
name|nullable
argument_list|(
literal|false
argument_list|)
operator|.
name|add
argument_list|(
literal|"v"
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|9
argument_list|)
argument_list|)
operator|.
name|nullable
argument_list|(
literal|true
argument_list|)
operator|.
name|add
argument_list|(
literal|"r"
argument_list|,
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"d"
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|nullable
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|nullableRecord
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|JsonBuilder
name|jsonBuilder
init|=
operator|new
name|JsonBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelJson
name|json
init|=
name|RelJson
operator|.
name|create
argument_list|()
operator|.
name|withJsonBuilder
argument_list|(
name|jsonBuilder
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|o
init|=
name|json
operator|.
name|toJson
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|o
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|jsonBuilder
operator|.
name|toJsonString
argument_list|(
name|o
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expectedJson
init|=
literal|"{\n"
operator|+
literal|"  \"fields\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"type\": \"INTEGER\",\n"
operator|+
literal|"      \"nullable\": false,\n"
operator|+
literal|"      \"name\": \"i\"\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"type\": \"VARCHAR\",\n"
operator|+
literal|"      \"nullable\": true,\n"
operator|+
literal|"      \"precision\": 9,\n"
operator|+
literal|"      \"name\": \"v\"\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"fields\": {\n"
operator|+
literal|"        \"fields\": [\n"
operator|+
literal|"          {\n"
operator|+
literal|"            \"type\": \"DATE\",\n"
operator|+
literal|"            \"nullable\": false,\n"
operator|+
literal|"            \"name\": \"d\"\n"
operator|+
literal|"          }\n"
operator|+
literal|"        ],\n"
operator|+
literal|"        \"nullable\": false\n"
operator|+
literal|"      },\n"
operator|+
literal|"      \"nullable\": false,\n"
operator|+
literal|"      \"name\": \"r\"\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ],\n"
operator|+
literal|"  \"nullable\": false\n"
operator|+
literal|"}"
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|is
argument_list|(
name|expectedJson
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelDataType
name|type2
init|=
name|json
operator|.
name|toType
argument_list|(
name|typeFactory
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|type2
argument_list|,
name|is
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|i
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link org.apache.calcite.rel.externalize.RelJsonWriter} on    * a simple tree of relational expressions, consisting of a table and a    * project including window expressions.    */
annotation|@
name|Test
name|void
name|testWriter
parameter_list|()
block|{
name|String
name|s
init|=
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LogicalTableScan
name|scan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|relOptSchema
operator|.
name|getTableForMember
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hr"
argument_list|,
literal|"emps"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|LogicalFilter
name|filter
init|=
name|LogicalFilter
operator|.
name|create
argument_list|(
name|scan
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|rexBuilder
operator|.
name|makeRangeReference
argument_list|(
name|scan
argument_list|)
argument_list|,
literal|"deptno"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|TEN
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelJsonWriter
name|writer
init|=
operator|new
name|RelJsonWriter
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|bigIntType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl_stmt|;
name|LogicalAggregate
name|aggregate
init|=
name|LogicalAggregate
operator|.
name|create
argument_list|(
name|filter
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|bigIntType
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|bigIntType
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|aggregate
operator|.
name|explain
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|asString
argument_list|()
return|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|is
argument_list|(
name|XX
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link org.apache.calcite.rel.externalize.RelJsonWriter} on    * a simple tree of relational expressions, consisting of a table, a filter    * and an aggregate node.    */
annotation|@
name|Test
name|void
name|testWriter2
parameter_list|()
block|{
name|String
name|s
init|=
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LogicalTableScan
name|scan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|relOptSchema
operator|.
name|getTableForMember
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hr"
argument_list|,
literal|"emps"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|bigIntType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl_stmt|;
name|LogicalProject
name|project
init|=
name|LogicalProject
operator|.
name|create
argument_list|(
name|scan
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|scan
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeOver
argument_list|(
name|bigIntType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|scan
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|scan
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|RexFieldCollation
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|scan
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|RexWindowBounds
operator|.
name|UNBOUNDED_PRECEDING
argument_list|,
name|RexWindowBounds
operator|.
name|CURRENT_ROW
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeOver
argument_list|(
name|bigIntType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|SUM
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|scan
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|scan
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|RexFieldCollation
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|scan
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|RexWindowBounds
operator|.
name|CURRENT_ROW
argument_list|,
name|RexWindowBounds
operator|.
name|following
argument_list|(
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"field0"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelJsonWriter
name|writer
init|=
operator|new
name|RelJsonWriter
argument_list|()
decl_stmt|;
name|project
operator|.
name|explain
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|asString
argument_list|()
return|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|is
argument_list|(
name|XX2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testExchange
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|hash
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalExchange(distribution=[hash[0, 1]])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExchangeWithDistributionTraitDef
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|exchange
argument_list|(
name|RelDistributions
operator|.
name|hash
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalExchange(distribution=[hash[0, 1]])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|withDistribution
argument_list|(
literal|true
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link org.apache.calcite.rel.externalize.RelJsonReader}.    */
annotation|@
name|Test
name|void
name|testReader
parameter_list|()
block|{
name|String
name|s
init|=
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelJsonReader
name|reader
init|=
operator|new
name|RelJsonReader
argument_list|(
name|cluster
argument_list|,
name|relOptSchema
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|RelNode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|reader
operator|.
name|read
argument_list|(
name|XX
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|node
argument_list|,
name|SqlExplainFormat
operator|.
name|TEXT
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|isLinux
argument_list|(
literal|"LogicalAggregate(group=[{0}], c=[COUNT(DISTINCT $1)], d=[COUNT()])\n"
operator|+
literal|"  LogicalFilter(condition=[=($1, 10)])\n"
operator|+
literal|"    LogicalTableScan(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link org.apache.calcite.rel.externalize.RelJsonReader}.    */
annotation|@
name|Test
name|void
name|testReader2
parameter_list|()
block|{
name|String
name|s
init|=
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelJsonReader
name|reader
init|=
operator|new
name|RelJsonReader
argument_list|(
name|cluster
argument_list|,
name|relOptSchema
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|RelNode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|reader
operator|.
name|read
argument_list|(
name|XX2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|node
argument_list|,
name|SqlExplainFormat
operator|.
name|TEXT
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|isLinux
argument_list|(
literal|"LogicalProject(field0=[$0],"
operator|+
literal|" field1=[COUNT($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST "
operator|+
literal|"ROWS UNBOUNDED PRECEDING)],"
operator|+
literal|" field2=[SUM($0) OVER (PARTITION BY $2 ORDER BY $1 NULLS LAST "
operator|+
literal|"RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)])\n"
operator|+
literal|"  LogicalTableScan(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link org.apache.calcite.rel.externalize.RelJsonReader}.    */
annotation|@
name|Test
name|void
name|testReaderNull
parameter_list|()
block|{
name|String
name|s
init|=
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelJsonReader
name|reader
init|=
operator|new
name|RelJsonReader
argument_list|(
name|cluster
argument_list|,
name|relOptSchema
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|RelNode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|reader
operator|.
name|read
argument_list|(
name|XXNULL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|node
argument_list|,
name|SqlExplainFormat
operator|.
name|TEXT
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|isLinux
argument_list|(
literal|"LogicalAggregate(group=[{0}], agg#0=[COUNT(DISTINCT $1)], agg#1=[COUNT()])\n"
operator|+
literal|"  LogicalFilter(condition=[=($1, null:INTEGER)])\n"
operator|+
literal|"    LogicalTableScan(table=[[hr, emps]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-4893">[CALCITE-4893]    * JsonParseException happens when externalizing expressions with escape    * character from JSON</a>. */
annotation|@
name|Test
name|void
name|testEscapeCharacter
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|call
argument_list|(
operator|new
name|MockSqlOperatorTable
operator|.
name|SplitFunction
argument_list|()
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"\r"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[SPLIT($1, '\r')])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testJsonToRex
parameter_list|()
block|{
comment|// Test simple literal without inputs
specifier|final
name|String
name|jsonString1
init|=
literal|"{\n"
operator|+
literal|"  \"literal\": 10,\n"
operator|+
literal|"  \"type\": {\n"
operator|+
literal|"    \"type\": \"INTEGER\",\n"
operator|+
literal|"    \"nullable\": false\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|assertThatReadExpressionResult
argument_list|(
name|jsonString1
argument_list|,
name|is
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test binary operator ('+') with an input and a literal
specifier|final
name|String
name|jsonString2
init|=
literal|"{ \"op\": \n"
operator|+
literal|"  { \"name\": \"+\",\n"
operator|+
literal|"    \"kind\": \"PLUS\",\n"
operator|+
literal|"    \"syntax\": \"BINARY\"\n"
operator|+
literal|"  },\n"
operator|+
literal|"  \"operands\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"input\": 1,\n"
operator|+
literal|"      \"name\": \"$1\"\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"literal\": 2,\n"
operator|+
literal|"      \"type\": { \"type\": \"INTEGER\", \"nullable\": false }\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
name|assertThatReadExpressionResult
argument_list|(
name|jsonString2
argument_list|,
name|is
argument_list|(
literal|"+(1001, 2)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertThatReadExpressionResult
parameter_list|(
name|String
name|json
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|builder
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|TypeReference
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|typeRef
init|=
operator|new
name|TypeReference
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{     }
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|mapper
operator|.
name|configure
argument_list|(
name|DeserializationFeature
operator|.
name|USE_BIG_DECIMAL_FOR_FLOATS
argument_list|,
literal|true
argument_list|)
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|typeRef
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|RexNode
name|e
init|=
name|RelJson
operator|.
name|readExpression
argument_list|(
name|cluster
argument_list|,
name|RelWriterTest
operator|::
name|translateInput
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|matcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Intended as an instance of {@link RelJson.InputTranslator},    * translates input {@code input} into an INTEGER literal    * "{@code 1000 + input}". */
specifier|private
specifier|static
name|RexNode
name|translateInput
parameter_list|(
name|RelJson
name|relJson
parameter_list|,
name|int
name|input
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
annotation|@
name|Nullable
name|Object
argument_list|>
name|map
parameter_list|,
name|RelInput
name|relInput
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|relInput
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000
operator|+
name|input
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testTrim
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|alias
argument_list|(
name|b
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|TRIM
argument_list|,
name|b
operator|.
name|literal
argument_list|(
name|SqlTrimFunction
operator|.
name|Flag
operator|.
name|BOTH
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
argument_list|,
literal|"trimmed_ename"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject(trimmed_ename=[TRIM(FLAG(BOTH), ' ', $1)])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testPlusOperator
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[+($5, 10)])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"explainFormats"
argument_list|)
name|void
name|testAggregateWithAlias
parameter_list|(
name|SqlExplainFormat
name|format
parameter_list|)
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// The rel node stands for sql: SELECT max(SAL) as max_sal from EMP group by JOB;
specifier|final
name|RelNode
name|rel
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|builder
operator|.
name|max
argument_list|(
literal|"max_sal"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"max_sal"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelJsonWriter
name|jsonWriter
init|=
operator|new
name|RelJsonWriter
argument_list|()
decl_stmt|;
name|rel
operator|.
name|explain
argument_list|(
name|jsonWriter
argument_list|)
expr_stmt|;
specifier|final
name|String
name|relJson
init|=
name|jsonWriter
operator|.
name|asString
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|deserializeAndDump
argument_list|(
name|getSchema
argument_list|(
name|rel
argument_list|)
argument_list|,
name|relJson
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|TEXT
case|:
name|expected
operator|=
literal|""
operator|+
literal|"LogicalProject(max_sal=[$1])\n"
operator|+
literal|"  LogicalAggregate(group=[{0}], max_sal=[MAX($1)])\n"
operator|+
literal|"    LogicalProject(JOB=[$2], SAL=[$5])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, EMP]])\n"
expr_stmt|;
break|break;
case|case
name|DOT
case|:
name|expected
operator|=
literal|"digraph {\n"
operator|+
literal|"\"LogicalAggregate\\ngroup = {0}\\nmax_sal = MAX($1)\\n\" -> "
operator|+
literal|"\"LogicalProject\\nmax_sal = $1\\n\" [label=\"0\"]\n"
operator|+
literal|"\"LogicalProject\\nJOB = $2\\nSAL = $5\\n\" -> \"LogicalAggregate\\ngroup = "
operator|+
literal|"{0}\\nmax_sal = MAX($1)\\n\" [label=\"0\"]\n"
operator|+
literal|"\"LogicalTableScan\\ntable = [scott, EMP]\\n\" -> \"LogicalProject\\nJOB = $2\\nSAL = "
operator|+
literal|"$5\\n\" [label=\"0\"]\n"
operator|+
literal|"}\n"
expr_stmt|;
break|break;
block|}
name|assertThat
argument_list|(
name|s
argument_list|,
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-4804">[CALCITE-4804]    * Support Snapshot operator serialization and deserizalization</a>. */
annotation|@
name|Test
name|void
name|testSnapshot
parameter_list|()
block|{
comment|// Equivalent SQL:
comment|//   SELECT *
comment|//   FROM products_temporal FOR SYSTEM_TIME AS OF TIMESTAMP '2011-07-20 12:34:56'
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|RelNode
name|root
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"products_temporal"
argument_list|)
operator|.
name|snapshot
argument_list|(
name|builder
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeTimestampLiteral
argument_list|(
operator|new
name|TimestampString
argument_list|(
literal|"2011-07-20 12:34:56"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelJsonWriter
name|jsonWriter
init|=
operator|new
name|RelJsonWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|explain
argument_list|(
name|jsonWriter
argument_list|)
expr_stmt|;
name|String
name|relJson
init|=
name|jsonWriter
operator|.
name|asString
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|deserializeAndDumpToTextFormat
argument_list|(
name|getSchema
argument_list|(
name|root
argument_list|)
argument_list|,
name|relJson
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"LogicalSnapshot(period=[2011-07-20 12:34:56])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, products_temporal]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testDeserializeInvalidOperatorName
parameter_list|()
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|builder
operator|.
name|max
argument_list|(
literal|"max_sal"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|min
argument_list|(
literal|"min_sal"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"max_sal"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"min_sal"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelJsonWriter
name|jsonWriter
init|=
operator|new
name|RelJsonWriter
argument_list|()
decl_stmt|;
name|rel
operator|.
name|explain
argument_list|(
name|jsonWriter
argument_list|)
expr_stmt|;
comment|// mock a non exist SqlOperator
name|String
name|relJson
init|=
name|jsonWriter
operator|.
name|asString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\"name\": \"MAX\""
argument_list|,
literal|"\"name\": \"MAXS\""
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|deserializeAndDumpToTextFormat
argument_list|(
name|getSchema
argument_list|(
name|rel
argument_list|)
argument_list|,
name|relJson
argument_list|)
argument_list|,
literal|"org.apache.calcite.runtime.CalciteException: "
operator|+
literal|"No operator for 'MAXS' with kind: 'MAX', syntax: 'FUNCTION' during JSON deserialization"
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-5349">[CALCITE-5349]    * RelJson deserialization should support SqlLibraryOperators</a>. Before the    * fix, non-standard operators such as BigQuery's    * {@link SqlLibraryOperators#CURRENT_DATETIME} would throw during    * deserialization. */
annotation|@
name|Test
name|void
name|testDeserializeNonStandardOperator
parameter_list|()
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|SqlLibraryOperators
operator|.
name|CURRENT_DATETIME
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelJsonWriter
name|jsonWriter
init|=
operator|new
name|RelJsonWriter
argument_list|(
operator|new
name|JsonBuilder
argument_list|()
argument_list|,
name|RelJson
operator|::
name|withLibraryOperatorTable
argument_list|)
decl_stmt|;
name|rel
operator|.
name|explain
argument_list|(
name|jsonWriter
argument_list|)
expr_stmt|;
name|String
name|relJson
init|=
name|jsonWriter
operator|.
name|asString
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|deserializeAndDumpToTextFormat
argument_list|(
name|getSchema
argument_list|(
name|rel
argument_list|)
argument_list|,
name|relJson
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject(JOB=[$2], $f1=[CURRENT_DATETIME()])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testAggregateWithoutAlias
parameter_list|()
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// The rel node stands for sql: SELECT max(SAL) from EMP group by JOB;
specifier|final
name|RelNode
name|rel
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|builder
operator|.
name|max
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelJsonWriter
name|jsonWriter
init|=
operator|new
name|RelJsonWriter
argument_list|()
decl_stmt|;
name|rel
operator|.
name|explain
argument_list|(
name|jsonWriter
argument_list|)
expr_stmt|;
specifier|final
name|String
name|relJson
init|=
name|jsonWriter
operator|.
name|asString
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|deserializeAndDumpToTextFormat
argument_list|(
name|getSchema
argument_list|(
name|rel
argument_list|)
argument_list|,
name|relJson
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f1=[$1])\n"
operator|+
literal|"  LogicalAggregate(group=[{0}], agg#0=[MAX($1)])\n"
operator|+
literal|"    LogicalProject(JOB=[$2], SAL=[$5])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|s
argument_list|,
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testCalc
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|let
argument_list|(
name|b2
lambda|->
block|{
name|final
name|RexBuilder
name|rexBuilder
operator|=
name|b2
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|scan
init|=
name|b2
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|scan
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|RexProgramBuilder
name|programBuilder
init|=
operator|new
name|RexProgramBuilder
argument_list|(
name|rowType
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|field
init|=
name|rowType
operator|.
name|getField
argument_list|(
literal|"SAL"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|programBuilder
operator|.
name|addIdentity
argument_list|()
expr_stmt|;
name|programBuilder
operator|.
name|addCondition
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
operator|new
name|RexInputRef
argument_list|(
name|field
operator|.
name|getIndex
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|b2
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|LogicalCalc
operator|.
name|create
argument_list|(
name|scan
argument_list|,
name|programBuilder
operator|.
name|getProgram
argument_list|()
argument_list|)
return|;
block|}
block|)
class|;
end_class

begin_decl_stmt
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[>($t5, $t8)],"
operator|+
literal|" proj#0..7=[{exprs}], $condition=[$t9])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"explainFormats"
argument_list|)
name|void
name|testCorrelateQuery
parameter_list|(
name|SqlExplainFormat
name|format
parameter_list|)
block|{
specifier|final
name|Holder
argument_list|<
name|RexCorrelVariable
argument_list|>
name|v
init|=
name|Holder
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|variable
argument_list|(
name|v
argument_list|)
operator|.
name|scan
argument_list|(
literal|"DEPT"
argument_list|)
operator|.
name|filter
argument_list|(
name|b
operator|.
name|equals
argument_list|(
name|b
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
name|v
operator|.
name|get
argument_list|()
argument_list|,
literal|"DEPTNO"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|correlate
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|v
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|TEXT
case|:
name|expected
operator|=
literal|""
operator|+
literal|"LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{7}])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
operator|+
literal|"  LogicalFilter(condition=[=($0, $cor0.DEPTNO)])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, DEPT]])\n"
expr_stmt|;
break|break;
case|case
name|DOT
case|:
name|expected
operator|=
literal|"digraph {\n"
operator|+
literal|"\"LogicalTableScan\\ntable = [scott, EMP]\\n\" -> \"LogicalCorrelate\\ncorrelation = "
operator|+
literal|"$cor0\\njoinType = inner\\nrequiredColumns = {7\\n}\\n\" [label=\"0\"]\n"
operator|+
literal|"\"LogicalFilter\\ncondition = =($0, $c\\nor0.DEPTNO)\\n\" -> "
operator|+
literal|"\"LogicalCorrelate\\ncorrelation = $cor0\\njoinType = inner\\nrequiredColumns = "
operator|+
literal|"{7\\n}\\n\" [label=\"1\"]\n"
operator|+
literal|"\"LogicalTableScan\\ntable = [scott, DEPT\\n]\\n\" -> \"LogicalFilter\\ncondition = ="
operator|+
literal|"($0, $c\\nor0.DEPTNO)\\n\" [label=\"0\"]\n"
operator|+
literal|"}\n"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|format
argument_list|)
throw|;
block|}
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|withFormat
argument_list|(
name|format
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testOverWithoutPartition
parameter_list|()
block|{
comment|// Equivalent SQL:
comment|//   SELECT count(*) OVER (ORDER BY deptno) FROM emp
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|mockCountOver
argument_list|(
name|b
argument_list|,
literal|"EMP"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[COUNT() OVER (ORDER BY $7 NULLS LAST "
operator|+
literal|"ROWS UNBOUNDED PRECEDING)])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testProjectionWithCorrelationVariables
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|b
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"ename"
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|b
operator|.
name|getCluster
argument_list|()
operator|.
name|createCorrel
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"LogicalProject(variablesSet=[[$cor0]], ename=[$1])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testOverWithoutOrderKey
parameter_list|()
block|{
comment|// Equivalent SQL:
comment|//   SELECT count(*) OVER (PARTITION BY deptno) FROM emp
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|mockCountOver
argument_list|(
name|b
argument_list|,
literal|"EMP"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[COUNT() OVER (PARTITION BY $7)])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testInterval
parameter_list|()
block|{
name|SqlIntervalQualifier
name|sqlIntervalQualifier
init|=
operator|new
name|SqlIntervalQualifier
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|BigDecimal
name|value
init|=
operator|new
name|BigDecimal
argument_list|(
literal|86400000
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|TUMBLE_END
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"HIREDATE"
argument_list|)
argument_list|,
name|b
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeIntervalLiteral
argument_list|(
name|value
argument_list|,
name|sqlIntervalQualifier
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[TUMBLE_END($4, 86400000:INTERVAL DAY)])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testUdf
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|call
argument_list|(
operator|new
name|MockSqlOperatorTable
operator|.
name|MyFunction
argument_list|()
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[MYFUN($0)])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|ParameterizedTest
annotation|@
name|MethodSource
argument_list|(
literal|"explainFormats"
argument_list|)
name|void
name|testUDAF
parameter_list|(
name|SqlExplainFormat
name|format
parameter_list|)
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
operator|.
name|aggregate
argument_list|(
name|b
operator|.
name|groupKey
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|b
operator|.
name|aggregateCall
argument_list|(
operator|new
name|MockSqlOperatorTable
operator|.
name|MyAggFunc
argument_list|()
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|TEXT
case|:
name|expected
operator|=
literal|""
operator|+
literal|"LogicalAggregate(group=[{0}], agg#0=[myAggFunc($1)])\n"
operator|+
literal|"  LogicalProject(ENAME=[$1], DEPTNO=[$7])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
expr_stmt|;
break|break;
case|case
name|DOT
case|:
name|expected
operator|=
literal|"digraph {\n"
operator|+
literal|"\"LogicalProject\\nENAME = $1\\nDEPTNO = $7\\n\" -> \"LogicalAggregate\\ngroup = "
operator|+
literal|"{0}\\nagg#0 = myAggFunc($1\\n)\\n\" [label=\"0\"]\n"
operator|+
literal|"\"LogicalTableScan\\ntable = [scott, EMP]\\n\" -> \"LogicalProject\\nENAME = "
operator|+
literal|"$1\\nDEPTNO = $7\\n\" [label=\"0\"]\n"
operator|+
literal|"}\n"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|format
argument_list|)
throw|;
block|}
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|withFormat
argument_list|(
name|format
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testArrayType
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|call
argument_list|(
operator|new
name|MockSqlOperatorTable
operator|.
name|SplitFunction
argument_list|()
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[SPLIT($1, ',')])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testMapType
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|call
argument_list|(
operator|new
name|MockSqlOperatorTable
operator|.
name|MapFunction
argument_list|()
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject($f0=[MAP('key', 'value')])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Returns the schema of a {@link org.apache.calcite.rel.core.TableScan}    * in this plan, or null if there are no scans. */
end_comment

begin_function
specifier|private
specifier|static
name|RelOptSchema
name|getSchema
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
specifier|final
name|Holder
argument_list|<
annotation|@
name|Nullable
name|RelOptSchema
argument_list|>
name|schemaHolder
init|=
name|Holder
operator|.
name|empty
argument_list|()
decl_stmt|;
name|rel
operator|.
name|accept
argument_list|(
operator|new
name|RelShuttleImpl
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
name|schemaHolder
operator|.
name|set
argument_list|(
name|scan
operator|.
name|getTable
argument_list|()
operator|.
name|getRelOptSchema
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|scan
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|schemaHolder
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Deserialize a relnode from the json string by {@link RelJsonReader},    * and dump it to the given format.    */
end_comment

begin_function
specifier|private
specifier|static
name|String
name|deserializeAndDump
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|String
name|relJson
parameter_list|,
name|SqlExplainFormat
name|format
parameter_list|)
block|{
return|return
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
specifier|final
name|RelJsonReader
name|reader
init|=
operator|new
name|RelJsonReader
argument_list|(
name|cluster
argument_list|,
name|schema
argument_list|,
name|rootSchema
argument_list|,
name|RelJson
operator|::
name|withLibraryOperatorTable
argument_list|)
decl_stmt|;
name|RelNode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|reader
operator|.
name|read
argument_list|(
name|relJson
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|node
argument_list|,
name|format
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|String
name|deserializeAndDump
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|schema
parameter_list|,
name|String
name|relJson
parameter_list|,
name|SqlExplainFormat
name|format
parameter_list|)
block|{
specifier|final
name|RelJsonReader
name|reader
init|=
operator|new
name|RelJsonReader
argument_list|(
name|cluster
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RelNode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|reader
operator|.
name|read
argument_list|(
name|relJson
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|node
argument_list|,
name|format
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Deserialize a relnode from the json string by {@link RelJsonReader},    * and dump it to text format.    */
end_comment

begin_function
specifier|private
specifier|static
name|String
name|deserializeAndDumpToTextFormat
parameter_list|(
name|RelOptSchema
name|schema
parameter_list|,
name|String
name|relJson
parameter_list|)
block|{
return|return
name|deserializeAndDump
argument_list|(
name|schema
argument_list|,
name|relJson
argument_list|,
name|SqlExplainFormat
operator|.
name|TEXT
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Creates a mock {@link RelNode} that contains OVER. The SQL is as follows:    *    *<blockquote>    * select count(*) over (partition by {@code partitionKeyNames}<br>    * order by {@code orderKeyNames}) from {@code table}    *</blockquote>    *    * @param table Table name    * @param partitionKeyNames Partition by column names, may empty, can not be    * null    * @param orderKeyNames Order by column names, may empty, can not be null    * @return RelNode for the SQL    */
end_comment

begin_function
specifier|private
name|RelNode
name|mockCountOver
parameter_list|(
name|RelBuilder
name|builder
parameter_list|,
name|String
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionKeyNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|orderKeyNames
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|builder
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|partitionKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partitionKeyNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|scan
argument_list|(
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partitionkeyName
range|:
name|partitionKeyNames
control|)
block|{
name|partitionKeys
operator|.
name|add
argument_list|(
name|builder
operator|.
name|field
argument_list|(
name|partitionkeyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RexFieldCollation
argument_list|>
name|orderKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|orderKeyNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|orderKeyName
range|:
name|orderKeyNames
control|)
block|{
name|orderKeys
operator|.
name|add
argument_list|(
operator|new
name|RexFieldCollation
argument_list|(
name|builder
operator|.
name|field
argument_list|(
name|orderKeyName
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|rel
init|=
name|builder
operator|.
name|project
argument_list|(
name|rexBuilder
operator|.
name|makeOver
argument_list|(
name|type
argument_list|,
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|partitionKeys
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|orderKeys
argument_list|)
argument_list|,
name|RexWindowBounds
operator|.
name|UNBOUNDED_PRECEDING
argument_list|,
name|RexWindowBounds
operator|.
name|CURRENT_ROW
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|rel
return|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testHashDistributionWithoutKeys
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|createSortPlan
argument_list|(
name|b
argument_list|,
name|RelDistributions
operator|.
name|hash
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"LogicalSortExchange(distribution=[hash], collation=[[0]])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatJson
argument_list|(
name|is
argument_list|(
name|HASH_DIST_WITHOUT_KEYS
argument_list|)
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testWriteSortExchangeWithHashDistribution
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|createSortPlan
argument_list|(
name|b
argument_list|,
name|RelDistributions
operator|.
name|hash
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalSortExchange(distribution=[hash[0]], collation=[[0]])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatJson
argument_list|(
name|is
argument_list|(
name|XX3
argument_list|)
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testWriteSortExchangeWithRandomDistribution
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|createSortPlan
argument_list|(
name|b
argument_list|,
name|RelDistributions
operator|.
name|RANDOM_DISTRIBUTED
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalSortExchange(distribution=[random], collation=[[0]])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
name|void
name|testTableModifyInsert
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|fields
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|let
argument_list|(
name|b2
lambda|->
block|{
name|final
name|RelNode
name|input
operator|=
name|b2
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|input
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|LogicalTableModify
name|modify
init|=
name|LogicalTableModify
operator|.
name|create
argument_list|(
name|table
argument_list|,
operator|(
name|Prepare
operator|.
name|CatalogReader
operator|)
name|table
operator|.
name|getRelOptSchema
argument_list|()
argument_list|,
name|input
argument_list|,
name|TableModify
operator|.
name|Operation
operator|.
name|INSERT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|b2
operator|.
name|push
argument_list|(
name|modify
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|build
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalTableModify(table=[[scott, EMP]], operation=[INSERT], flattened=[false])\n"
operator|+
literal|"  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], "
operator|+
literal|"COMM=[$6], DEPTNO=[$7])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
name|void
name|testTableModifyUpdate
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|filter
argument_list|(
name|b
operator|.
name|equals
argument_list|(
name|b
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|let
argument_list|(
name|b2
lambda|->
block|{
name|final
name|RelNode
name|filter
operator|=
name|b2
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|filter
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|LogicalTableModify
name|modify
init|=
name|LogicalTableModify
operator|.
name|create
argument_list|(
name|table
argument_list|,
operator|(
name|Prepare
operator|.
name|CatalogReader
operator|)
name|table
operator|.
name|getRelOptSchema
argument_list|()
argument_list|,
name|filter
argument_list|,
name|TableModify
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|b2
operator|.
name|literal
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|b2
operator|.
name|push
argument_list|(
name|modify
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|build
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalTableModify(table=[[scott, EMP]], operation=[UPDATE], updateColumnList=[[ENAME]],"
operator|+
literal|" sourceExpressionList=[['a']], flattened=[false])\n"
operator|+
literal|"  LogicalFilter(condition=[=($2, 'c')])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
name|void
name|testTableModifyDelete
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|filter
argument_list|(
name|b
operator|.
name|equals
argument_list|(
name|b
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|let
argument_list|(
name|b2
lambda|->
block|{
name|final
name|RelNode
name|filter
operator|=
name|b2
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|table
init|=
name|filter
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|LogicalTableModify
name|modify
init|=
name|LogicalTableModify
operator|.
name|create
argument_list|(
name|table
argument_list|,
operator|(
name|Prepare
operator|.
name|CatalogReader
operator|)
name|table
operator|.
name|getRelOptSchema
argument_list|()
argument_list|,
name|filter
argument_list|,
name|TableModify
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|b2
operator|.
name|push
argument_list|(
name|modify
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|build
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalTableModify(table=[[scott, EMP]], operation=[DELETE], flattened=[false])\n"
operator|+
literal|"  LogicalFilter(condition=[=($2, 'c')])\n"
operator|+
literal|"    LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
name|void
name|testTableModifyMerge
parameter_list|()
block|{
specifier|final
name|Holder
argument_list|<
name|RelOptTable
argument_list|>
name|emp
init|=
name|Holder
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|final
name|Holder
argument_list|<
name|RelOptTable
argument_list|>
name|dept
init|=
name|Holder
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
init|=
name|b
lambda|->
name|b
operator|.
name|scan
argument_list|(
literal|"DEPT"
argument_list|)
operator|.
name|let
argument_list|(
name|b2
lambda|->
block|{
name|dept
operator|.
name|set
argument_list|(
name|requireNonNull
argument_list|(
name|b2
operator|.
name|peek
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|b2
return|;
block|}
end_function

begin_expr_stmt
unit|)
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|let
argument_list|(
name|b2
lambda|->
block|{
name|emp
operator|.
name|set
argument_list|(
name|requireNonNull
argument_list|(
name|b2
operator|.
name|peek
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b2
return|;
block|}
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|LEFT
argument_list|,
name|b
operator|.
name|equals
argument_list|(
name|b
operator|.
name|field
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|"DEPTNO"
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"DEPTNO"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|b
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"20200501 10:00:00"
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"false"
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
argument_list|,
name|b
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|b
operator|.
name|literal
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|let
argument_list|(
name|b2
lambda|->
block|{
comment|// For SQL:
comment|//   MERGE INTO emp USING dept ON emp.deptno = dept.deptno
comment|//   WHEN MATCHED THEN
comment|//     UPDATE SET job = 'a'
comment|//   WHEN NOT MATCHED THEN
comment|//     INSERT VALUES (0, 'x', 'x', 0, '20200501 10:00:00',
comment|//         0, 0, 0, 0)
specifier|final
name|RelNode
name|project
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|LogicalTableModify
name|modify
init|=
name|LogicalTableModify
operator|.
name|create
argument_list|(
name|emp
operator|.
name|get
argument_list|()
argument_list|,
operator|(
name|Prepare
operator|.
name|CatalogReader
operator|)
name|emp
operator|.
name|get
argument_list|()
operator|.
name|getRelOptSchema
argument_list|()
argument_list|,
name|project
argument_list|,
name|TableModify
operator|.
name|Operation
operator|.
name|MERGE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|b2
operator|.
name|push
argument_list|(
name|modify
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalTableModify(table=[[scott, EMP]], operation=[MERGE], "
operator|+
literal|"updateColumnList=[[ENAME]], flattened=[false])\n"
operator|+
literal|"  LogicalProject($f0=[0], $f1=['x'], $f2=['x'], $f3=[0], $f4=['20200501 10:00:00'], "
operator|+
literal|"$f5=[0], $f6=[0], $f7=[0], $f8=['false'], LOC=[$2], EMPNO=[$3], ENAME=[$4], JOB=[$5], "
operator|+
literal|"MGR=[$6], HIREDATE=[$7], SAL=[$8], COMM=[$9], DEPTNO=[$10], $f18=['a'])\n"
operator|+
literal|"    LogicalJoin(condition=[=($0, $10)], joinType=[left])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, DEPT]])\n"
operator|+
literal|"      LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|relFn
argument_list|(
name|relFn
argument_list|)
operator|.
name|assertThatPlan
argument_list|(
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    private
name|RelNode
name|createSortPlan
parameter_list|(
name|RelBuilder
name|builder
parameter_list|,
name|RelDistribution
name|distribution
parameter_list|)
block|{
return|return
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|sortExchange
argument_list|(
name|distribution
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/** Test fixture. */
end_comment

begin_class
specifier|static
class|class
name|Fixture
block|{
specifier|final
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
decl_stmt|;
specifier|final
name|boolean
name|distribution
decl_stmt|;
specifier|final
name|SqlExplainFormat
name|format
decl_stmt|;
name|Fixture
parameter_list|(
name|Function
argument_list|<
name|RelBuilder
argument_list|,
name|RelNode
argument_list|>
name|relFn
parameter_list|,
name|boolean
name|distribution
parameter_list|,
name|SqlExplainFormat
name|format
parameter_list|)
block|{
name|this
operator|.
name|relFn
operator|=
name|relFn
expr_stmt|;
name|this
operator|.
name|distribution
operator|=
name|distribution
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
name|Fixture
name|withDistribution
parameter_list|(
name|boolean
name|distribution
parameter_list|)
block|{
if|if
condition|(
name|distribution
operator|==
name|this
operator|.
name|distribution
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|Fixture
argument_list|(
name|relFn
argument_list|,
name|distribution
argument_list|,
name|format
argument_list|)
return|;
block|}
name|Fixture
name|withFormat
parameter_list|(
name|SqlExplainFormat
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|this
operator|.
name|format
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|Fixture
argument_list|(
name|relFn
argument_list|,
name|distribution
argument_list|,
name|format
argument_list|)
return|;
block|}
name|Fixture
name|assertThatJson
parameter_list|(
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|b
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|RelNode
name|rel
init|=
name|relFn
operator|.
name|apply
argument_list|(
name|b
argument_list|)
decl_stmt|;
specifier|final
name|String
name|relJson
init|=
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|rel
argument_list|,
name|SqlExplainFormat
operator|.
name|JSON
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|relJson
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Fixture
name|assertThatPlan
parameter_list|(
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|b
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|RelNode
name|rel
init|=
name|relFn
operator|.
name|apply
argument_list|(
name|b
argument_list|)
decl_stmt|;
specifier|final
name|String
name|relJson
init|=
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|""
argument_list|,
name|rel
argument_list|,
name|SqlExplainFormat
operator|.
name|JSON
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
decl_stmt|;
specifier|final
name|String
name|plan
decl_stmt|;
if|if
condition|(
name|distribution
condition|)
block|{
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|RelDistributionTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|RelOptCluster
name|cluster
init|=
name|RelOptCluster
operator|.
name|create
argument_list|(
name|planner
argument_list|,
name|b
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|plan
operator|=
name|deserializeAndDump
argument_list|(
name|cluster
argument_list|,
name|getSchema
argument_list|(
name|rel
argument_list|)
argument_list|,
name|relJson
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plan
operator|=
name|deserializeAndDump
argument_list|(
name|getSchema
argument_list|(
name|rel
argument_list|)
argument_list|,
name|relJson
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|plan
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

unit|}
end_unit

