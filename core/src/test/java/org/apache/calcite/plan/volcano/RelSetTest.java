begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link RelSet}.  */
end_comment

begin_class
specifier|public
class|class
name|RelSetTest
block|{
comment|/**    * Tests for adding RelNode with same RelDataType.    */
annotation|@
name|Test
name|void
name|testAddRelNodeWithSameRowType
parameter_list|()
block|{
name|RelBuilder
name|builder
init|=
name|createRelBuilder
argument_list|()
decl_stmt|;
name|RelNode
name|relNodeA
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"myTable"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|relNodeE
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"myTable"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"e"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelSet
name|relSet
init|=
operator|new
name|RelSet
argument_list|(
literal|1
argument_list|,
name|Util
operator|.
name|minus
argument_list|(
name|RelOptUtil
operator|.
name|getVariablesSet
argument_list|(
name|relNodeA
argument_list|)
argument_list|,
name|relNodeA
operator|.
name|getVariablesSet
argument_list|()
argument_list|)
argument_list|,
name|RelOptUtil
operator|.
name|getVariablesUsed
argument_list|(
name|relNodeA
argument_list|)
argument_list|)
decl_stmt|;
name|relSet
operator|.
name|add
argument_list|(
name|relNodeA
argument_list|)
expr_stmt|;
name|relSet
operator|.
name|add
argument_list|(
name|relNodeE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for adding RelNode with different RelDataType.    */
annotation|@
name|Test
name|void
name|testAddRelNodeWithDifferentRowType
parameter_list|()
block|{
name|RelBuilder
name|builder
init|=
name|createRelBuilder
argument_list|()
decl_stmt|;
name|RelNode
name|relNodeA
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"myTable"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|relNodeN
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"myTable"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelSet
name|relSet
init|=
operator|new
name|RelSet
argument_list|(
literal|1
argument_list|,
name|Util
operator|.
name|minus
argument_list|(
name|RelOptUtil
operator|.
name|getVariablesSet
argument_list|(
name|relNodeA
argument_list|)
argument_list|,
name|relNodeA
operator|.
name|getVariablesSet
argument_list|()
argument_list|)
argument_list|,
name|RelOptUtil
operator|.
name|getVariablesUsed
argument_list|(
name|relNodeA
argument_list|)
argument_list|)
decl_stmt|;
name|relSet
operator|.
name|add
argument_list|(
name|relNodeA
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|relSet
operator|.
name|add
argument_list|(
name|relNodeN
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RelBuilder
name|createRelBuilder
parameter_list|()
block|{
name|SchemaPlus
name|rootSchema
init|=
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SchemaPlus
name|defaultSchema
init|=
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|rootSchema
argument_list|,
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|MY_DB
argument_list|)
decl_stmt|;
name|FrameworkConfig
name|config
init|=
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|Config
operator|.
name|DEFAULT
argument_list|)
operator|.
name|defaultSchema
argument_list|(
name|defaultSchema
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
return|;
block|}
block|}
end_class

end_unit

