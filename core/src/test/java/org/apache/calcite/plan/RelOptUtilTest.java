begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link RelOptUtil} and other classes in this package.  */
end_comment

begin_class
class|class
name|RelOptUtilTest
block|{
comment|/** Creates a config based on the "scott" schema. */
specifier|private
specifier|static
name|Frameworks
operator|.
name|ConfigBuilder
name|config
parameter_list|()
block|{
specifier|final
name|SchemaPlus
name|rootSchema
init|=
name|Frameworks
operator|.
name|createRootSchema
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|Config
operator|.
name|DEFAULT
argument_list|)
operator|.
name|defaultSchema
argument_list|(
name|CalciteAssert
operator|.
name|addSchema
argument_list|(
name|rootSchema
argument_list|,
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|SCOTT
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RelBuilder
name|relBuilder
decl_stmt|;
specifier|private
name|RelNode
name|empScan
decl_stmt|;
specifier|private
name|RelNode
name|deptScan
decl_stmt|;
specifier|private
name|RelDataType
name|empRow
decl_stmt|;
specifier|private
name|RelDataType
name|deptRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|empDeptJoinRelFields
decl_stmt|;
annotation|@
name|BeforeEach
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|relBuilder
operator|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|empScan
operator|=
name|relBuilder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|deptScan
operator|=
name|relBuilder
operator|.
name|scan
argument_list|(
literal|"DEPT"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|empRow
operator|=
name|empScan
operator|.
name|getRowType
argument_list|()
expr_stmt|;
name|deptRow
operator|=
name|deptScan
operator|.
name|getRowType
argument_list|()
expr_stmt|;
name|empDeptJoinRelFields
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|empRow
operator|.
name|getFieldList
argument_list|()
argument_list|,
name|deptRow
operator|.
name|getFieldList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTypeDump
parameter_list|()
block|{
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|t1
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f0"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|10
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
name|TestUtil
operator|.
name|fold
argument_list|(
literal|"f0 DECIMAL(5, 2) NOT NULL,"
argument_list|,
literal|"f1 VARCHAR(10) NOT NULL"
argument_list|)
argument_list|,
name|Util
operator|.
name|toLinux
argument_list|(
name|RelOptUtil
operator|.
name|dumpType
argument_list|(
name|t1
argument_list|)
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|RelDataType
name|t2
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f0"
argument_list|,
name|t1
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|,
name|typeFactory
operator|.
name|createMultisetType
argument_list|(
name|t1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
name|TestUtil
operator|.
name|fold
argument_list|(
literal|"f0 RECORD ("
argument_list|,
literal|"  f0 DECIMAL(5, 2) NOT NULL,"
argument_list|,
literal|"  f1 VARCHAR(10) NOT NULL) NOT NULL,"
argument_list|,
literal|"f1 RECORD ("
argument_list|,
literal|"  f0 DECIMAL(5, 2) NOT NULL,"
argument_list|,
literal|"  f1 VARCHAR(10) NOT NULL) NOT NULL MULTISET NOT NULL"
argument_list|)
argument_list|,
name|Util
operator|.
name|toLinux
argument_list|(
name|RelOptUtil
operator|.
name|dumpType
argument_list|(
name|t2
argument_list|)
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTypeDifference
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|t0
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f0"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|t1
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f0"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|10
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
name|TestUtil
operator|.
name|fold
argument_list|(
literal|"Type mismatch: the field sizes are not equal."
argument_list|,
literal|"source: RecordType(DECIMAL(5, 2) NOT NULL f0) NOT NULL"
argument_list|,
literal|"target: RecordType(DECIMAL(5, 2) NOT NULL f0, VARCHAR(10) NOT NULL f1) NOT NULL"
argument_list|)
argument_list|,
name|Util
operator|.
name|toLinux
argument_list|(
name|RelOptUtil
operator|.
name|getFullTypeDifferenceString
argument_list|(
literal|"source"
argument_list|,
name|t0
argument_list|,
literal|"target"
argument_list|,
name|t1
argument_list|)
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|RelDataType
name|t2
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f0"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
name|TestUtil
operator|.
name|fold
argument_list|(
literal|"Type mismatch:"
argument_list|,
literal|"source: RecordType(DECIMAL(5, 2) NOT NULL f0, VARCHAR(10) NOT NULL f1) NOT NULL"
argument_list|,
literal|"target: RecordType(DECIMAL(5, 2) NOT NULL f0, VARCHAR(5) NOT NULL f1) NOT NULL"
argument_list|,
literal|"Difference:"
argument_list|,
literal|"f1: VARCHAR(10) NOT NULL -> VARCHAR(5) NOT NULL"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Util
operator|.
name|toLinux
argument_list|(
name|RelOptUtil
operator|.
name|getFullTypeDifferenceString
argument_list|(
literal|"source"
argument_list|,
name|t1
argument_list|,
literal|"target"
argument_list|,
name|t2
argument_list|)
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|t2
operator|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f0"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|,
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
name|TestUtil
operator|.
name|fold
argument_list|(
literal|"Type mismatch:"
argument_list|,
literal|"source: RecordType(DECIMAL(5, 2) NOT NULL f0, VARCHAR(10) NOT NULL f1) NOT NULL"
argument_list|,
literal|"target: RecordType(DECIMAL(4, 2) NOT NULL f0, BIGINT NOT NULL f1) NOT NULL"
argument_list|,
literal|"Difference:"
argument_list|,
literal|"f0: DECIMAL(5, 2) NOT NULL -> DECIMAL(4, 2) NOT NULL"
argument_list|,
literal|"f1: VARCHAR(10) NOT NULL -> BIGINT NOT NULL"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Util
operator|.
name|toLinux
argument_list|(
name|RelOptUtil
operator|.
name|getFullTypeDifferenceString
argument_list|(
literal|"source"
argument_list|,
name|t1
argument_list|,
literal|"target"
argument_list|,
name|t2
argument_list|)
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|t2
operator|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"f0"
argument_list|,
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|10
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Test identical types.
name|assertThat
argument_list|(
name|RelOptUtil
operator|.
name|getFullTypeDifferenceString
argument_list|(
literal|"source"
argument_list|,
name|t1
argument_list|,
literal|"target"
argument_list|,
name|t2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RelOptUtil
operator|.
name|getFullTypeDifferenceString
argument_list|(
literal|"source"
argument_list|,
name|t1
argument_list|,
literal|"target"
argument_list|,
name|t1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the rules for how we name rules.    */
annotation|@
name|Test
name|void
name|testRuleGuessDescription
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Bar"
argument_list|,
name|RelOptRule
operator|.
name|guessDescription
argument_list|(
literal|"com.foo.Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Baz"
argument_list|,
name|RelOptRule
operator|.
name|guessDescription
argument_list|(
literal|"com.flatten.Bar$Baz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// yields "1" (which as an integer is an invalid
try|try
block|{
name|Util
operator|.
name|discard
argument_list|(
name|RelOptRule
operator|.
name|guessDescription
argument_list|(
literal|"com.foo.Bar$1"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Derived description of rule class com.foo.Bar$1 is an "
operator|+
literal|"integer, not valid. Supply a description manually."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-3136">[CALCITE-3136]    * Fix the default rule description of ConverterRule</a>. */
annotation|@
name|Test
name|void
name|testConvertRuleDefaultRuleDescription
parameter_list|()
block|{
specifier|final
name|RelCollation
name|collation1
init|=
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|4
argument_list|,
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelCollation
name|collation2
init|=
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|0
argument_list|,
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelDistribution
name|distribution1
init|=
name|RelDistributions
operator|.
name|hash
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelDistribution
name|distribution2
init|=
name|RelDistributions
operator|.
name|range
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelOptRule
name|collationConvertRule
init|=
name|MyConverterRule
operator|.
name|create
argument_list|(
name|collation1
argument_list|,
name|collation2
argument_list|)
decl_stmt|;
specifier|final
name|RelOptRule
name|distributionConvertRule
init|=
name|MyConverterRule
operator|.
name|create
argument_list|(
name|distribution1
argument_list|,
name|distribution2
argument_list|)
decl_stmt|;
specifier|final
name|RelOptRule
name|compositeConvertRule
init|=
name|MyConverterRule
operator|.
name|create
argument_list|(
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|collation2
argument_list|,
name|collation1
argument_list|)
argument_list|)
argument_list|,
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|collation1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelOptRule
name|compositeConvertRule0
init|=
name|MyConverterRule
operator|.
name|create
argument_list|(
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|RelDistributionTraitDef
operator|.
name|INSTANCE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|distribution1
argument_list|,
name|distribution2
argument_list|)
argument_list|)
argument_list|,
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|RelDistributionTraitDef
operator|.
name|INSTANCE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|distribution1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|collationConvertRule
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"ConverterRule(in:[4 DESC],out:[0 DESC])"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|distributionConvertRule
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"ConverterRule(in:hash[0, 1],out:range)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compositeConvertRule
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"ConverterRule(in:[[0 DESC], [4 DESC]],out:[4 DESC])"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compositeConvertRule0
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"ConverterRule(in:[hash[0, 1], range],out:hash[0, 1])"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Util
operator|.
name|discard
argument_list|(
name|MyConverterRule
operator|.
name|create
argument_list|(
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"{sourceConvention}"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"<targetConvention>"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Rule description 'ConverterRule(in:{sourceConvention},"
operator|+
literal|"out:<targetConvention>)' is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link RelOptUtil#splitJoinCondition(RelNode, RelNode, RexNode, List, List, List)}    * where the join condition contains just one which is a EQUAL operator.    */
annotation|@
name|Test
name|void
name|testSplitJoinConditionEquals
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
argument_list|)
decl_stmt|;
name|splitJoinConditionHelper
argument_list|(
name|joinCond
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|leftJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rightJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|true
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link RelOptUtil#splitJoinCondition(RelNode, RelNode, RexNode, List, List, List)}    * where the join condition contains just one which is a IS NOT DISTINCT operator.    */
annotation|@
name|Test
name|void
name|testSplitJoinConditionIsNotDistinctFrom
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
argument_list|)
decl_stmt|;
name|splitJoinConditionHelper
argument_list|(
name|joinCond
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|leftJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rightJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|false
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link RelOptUtil#splitJoinCondition(RelNode, RelNode, RexNode, List, List, List)}    * where the join condition contains an expanded version of IS NOT DISTINCT.    */
annotation|@
name|Test
name|void
name|testSplitJoinConditionExpandedIsNotDistinctFrom
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexInputRef
name|leftKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexInputRef
name|rightKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|leftKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|splitJoinConditionHelper
argument_list|(
name|joinCond
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|leftJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rightJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|false
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link RelOptUtil#splitJoinCondition(RelNode, RelNode, RexNode, List, List, List)}    * where the join condition contains an expanded version of IS NOT DISTINCT    * using CASE.    */
annotation|@
name|Test
name|void
name|testSplitJoinConditionExpandedIsNotDistinctFromUsingCase
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexInputRef
name|leftKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexInputRef
name|rightKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|RelOptUtil
operator|.
name|isDistinctFrom
argument_list|(
name|relBuilder
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|leftKeyInputRef
argument_list|,
name|rightKeyInputRef
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|splitJoinConditionHelper
argument_list|(
name|joinCond
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|leftJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rightJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|false
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link RelOptUtil#splitJoinCondition(RelNode, RelNode, RexNode, List, List, List)}    * where the join condition contains an expanded version of IS NOT DISTINCT    * using CASE.    */
annotation|@
name|Test
name|void
name|testSplitJoinConditionExpandedIsNotDistinctFromUsingCase2
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexInputRef
name|leftKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexInputRef
name|rightKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|leftKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|leftKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|)
decl_stmt|;
name|splitJoinConditionHelper
argument_list|(
name|joinCond
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|leftJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rightJoinIndex
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|false
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|splitJoinConditionHelper
parameter_list|(
name|RexNode
name|joinCond
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|expLeftKeys
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|expRightKeys
parameter_list|,
name|List
argument_list|<
name|Boolean
argument_list|>
name|expFilterNulls
parameter_list|,
name|RexNode
name|expRemaining
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|actLeftKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actRightKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|actFilterNulls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RexNode
name|actRemaining
init|=
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|empScan
argument_list|,
name|deptScan
argument_list|,
name|joinCond
argument_list|,
name|actLeftKeys
argument_list|,
name|actRightKeys
argument_list|,
name|actFilterNulls
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expRemaining
argument_list|,
name|actRemaining
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expFilterNulls
argument_list|,
name|actFilterNulls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expLeftKeys
argument_list|,
name|actLeftKeys
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expRightKeys
argument_list|,
name|actRightKeys
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link RelOptUtil#pushDownJoinConditions(org.apache.calcite.rel.core.Join, RelBuilder)}    * where the join condition contains a complex expression.    */
annotation|@
name|Test
name|void
name|testPushDownJoinConditions
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexInputRef
name|leftKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexInputRef
name|rightKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|rightKeyInputRef
argument_list|)
decl_stmt|;
comment|// Build the join operator and push down join conditions
name|relBuilder
operator|.
name|push
argument_list|(
name|empScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|deptScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|joinCond
argument_list|)
expr_stmt|;
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|relBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|transformed
init|=
name|RelOptUtil
operator|.
name|pushDownJoinConditions
argument_list|(
name|join
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
comment|// Assert the new join operator
name|assertThat
argument_list|(
name|transformed
operator|.
name|getRowType
argument_list|()
argument_list|,
name|is
argument_list|(
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transformed
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|transformedInput
init|=
name|transformed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformedInput
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Join
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Join
name|newJoin
init|=
operator|(
name|Join
operator|)
name|transformedInput
decl_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getCondition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
comment|// Computed field is added at the end (and index start at 0)
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
comment|// Right side is shifted by 1
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
literal|1
operator|+
name|rightJoinIndex
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getLeft
argument_list|()
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Project
name|leftInput
init|=
operator|(
name|Project
operator|)
name|newJoin
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftInput
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link RelOptUtil#pushDownJoinConditions(org.apache.calcite.rel.core.Join, RelBuilder)}    * where the join condition contains a complex expression.    */
annotation|@
name|Test
name|void
name|testPushDownJoinConditionsWithIsNotDistinct
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexInputRef
name|leftKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexInputRef
name|rightKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|rightKeyInputRef
argument_list|)
decl_stmt|;
comment|// Build the join operator and push down join conditions
name|relBuilder
operator|.
name|push
argument_list|(
name|empScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|deptScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|joinCond
argument_list|)
expr_stmt|;
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|relBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|transformed
init|=
name|RelOptUtil
operator|.
name|pushDownJoinConditions
argument_list|(
name|join
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
comment|// Assert the new join operator
name|assertThat
argument_list|(
name|transformed
operator|.
name|getRowType
argument_list|()
argument_list|,
name|is
argument_list|(
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transformed
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|transformedInput
init|=
name|transformed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformedInput
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Join
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Join
name|newJoin
init|=
operator|(
name|Join
operator|)
name|transformedInput
decl_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getCondition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
comment|// Computed field is added at the end (and index start at 0)
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
comment|// Right side is shifted by 1
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
literal|1
operator|+
name|rightJoinIndex
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getLeft
argument_list|()
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Project
name|leftInput
init|=
operator|(
name|Project
operator|)
name|newJoin
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftInput
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link RelOptUtil#pushDownJoinConditions(org.apache.calcite.rel.core.Join, RelBuilder)}    * where the join condition contains a complex expression.    */
annotation|@
name|Test
name|void
name|testPushDownJoinConditionsWithExpandedIsNotDistinct
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexInputRef
name|leftKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexInputRef
name|rightKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Build the join operator and push down join conditions
name|relBuilder
operator|.
name|push
argument_list|(
name|empScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|deptScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|joinCond
argument_list|)
expr_stmt|;
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|relBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|transformed
init|=
name|RelOptUtil
operator|.
name|pushDownJoinConditions
argument_list|(
name|join
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
comment|// Assert the new join operator
name|assertThat
argument_list|(
name|transformed
operator|.
name|getRowType
argument_list|()
argument_list|,
name|is
argument_list|(
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transformed
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|transformedInput
init|=
name|transformed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformedInput
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Join
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Join
name|newJoin
init|=
operator|(
name|Join
operator|)
name|transformedInput
decl_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getCondition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
comment|// Computed field is added at the end (and index start at 0)
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
comment|// Right side is shifted by 1
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
literal|1
operator|+
name|rightJoinIndex
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getLeft
argument_list|()
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Project
name|leftInput
init|=
operator|(
name|Project
operator|)
name|newJoin
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftInput
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link RelOptUtil#pushDownJoinConditions(org.apache.calcite.rel.core.Join, RelBuilder)}    * where the join condition contains a complex expression.    */
annotation|@
name|Test
name|void
name|testPushDownJoinConditionsWithExpandedIsNotDistinctUsingCase
parameter_list|()
block|{
name|int
name|leftJoinIndex
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|int
name|rightJoinIndex
init|=
name|deptRow
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
decl_stmt|;
name|RexInputRef
name|leftKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|leftJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexInputRef
name|rightKeyInputRef
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
name|rightJoinIndex
argument_list|,
name|empDeptJoinRelFields
argument_list|)
decl_stmt|;
name|RexNode
name|joinCond
init|=
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|rightKeyInputRef
argument_list|)
argument_list|)
decl_stmt|;
comment|// Build the join operator and push down join conditions
name|relBuilder
operator|.
name|push
argument_list|(
name|empScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|deptScan
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|joinCond
argument_list|)
expr_stmt|;
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|relBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RelNode
name|transformed
init|=
name|RelOptUtil
operator|.
name|pushDownJoinConditions
argument_list|(
name|join
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
comment|// Assert the new join operator
name|assertThat
argument_list|(
name|transformed
operator|.
name|getRowType
argument_list|()
argument_list|,
name|is
argument_list|(
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transformed
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RelNode
name|transformedInput
init|=
name|transformed
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transformedInput
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Join
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Join
name|newJoin
init|=
operator|(
name|Join
operator|)
name|transformedInput
decl_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getCondition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
argument_list|,
comment|// Computed field is added at the end (and index start at 0)
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
comment|// Right side is shifted by 1
name|RexInputRef
operator|.
name|of
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
operator|+
literal|1
operator|+
name|rightJoinIndex
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newJoin
operator|.
name|getLeft
argument_list|()
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Project
name|leftInput
init|=
operator|(
name|Project
operator|)
name|newJoin
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftInput
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|empRow
operator|.
name|getFieldCount
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|relBuilder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|leftKeyInputRef
argument_list|,
name|relBuilder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link RelOptUtil#createCastRel(RelNode, RelDataType, boolean)}    * with changed field nullability or field name.    */
annotation|@
name|Test
name|void
name|testCreateCastRel
parameter_list|()
block|{
comment|// Equivalent SQL:
comment|// select empno, ename, count(job)
comment|// from emp
comment|// group by empno, ename
comment|// Row type:
comment|// RecordType(SMALLINT NOT NULL EMPNO, VARCHAR(10) ENAME, BIGINT NOT NULL $f2) NOT NULL
specifier|final
name|RelNode
name|agg
init|=
name|relBuilder
operator|.
name|push
argument_list|(
name|empScan
argument_list|)
operator|.
name|aggregate
argument_list|(
name|relBuilder
operator|.
name|groupKey
argument_list|(
literal|"EMPNO"
argument_list|,
literal|"ENAME"
argument_list|)
argument_list|,
name|relBuilder
operator|.
name|count
argument_list|(
name|relBuilder
operator|.
name|field
argument_list|(
literal|"JOB"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Cast with row type(change nullability):
comment|// RecordType(SMALLINT EMPNO, VARCHAR(10) ENAME, BIGINT $f2) NOT NULL
comment|// The fields.
specifier|final
name|RelDataTypeField
name|fieldEmpno
init|=
name|agg
operator|.
name|getRowType
argument_list|()
operator|.
name|getField
argument_list|(
literal|"EMPNO"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|fieldEname
init|=
name|agg
operator|.
name|getRowType
argument_list|()
operator|.
name|getField
argument_list|(
literal|"ENAME"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|fieldJobCnt
init|=
name|Util
operator|.
name|last
argument_list|(
name|agg
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|relBuilder
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
comment|// The field types.
specifier|final
name|RelDataType
name|fieldTypeEmpnoNullable
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|fieldEmpno
operator|.
name|getType
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|fieldTypeJobCntNullable
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|fieldJobCnt
operator|.
name|getType
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|relBuilder
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|castRowType
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|fieldEmpno
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldTypeEmpnoNullable
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|fieldEname
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldEname
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|fieldJobCnt
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldTypeJobCntNullable
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|castNode
init|=
name|RelOptUtil
operator|.
name|createCastRel
argument_list|(
name|agg
argument_list|,
name|castRowType
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|expectNode
init|=
name|relBuilder
operator|.
name|push
argument_list|(
name|agg
argument_list|)
operator|.
name|project
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|fieldTypeEmpnoNullable
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
literal|0
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|fieldTypeJobCntNullable
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
literal|2
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|castNode
operator|.
name|explain
argument_list|()
argument_list|,
name|is
argument_list|(
name|expectNode
operator|.
name|explain
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cast with row type(change field name):
comment|// RecordType(SMALLINT NOT NULL EMPNO, VARCHAR(10) ENAME, BIGINT NOT NULL JOB_CNT) NOT NULL
specifier|final
name|RelDataType
name|castRowType1
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|fieldEmpno
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldEmpno
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|fieldEname
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldEname
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"JOB_CNT"
argument_list|,
name|fieldJobCnt
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|castNode1
init|=
name|RelOptUtil
operator|.
name|createCastRel
argument_list|(
name|agg
argument_list|,
name|castRowType1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|expectNode1
init|=
name|RelFactories
operator|.
name|DEFAULT_PROJECT_FACTORY
operator|.
name|createProject
argument_list|(
name|agg
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|RexInputRef
operator|.
name|of
argument_list|(
literal|0
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
literal|2
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|fieldEmpno
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldEname
operator|.
name|getName
argument_list|()
argument_list|,
literal|"JOB_CNT"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|castNode1
operator|.
name|explain
argument_list|()
argument_list|,
name|is
argument_list|(
name|expectNode1
operator|.
name|explain
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the field JOB_CNT field name again.
comment|// The projection expect to be merged.
specifier|final
name|RelDataType
name|castRowType2
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|fieldEmpno
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldEmpno
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|fieldEname
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldEname
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"JOB_CNT2"
argument_list|,
name|fieldJobCnt
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|castNode2
init|=
name|RelOptUtil
operator|.
name|createCastRel
argument_list|(
name|agg
argument_list|,
name|castRowType2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|expectNode2
init|=
name|RelFactories
operator|.
name|DEFAULT_PROJECT_FACTORY
operator|.
name|createProject
argument_list|(
name|agg
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|RexInputRef
operator|.
name|of
argument_list|(
literal|0
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|,
name|RexInputRef
operator|.
name|of
argument_list|(
literal|2
argument_list|,
name|agg
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|fieldEmpno
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldEname
operator|.
name|getName
argument_list|()
argument_list|,
literal|"JOB_CNT2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|castNode2
operator|.
name|explain
argument_list|()
argument_list|,
name|is
argument_list|(
name|expectNode2
operator|.
name|explain
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Dummy sub-class of ConverterRule, to check whether generated descriptions    * are OK. */
specifier|private
specifier|static
class|class
name|MyConverterRule
extends|extends
name|ConverterRule
block|{
specifier|static
name|MyConverterRule
name|create
parameter_list|(
name|RelTrait
name|in
parameter_list|,
name|RelTrait
name|out
parameter_list|)
block|{
return|return
name|Config
operator|.
name|INSTANCE
operator|.
name|withConversion
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
operator|.
name|withRuleFactory
argument_list|(
name|MyConverterRule
operator|::
operator|new
argument_list|)
operator|.
name|toRule
argument_list|(
name|MyConverterRule
operator|.
name|class
argument_list|)
return|;
block|}
name|MyConverterRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

