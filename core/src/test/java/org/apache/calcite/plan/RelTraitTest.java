begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableConvention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|toHexString
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|identityHashCode
import|;
end_import

begin_comment
comment|/**  * Test to verify {@link RelCompositeTrait} and {@link RelTraitSet}.  */
end_comment

begin_class
class|class
name|RelTraitTest
block|{
specifier|private
specifier|static
specifier|final
name|RelCollationTraitDef
name|COLLATION
init|=
name|RelCollationTraitDef
operator|.
name|INSTANCE
decl_stmt|;
specifier|private
name|void
name|assertCanonical
parameter_list|(
name|String
name|message
parameter_list|,
name|Supplier
argument_list|<
name|List
argument_list|<
name|RelCollation
argument_list|>
argument_list|>
name|collation
parameter_list|)
block|{
name|RelTrait
name|trait1
init|=
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|COLLATION
argument_list|,
name|collation
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|RelTrait
name|trait2
init|=
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|COLLATION
argument_list|,
name|collation
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|trait1
operator|+
literal|" @"
operator|+
name|toHexString
argument_list|(
name|identityHashCode
argument_list|(
name|trait1
argument_list|)
argument_list|)
argument_list|,
name|trait2
operator|+
literal|" @"
operator|+
name|toHexString
argument_list|(
name|identityHashCode
argument_list|(
name|trait2
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|"RelCompositeTrait.of should return the same instance for "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|compositeEmpty
parameter_list|()
block|{
name|assertCanonical
argument_list|(
literal|"empty composite"
argument_list|,
name|ImmutableList
operator|::
name|of
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|compositeOne
parameter_list|()
block|{
name|assertCanonical
argument_list|(
literal|"composite with one element"
argument_list|,
parameter_list|()
lambda|->
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|compositeTwo
parameter_list|()
block|{
name|assertCanonical
argument_list|(
literal|"composite with two elements"
argument_list|,
parameter_list|()
lambda|->
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTraitSetDefault
parameter_list|()
block|{
name|RelTraitSet
name|traits
init|=
name|RelTraitSet
operator|.
name|createEmpty
argument_list|()
decl_stmt|;
name|traits
operator|=
name|traits
operator|.
name|plus
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
operator|.
name|plus
argument_list|(
name|RelCollations
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|traits
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|traits
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|traits
operator|=
name|traits
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|traits
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|traits
operator|.
name|isDefaultSansConvention
argument_list|()
argument_list|)
expr_stmt|;
name|traits
operator|=
name|traits
operator|.
name|replace
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|traits
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|traits
operator|.
name|replace
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
operator|.
name|isDefaultSansConvention
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|traits
operator|.
name|getDefault
argument_list|()
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|traits
operator|=
name|traits
operator|.
name|getDefaultSansConvention
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|traits
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|traits
operator|.
name|getConvention
argument_list|()
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|traits
operator|.
name|isDefaultSansConvention
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|traits
operator|.
name|toString
argument_list|()
argument_list|,
literal|"ENUMERABLE.[]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTraitSetEqual
parameter_list|()
block|{
name|RelTraitSet
name|traits
init|=
name|RelTraitSet
operator|.
name|createEmpty
argument_list|()
decl_stmt|;
name|RelTraitSet
name|traits1
init|=
name|traits
operator|.
name|plus
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
operator|.
name|plus
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|traits1
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|RelTraitSet
name|traits2
init|=
name|traits1
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|traits2
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|traits1
argument_list|,
name|traits2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|traits1
operator|.
name|equalsSansConvention
argument_list|(
name|traits2
argument_list|)
argument_list|)
expr_stmt|;
name|RelTraitSet
name|traits3
init|=
name|traits2
operator|.
name|replace
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|traits3
operator|.
name|equalsSansConvention
argument_list|(
name|traits2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

