begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Test to verify {@link RelCompositeTrait}.  */
end_comment

begin_class
specifier|public
class|class
name|RelTraitTest
block|{
specifier|private
specifier|static
specifier|final
name|RelCollationTraitDef
name|COLLATION
init|=
name|RelCollationTraitDef
operator|.
name|INSTANCE
decl_stmt|;
specifier|private
name|void
name|assertCanonical
parameter_list|(
name|String
name|message
parameter_list|,
name|Supplier
argument_list|<
name|List
argument_list|<
name|RelCollation
argument_list|>
argument_list|>
name|collation
parameter_list|)
block|{
name|RelTrait
name|trait1
init|=
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|COLLATION
argument_list|,
name|collation
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|RelTrait
name|trait2
init|=
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|COLLATION
argument_list|,
name|collation
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"RelCompositeTrait.of should return the same instance for "
operator|+
name|message
argument_list|,
name|trait1
operator|+
literal|" @"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trait1
argument_list|)
argument_list|)
argument_list|,
name|trait2
operator|+
literal|" @"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trait2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compositeEmpty
parameter_list|()
block|{
name|assertCanonical
argument_list|(
literal|"empty composite"
argument_list|,
name|ImmutableList
operator|::
name|of
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compositeOne
parameter_list|()
block|{
name|assertCanonical
argument_list|(
literal|"composite with one element"
argument_list|,
parameter_list|()
lambda|->
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compositeTwo
parameter_list|()
block|{
name|assertCanonical
argument_list|(
literal|"composite with two elements"
argument_list|,
parameter_list|()
lambda|->
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSatisfies
parameter_list|(
name|RelTrait
name|a
parameter_list|,
name|RelTrait
name|b
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a
operator|+
literal|".satisfies("
operator|+
name|b
operator|+
literal|")"
argument_list|,
name|a
operator|.
name|satisfies
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
comment|// a should be "the same or stricter" than b, so b cannot be stricter than a at the same time
name|Assert
operator|.
name|assertTrue
argument_list|(
name|b
operator|+
literal|".NOTsatisfies("
operator|+
name|a
operator|+
literal|")"
argument_list|,
operator|!
name|b
operator|.
name|satisfies
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests for {@link RelCompositeTrait#satisfies(RelTrait)}.    */
annotation|@
name|Test
specifier|public
name|void
name|compositeSatisfies
parameter_list|()
block|{
comment|//noinspection unchecked
name|RelCompositeTrait
argument_list|<
name|RelCollation
argument_list|>
name|abc_bc_c
init|=
operator|(
name|RelCompositeTrait
operator|)
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|COLLATION
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|RelFieldCollation
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|RelFieldCollation
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|RelFieldCollation
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// A composite trait must satisfy its sub-traits
for|for
control|(
name|RelCollation
name|collation
range|:
name|abc_bc_c
operator|.
name|traitList
argument_list|()
control|)
block|{
name|assertSatisfies
argument_list|(
name|abc_bc_c
argument_list|,
name|collation
argument_list|)
expr_stmt|;
block|}
comment|// A trait must satisfy to itself
name|assertSatisfies
argument_list|(
name|abc_bc_c
argument_list|,
name|abc_bc_c
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
name|RelCompositeTrait
argument_list|<
name|RelCollation
argument_list|>
name|bc_c
init|=
operator|(
name|RelCompositeTrait
operator|)
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|COLLATION
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|RelFieldCollation
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertSatisfies
argument_list|(
name|abc_bc_c
argument_list|,
name|bc_c
argument_list|)
expr_stmt|;
comment|//noinspection unchecked
name|RelCompositeTrait
argument_list|<
name|RelCollation
argument_list|>
name|b_c
init|=
operator|(
name|RelCompositeTrait
operator|)
name|RelCompositeTrait
operator|.
name|of
argument_list|(
name|COLLATION
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertSatisfies
argument_list|(
name|abc_bc_c
argument_list|,
name|b_c
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End RelTraitTest.java
end_comment

end_unit

