begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTrait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|AbstractRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|BiRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Common classes and utility methods for Volcano planner tests.  */
end_comment

begin_class
class|class
name|PlannerTests
block|{
specifier|private
name|PlannerTests
parameter_list|()
block|{
block|}
comment|/**    * Private calling convention representing a physical implementation.    */
specifier|static
specifier|final
name|Convention
name|PHYS_CALLING_CONVENTION
init|=
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"PHYS"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|canConvertConvention
parameter_list|(
name|Convention
name|toConvention
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useAbstractConvertersForConversion
parameter_list|(
name|RelTraitSet
name|fromTraits
parameter_list|,
name|RelTraitSet
name|toTraits
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|enforce
parameter_list|(
specifier|final
name|RelNode
name|input
parameter_list|,
specifier|final
name|RelTraitSet
name|required
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|Convention
name|PHYS_CALLING_CONVENTION_2
init|=
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"PHYS_2"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
block|{       }
decl_stmt|;
specifier|static
specifier|final
name|Convention
name|PHYS_CALLING_CONVENTION_3
init|=
operator|new
name|Convention
operator|.
name|Impl
argument_list|(
literal|"PHYS_3"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|satisfies
parameter_list|(
name|RelTrait
name|trait
parameter_list|)
block|{
if|if
condition|(
name|trait
operator|.
name|equals
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|super
operator|.
name|satisfies
argument_list|(
name|trait
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|static
name|RelOptCluster
name|newCluster
parameter_list|(
name|VolcanoPlanner
name|planner
parameter_list|)
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
return|return
name|RelOptCluster
operator|.
name|create
argument_list|(
name|planner
argument_list|,
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
argument_list|)
return|;
block|}
comment|/** Leaf relational expression. */
specifier|abstract
specifier|static
class|class
name|TestLeafRel
extends|extends
name|AbstractRelNode
block|{
specifier|final
name|String
name|label
decl_stmt|;
name|TestLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|)
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeInfiniteCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"this"
argument_list|,
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"label"
argument_list|,
name|label
argument_list|)
return|;
block|}
block|}
comment|/** Relational expression with one input. */
specifier|abstract
specifier|static
class|class
name|TestSingleRel
extends|extends
name|SingleRel
block|{
name|TestSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeInfiniteCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
return|;
block|}
block|}
comment|/** Relational expression with one input and convention NONE. */
specifier|static
class|class
name|NoneSingleRel
extends|extends
name|TestSingleRel
block|{
name|NoneSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|contains
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
assert|;
return|return
operator|new
name|NoneSingleRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Relational expression with two inputs and convention PHYS. */
specifier|static
class|class
name|PhysBiRel
extends|extends
name|BiRel
block|{
name|PhysBiRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|size
argument_list|()
operator|==
literal|2
assert|;
return|return
operator|new
name|PhysBiRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
return|;
block|}
block|}
comment|/** Relational expression with zero inputs and convention NONE. */
specifier|static
class|class
name|NoneLeafRel
extends|extends
name|TestLeafRel
block|{
name|NoneLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
assert|;
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
block|}
comment|/** Relational expression with zero inputs and convention PHYS. */
specifier|static
class|class
name|PhysLeafRel
extends|extends
name|TestLeafRel
block|{
name|Convention
name|convention
decl_stmt|;
name|PhysLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|this
argument_list|(
name|cluster
argument_list|,
name|PHYS_CALLING_CONVENTION
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
name|PhysLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|Convention
name|convention
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|convention
argument_list|)
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|this
operator|.
name|convention
operator|=
name|convention
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|convention
argument_list|)
assert|;
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
block|}
comment|/** Relational expression with one input and convention PHYS. */
specifier|static
class|class
name|PhysSingleRel
extends|extends
name|TestSingleRel
block|{
name|PhysSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|contains
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
assert|;
return|return
operator|new
name|PhysSingleRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Planner rule that converts {@link NoneLeafRel} to PHYS convention. */
specifier|public
specifier|static
class|class
name|PhysLeafRule
extends|extends
name|RelRule
argument_list|<
name|PhysLeafRule
operator|.
name|Config
argument_list|>
block|{
specifier|static
specifier|final
name|PhysLeafRule
name|INSTANCE
init|=
name|ImmutableTraitPhysLeafRuleConfig
operator|.
name|builder
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|NoneLeafRel
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toRule
argument_list|()
decl_stmt|;
specifier|protected
name|PhysLeafRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneLeafRel
name|leafRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysLeafRel
argument_list|(
name|leafRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|leafRel
operator|.
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
annotation|@
name|Value
operator|.
name|Style
argument_list|(
name|init
operator|=
literal|"with*"
argument_list|,
name|typeImmutable
operator|=
literal|"ImmutableTraitPhysLeafRuleConfig"
argument_list|)
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|PhysLeafRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|PhysLeafRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Planner rule that converts {@link NoneLeafRel} to PHYS convention with different type. */
specifier|public
specifier|static
class|class
name|MockPhysLeafRule
extends|extends
name|RelRule
argument_list|<
name|MockPhysLeafRule
operator|.
name|Config
argument_list|>
block|{
specifier|static
specifier|final
name|MockPhysLeafRule
name|INSTANCE
init|=
name|ImmutableMockPhysLeafRuleConfig
operator|.
name|builder
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|NoneLeafRel
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toRule
argument_list|()
decl_stmt|;
comment|/** Relational expression with zero inputs and convention PHYS. */
specifier|public
specifier|static
class|class
name|MockPhysLeafRel
extends|extends
name|PhysLeafRel
block|{
name|MockPhysLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|PHYS_CALLING_CONVENTION
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"this"
argument_list|,
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|protected
name|MockPhysLeafRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneLeafRel
name|leafRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// It would throw exception.
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|MockPhysLeafRel
argument_list|(
name|leafRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|leafRel
operator|.
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
annotation|@
name|Value
operator|.
name|Style
argument_list|(
name|init
operator|=
literal|"with*"
argument_list|,
name|typeImmutable
operator|=
literal|"ImmutableMockPhysLeafRuleConfig"
argument_list|)
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|MockPhysLeafRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|MockPhysLeafRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Planner rule that matches a {@link NoneSingleRel} and succeeds. */
specifier|public
specifier|static
class|class
name|GoodSingleRule
extends|extends
name|RelRule
argument_list|<
name|GoodSingleRule
operator|.
name|Config
argument_list|>
block|{
specifier|static
specifier|final
name|GoodSingleRule
name|INSTANCE
init|=
name|ImmutableGoodSingleRuleConfig
operator|.
name|builder
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|NoneSingleRel
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toRule
argument_list|()
decl_stmt|;
specifier|protected
name|GoodSingleRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneSingleRel
name|single
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|input
init|=
name|single
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|RelNode
name|physInput
init|=
name|convert
argument_list|(
name|input
argument_list|,
name|single
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|PhysSingleRel
argument_list|(
name|single
operator|.
name|getCluster
argument_list|()
argument_list|,
name|physInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
annotation|@
name|Value
operator|.
name|Style
argument_list|(
name|init
operator|=
literal|"with*"
argument_list|,
name|typeImmutable
operator|=
literal|"ImmutableGoodSingleRuleConfig"
argument_list|)
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|GoodSingleRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|GoodSingleRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Planner rule that matches a parent with two children and asserts that they    * are not the same.    */
specifier|public
specifier|static
class|class
name|AssertOperandsDifferentRule
extends|extends
name|RelRule
argument_list|<
name|AssertOperandsDifferentRule
operator|.
name|Config
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|AssertOperandsDifferentRule
name|INSTANCE
init|=
name|ImmutableAssertOperandsDifferentRuleConfig
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b0
lambda|->
name|b0
operator|.
name|operand
argument_list|(
name|PhysBiRel
operator|.
name|class
argument_list|)
operator|.
name|inputs
argument_list|(
name|b1
lambda|->
name|b1
operator|.
name|operand
argument_list|(
name|PhysLeafRel
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|,
name|b2
lambda|->
name|b2
operator|.
name|operand
argument_list|(
name|PhysLeafRel
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toRule
argument_list|()
decl_stmt|;
specifier|protected
name|AssertOperandsDifferentRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|PhysLeafRel
name|left
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|PhysLeafRel
name|right
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
assert|assert
name|left
operator|!=
name|right
operator|:
name|left
operator|+
literal|" should be different from "
operator|+
name|right
assert|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
annotation|@
name|Value
operator|.
name|Style
argument_list|(
name|init
operator|=
literal|"with*"
argument_list|,
name|typeImmutable
operator|=
literal|"ImmutableAssertOperandsDifferentRuleConfig"
argument_list|)
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|AssertOperandsDifferentRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|AssertOperandsDifferentRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

