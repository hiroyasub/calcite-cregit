begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|ConventionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|AbstractConverter
operator|.
name|ExpandConversionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|PlannerTests
operator|.
name|PHYS_CALLING_CONVENTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|PlannerTests
operator|.
name|TestLeafRel
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|PlannerTests
operator|.
name|TestSingleRel
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|PlannerTests
operator|.
name|newCluster
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link org.apache.calcite.rel.RelCollationTraitDef}.  */
end_comment

begin_class
class|class
name|CollationConversionTest
block|{
specifier|private
specifier|static
specifier|final
name|TestRelCollationImpl
name|LEAF_COLLATION
init|=
operator|new
name|TestRelCollationImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|0
argument_list|,
name|Direction
operator|.
name|CLUSTERED
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TestRelCollationImpl
name|ROOT_COLLATION
init|=
operator|new
name|TestRelCollationImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TestRelCollationTraitDef
name|COLLATION_TRAIT_DEF
init|=
operator|new
name|TestRelCollationTraitDef
argument_list|()
decl_stmt|;
annotation|@
name|Test
name|void
name|testCollationConversion
parameter_list|()
block|{
specifier|final
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|COLLATION_TRAIT_DEF
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|SingleNodeRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|LeafTraitRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRule
argument_list|(
name|ExpandConversionRule
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setTopDownOpt
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|newCluster
argument_list|(
name|planner
argument_list|)
decl_stmt|;
specifier|final
name|NoneLeafRel
name|leafRel
init|=
operator|new
name|NoneLeafRel
argument_list|(
name|cluster
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|NoneSingleRel
name|singleRel
init|=
operator|new
name|NoneSingleRel
argument_list|(
name|cluster
argument_list|,
name|leafRel
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|convertedRel
init|=
name|planner
operator|.
name|changeTraits
argument_list|(
name|singleRel
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
operator|.
name|plus
argument_list|(
name|ROOT_COLLATION
argument_list|)
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|convertedRel
argument_list|)
expr_stmt|;
name|RelNode
name|result
init|=
name|planner
operator|.
name|chooseDelegate
argument_list|()
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|RootSingleRel
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getTraitSet
argument_list|()
operator|.
name|contains
argument_list|(
name|ROOT_COLLATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getTraitSet
argument_list|()
operator|.
name|contains
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|result
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|input
operator|instanceof
name|PhysicalSort
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getTraitSet
argument_list|()
operator|.
name|contains
argument_list|(
name|ROOT_COLLATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|contains
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|input2
init|=
name|input
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|input2
operator|instanceof
name|LeafRel
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|input2
operator|.
name|getTraitSet
argument_list|()
operator|.
name|contains
argument_list|(
name|LEAF_COLLATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|contains
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Converts a NoneSingleRel to RootSingleRel. */
specifier|public
specifier|static
class|class
name|SingleNodeRule
extends|extends
name|RelRule
argument_list|<
name|SingleNodeRule
operator|.
name|Config
argument_list|>
block|{
specifier|static
specifier|final
name|SingleNodeRule
name|INSTANCE
init|=
name|Config
operator|.
name|EMPTY
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|NoneSingleRel
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|toRule
argument_list|()
decl_stmt|;
specifier|protected
name|SingleNodeRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneSingleRel
name|single
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|input
init|=
name|single
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|RelNode
name|physInput
init|=
name|convert
argument_list|(
name|input
argument_list|,
name|single
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
operator|.
name|plus
argument_list|(
name|ROOT_COLLATION
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|RootSingleRel
argument_list|(
name|single
operator|.
name|getCluster
argument_list|()
argument_list|,
name|physInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|SingleNodeRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|SingleNodeRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Root node with physical convention and ROOT_COLLATION trait. */
specifier|private
specifier|static
class|class
name|RootSingleRel
extends|extends
name|TestSingleRel
block|{
name|RootSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
operator|.
name|plus
argument_list|(
name|ROOT_COLLATION
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|RootSingleRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Converts a {@link NoneLeafRel} (with none convention) to {@link LeafRel}    * (with physical convention). */
specifier|public
specifier|static
class|class
name|LeafTraitRule
extends|extends
name|RelRule
argument_list|<
name|LeafTraitRule
operator|.
name|Config
argument_list|>
block|{
specifier|static
specifier|final
name|LeafTraitRule
name|INSTANCE
init|=
name|Config
operator|.
name|EMPTY
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|NoneLeafRel
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|toRule
argument_list|()
decl_stmt|;
name|LeafTraitRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Convention
name|getOutConvention
parameter_list|()
block|{
return|return
name|PHYS_CALLING_CONVENTION
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|NoneLeafRel
name|leafRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
operator|new
name|LeafRel
argument_list|(
name|leafRel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|leafRel
operator|.
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|LeafTraitRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|LeafTraitRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Leaf node with physical convention and LEAF_COLLATION trait. */
specifier|private
specifier|static
class|class
name|LeafRel
extends|extends
name|TestLeafRel
block|{
name|LeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|PHYS_CALLING_CONVENTION
argument_list|)
operator|.
name|plus
argument_list|(
name|LEAF_COLLATION
argument_list|)
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|LeafRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|label
argument_list|)
return|;
block|}
block|}
comment|/** Leaf node with none convention and LEAF_COLLATION trait. */
specifier|private
specifier|static
class|class
name|NoneLeafRel
extends|extends
name|TestLeafRel
block|{
name|NoneLeafRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
operator|.
name|plus
argument_list|(
name|LEAF_COLLATION
argument_list|)
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|,
name|LEAF_COLLATION
argument_list|)
assert|;
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
block|}
comment|/** A single-input node with none convention and LEAF_COLLATION trait. */
specifier|private
specifier|static
class|class
name|NoneSingleRel
extends|extends
name|TestSingleRel
block|{
name|NoneSingleRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|)
operator|.
name|plus
argument_list|(
name|LEAF_COLLATION
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|comprises
argument_list|(
name|Convention
operator|.
name|NONE
argument_list|,
name|LEAF_COLLATION
argument_list|)
assert|;
return|return
operator|new
name|NoneSingleRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Dummy collation trait implementation for the test. */
specifier|private
specifier|static
class|class
name|TestRelCollationImpl
extends|extends
name|RelCollationImpl
block|{
name|TestRelCollationImpl
parameter_list|(
name|ImmutableList
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
parameter_list|)
block|{
name|super
argument_list|(
name|fieldCollations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelTraitDef
name|getTraitDef
parameter_list|()
block|{
return|return
name|COLLATION_TRAIT_DEF
return|;
block|}
block|}
comment|/** Dummy collation trait def implementation for the test (uses    * {@link PhysicalSort} below). */
specifier|private
specifier|static
class|class
name|TestRelCollationTraitDef
extends|extends
name|RelTraitDef
argument_list|<
name|RelCollation
argument_list|>
block|{
specifier|public
name|Class
argument_list|<
name|RelCollation
argument_list|>
name|getTraitClass
parameter_list|()
block|{
return|return
name|RelCollation
operator|.
name|class
return|;
block|}
specifier|public
name|String
name|getSimpleName
parameter_list|()
block|{
return|return
literal|"testsort"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|multiple
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|RelCollation
name|getDefault
parameter_list|()
block|{
return|return
name|LEAF_COLLATION
return|;
block|}
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|RelCollation
name|toCollation
parameter_list|,
name|boolean
name|allowInfiniteCostConverters
parameter_list|)
block|{
if|if
condition|(
name|toCollation
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// An empty sort doesn't make sense.
return|return
literal|null
return|;
block|}
return|return
operator|new
name|PhysicalSort
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|toCollation
argument_list|)
argument_list|,
name|rel
argument_list|,
name|toCollation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canConvert
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelCollation
name|fromTrait
parameter_list|,
name|RelCollation
name|toTrait
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Physical sort node (not logical). */
specifier|private
specifier|static
class|class
name|PhysicalSort
extends|extends
name|Sort
block|{
name|PhysicalSort
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RelCollation
name|collation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traits
argument_list|,
name|input
argument_list|,
name|collation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sort
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|newInput
parameter_list|,
name|RelCollation
name|newCollation
parameter_list|,
name|RexNode
name|offset
parameter_list|,
name|RexNode
name|fetch
parameter_list|)
block|{
return|return
operator|new
name|PhysicalSort
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|newInput
argument_list|,
name|newCollation
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|)
return|;
block|}
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|planner
operator|.
name|getCostFactory
argument_list|()
operator|.
name|makeTinyCost
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

