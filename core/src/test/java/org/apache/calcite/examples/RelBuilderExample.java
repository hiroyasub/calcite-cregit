begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|RelBuilderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_comment
comment|/**  * Example that uses {@link org.apache.calcite.tools.RelBuilder}  * to create various relational expressions.  */
end_comment

begin_class
specifier|public
class|class
name|RelBuilderExample
block|{
specifier|private
specifier|final
name|boolean
name|verbose
decl_stmt|;
specifier|public
name|RelBuilderExample
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
operator|new
name|RelBuilderExample
argument_list|(
literal|true
argument_list|)
operator|.
name|runAllExamples
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|runAllExamples
parameter_list|()
block|{
comment|// Create a builder. The config contains a schema mapped
comment|// to the SCOTT database, with tables EMP and DEPT.
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|doExample
argument_list|(
name|builder
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|node
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|RelBuilder
name|doExample
parameter_list|(
name|RelBuilder
name|builder
parameter_list|,
name|int
name|i
parameter_list|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
return|return
name|example0
argument_list|(
name|builder
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|example1
argument_list|(
name|builder
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|example2
argument_list|(
name|builder
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|example3
argument_list|(
name|builder
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|example4
argument_list|(
name|builder
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown example "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a relational expression for a table scan.    * It is equivalent to    *    *<pre>    * SELECT *    * FROM emp</pre>    */
specifier|private
name|RelBuilder
name|example0
parameter_list|(
name|RelBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|values
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Creates a relational expression for a table scan.    * It is equivalent to    *    *<pre>    * SELECT *    * FROM emp</pre>    */
specifier|private
name|RelBuilder
name|example1
parameter_list|(
name|RelBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
return|;
block|}
comment|/**    * Creates a relational expression for a table scan and project.    * It is equivalent to    *    *<pre>    * SELECT deptno, ename    * FROM emp</pre>    */
specifier|private
name|RelBuilder
name|example2
parameter_list|(
name|RelBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"ENAME"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates a relational expression for a table scan, aggregate, filter.    * It is equivalent to    *    *<pre>    * SELECT deptno, count(*) AS c, sum(sal) AS s    * FROM emp    * GROUP BY deptno    * HAVING count(*)&gt; 10</pre>    */
specifier|private
name|RelBuilder
name|example3
parameter_list|(
name|RelBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|builder
operator|.
name|groupKey
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|,
name|builder
operator|.
name|count
argument_list|(
literal|false
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|builder
operator|.
name|sum
argument_list|(
literal|false
argument_list|,
literal|"S"
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"SAL"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Sometimes the stack becomes so deeply nested it gets confusing. To keep    * things straight, you can remove expressions from the stack. For example,    * here we are building a bushy join:    *    *<pre>    *                join    *              /      \    *         join          join    *       /      \      /      \    * CUSTOMERS ORDERS LINE_ITEMS PRODUCTS    *</pre>    *    *<p>We build it in three stages. Store the intermediate results in variables    * `left` and `right`, and use `push()` to put them back on the stack when it    * is time to create the final `Join`.    */
specifier|private
name|RelBuilder
name|example4
parameter_list|(
name|RelBuilder
name|builder
parameter_list|)
block|{
specifier|final
name|RelNode
name|left
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"CUSTOMERS"
argument_list|)
operator|.
name|scan
argument_list|(
literal|"ORDERS"
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
literal|"ORDER_ID"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|right
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"LINE_ITEMS"
argument_list|)
operator|.
name|scan
argument_list|(
literal|"PRODUCTS"
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
literal|"PRODUCT_ID"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|push
argument_list|(
name|left
argument_list|)
operator|.
name|push
argument_list|(
name|right
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
literal|"ORDER_ID"
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelBuilderExample.java
end_comment

end_unit

