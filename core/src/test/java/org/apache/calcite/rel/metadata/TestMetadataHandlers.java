begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|net
operator|.
name|bytebuddy
operator|.
name|ByteBuddy
import|;
end_import

begin_import
import|import
name|net
operator|.
name|bytebuddy
operator|.
name|description
operator|.
name|modifier
operator|.
name|SyntheticState
import|;
end_import

begin_import
import|import
name|net
operator|.
name|bytebuddy
operator|.
name|description
operator|.
name|modifier
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|net
operator|.
name|bytebuddy
operator|.
name|dynamic
operator|.
name|loading
operator|.
name|ClassLoadingStrategy
import|;
end_import

begin_import
import|import
name|net
operator|.
name|bytebuddy
operator|.
name|implementation
operator|.
name|FixedValue
import|;
end_import

begin_comment
comment|/**  * Constructs {@link MetadataHandler} classes useful for tests.  */
end_comment

begin_class
class|class
name|TestMetadataHandlers
block|{
comment|/**    * Returns a class representing an interface extending {@link MetadataHandler} and having    * a synthetic method.    *    * @return MetadataHandler class with a synthetic method    */
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|MetadataHandler
argument_list|<
name|TestMetadata
argument_list|>
argument_list|>
name|handlerClassWithSyntheticMethod
parameter_list|()
block|{
return|return
operator|new
name|ByteBuddy
argument_list|()
operator|.
name|redefine
argument_list|(
name|BlankMetadataHandler
operator|.
name|class
argument_list|)
operator|.
name|defineMethod
argument_list|(
literal|"syntheticMethod"
argument_list|,
name|Void
operator|.
name|class
argument_list|,
name|SyntheticState
operator|.
name|SYNTHETIC
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|)
operator|.
name|intercept
argument_list|(
name|FixedValue
operator|.
name|nullValue
argument_list|()
argument_list|)
operator|.
name|make
argument_list|()
operator|.
name|load
argument_list|(
name|TestMetadataHandlers
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|ClassLoadingStrategy
operator|.
name|Default
operator|.
name|CHILD_FIRST
argument_list|)
operator|.
name|getLoaded
argument_list|()
return|;
block|}
specifier|private
name|TestMetadataHandlers
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|/**    * A blank {@link MetadataHandler} that is used as a base for adding a synthetic method.    */
specifier|private
interface|interface
name|BlankMetadataHandler
extends|extends
name|MetadataHandler
argument_list|<
name|TestMetadata
argument_list|>
block|{   }
block|}
end_class

end_unit

