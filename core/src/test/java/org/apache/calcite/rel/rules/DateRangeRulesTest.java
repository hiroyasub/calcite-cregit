begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|RexImplicationCheckerTest
operator|.
name|Fixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/** Unit tests for {@link DateRangeRules} algorithms. */
end_comment

begin_class
specifier|public
class|class
name|DateRangeRulesTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testExtractYearFromDateColumn
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|e
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|,
name|f
operator|.
name|exYearD
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|DateRangeRules
operator|.
name|extractTimeUnits
argument_list|(
name|e
argument_list|)
argument_list|,
name|is
argument_list|(
name|set
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|DateRangeRules
operator|.
name|extractTimeUnits
argument_list|(
name|f
operator|.
name|dec
argument_list|)
argument_list|,
name|is
argument_list|(
name|set
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|DateRangeRules
operator|.
name|extractTimeUnits
argument_list|(
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|set
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// extract YEAR from a DATE column
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|e
argument_list|,
name|is
argument_list|(
literal|"AND(>=($8, 2014-01-01),<($8, 2015-01-01))"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($8, 2014-01-01),<($8, 2015-01-01))"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($8, 2014-01-01)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($8, 2015-01-01)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($8, 2014-01-01)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($8, 2015-01-01)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ne
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<>(EXTRACT(FLAG(YEAR), $8), 2014)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractYearFromTimestampColumn
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2014-01-01 00:00:00),<($9, 2015-01-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($9, 2014-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($9, 2015-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($9, 2014-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($9, 2015-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ne
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<>(EXTRACT(FLAG(YEAR), $9), 2014)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractYearAndMonthFromDateColumn
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"UTC"
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($8, 2014-01-01),<($8, 2015-01-01)),"
operator|+
literal|" AND(>=($8, 2014-06-01),<($8, 2014-07-01)))"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($8, 2014-01-01),<($8, 2015-01-01),"
operator|+
literal|">=($8, 2014-06-01),<($8, 2014-07-01))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-1601">[CALCITE-1601]    * DateRangeRules loses OR filters</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testExtractYearAndMonthFromDateColumn2
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
specifier|final
name|String
name|s1
init|=
literal|"AND("
operator|+
literal|"AND(>=($8, 2000-01-01),<($8, 2001-01-01)),"
operator|+
literal|" OR("
operator|+
literal|"AND(>=($8, 2000-02-01),<($8, 2000-03-01)), "
operator|+
literal|"AND(>=($8, 2000-03-01),<($8, 2000-04-01)), "
operator|+
literal|"AND(>=($8, 2000-05-01),<($8, 2000-06-01))))"
decl_stmt|;
specifier|final
name|String
name|s2
init|=
literal|"AND(>=($8, 2000-01-01),<($8, 2001-01-01),"
operator|+
literal|" OR("
operator|+
literal|"AND(>=($8, 2000-02-01),<($8, 2000-03-01)), "
operator|+
literal|"AND(>=($8, 2000-03-01),<($8, 2000-04-01)), "
operator|+
literal|"AND(>=($8, 2000-05-01),<($8, 2000-06-01))))"
decl_stmt|;
specifier|final
name|RexNode
name|e
init|=
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|e
argument_list|,
literal|"UTC"
argument_list|,
name|is
argument_list|(
name|s1
argument_list|)
argument_list|,
name|is
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractYearAndDayFromDateColumn
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exDayD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|31
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($8, 2010-01-01),<($8, 2011-01-01)),"
operator|+
literal|" OR(AND(>=($8, 2010-01-31),<($8, 2010-02-01)),"
operator|+
literal|" AND(>=($8, 2010-03-31),<($8, 2010-04-01)),"
operator|+
literal|" AND(>=($8, 2010-05-31),<($8, 2010-06-01)),"
operator|+
literal|" AND(>=($8, 2010-07-31),<($8, 2010-08-01)),"
operator|+
literal|" AND(>=($8, 2010-08-31),<($8, 2010-09-01)),"
operator|+
literal|" AND(>=($8, 2010-10-31),<($8, 2010-11-01)),"
operator|+
literal|" AND(>=($8, 2010-12-31),<($8, 2011-01-01))))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractYearMonthDayFromDateColumn
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
comment|// The following condition finds the 2 leap days between 2010 and 2020,
comment|// namely 29th February 2012 and 2016.
comment|//
comment|// Currently there are redundant conditions, e.g.
comment|// "AND(>=($8, 2011-01-01),<($8, 2020-01-01))". We should remove them by
comment|// folding intervals.
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2020
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exDayD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|29
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($8, 2011-01-01),"
operator|+
literal|" AND(>=($8, 2011-01-01),<($8, 2020-01-01)),"
operator|+
literal|" OR(AND(>=($8, 2011-02-01),<($8, 2011-03-01)),"
operator|+
literal|" AND(>=($8, 2012-02-01),<($8, 2012-03-01)),"
operator|+
literal|" AND(>=($8, 2013-02-01),<($8, 2013-03-01)),"
operator|+
literal|" AND(>=($8, 2014-02-01),<($8, 2014-03-01)),"
operator|+
literal|" AND(>=($8, 2015-02-01),<($8, 2015-03-01)),"
operator|+
literal|" AND(>=($8, 2016-02-01),<($8, 2016-03-01)),"
operator|+
literal|" AND(>=($8, 2017-02-01),<($8, 2017-03-01)),"
operator|+
literal|" AND(>=($8, 2018-02-01),<($8, 2018-03-01)),"
operator|+
literal|" AND(>=($8, 2019-02-01),<($8, 2019-03-01))),"
operator|+
literal|" OR(AND(>=($8, 2012-02-29),<($8, 2012-03-01)),"
operator|+
literal|" AND(>=($8, 2016-02-29),<($8, 2016-03-01))))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractYearMonthDayFromTimestampColumn
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2020
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exDayD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|29
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($8, 2011-01-01),"
operator|+
literal|" AND(>=($8, 2011-01-01),<($8, 2020-01-01)),"
operator|+
literal|" OR(AND(>=($8, 2011-02-01),<($8, 2011-03-01)),"
operator|+
literal|" AND(>=($8, 2012-02-01),<($8, 2012-03-01)),"
operator|+
literal|" AND(>=($8, 2013-02-01),<($8, 2013-03-01)),"
operator|+
literal|" AND(>=($8, 2014-02-01),<($8, 2014-03-01)),"
operator|+
literal|" AND(>=($8, 2015-02-01),<($8, 2015-03-01)),"
operator|+
literal|" AND(>=($8, 2016-02-01),<($8, 2016-03-01)),"
operator|+
literal|" AND(>=($8, 2017-02-01),<($8, 2017-03-01)),"
operator|+
literal|" AND(>=($8, 2018-02-01),<($8, 2018-03-01)),"
operator|+
literal|" AND(>=($8, 2019-02-01),<($8, 2019-03-01))),"
operator|+
literal|" OR(AND(>=($8, 2012-02-29),<($8, 2012-03-01)),"
operator|+
literal|" AND(>=($8, 2016-02-29),<($8, 2016-03-01))))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case #1 for    *<a href="https://issues.apache.org/jira/browse/CALCITE-1658">[CALCITE-1658]    * DateRangeRules issues</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testExtractWithOrCondition1
parameter_list|()
block|{
comment|// (EXTRACT(YEAR FROM __time) = 2000
comment|//    AND EXTRACT(MONTH FROM __time) IN (2, 3, 5))
comment|// OR (EXTRACT(YEAR FROM __time) = 2001
comment|//    AND EXTRACT(MONTH FROM __time) = 1)
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2001
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"OR(AND(AND(>=($8, 2000-01-01),<($8, 2001-01-01)),"
operator|+
literal|" OR(AND(>=($8, 2000-02-01),<($8, 2000-03-01)),"
operator|+
literal|" AND(>=($8, 2000-03-01),<($8, 2000-04-01)),"
operator|+
literal|" AND(>=($8, 2000-05-01),<($8, 2000-06-01)))),"
operator|+
literal|" AND(AND(>=($8, 2001-01-01),<($8, 2002-01-01)),"
operator|+
literal|" AND(>=($8, 2001-01-01),<($8, 2001-02-01))))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case #2 for    *<a href="https://issues.apache.org/jira/browse/CALCITE-1658">[CALCITE-1658]    * DateRangeRules issues</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testExtractWithOrCondition2
parameter_list|()
block|{
comment|// EXTRACT(YEAR FROM __time) IN (2000, 2001)
comment|//   AND ((EXTRACT(YEAR FROM __time) = 2000
comment|//         AND EXTRACT(MONTH FROM __time) IN (2, 3, 5))
comment|//     OR (EXTRACT(YEAR FROM __time) = 2001
comment|//       AND EXTRACT(MONTH FROM __time) = 1))
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2001
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2001
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(OR(AND(>=($8, 2000-01-01),<($8, 2001-01-01)),"
operator|+
literal|" AND(>=($8, 2001-01-01),<($8, 2002-01-01))),"
operator|+
literal|" OR(AND(AND(>=($8, 2000-01-01),<($8, 2001-01-01)),"
operator|+
literal|" OR(AND(>=($8, 2000-02-01),<($8, 2000-03-01)),"
operator|+
literal|" AND(>=($8, 2000-03-01),<($8, 2000-04-01)),"
operator|+
literal|" AND(>=($8, 2000-05-01),<($8, 2000-06-01)))),"
operator|+
literal|" AND(AND(>=($8, 2001-01-01),<($8, 2002-01-01)),"
operator|+
literal|" AND(>=($8, 2001-01-01),<($8, 2001-02-01)))))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case #3 for    *<a href="https://issues.apache.org/jira/browse/CALCITE-1658">[CALCITE-1658]    * DateRangeRules issues</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testExtractPartialRewriteForNotEqualsYear
parameter_list|()
block|{
comment|// EXTRACT(YEAR FROM __time)<> 2000
comment|// AND ((EXTRACT(YEAR FROM __time) = 2000
comment|//     AND EXTRACT(MONTH FROM __time) IN (2, 3, 5))
comment|//   OR (EXTRACT(YEAR FROM __time) = 2001
comment|//     AND EXTRACT(MONTH FROM __time) = 1))
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|ne
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2001
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(<>(EXTRACT(FLAG(YEAR), $8), 2000),"
operator|+
literal|" OR(AND(AND(>=($8, 2000-01-01),<($8, 2001-01-01)),"
operator|+
literal|" OR(AND(>=($8, 2000-02-01),<($8, 2000-03-01)),"
operator|+
literal|" AND(>=($8, 2000-03-01),<($8, 2000-04-01)),"
operator|+
literal|" AND(>=($8, 2000-05-01),<($8, 2000-06-01)))),"
operator|+
literal|" AND(AND(>=($8, 2001-01-01),<($8, 2002-01-01)),"
operator|+
literal|" AND(>=($8, 2001-01-01),<($8, 2001-02-01)))))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case #4 for    *<a href="https://issues.apache.org/jira/browse/CALCITE-1658">[CALCITE-1658]    * DateRangeRules issues</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testExtractPartialRewriteForInMonth
parameter_list|()
block|{
comment|// EXTRACT(MONTH FROM __time) in (1, 2, 3, 4, 5)
comment|// AND ((EXTRACT(YEAR FROM __time) = 2000
comment|//     AND EXTRACT(MONTH FROM __time) IN (2, 3, 5))
comment|//   OR (EXTRACT(YEAR FROM __time) = 2001
comment|//     AND EXTRACT(MONTH FROM __time) = 1))
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2001
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(OR(=(EXTRACT(FLAG(MONTH), $8), 1),"
operator|+
literal|" =(EXTRACT(FLAG(MONTH), $8), 2),"
operator|+
literal|" =(EXTRACT(FLAG(MONTH), $8), 3),"
operator|+
literal|" =(EXTRACT(FLAG(MONTH), $8), 4),"
operator|+
literal|" =(EXTRACT(FLAG(MONTH), $8), 5)),"
operator|+
literal|" OR(AND(AND(>=($8, 2000-01-01),<($8, 2001-01-01)),"
operator|+
literal|" OR(AND(>=($8, 2000-02-01),<($8, 2000-03-01)),"
operator|+
literal|" AND(>=($8, 2000-03-01),<($8, 2000-04-01)),"
operator|+
literal|" AND(>=($8, 2000-05-01),<($8, 2000-06-01)))),"
operator|+
literal|" AND(AND(>=($8, 2001-01-01),<($8, 2002-01-01)),"
operator|+
literal|" AND(>=($8, 2001-01-01),<($8, 2001-02-01)))))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractRewriteForInvalidMonthComparison
parameter_list|()
block|{
comment|// "EXTRACT(MONTH FROM ts) = 14" will never be TRUE
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|14
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" false)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "EXTRACT(MONTH FROM ts) = 0" will never be TRUE
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" false)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "EXTRACT(MONTH FROM ts) = 13" will never be TRUE
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|13
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" false)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "EXTRACT(MONTH FROM ts) = 12" might be TRUE
comment|// Careful with boundaries, because Calendar.DECEMBER = 11
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" AND(>=($9, 2010-12-01 00:00:00),<($9, 2011-01-01 00:00:00)))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "EXTRACT(MONTH FROM ts) = 1" can happen
comment|// Careful with boundaries, because Calendar.JANUARY = 0
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" AND(>=($9, 2010-01-01 00:00:00),<($9, 2010-02-01 00:00:00)))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractRewriteForInvalidDayComparison
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exDayTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|32
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" AND(>=($9, 2010-11-01 00:00:00),<($9, 2010-12-01 00:00:00)), false)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Feb 31 is an invalid date
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exDayTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|31
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" AND(>=($9, 2010-02-01 00:00:00),<($9, 2010-03-01 00:00:00)), false)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnboundYearExtractRewrite
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
comment|// No lower bound on YEAR
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exDayTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(<($9, 2011-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),"
operator|+
literal|" =(EXTRACT(FLAG(DAY), $9), 2))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No upper bound on YEAR
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exDayTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
comment|// Since the year does not have a upper bound, MONTH and DAY cannot be replaced
name|is
argument_list|(
literal|"AND(>=($9, 2010-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 11),"
operator|+
literal|" =(EXTRACT(FLAG(DAY), $9), 2))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No lower/upper bound on YEAR for individual rexNodes.
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(<($9, 2011-01-01 00:00:00), AND(>=($9, 2010-01-01 00:00:00),"
operator|+
literal|"<($9, 2011-01-01 00:00:00)), AND(>=($9, 2010-05-01 00:00:00),"
operator|+
literal|"<($9, 2010-06-01 00:00:00)))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test reWrite with multiple operands
annotation|@
name|Test
specifier|public
name|void
name|testExtractRewriteMultipleOperands
parameter_list|()
block|{
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" AND(>=($9, 2010-10-01 00:00:00),<($9, 2010-11-01 00:00:00)),"
operator|+
literal|" =(EXTRACT(FLAG(MONTH), $8), 5))"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2010
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exYearD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2011
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthD
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" AND(>=($9, 2010-10-01 00:00:00),<($9, 2010-11-01 00:00:00)),"
operator|+
literal|" AND(>=($8, 2011-01-01),<($8, 2012-01-01)), AND(>=($8, 2011-05-01),"
operator|+
literal|"<($8, 2011-06-01)))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorEqRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
comment|// Always False
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|floorYear
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorMonth
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-01 00:00:00),<($9, 2010-03-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorMonth
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-12-01 00:00:00),<($9, 2011-01-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorDay
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-04 00:00:00),<($9, 2010-02-05 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorDay
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-12-31 00:00:00),<($9, 2011-01-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorHour
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-04 04:00:00),<($9, 2010-02-04 05:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|31
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorHour
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-12-31 23:00:00),<($9, 2011-01-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorMinute
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-04 02:32:00),<($9, 2010-02-04 02:33:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorMinute
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-04 02:59:00),<($9, 2010-02-04 03:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorLtRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($9, 2011-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorLeRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($9, 2011-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<($9, 2011-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorGtRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($9, 2011-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($9, 2011-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorGeRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($9, 2011-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">=($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorExtractBothRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(AND(>=($9, 2010-01-01 00:00:00),<($9, 2011-01-01 00:00:00)),"
operator|+
literal|" AND(>=($9, 2010-05-01 00:00:00),<($9, 2010-06-01 00:00:00)))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No lower range for floor
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(<($9, 2011-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 5))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No lower range for floor
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2011-01-01 00:00:00), =(EXTRACT(FLAG(MONTH), $9), 5))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No upper range for individual floor rexNodes, but combined results in bounded interval
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|exMonthTs
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|floorYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(<($9, 2011-01-01 00:00:00), AND(>=($9, 2010-05-01 00:00:00),"
operator|+
literal|"<($9, 2010-06-01 00:00:00)),>=($9, 2010-01-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCeilEqRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
comment|// Always False
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
name|f
operator|.
name|ceilYear
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2009-01-01 00:00:00),<=($9, 2010-01-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilMonth
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-01-01 00:00:00),<=($9, 2010-02-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilMonth
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-11-01 00:00:00),<=($9, 2010-12-01 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilDay
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-02-03 00:00:00),<=($9, 2010-02-04 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilDay
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-12-30 00:00:00),<=($9, 2010-12-31 00:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilHour
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-02-04 03:00:00),<=($9, 2010-02-04 04:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|31
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilHour
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-12-31 22:00:00),<=($9, 2010-12-31 23:00:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilMinute
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-02-04 02:31:00),<=($9, 2010-02-04 02:32:00))"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|ceilMinute
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"AND(>($9, 2010-02-04 02:58:00),<=($9, 2010-02-04 02:59:00))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCeilLtRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<=($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<=($9, 2009-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCeilLeRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<=($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"<=($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCeilGtRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCeilGeRewrite
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|05
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">($9, 2010-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|ceilYear
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|">($9, 2009-01-01 00:00:00)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloorRewriteWithTimezone
parameter_list|()
block|{
specifier|final
name|Calendar
name|c
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Fixture2
name|f
init|=
operator|new
name|Fixture2
argument_list|()
decl_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorHour
argument_list|,
name|f
operator|.
name|timestampLocalTzLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"IST"
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-01 17:00:00),<($9, 2010-02-01 18:00:00))"
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|00
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorHour
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"IST"
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-01 11:00:00),<($9, 2010-02-01 12:00:00))"
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|1
argument_list|,
literal|00
argument_list|,
literal|00
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|floorHour
argument_list|,
name|f
operator|.
name|dateLiteral
argument_list|(
name|DateString
operator|.
name|fromCalendarFields
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"IST"
argument_list|,
name|is
argument_list|(
literal|"AND(>=($9, 2010-02-01 00:00:00),<($9, 2010-02-01 01:00:00))"
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|TimeUnitRange
argument_list|>
name|set
parameter_list|(
name|TimeUnitRange
modifier|...
name|es
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|es
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkDateRange
parameter_list|(
name|Fixture
name|f
parameter_list|,
name|RexNode
name|e
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|checkDateRange
argument_list|(
name|f
argument_list|,
name|e
argument_list|,
literal|"UTC"
argument_list|,
name|matcher
argument_list|,
name|CoreMatchers
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDateRange
parameter_list|(
name|Fixture
name|f
parameter_list|,
name|RexNode
name|e
parameter_list|,
name|String
name|timeZone
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|simplifyMatcher
parameter_list|)
block|{
name|e
operator|=
name|DateRangeRules
operator|.
name|replaceTimeUnits
argument_list|(
name|f
operator|.
name|rexBuilder
argument_list|,
name|e
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|e2
init|=
name|f
operator|.
name|simplify
operator|.
name|simplify
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e2
operator|.
name|toString
argument_list|()
argument_list|,
name|simplifyMatcher
argument_list|)
expr_stmt|;
block|}
comment|/** Common expressions across tests. */
specifier|private
specifier|static
class|class
name|Fixture2
extends|extends
name|Fixture
block|{
specifier|private
specifier|final
name|RexNode
name|exYearTs
decl_stmt|;
comment|// EXTRACT YEAR from TIMESTAMP field
specifier|private
specifier|final
name|RexNode
name|exMonthTs
decl_stmt|;
comment|// EXTRACT MONTH from TIMESTAMP field
specifier|private
specifier|final
name|RexNode
name|exDayTs
decl_stmt|;
comment|// EXTRACT DAY from TIMESTAMP field
specifier|private
specifier|final
name|RexNode
name|exYearD
decl_stmt|;
comment|// EXTRACT YEAR from DATE field
specifier|private
specifier|final
name|RexNode
name|exMonthD
decl_stmt|;
comment|// EXTRACT MONTH from DATE field
specifier|private
specifier|final
name|RexNode
name|exDayD
decl_stmt|;
comment|// EXTRACT DAY from DATE field
specifier|private
specifier|final
name|RexNode
name|floorYear
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|floorMonth
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|floorDay
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|floorHour
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|floorMinute
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|ceilYear
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|ceilMonth
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|ceilDay
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|ceilHour
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|ceilMinute
decl_stmt|;
name|Fixture2
parameter_list|()
block|{
name|exYearTs
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EXTRACT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|)
argument_list|,
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|exMonthTs
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|EXTRACT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|)
argument_list|,
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|exDayTs
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|EXTRACT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|)
argument_list|,
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|exYearD
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EXTRACT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|)
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|exMonthD
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|EXTRACT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|)
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|exDayD
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|EXTRACT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|)
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|floorYear
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|floorMonth
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|floorDay
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|floorHour
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|HOUR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|floorMinute
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|MINUTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ceilYear
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ceilMonth
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|MONTH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ceilDay
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|DAY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ceilHour
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|HOUR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ceilMinute
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|intRelDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ts
argument_list|,
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|TimeUnitRange
operator|.
name|MINUTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End DateRangeRulesTest.java
end_comment

end_unit

