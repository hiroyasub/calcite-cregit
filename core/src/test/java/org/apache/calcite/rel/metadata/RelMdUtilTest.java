begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|RelMetadataFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdUtil
operator|.
name|numDistinctVals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|within
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link RelMdUtil}.  */
end_comment

begin_class
specifier|public
class|class
name|RelMdUtilTest
block|{
comment|/** Creates a fixture. */
specifier|protected
name|RelMetadataFixture
name|fixture
parameter_list|()
block|{
return|return
name|RelMetadataFixture
operator|.
name|DEFAULT
return|;
block|}
specifier|final
name|RelMetadataFixture
name|sql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|fixture
argument_list|()
operator|.
name|withSql
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|double
name|EPSILON
init|=
literal|1e-5
decl_stmt|;
annotation|@
name|Test
name|void
name|testNumDistinctVals
parameter_list|()
block|{
comment|// the first element must be distinct, the second one has half chance of being distinct
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
literal|2.0
argument_list|,
literal|2.0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|1.5
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
comment|// when no selection is made, we get no distinct value
name|double
name|domainSize
init|=
literal|100
decl_stmt|;
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
name|domainSize
argument_list|,
literal|0.0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
comment|// when we perform one selection, we always have 1 distinct value,
comment|// regardless of the domain size
for|for
control|(
name|double
name|dSize
init|=
literal|1
init|;
name|dSize
operator|<
literal|100
condition|;
name|dSize
operator|+=
literal|1
control|)
block|{
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
name|dSize
argument_list|,
literal|1.0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|1.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// when we select n objects from a set with n values
comment|// we get no more than n distinct values
for|for
control|(
name|double
name|dSize
init|=
literal|1
init|;
name|dSize
operator|<
literal|100
condition|;
name|dSize
operator|+=
literal|1
control|)
block|{
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
name|dSize
argument_list|,
name|dSize
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|dSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// when the number of selections is large enough
comment|// we get all distinct values, w.h.p.
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
name|domainSize
argument_list|,
name|domainSize
operator|*
literal|100
argument_list|)
argument_list|,
name|within
argument_list|(
name|domainSize
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
literal|100.0
argument_list|,
literal|2.0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|1.99
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
literal|1000.0
argument_list|,
literal|2.0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|1.999
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numDistinctVals
argument_list|(
literal|10000.0
argument_list|,
literal|2.0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|1.9999
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testNumDistinctValsWithLargeDomain
parameter_list|()
block|{
name|double
index|[]
name|domainSizes
init|=
block|{
literal|1e18
block|,
literal|1e20
block|}
decl_stmt|;
name|double
index|[]
name|numSels
init|=
block|{
literal|1e2
block|,
literal|1e4
block|,
literal|1e6
block|,
literal|1e8
block|,
literal|1e10
block|,
literal|1e12
block|}
decl_stmt|;
name|double
name|res
decl_stmt|;
for|for
control|(
name|double
name|domainSize
range|:
name|domainSizes
control|)
block|{
for|for
control|(
name|double
name|numSel
range|:
name|numSels
control|)
block|{
name|res
operator|=
name|numDistinctVals
argument_list|(
name|domainSize
argument_list|,
name|numSel
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// due to the possible duplicate selections, the distinct values
comment|// must be smaller than or equal to the number of selections
name|assertThat
argument_list|(
name|res
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numSel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res
operator|=
name|numDistinctVals
argument_list|(
name|domainSize
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|,
name|within
argument_list|(
literal|1.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|numDistinctVals
argument_list|(
name|domainSize
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|,
name|within
argument_list|(
literal|2.0
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testDynamicParameterInLimitOffset
parameter_list|()
block|{
name|Frameworks
operator|.
name|withPlanner
argument_list|(
parameter_list|(
name|cluster
parameter_list|,
name|relOptSchema
parameter_list|,
name|rootSchema
parameter_list|)
lambda|->
block|{
name|RelMetadataQuery
name|mq
init|=
name|cluster
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|RelNode
name|rel
init|=
name|sql
argument_list|(
literal|"select * from emp limit ? offset ?"
argument_list|)
operator|.
name|toRel
argument_list|()
decl_stmt|;
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rel
decl_stmt|;
name|assertFalse
argument_list|(
name|RelMdUtil
operator|.
name|checkInputForCollationAndLimit
argument_list|(
name|mq
argument_list|,
name|sort
operator|.
name|getInput
argument_list|()
argument_list|,
name|RelCollations
operator|.
name|EMPTY
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

