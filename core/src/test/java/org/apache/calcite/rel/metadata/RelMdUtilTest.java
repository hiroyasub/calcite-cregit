begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link RelMdUtil}.  */
end_comment

begin_class
specifier|public
class|class
name|RelMdUtilTest
block|{
annotation|@
name|Test
name|void
name|testNumDistinctVals
parameter_list|()
block|{
comment|// the first element must be distinct, the second one has half chance of being distinct
name|assertEquals
argument_list|(
literal|1.5
argument_list|,
name|RelMdUtil
operator|.
name|numDistinctVals
argument_list|(
literal|2.0
argument_list|,
literal|2.0
argument_list|)
argument_list|,
literal|1e-5
argument_list|)
expr_stmt|;
comment|// when no selection is made, we get no distinct value
name|double
name|domainSize
init|=
literal|100
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|RelMdUtil
operator|.
name|numDistinctVals
argument_list|(
name|domainSize
argument_list|,
literal|0.0
argument_list|)
argument_list|,
literal|1e-5
argument_list|)
expr_stmt|;
comment|// when we perform one selection, we always have 1 distinct value,
comment|// regardless of the domain size
for|for
control|(
name|double
name|dSize
init|=
literal|1
init|;
name|dSize
operator|<
literal|100
condition|;
name|dSize
operator|+=
literal|1
control|)
block|{
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|RelMdUtil
operator|.
name|numDistinctVals
argument_list|(
name|dSize
argument_list|,
literal|1.0
argument_list|)
argument_list|,
literal|1e-5
argument_list|)
expr_stmt|;
block|}
comment|// when we select n objects from a set with n values
comment|// we get no more than n distinct values
for|for
control|(
name|double
name|dSize
init|=
literal|1
init|;
name|dSize
operator|<
literal|100
condition|;
name|dSize
operator|+=
literal|1
control|)
block|{
name|assertTrue
argument_list|(
name|RelMdUtil
operator|.
name|numDistinctVals
argument_list|(
name|dSize
argument_list|,
name|dSize
argument_list|)
operator|<=
name|dSize
argument_list|)
expr_stmt|;
block|}
comment|// when the number of selections is large enough
comment|// we get all distinct values, w.h.p.
name|assertEquals
argument_list|(
name|domainSize
argument_list|,
name|RelMdUtil
operator|.
name|numDistinctVals
argument_list|(
name|domainSize
argument_list|,
name|domainSize
operator|*
literal|100
argument_list|)
argument_list|,
literal|1e-5
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

