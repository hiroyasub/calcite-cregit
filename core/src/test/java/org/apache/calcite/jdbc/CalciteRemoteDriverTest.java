begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|Meta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalJsonService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|LocalService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|remote
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|server
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test for Calcite's remote JDBC driver.  */
end_comment

begin_class
specifier|public
class|class
name|CalciteRemoteDriverTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|LJS
init|=
name|Factory2
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CalciteAssert
operator|.
name|ConnectionFactory
name|REMOTE_CONNECTION_FACTORY
init|=
operator|new
name|CalciteAssert
operator|.
name|ConnectionFactory
argument_list|()
block|{
specifier|public
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|remoteConnection
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Connection
argument_list|,
name|ResultSet
argument_list|>
name|GET_SCHEMAS
init|=
operator|new
name|Function
argument_list|<
name|Connection
argument_list|,
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|apply
parameter_list|(
name|Connection
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|input
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Connection
argument_list|,
name|ResultSet
argument_list|>
name|GET_CATALOGS
init|=
operator|new
name|Function
argument_list|<
name|Connection
argument_list|,
name|ResultSet
argument_list|>
argument_list|()
block|{
specifier|public
name|ResultSet
name|apply
parameter_list|(
name|Connection
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|input
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCatalogs
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|localConnection
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|remoteConnection
decl_stmt|;
specifier|private
specifier|static
name|HttpServer
name|start
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|localConnection
operator|=
name|CalciteAssert
operator|.
name|hr
argument_list|()
operator|.
name|connect
argument_list|()
expr_stmt|;
name|start
operator|=
name|Main
operator|.
name|start
argument_list|(
operator|new
name|String
index|[]
block|{
name|Factory
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
specifier|final
name|int
name|port
init|=
name|start
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|remoteConnection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:url=http://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|localConnection
operator|!=
literal|null
condition|)
block|{
name|localConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|localConnection
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|start
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCatalogsLocal
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:factory="
operator|+
name|LJS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchemasLocal
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:avatica:remote:factory="
operator|+
name|LJS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|metaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"POST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foodmart"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|CoreMatchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|connection
operator|.
name|isClosed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteCatalogs
parameter_list|()
throws|throws
name|Exception
block|{
name|CalciteAssert
operator|.
name|hr
argument_list|()
operator|.
name|with
argument_list|(
name|REMOTE_CONNECTION_FACTORY
argument_list|)
operator|.
name|metaData
argument_list|(
name|GET_CATALOGS
argument_list|)
operator|.
name|returns
argument_list|(
literal|"TABLE_CATALOG=null\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteSchemas
parameter_list|()
throws|throws
name|Exception
block|{
name|CalciteAssert
operator|.
name|hr
argument_list|()
operator|.
name|with
argument_list|(
name|REMOTE_CONNECTION_FACTORY
argument_list|)
operator|.
name|metaData
argument_list|(
name|GET_SCHEMAS
argument_list|)
operator|.
name|returns
argument_list|(
literal|"TABLE_SCHEM=POST; TABLE_CATALOG=null\n"
operator|+
literal|"TABLE_SCHEM=foodmart; TABLE_CATALOG=null\n"
operator|+
literal|"TABLE_SCHEM=hr; TABLE_CATALOG=null\n"
operator|+
literal|"TABLE_SCHEM=metadata; TABLE_CATALOG=null\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteExecuteQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|CalciteAssert
operator|.
name|hr
argument_list|()
operator|.
name|with
argument_list|(
name|REMOTE_CONNECTION_FACTORY
argument_list|)
operator|.
name|query
argument_list|(
literal|"values (1, 'a'), (cast(null as integer), 'b')"
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"EXPR$0=1; EXPR$1=a"
argument_list|,
literal|"EXPR$0=null; EXPR$1=b"
argument_list|)
expr_stmt|;
block|}
comment|/** Same query as {@link #testRemoteExecuteQuery()}, run without the test    * infrastructure. */
annotation|@
name|Test
specifier|public
name|void
name|testRemoteExecuteQuery2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Statement
name|statement
init|=
name|remoteConnection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"values (1, 'a'), (cast(null as integer), 'b')"
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
operator|++
name|n
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|n
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a {@link Meta} that can see the test databases. */
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|Meta
operator|.
name|Factory
block|{
specifier|public
name|Meta
name|create
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Connection
name|connection
init|=
name|CalciteAssert
operator|.
name|hr
argument_list|()
operator|.
name|connect
argument_list|()
decl_stmt|;
return|return
operator|new
name|CalciteMetaImpl
argument_list|(
operator|(
name|CalciteConnectionImpl
operator|)
name|connection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Factory that creates a {@code LocalJsonService}. */
specifier|public
specifier|static
class|class
name|Factory2
implements|implements
name|Service
operator|.
name|Factory
block|{
specifier|public
name|Service
name|create
parameter_list|(
name|AvaticaConnection
name|connection
parameter_list|)
block|{
try|try
block|{
name|Connection
name|localConnection
init|=
name|CalciteAssert
operator|.
name|hr
argument_list|()
operator|.
name|connect
argument_list|()
decl_stmt|;
specifier|final
name|Meta
name|meta
init|=
name|CalciteConnectionImpl
operator|.
name|TROJAN
operator|.
name|getMeta
argument_list|(
operator|(
name|CalciteConnectionImpl
operator|)
name|localConnection
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocalJsonService
argument_list|(
operator|new
name|LocalService
argument_list|(
name|meta
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End CalciteRemoteDriverTest.java
end_comment

end_unit

