begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Casing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Quoting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|Lex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUnresolvedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|AnsiSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformanceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|SqlValidatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
operator|.
name|stripAs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of  * {@link org.apache.calcite.test.SqlValidatorTestCase.Tester}  * that talks to a mock catalog.  *  *<p>This is to implement the default behavior: testing is only against the  * {@link SqlValidator}.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSqlTester
implements|implements
name|SqlTester
implements|,
name|AutoCloseable
block|{
specifier|protected
specifier|final
name|SqlTestFactory
name|factory
decl_stmt|;
specifier|public
name|AbstractSqlTester
parameter_list|(
name|SqlTestFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
specifier|public
specifier|final
name|SqlTestFactory
name|getFactory
parameter_list|()
block|{
return|return
name|factory
return|;
block|}
comment|/**    * {@inheritDoc}    *    *<p>This default implementation does nothing.    */
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// no resources to release
block|}
specifier|public
specifier|final
name|SqlConformance
name|getConformance
parameter_list|()
block|{
return|return
operator|(
name|SqlConformance
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"conformance"
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|SqlValidator
name|getValidator
parameter_list|()
block|{
return|return
name|factory
operator|.
name|getValidator
argument_list|()
return|;
block|}
specifier|public
name|void
name|assertExceptionIsThrown
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|)
block|{
specifier|final
name|SqlValidator
name|validator
decl_stmt|;
specifier|final
name|SqlNode
name|sqlNode
decl_stmt|;
specifier|final
name|SqlParserUtil
operator|.
name|StringAndPos
name|sap
init|=
name|SqlParserUtil
operator|.
name|findPos
argument_list|(
name|sql
argument_list|)
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parseQuery
argument_list|(
name|sap
operator|.
name|sql
argument_list|)
expr_stmt|;
name|validator
operator|=
name|getValidator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|checkParseEx
argument_list|(
name|e
argument_list|,
name|expectedMsgPattern
argument_list|,
name|sap
operator|.
name|sql
argument_list|)
expr_stmt|;
return|return;
block|}
name|Throwable
name|thrown
init|=
literal|null
decl_stmt|;
try|try
block|{
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|thrown
operator|=
name|ex
expr_stmt|;
block|}
name|SqlValidatorTestCase
operator|.
name|checkEx
argument_list|(
name|thrown
argument_list|,
name|expectedMsgPattern
argument_list|,
name|sap
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkParseEx
parameter_list|(
name|Throwable
name|e
parameter_list|,
name|String
name|expectedMsgPattern
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
try|try
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|spe
parameter_list|)
block|{
name|String
name|errMessage
init|=
name|spe
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedMsgPattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while parsing query:"
operator|+
name|sql
argument_list|,
name|spe
argument_list|)
throw|;
block|}
if|else if
condition|(
name|errMessage
operator|==
literal|null
operator|||
operator|!
name|errMessage
operator|.
name|matches
argument_list|(
name|expectedMsgPattern
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error did not match expected ["
operator|+
name|expectedMsgPattern
operator|+
literal|"] while parsing query ["
operator|+
name|sql
operator|+
literal|"]"
argument_list|,
name|spe
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while parsing query: "
operator|+
name|sql
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
specifier|public
name|RelDataType
name|getColumnType
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|RelDataType
name|rowType
init|=
name|getResultType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected query to return 1 field"
argument_list|,
literal|1
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getResultType
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
return|return
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|n
argument_list|)
return|;
block|}
specifier|public
name|SqlNode
name|parseAndValidate
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
if|if
condition|(
name|validator
operator|==
literal|null
condition|)
block|{
name|validator
operator|=
name|getValidator
argument_list|()
expr_stmt|;
block|}
name|SqlNode
name|sqlNode
decl_stmt|;
try|try
block|{
name|sqlNode
operator|=
name|parseQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while parsing query: "
operator|+
name|sql
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|validator
operator|.
name|validate
argument_list|(
name|sqlNode
argument_list|)
return|;
block|}
specifier|public
name|SqlNode
name|parseQuery
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SqlParseException
block|{
name|SqlParser
name|parser
init|=
name|factory
operator|.
name|createParser
argument_list|(
name|sql
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parseQuery
argument_list|()
return|;
block|}
specifier|public
name|void
name|checkColumnType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|SqlTests
operator|.
name|getTypeString
argument_list|(
name|actualType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkFieldOrigin
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|fieldOriginList
parameter_list|)
block|{
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|list
init|=
name|validator
operator|.
name|getFieldOrigins
argument_list|(
name|n
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|strings
range|:
name|list
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|strings
operator|==
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
if|if
condition|(
name|j
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldOriginList
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkResultType
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|RelDataType
name|actualType
init|=
name|getResultType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|SqlTests
operator|.
name|getTypeString
argument_list|(
name|actualType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkIntervalConv
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
specifier|final
name|SqlCall
name|n
init|=
operator|(
name|SqlCall
operator|)
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
name|SqlNode
name|node
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|.
name|operandCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|stripAs
argument_list|(
name|n
operator|.
name|operand
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|SqlCall
condition|)
block|{
name|node
operator|=
operator|(
operator|(
name|SqlCall
operator|)
name|node
operator|)
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|SqlIntervalLiteral
name|intervalLiteral
init|=
operator|(
name|SqlIntervalLiteral
operator|)
name|node
decl_stmt|;
name|SqlIntervalLiteral
operator|.
name|IntervalValue
name|interval
init|=
operator|(
name|SqlIntervalLiteral
operator|.
name|IntervalValue
operator|)
name|intervalLiteral
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|l
init|=
name|interval
operator|.
name|getIntervalQualifier
argument_list|()
operator|.
name|isYearMonth
argument_list|()
condition|?
name|SqlParserUtil
operator|.
name|intervalToMonths
argument_list|(
name|interval
argument_list|)
else|:
name|SqlParserUtil
operator|.
name|intervalToMillis
argument_list|(
name|interval
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|l
operator|+
literal|""
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkType
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|type
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|checkColumnType
argument_list|(
name|sql
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkCollation
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|expectedCollationName
parameter_list|,
name|SqlCollation
operator|.
name|Coercibility
name|expectedCoercibility
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SqlCollation
name|collation
init|=
name|actualType
operator|.
name|getCollation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCollationName
argument_list|,
name|collation
operator|.
name|getCollationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCoercibility
argument_list|,
name|collation
operator|.
name|getCoercibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkCharset
parameter_list|(
name|String
name|expression
parameter_list|,
name|Charset
name|expectedCharset
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Charset
name|actualCharset
init|=
name|actualType
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expectedCharset
operator|.
name|equals
argument_list|(
name|actualCharset
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"\n"
operator|+
literal|"Expected="
operator|+
name|expectedCharset
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"  actual="
operator|+
name|actualCharset
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|SqlTester
name|withQuoting
parameter_list|(
name|Quoting
name|quoting
parameter_list|)
block|{
return|return
name|with
argument_list|(
literal|"quoting"
argument_list|,
name|quoting
argument_list|)
return|;
block|}
specifier|public
name|SqlTester
name|withQuotedCasing
parameter_list|(
name|Casing
name|casing
parameter_list|)
block|{
return|return
name|with
argument_list|(
literal|"quotedCasing"
argument_list|,
name|casing
argument_list|)
return|;
block|}
specifier|public
name|SqlTester
name|withUnquotedCasing
parameter_list|(
name|Casing
name|casing
parameter_list|)
block|{
return|return
name|with
argument_list|(
literal|"unquotedCasing"
argument_list|,
name|casing
argument_list|)
return|;
block|}
specifier|public
name|SqlTester
name|withCaseSensitive
parameter_list|(
name|boolean
name|sensitive
parameter_list|)
block|{
return|return
name|with
argument_list|(
literal|"caseSensitive"
argument_list|,
name|sensitive
argument_list|)
return|;
block|}
specifier|public
name|SqlTester
name|withLex
parameter_list|(
name|Lex
name|lex
parameter_list|)
block|{
return|return
name|withQuoting
argument_list|(
name|lex
operator|.
name|quoting
argument_list|)
operator|.
name|withCaseSensitive
argument_list|(
name|lex
operator|.
name|caseSensitive
argument_list|)
operator|.
name|withQuotedCasing
argument_list|(
name|lex
operator|.
name|quotedCasing
argument_list|)
operator|.
name|withUnquotedCasing
argument_list|(
name|lex
operator|.
name|unquotedCasing
argument_list|)
return|;
block|}
specifier|public
name|SqlTester
name|withConformance
parameter_list|(
name|SqlConformance
name|conformance
parameter_list|)
block|{
if|if
condition|(
name|conformance
operator|==
literal|null
condition|)
block|{
name|conformance
operator|=
name|SqlConformanceEnum
operator|.
name|DEFAULT
expr_stmt|;
block|}
specifier|final
name|SqlTester
name|tester
init|=
name|with
argument_list|(
literal|"conformance"
argument_list|,
name|conformance
argument_list|)
decl_stmt|;
if|if
condition|(
name|conformance
operator|instanceof
name|SqlConformanceEnum
condition|)
block|{
return|return
name|tester
operator|.
name|withConnectionFactory
argument_list|(
name|CalciteAssert
operator|.
name|EMPTY_CONNECTION_FACTORY
operator|.
name|with
argument_list|(
name|CalciteConnectionProperty
operator|.
name|CONFORMANCE
argument_list|,
name|conformance
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|tester
return|;
block|}
block|}
specifier|public
name|SqlTester
name|enableTypeCoercion
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
return|return
name|with
argument_list|(
literal|"enableTypeCoercion"
argument_list|,
name|enabled
argument_list|)
return|;
block|}
specifier|public
name|SqlTester
name|withOperatorTable
parameter_list|(
name|SqlOperatorTable
name|operatorTable
parameter_list|)
block|{
return|return
name|with
argument_list|(
literal|"operatorTable"
argument_list|,
name|operatorTable
argument_list|)
return|;
block|}
specifier|public
name|SqlTester
name|withConnectionFactory
parameter_list|(
name|CalciteAssert
operator|.
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
return|return
name|with
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|SqlTester
name|with
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
return|return
name|with
argument_list|(
name|factory
operator|.
name|with
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|SqlTester
name|with
parameter_list|(
name|SqlTestFactory
name|factory
parameter_list|)
function_decl|;
comment|// SqlTester methods
specifier|public
name|void
name|setFor
parameter_list|(
name|SqlOperator
name|operator
parameter_list|,
name|VmName
modifier|...
name|unimplementedVmNames
parameter_list|)
block|{
comment|// do nothing
block|}
specifier|public
name|void
name|checkAgg
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
index|[]
name|inputValues
parameter_list|,
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|query
init|=
name|SqlTests
operator|.
name|generateAggQuery
argument_list|(
name|expr
argument_list|,
name|inputValues
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|query
argument_list|,
name|SqlTests
operator|.
name|ANY_TYPE_CHECKER
argument_list|,
name|result
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkAggWithMultipleArgs
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
index|[]
index|[]
name|inputValues
parameter_list|,
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|query
init|=
name|SqlTests
operator|.
name|generateAggQueryWithMultipleArgs
argument_list|(
name|expr
argument_list|,
name|inputValues
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|query
argument_list|,
name|SqlTests
operator|.
name|ANY_TYPE_CHECKER
argument_list|,
name|result
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkWinAgg
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
index|[]
name|inputValues
parameter_list|,
name|String
name|windowSpec
parameter_list|,
name|String
name|type
parameter_list|,
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|query
init|=
name|SqlTests
operator|.
name|generateWinAggQuery
argument_list|(
name|expr
argument_list|,
name|windowSpec
argument_list|,
name|inputValues
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|query
argument_list|,
name|SqlTests
operator|.
name|ANY_TYPE_CHECKER
argument_list|,
name|result
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkScalar
parameter_list|(
name|String
name|expression
parameter_list|,
name|Object
name|result
parameter_list|,
name|String
name|resultType
parameter_list|)
block|{
name|checkType
argument_list|(
name|expression
argument_list|,
name|resultType
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|check
argument_list|(
name|sql
argument_list|,
name|SqlTests
operator|.
name|ANY_TYPE_CHECKER
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkScalarExact
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|check
argument_list|(
name|sql
argument_list|,
name|SqlTests
operator|.
name|INTEGER_TYPE_CHECKER
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkScalarExact
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|expectedType
parameter_list|,
name|String
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|TypeChecker
name|typeChecker
init|=
operator|new
name|SqlTests
operator|.
name|StringTypeChecker
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|typeChecker
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkScalarApprox
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|expectedType
parameter_list|,
name|double
name|expectedResult
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|TypeChecker
name|typeChecker
init|=
operator|new
name|SqlTests
operator|.
name|StringTypeChecker
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|typeChecker
argument_list|,
name|expectedResult
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkBoolean
parameter_list|(
name|String
name|expression
parameter_list|,
name|Boolean
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|result
condition|)
block|{
name|checkNull
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
argument_list|(
name|sql
argument_list|,
name|SqlTests
operator|.
name|BOOLEAN_TYPE_CHECKER
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|checkString
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|result
parameter_list|,
name|String
name|expectedType
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|TypeChecker
name|typeChecker
init|=
operator|new
name|SqlTests
operator|.
name|StringTypeChecker
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|sql
argument_list|,
name|typeChecker
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkNull
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
for|for
control|(
name|String
name|sql
range|:
name|buildQueries
argument_list|(
name|expression
argument_list|)
control|)
block|{
name|check
argument_list|(
name|sql
argument_list|,
name|SqlTests
operator|.
name|ANY_TYPE_CHECKER
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|check
parameter_list|(
name|String
name|query
parameter_list|,
name|TypeChecker
name|typeChecker
parameter_list|,
name|Object
name|result
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|check
argument_list|(
name|query
argument_list|,
name|typeChecker
argument_list|,
name|SqlTests
operator|.
name|ANY_PARAMETER_CHECKER
argument_list|,
name|SqlTests
operator|.
name|createChecker
argument_list|(
name|result
argument_list|,
name|delta
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|check
parameter_list|(
name|String
name|query
parameter_list|,
name|TypeChecker
name|typeChecker
parameter_list|,
name|ParameterChecker
name|parameterChecker
parameter_list|,
name|ResultChecker
name|resultChecker
parameter_list|)
block|{
comment|// This implementation does NOT check the result!
comment|// All it does is check the return type.
if|if
condition|(
name|typeChecker
operator|==
literal|null
condition|)
block|{
comment|// Parse and validate. There should be no errors.
name|Util
operator|.
name|discard
argument_list|(
name|getResultType
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Parse and validate. There should be no errors.
comment|// There must be 1 column. Get its type.
name|RelDataType
name|actualType
init|=
name|getColumnType
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// Check result type.
name|typeChecker
operator|.
name|checkType
argument_list|(
name|actualType
argument_list|)
expr_stmt|;
block|}
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|parameterRowType
init|=
name|validator
operator|.
name|getParameterRowType
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|parameterChecker
operator|.
name|checkParameters
argument_list|(
name|parameterRowType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkMonotonic
parameter_list|(
name|String
name|query
parameter_list|,
name|SqlMonotonicity
name|expectedMonotonicity
parameter_list|)
block|{
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|validator
operator|.
name|getValidatedNodeType
argument_list|(
name|n
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidatorNamespace
name|selectNamespace
init|=
name|validator
operator|.
name|getNamespace
argument_list|(
name|n
argument_list|)
decl_stmt|;
specifier|final
name|String
name|field0
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|SqlMonotonicity
name|monotonicity
init|=
name|selectNamespace
operator|.
name|getMonotonicity
argument_list|(
name|field0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|monotonicity
argument_list|,
name|equalTo
argument_list|(
name|expectedMonotonicity
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkRewrite
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|expectedRewrite
parameter_list|)
block|{
name|SqlNode
name|rewrittenNode
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|String
name|actualRewrite
init|=
name|rewrittenNode
operator|.
name|toSqlString
argument_list|(
name|AnsiSqlDialect
operator|.
name|DEFAULT
argument_list|,
literal|false
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
name|expectedRewrite
argument_list|,
name|Util
operator|.
name|toLinux
argument_list|(
name|actualRewrite
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkFails
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|expectedError
parameter_list|,
name|boolean
name|runtime
parameter_list|)
block|{
if|if
condition|(
name|runtime
condition|)
block|{
comment|// We need to test that the expression fails at runtime.
comment|// Ironically, that means that it must succeed at prepare time.
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sql
init|=
name|buildQuery
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|SqlNode
name|n
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkQueryFails
argument_list|(
name|buildQuery
argument_list|(
name|expression
argument_list|)
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkQueryFails
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedError
parameter_list|)
block|{
name|assertExceptionIsThrown
argument_list|(
name|sql
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkQuery
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|assertExceptionIsThrown
argument_list|(
name|sql
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|SqlValidator
name|validator
init|=
name|getValidator
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|node
init|=
name|parseAndValidate
argument_list|(
name|validator
argument_list|,
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|SqlSelect
name|select
init|=
operator|(
name|SqlSelect
operator|)
name|node
decl_stmt|;
specifier|final
name|SqlNode
name|selectItem0
init|=
name|select
operator|.
name|getSelectList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SqlValidatorScope
name|scope
init|=
name|validator
operator|.
name|getSelectScope
argument_list|(
name|select
argument_list|)
decl_stmt|;
return|return
name|selectItem0
operator|.
name|getMonotonicity
argument_list|(
name|scope
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|buildQuery
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
literal|"values ("
operator|+
name|expression
operator|+
literal|")"
return|;
block|}
specifier|public
specifier|static
name|String
name|buildQueryAgg
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
literal|"select "
operator|+
name|expression
operator|+
literal|" from (values (1)) as t(x) group by x"
return|;
block|}
comment|/**    * Builds a query that extracts all literals as columns in an underlying    * select.    *    *<p>For example,</p>    *    *<blockquote>{@code 1< 5}</blockquote>    *    *<p>becomes</p>    *    *<blockquote>{@code SELECT p0< p1    * FROM (VALUES (1, 5)) AS t(p0, p1)}</blockquote>    *    *<p>Null literals don't have enough type information to be extracted.    * We push down {@code CAST(NULL AS type)} but raw nulls such as    * {@code CASE 1 WHEN 2 THEN 'a' ELSE NULL END} are left as is.</p>    *    * @param expression Scalar expression    * @return Query that evaluates a scalar expression    */
specifier|protected
name|String
name|buildQuery2
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
comment|// "values (1< 5)"
comment|// becomes
comment|// "select p0< p1 from (values (1, 5)) as t(p0, p1)"
name|SqlNode
name|x
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"values ("
operator|+
name|expression
operator|+
literal|")"
decl_stmt|;
try|try
block|{
name|x
operator|=
name|parseQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Collection
argument_list|<
name|SqlNode
argument_list|>
name|literalSet
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|x
operator|.
name|accept
argument_list|(
operator|new
name|SqlShuttle
argument_list|()
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|ops
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LITERAL_CHAIN
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LOCALTIME
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LOCALTIMESTAMP
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CURRENT_TIME
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CURRENT_TIMESTAMP
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SqlNode
name|visit
parameter_list|(
name|SqlLiteral
name|literal
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isNull
argument_list|(
name|literal
argument_list|)
operator|&&
name|literal
operator|.
name|getTypeName
argument_list|()
operator|!=
name|SqlTypeName
operator|.
name|SYMBOL
condition|)
block|{
name|literalSet
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
return|return
name|literal
return|;
block|}
annotation|@
name|Override
specifier|public
name|SqlNode
name|visit
parameter_list|(
name|SqlCall
name|call
parameter_list|)
block|{
name|SqlOperator
name|operator
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|operator
operator|instanceof
name|SqlUnresolvedFunction
condition|)
block|{
specifier|final
name|SqlUnresolvedFunction
name|unresolvedFunction
init|=
operator|(
name|SqlUnresolvedFunction
operator|)
name|operator
decl_stmt|;
specifier|final
name|SqlOperator
name|lookup
init|=
name|SqlValidatorUtil
operator|.
name|lookupSqlFunctionByID
argument_list|(
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|,
name|unresolvedFunction
operator|.
name|getSqlIdentifier
argument_list|()
argument_list|,
name|unresolvedFunction
operator|.
name|getFunctionType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookup
operator|!=
literal|null
condition|)
block|{
name|operator
operator|=
name|lookup
expr_stmt|;
specifier|final
name|SqlNode
index|[]
name|operands
init|=
name|call
operator|.
name|getOperandList
argument_list|()
operator|.
name|toArray
argument_list|(
name|SqlNode
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|call
operator|=
name|operator
operator|.
name|createCall
argument_list|(
name|call
operator|.
name|getFunctionQuantifier
argument_list|()
argument_list|,
name|call
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|operands
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|operator
operator|==
name|SqlStdOperatorTable
operator|.
name|CAST
operator|&&
name|isNull
argument_list|(
name|call
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|literalSet
operator|.
name|add
argument_list|(
name|call
argument_list|)
expr_stmt|;
return|return
name|call
return|;
block|}
if|else if
condition|(
name|ops
operator|.
name|contains
argument_list|(
name|operator
argument_list|)
condition|)
block|{
comment|// "Argument to function 'LOCALTIME' must be a
comment|// literal"
return|return
name|call
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|visit
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|isNull
parameter_list|(
name|SqlNode
name|sqlNode
parameter_list|)
block|{
return|return
name|sqlNode
operator|instanceof
name|SqlLiteral
operator|&&
operator|(
operator|(
name|SqlLiteral
operator|)
name|sqlNode
operator|)
operator|.
name|getTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|NULL
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|literalSet
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|sort
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
block|{
specifier|final
name|SqlParserPos
name|pos0
init|=
name|o1
operator|.
name|getParserPosition
argument_list|()
decl_stmt|;
specifier|final
name|SqlParserPos
name|pos1
init|=
name|o2
operator|.
name|getParserPosition
argument_list|()
decl_stmt|;
name|int
name|c
init|=
operator|-
name|Utilities
operator|.
name|compare
argument_list|(
name|pos0
operator|.
name|getLineNum
argument_list|()
argument_list|,
name|pos1
operator|.
name|getLineNum
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
return|return
operator|-
name|Utilities
operator|.
name|compare
argument_list|(
name|pos0
operator|.
name|getColumnNum
argument_list|()
argument_list|,
name|pos1
operator|.
name|getColumnNum
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|String
name|sql2
init|=
name|sql
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SqlNode
name|literal
range|:
name|nodes
control|)
block|{
specifier|final
name|SqlParserPos
name|pos
init|=
name|literal
operator|.
name|getParserPosition
argument_list|()
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|SqlParserUtil
operator|.
name|lineColToIndex
argument_list|(
name|sql
argument_list|,
name|pos
operator|.
name|getLineNum
argument_list|()
argument_list|,
name|pos
operator|.
name|getColumnNum
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|SqlParserUtil
operator|.
name|lineColToIndex
argument_list|(
name|sql
argument_list|,
name|pos
operator|.
name|getEndLineNum
argument_list|()
argument_list|,
name|pos
operator|.
name|getEndColumnNum
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|String
name|param
init|=
literal|"p"
operator|+
operator|(
name|p
operator|++
operator|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|sql2
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
name|param
argument_list|)
argument_list|)
expr_stmt|;
name|sql2
operator|=
name|sql2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|start
argument_list|)
operator|+
name|param
operator|+
name|sql2
operator|.
name|substring
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
literal|"1"
argument_list|,
literal|"p0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|"select "
operator|+
name|sql2
operator|.
name|substring
argument_list|(
literal|"values ("
operator|.
name|length
argument_list|()
argument_list|,
name|sql2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|" from (values ("
operator|+
name|Util
operator|.
name|commaList
argument_list|(
name|Pair
operator|.
name|left
argument_list|(
name|values
argument_list|)
argument_list|)
operator|+
literal|")) as t("
operator|+
name|Util
operator|.
name|commaList
argument_list|(
name|Pair
operator|.
name|right
argument_list|(
name|values
argument_list|)
argument_list|)
operator|+
literal|")"
return|;
block|}
comment|/**    * Converts a scalar expression into a list of SQL queries that    * evaluate it.    *    * @param expression Scalar expression    * @return List of queries that evaluate an expression    */
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|buildQueries
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|)
block|{
comment|// Why an explicit iterable rather than a list? If there is
comment|// a syntax error in the expression, the calling code discovers it
comment|// before we try to parse it to do substitutions on the parse tree.
return|return
parameter_list|()
lambda|->
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|int
name|i
operator|=
literal|0
return|;
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|next
parameter_list|()
block|{
switch|switch
condition|(
name|i
operator|++
condition|)
block|{
case|case
literal|0
case|:
return|return
name|buildQuery
argument_list|(
name|expression
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|buildQuery2
argument_list|(
name|expression
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|<
literal|2
return|;
block|}
block|}
empty_stmt|;
block|}
end_class

begin_comment
unit|}
comment|// End AbstractSqlTester.java
end_comment

end_unit

