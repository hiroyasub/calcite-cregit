begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test case for  *<a href="https://issues.apache.org/jira/browse/CALCITE-4402">[CALCITE-4402]  * SqlCall#equalsDeep does not take into account the function quantifier</a>.  */
end_comment

begin_class
class|class
name|SqlEqualsDeepTest
block|{
annotation|@
name|Test
name|void
name|testCountEqualsDeep
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|assertEqualsDeep
argument_list|(
literal|"count(a)"
argument_list|,
literal|"count(a)"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEqualsDeep
argument_list|(
literal|"count(distinct a)"
argument_list|,
literal|"count(distinct a)"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEqualsDeep
argument_list|(
literal|"count(distinct a)"
argument_list|,
literal|"count(a)"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEqualsDeep
parameter_list|(
name|String
name|expr0
parameter_list|,
name|String
name|expr1
parameter_list|,
name|boolean
name|expected
parameter_list|)
throws|throws
name|SqlParseException
block|{
name|SqlNode
name|sqlNode0
init|=
name|parseExpression
argument_list|(
name|expr0
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlNode1
init|=
name|parseExpression
argument_list|(
name|expr1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|sqlNode0
operator|.
name|equalsDeep
argument_list|(
name|sqlNode1
argument_list|,
name|Litmus
operator|.
name|IGNORE
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|expr0
operator|+
literal|" equalsDeep "
operator|+
name|expr1
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|SqlNode
name|parseExpression
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SqlParseException
block|{
return|return
name|SqlParser
operator|.
name|create
argument_list|(
name|sql
argument_list|)
operator|.
name|parseExpression
argument_list|()
return|;
block|}
block|}
end_class

end_unit

