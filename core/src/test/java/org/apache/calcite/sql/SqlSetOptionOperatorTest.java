begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test for {@link SqlSetOption}.  */
end_comment

begin_class
class|class
name|SqlSetOptionOperatorTest
block|{
annotation|@
name|Test
name|void
name|testSqlSetOptionOperatorScopeSet
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|SqlNode
name|node
init|=
name|parse
argument_list|(
literal|"alter system set optionA.optionB.optionC = true"
argument_list|)
decl_stmt|;
name|checkSqlSetOptionSame
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SqlNode
name|parse
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SqlParseException
block|{
return|return
name|SqlParser
operator|.
name|create
argument_list|(
name|s
argument_list|)
operator|.
name|parseStmt
argument_list|()
return|;
block|}
annotation|@
name|Test
name|void
name|testSqlSetOptionOperatorSet
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|SqlNode
name|node
init|=
name|parse
argument_list|(
literal|"set optionA.optionB.optionC = true"
argument_list|)
decl_stmt|;
name|checkSqlSetOptionSame
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlSetOptionOperatorScopeReset
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|SqlNode
name|node
init|=
name|parse
argument_list|(
literal|"alter session reset param1.param2.param3"
argument_list|)
decl_stmt|;
name|checkSqlSetOptionSame
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlSetOptionOperatorReset
parameter_list|()
throws|throws
name|SqlParseException
block|{
name|SqlNode
name|node
init|=
name|parse
argument_list|(
literal|"reset param1.param2.param3"
argument_list|)
decl_stmt|;
name|checkSqlSetOptionSame
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkSqlSetOptionSame
parameter_list|(
name|SqlNode
name|node
parameter_list|)
block|{
name|SqlSetOption
name|opt
init|=
operator|(
name|SqlSetOption
operator|)
name|node
decl_stmt|;
name|SqlNode
index|[]
name|sqlNodes
init|=
operator|new
name|SqlNode
index|[
name|opt
operator|.
name|getOperandList
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|SqlCall
name|returned
init|=
name|opt
operator|.
name|getOperator
argument_list|()
operator|.
name|createCall
argument_list|(
name|opt
operator|.
name|getFunctionQuantifier
argument_list|()
argument_list|,
name|opt
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|opt
operator|.
name|getOperandList
argument_list|()
operator|.
name|toArray
argument_list|(
name|sqlNodes
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|Class
operator|)
name|opt
operator|.
name|getClass
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Class
operator|)
name|returned
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SqlSetOption
name|optRet
init|=
operator|(
name|SqlSetOption
operator|)
name|returned
decl_stmt|;
name|assertThat
argument_list|(
name|optRet
operator|.
name|getScope
argument_list|()
argument_list|,
name|is
argument_list|(
name|opt
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|optRet
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
name|opt
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|optRet
operator|.
name|getFunctionQuantifier
argument_list|()
argument_list|,
name|is
argument_list|(
name|opt
operator|.
name|getFunctionQuantifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|optRet
operator|.
name|getParserPosition
argument_list|()
argument_list|,
name|is
argument_list|(
name|opt
operator|.
name|getParserPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|optRet
operator|.
name|getValue
argument_list|()
argument_list|,
name|is
argument_list|(
name|opt
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|optRet
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|opt
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

