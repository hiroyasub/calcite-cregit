begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Casing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Quoting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|advise
operator|.
name|SqlAdvisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlConformanceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorWithHints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|MockCatalogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|MockSqlOperatorTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link SqlTestFactory}.  *  *<p>Suitable for most tests. If you want different behavior, you can extend;  * if you want a factory with different properties (e.g. SQL conformance level  * or identifier quoting), wrap in a  * {@link DelegatingSqlTestFactory} and  * override {@link #get}.</p> */
end_comment

begin_class
specifier|public
class|class
name|DefaultSqlTestFactory
implements|implements
name|SqlTestFactory
block|{
specifier|public
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|DEFAULT_OPTIONS
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"quoting"
argument_list|,
name|Quoting
operator|.
name|DOUBLE_QUOTE
argument_list|)
decl|.
name|put
argument_list|(
literal|"quotedCasing"
argument_list|,
name|Casing
operator|.
name|UNCHANGED
argument_list|)
decl|.
name|put
argument_list|(
literal|"unquotedCasing"
argument_list|,
name|Casing
operator|.
name|TO_UPPER
argument_list|)
decl|.
name|put
argument_list|(
literal|"caseSensitive"
argument_list|,
literal|true
argument_list|)
decl|.
name|put
argument_list|(
literal|"conformance"
argument_list|,
name|SqlConformanceEnum
operator|.
name|DEFAULT
argument_list|)
decl|.
name|put
argument_list|(
literal|"operatorTable"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|instance
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"connectionFactory"
argument_list|,
name|CalciteAssert
operator|.
name|EMPTY_CONNECTION_FACTORY
operator|.
name|with
argument_list|(
operator|new
name|CalciteAssert
operator|.
name|AddSchemaSpecPostProcessor
argument_list|(
name|CalciteAssert
operator|.
name|SchemaSpec
operator|.
name|HR
argument_list|)
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DefaultSqlTestFactory
name|INSTANCE
init|=
operator|new
name|DefaultSqlTestFactory
argument_list|()
decl_stmt|;
specifier|private
name|DefaultSqlTestFactory
parameter_list|()
block|{
block|}
specifier|public
name|SqlOperatorTable
name|createOperatorTable
parameter_list|(
name|SqlTestFactory
name|factory
parameter_list|)
block|{
specifier|final
name|SqlOperatorTable
name|opTab0
init|=
operator|(
name|SqlOperatorTable
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"operatorTable"
argument_list|)
decl_stmt|;
name|MockSqlOperatorTable
name|opTab
init|=
operator|new
name|MockSqlOperatorTable
argument_list|(
name|opTab0
argument_list|)
decl_stmt|;
name|MockSqlOperatorTable
operator|.
name|addRamp
argument_list|(
name|opTab
argument_list|)
expr_stmt|;
return|return
name|opTab
return|;
block|}
specifier|public
name|SqlParser
name|createParser
parameter_list|(
name|SqlTestFactory
name|factory
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
return|return
name|SqlParser
operator|.
name|create
argument_list|(
name|sql
argument_list|,
name|SqlParser
operator|.
name|configBuilder
argument_list|()
operator|.
name|setQuoting
argument_list|(
operator|(
name|Quoting
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"quoting"
argument_list|)
argument_list|)
operator|.
name|setUnquotedCasing
argument_list|(
operator|(
name|Casing
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"unquotedCasing"
argument_list|)
argument_list|)
operator|.
name|setQuotedCasing
argument_list|(
operator|(
name|Casing
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"quotedCasing"
argument_list|)
argument_list|)
operator|.
name|setConformance
argument_list|(
operator|(
name|SqlConformance
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"conformance"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|SqlValidator
name|getValidator
parameter_list|(
name|SqlTestFactory
name|factory
parameter_list|)
block|{
specifier|final
name|SqlOperatorTable
name|operatorTable
init|=
name|factory
operator|.
name|createOperatorTable
argument_list|(
name|factory
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|caseSensitive
init|=
operator|(
name|Boolean
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"caseSensitive"
argument_list|)
decl_stmt|;
specifier|final
name|SqlConformance
name|conformance
init|=
operator|(
name|SqlConformance
operator|)
name|factory
operator|.
name|get
argument_list|(
literal|"conformance"
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
return|return
name|SqlValidatorUtil
operator|.
name|newValidator
argument_list|(
name|operatorTable
argument_list|,
operator|new
name|MockCatalogReader
argument_list|(
name|typeFactory
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|init
argument_list|()
argument_list|,
name|typeFactory
argument_list|,
name|conformance
argument_list|)
return|;
block|}
specifier|public
name|SqlAdvisor
name|createAdvisor
parameter_list|(
name|SqlValidatorWithHints
name|validator
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|DEFAULT_OPTIONS
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End DefaultSqlTestFactory.java
end_comment

end_unit

