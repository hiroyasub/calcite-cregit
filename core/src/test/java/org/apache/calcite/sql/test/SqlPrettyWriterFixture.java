begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|AnsiSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|pretty
operator|.
name|SqlPrettyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|DiffRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/**  * A fixture for testing the SQL pretty writer.  *  *<p>It provides a fluent API so that you can write tests by chaining method  * calls.  *  *<p>It is immutable. If you have two test cases that require a similar set up,  * it is safe to use the same fixture object as a starting point for both tests.  *  * @see org.apache.calcite.sql.pretty.SqlPrettyWriter  */
end_comment

begin_class
class|class
name|SqlPrettyWriterFixture
block|{
specifier|private
specifier|final
annotation|@
name|Nullable
name|DiffRepository
name|diffRepos
decl_stmt|;
specifier|public
specifier|final
name|String
name|sql
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|expression
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|String
name|desc
decl_stmt|;
specifier|public
specifier|final
name|String
name|formatted
decl_stmt|;
specifier|public
specifier|final
name|UnaryOperator
argument_list|<
name|SqlWriterConfig
argument_list|>
name|transform
decl_stmt|;
name|SqlPrettyWriterFixture
parameter_list|(
annotation|@
name|Nullable
name|DiffRepository
name|diffRepos
parameter_list|,
name|String
name|sql
parameter_list|,
name|boolean
name|expression
parameter_list|,
annotation|@
name|Nullable
name|String
name|desc
parameter_list|,
name|String
name|formatted
parameter_list|,
name|UnaryOperator
argument_list|<
name|SqlWriterConfig
argument_list|>
name|transform
parameter_list|)
block|{
name|this
operator|.
name|diffRepos
operator|=
name|diffRepos
expr_stmt|;
name|this
operator|.
name|sql
operator|=
name|requireNonNull
argument_list|(
name|sql
argument_list|,
literal|"sql"
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|formatted
operator|=
name|requireNonNull
argument_list|(
name|formatted
argument_list|,
literal|"formatted"
argument_list|)
expr_stmt|;
name|this
operator|.
name|transform
operator|=
name|requireNonNull
argument_list|(
name|transform
argument_list|,
literal|"transform"
argument_list|)
expr_stmt|;
block|}
name|SqlPrettyWriterFixture
name|withWriter
parameter_list|(
name|UnaryOperator
argument_list|<
name|SqlWriterConfig
argument_list|>
name|transform
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|transform
argument_list|,
literal|"transform"
argument_list|)
expr_stmt|;
specifier|final
name|UnaryOperator
argument_list|<
name|SqlWriterConfig
argument_list|>
name|transform1
init|=
name|this
operator|.
name|transform
operator|.
name|andThen
argument_list|(
name|transform
argument_list|)
operator|::
name|apply
decl_stmt|;
return|return
operator|new
name|SqlPrettyWriterFixture
argument_list|(
name|diffRepos
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|desc
argument_list|,
name|formatted
argument_list|,
name|transform1
argument_list|)
return|;
block|}
name|SqlPrettyWriterFixture
name|withSql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
if|if
condition|(
name|sql
operator|.
name|equals
argument_list|(
name|this
operator|.
name|sql
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|SqlPrettyWriterFixture
argument_list|(
name|diffRepos
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|desc
argument_list|,
name|formatted
argument_list|,
name|transform
argument_list|)
return|;
block|}
name|SqlPrettyWriterFixture
name|withExpr
parameter_list|(
name|boolean
name|expression
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|expression
operator|==
name|expression
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|SqlPrettyWriterFixture
argument_list|(
name|diffRepos
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|desc
argument_list|,
name|formatted
argument_list|,
name|transform
argument_list|)
return|;
block|}
name|SqlPrettyWriterFixture
name|withDiffRepos
parameter_list|(
name|DiffRepository
name|diffRepos
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|diffRepos
argument_list|,
name|diffRepos
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|SqlPrettyWriterFixture
argument_list|(
name|diffRepos
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|desc
argument_list|,
name|formatted
argument_list|,
name|transform
argument_list|)
return|;
block|}
comment|/** Returns the diff repository, checking that it is not null.    * (It is allowed to be null because some tests that don't use a diff    * repository.) */
specifier|public
name|DiffRepository
name|diffRepos
parameter_list|()
block|{
return|return
name|DiffRepository
operator|.
name|castNonNull
argument_list|(
name|diffRepos
argument_list|)
return|;
block|}
name|SqlPrettyWriterFixture
name|expectingDesc
parameter_list|(
annotation|@
name|Nullable
name|String
name|desc
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|desc
argument_list|,
name|desc
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|SqlPrettyWriterFixture
argument_list|(
name|diffRepos
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|desc
argument_list|,
name|formatted
argument_list|,
name|transform
argument_list|)
return|;
block|}
name|SqlPrettyWriterFixture
name|expectingFormatted
parameter_list|(
name|String
name|formatted
parameter_list|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|formatted
argument_list|,
name|formatted
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|SqlPrettyWriterFixture
argument_list|(
name|diffRepos
argument_list|,
name|sql
argument_list|,
name|expression
argument_list|,
name|desc
argument_list|,
name|formatted
argument_list|,
name|transform
argument_list|)
return|;
block|}
comment|/** Parses a SQL query. To use a different parser, override this method. */
specifier|protected
name|SqlNode
name|parseQuery
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|SqlNode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|SqlParser
operator|.
name|create
argument_list|(
name|sql
argument_list|)
operator|.
name|parseQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Received error while parsing SQL '"
operator|+
name|sql
operator|+
literal|"'"
operator|+
literal|"; error is:\n"
operator|+
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
name|SqlPrettyWriterFixture
name|check
parameter_list|()
block|{
specifier|final
name|SqlWriterConfig
name|config
init|=
name|transform
operator|.
name|apply
argument_list|(
name|SqlPrettyWriter
operator|.
name|config
argument_list|()
operator|.
name|withDialect
argument_list|(
name|AnsiSqlDialect
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SqlPrettyWriter
name|prettyWriter
init|=
operator|new
name|SqlPrettyWriter
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|node
decl_stmt|;
if|if
condition|(
name|expression
condition|)
block|{
specifier|final
name|SqlCall
name|valuesCall
init|=
operator|(
name|SqlCall
operator|)
name|parseQuery
argument_list|(
literal|"VALUES ("
operator|+
name|sql
operator|+
literal|")"
argument_list|)
decl_stmt|;
specifier|final
name|SqlCall
name|rowCall
init|=
name|valuesCall
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|node
operator|=
name|rowCall
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|parseQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
comment|// Describe settings
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|prettyWriter
operator|.
name|describe
argument_list|(
name|pw
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|final
name|String
name|desc
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|diffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"desc"
argument_list|,
name|this
operator|.
name|desc
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
comment|// Format
specifier|final
name|String
name|formatted
init|=
name|prettyWriter
operator|.
name|format
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|diffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"formatted"
argument_list|,
name|this
operator|.
name|formatted
argument_list|,
name|formatted
argument_list|)
expr_stmt|;
comment|// Now parse the result, and make sure it is structurally equivalent
comment|// to the original.
specifier|final
name|String
name|actual2
init|=
name|formatted
operator|.
name|replace
argument_list|(
literal|"`"
argument_list|,
literal|"\""
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|node2
decl_stmt|;
if|if
condition|(
name|expression
condition|)
block|{
specifier|final
name|SqlCall
name|valuesCall
init|=
operator|(
name|SqlCall
operator|)
name|parseQuery
argument_list|(
literal|"VALUES ("
operator|+
name|actual2
operator|+
literal|")"
argument_list|)
decl_stmt|;
specifier|final
name|SqlCall
name|rowCall
init|=
name|valuesCall
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|node2
operator|=
name|rowCall
operator|.
name|operand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node2
operator|=
name|parseQuery
argument_list|(
name|actual2
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|node
operator|.
name|equalsDeep
argument_list|(
name|node2
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

