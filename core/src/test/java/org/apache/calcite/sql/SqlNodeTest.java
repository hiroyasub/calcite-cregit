begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|sameInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test of {@link SqlNode} and other SQL AST classes.  */
end_comment

begin_class
class|class
name|SqlNodeTest
block|{
annotation|@
name|Test
name|void
name|testSqlNodeList
parameter_list|()
block|{
name|SqlParserPos
name|zero
init|=
name|SqlParserPos
operator|.
name|ZERO
decl_stmt|;
name|checkList
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|zero
argument_list|)
argument_list|)
expr_stmt|;
name|checkList
argument_list|(
name|SqlNodeList
operator|.
name|SINGLETON_STAR
argument_list|)
expr_stmt|;
name|checkList
argument_list|(
name|SqlNodeList
operator|.
name|SINGLETON_EMPTY
argument_list|)
expr_stmt|;
name|checkList
argument_list|(
name|SqlNodeList
operator|.
name|of
argument_list|(
name|zero
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SqlLiteral
operator|.
name|createCharString
argument_list|(
literal|"x"
argument_list|,
name|zero
argument_list|)
argument_list|,
operator|new
name|SqlIdentifier
argument_list|(
literal|"y"
argument_list|,
name|zero
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Compares a list to its own backing list. */
specifier|private
name|void
name|checkList
parameter_list|(
name|SqlNodeList
name|nodeList
parameter_list|)
block|{
name|checkLists
argument_list|(
name|nodeList
argument_list|,
name|nodeList
operator|.
name|getList
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** Checks that two lists are identical. */
specifier|private
parameter_list|<
name|E
parameter_list|>
name|void
name|checkLists
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list0
parameter_list|,
name|List
argument_list|<
name|E
argument_list|>
name|list1
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|assertThat
argument_list|(
name|list0
operator|.
name|hashCode
argument_list|()
argument_list|,
name|is
argument_list|(
name|list1
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list0
operator|.
name|equals
argument_list|(
name|list1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list0
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list0
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
name|list1
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|list0
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|list0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|list1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|list0
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|list1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|==
literal|0
condition|)
block|{
name|checkLists
argument_list|(
name|Util
operator|.
name|skip
argument_list|(
name|list0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Util
operator|.
name|skip
argument_list|(
name|list1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|collect
argument_list|(
name|list0
argument_list|)
argument_list|,
name|is
argument_list|(
name|list1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collect
argument_list|(
name|list1
argument_list|)
argument_list|,
name|is
argument_list|(
name|list0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|collect
parameter_list|(
name|Iterable
argument_list|<
name|E
argument_list|>
name|iterable
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|iterable
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

