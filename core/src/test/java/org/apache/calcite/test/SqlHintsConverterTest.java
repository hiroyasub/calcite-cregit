begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableConvention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableHashJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Convention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|ConventionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|AbstractConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelShuttleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Calc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|HintPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|HintPredicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|HintStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|HintStrategyTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|Hintable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|hint
operator|.
name|RelHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|CoreRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlInsert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlTableRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Program
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Programs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RuleSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RuleSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|immutables
operator|.
name|value
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|collection
operator|.
name|IsIn
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link org.apache.calcite.rel.hint.RelHint}.  */
end_comment

begin_class
class|class
name|SqlHintsConverterTest
extends|extends
name|SqlToRelTestBase
block|{
specifier|protected
name|DiffRepository
name|getDiffRepos
parameter_list|()
block|{
return|return
name|DiffRepository
operator|.
name|lookup
argument_list|(
name|SqlHintsConverterTest
operator|.
name|class
argument_list|)
return|;
block|}
comment|//~ Tests ------------------------------------------------------------------
annotation|@
name|Test
name|void
name|testQueryHint
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
name|HintTools
operator|.
name|withHint
argument_list|(
literal|"select /*+ %s */ *\n"
operator|+
literal|"from emp e1\n"
operator|+
literal|"inner join dept d1 on e1.deptno = d1.deptno\n"
operator|+
literal|"inner join emp e2 on e1.ename = e2.job"
argument_list|)
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testQueryHintWithLiteralOptions
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ time_zone(1, 1.23, 'a bc', -1.0) */ *\n"
operator|+
literal|"from emp"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testNestedQueryHint
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ resource(parallelism='3'), repartition(10) */ empno\n"
operator|+
literal|"from (select /*+ resource(mem='20Mb')*/ empno, ename from emp)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTwoLevelNestedQueryHint
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ resource(parallelism='3'), no_hash_join */ empno\n"
operator|+
literal|"from (select /*+ resource(mem='20Mb')*/ empno, ename\n"
operator|+
literal|"from emp left join dept on emp.deptno = dept.deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testThreeLevelNestedQueryHint
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ index(idx1), no_hash_join */ * from emp /*+ index(empno) */\n"
operator|+
literal|"e1 join dept/*+ index(deptno) */ d1 on e1.deptno = d1.deptno\n"
operator|+
literal|"join emp e2 on d1.name = e2.job"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testFourLevelNestedQueryHint
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ index(idx1), no_hash_join */ * from emp /*+ index(empno) */\n"
operator|+
literal|"e1 join dept/*+ index(deptno) */ d1 on e1.deptno = d1.deptno join\n"
operator|+
literal|"(select max(sal) as sal from emp /*+ index(empno) */) e2 on e1.sal = e2.sal"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testAggregateHints
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ AGG_STRATEGY(TWO_PHASE), RESOURCE(mem='1024') */\n"
operator|+
literal|"count(deptno), avg_sal from (\n"
operator|+
literal|"select /*+ AGG_STRATEGY(ONE_PHASE) */ avg(sal) as avg_sal, deptno\n"
operator|+
literal|"from emp group by deptno) group by avg_sal"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsInSubQueryWithDecorrelation
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ resource(parallelism='3'), AGG_STRATEGY(TWO_PHASE) */\n"
operator|+
literal|"sum(e1.empno) from emp e1, dept d1\n"
operator|+
literal|"where e1.deptno = d1.deptno\n"
operator|+
literal|"and e1.sal> (\n"
operator|+
literal|"select /*+ resource(cpu='2') */ avg(e2.sal) from emp e2 where e2.deptno = d1.deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|withTester
argument_list|(
name|t
lambda|->
name|t
operator|.
name|withDecorrelation
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsInSubQueryWithDecorrelation2
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ properties(k1='v1', k2='v2'), index(ename), no_hash_join */\n"
operator|+
literal|"sum(e1.empno) from emp e1, dept d1\n"
operator|+
literal|"where e1.deptno = d1.deptno\n"
operator|+
literal|"and e1.sal> (\n"
operator|+
literal|"select /*+ properties(k1='v1', k2='v2'), index(ename), no_hash_join */\n"
operator|+
literal|"  avg(e2.sal)\n"
operator|+
literal|"  from emp e2\n"
operator|+
literal|"  where e2.deptno = d1.deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|withTester
argument_list|(
name|t
lambda|->
name|t
operator|.
name|withDecorrelation
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsInSubQueryWithDecorrelation3
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ resource(parallelism='3'), index(ename), no_hash_join */\n"
operator|+
literal|"sum(e1.empno) from emp e1, dept d1\n"
operator|+
literal|"where e1.deptno = d1.deptno\n"
operator|+
literal|"and e1.sal> (\n"
operator|+
literal|"select /*+ resource(cpu='2'), index(ename), no_hash_join */\n"
operator|+
literal|"  avg(e2.sal)\n"
operator|+
literal|"  from emp e2\n"
operator|+
literal|"  where e2.deptno = d1.deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|withTester
argument_list|(
name|t
lambda|->
name|t
operator|.
name|withDecorrelation
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsInSubQueryWithoutDecorrelation
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ resource(parallelism='3') */\n"
operator|+
literal|"sum(e1.empno) from emp e1, dept d1\n"
operator|+
literal|"where e1.deptno = d1.deptno\n"
operator|+
literal|"and e1.sal> (\n"
operator|+
literal|"select /*+ resource(cpu='2') */ avg(e2.sal) from emp e2 where e2.deptno = d1.deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testInvalidQueryHint
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ weird_hint */ empno\n"
operator|+
literal|"from (select /*+ resource(mem='20Mb')*/ empno, ename\n"
operator|+
literal|"from emp left join dept on emp.deptno = dept.deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|warns
argument_list|(
literal|"Hint: WEIRD_HINT should be registered in the HintStrategyTable"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql1
init|=
literal|"select /*+ resource(mem='20Mb')*/ empno\n"
operator|+
literal|"from (select /*+ weird_kv_hint(k1='v1') */ empno, ename\n"
operator|+
literal|"from emp left join dept on emp.deptno = dept.deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql1
argument_list|)
operator|.
name|warns
argument_list|(
literal|"Hint: WEIRD_KV_HINT should be registered in the HintStrategyTable"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql2
init|=
literal|"select /*+ AGG_STRATEGY(OPTION1) */\n"
operator|+
literal|"ename, avg(sal)\n"
operator|+
literal|"from emp group by ename"
decl_stmt|;
specifier|final
name|String
name|error2
init|=
literal|"Hint AGG_STRATEGY only allows single option, "
operator|+
literal|"allowed options: [ONE_PHASE, TWO_PHASE]"
decl_stmt|;
name|sql
argument_list|(
name|sql2
argument_list|)
operator|.
name|warns
argument_list|(
name|error2
argument_list|)
expr_stmt|;
comment|// Change the error handler to validate again.
name|sql
argument_list|(
name|sql2
argument_list|)
operator|.
name|withTester
argument_list|(
name|tester
lambda|->
name|tester
operator|.
name|withConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withHintStrategyTable
argument_list|(
name|HintTools
operator|.
name|createHintStrategies
argument_list|(
name|HintStrategyTable
operator|.
name|builder
argument_list|()
operator|.
name|errorHandler
argument_list|(
name|Litmus
operator|.
name|THROW
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|fails
argument_list|(
name|error2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTableHintsInJoin
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp /*+ index(idx1, idx2) */\n"
operator|+
literal|"join dept /*+ properties(k1='v1', k2='v2') */\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTableHintsInSelect
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
name|HintTools
operator|.
name|withHint
argument_list|(
literal|"select * from emp /*+ %s */"
argument_list|)
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSameHintsWithDifferentInheritPath
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ properties(k1='v1', k2='v2') */\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp /*+ index(idx1, idx2) */\n"
operator|+
literal|"join dept /*+ properties(k1='v1', k2='v2') */\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTableHintsInInsert
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
name|HintTools
operator|.
name|withHint
argument_list|(
literal|"insert into dept /*+ %s */ (deptno, name) "
operator|+
literal|"select deptno, name from dept"
argument_list|)
decl_stmt|;
specifier|final
name|SqlInsert
name|insert
init|=
operator|(
name|SqlInsert
operator|)
name|tester
operator|.
name|parseQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
assert|assert
name|insert
operator|.
name|getTargetTable
argument_list|()
operator|instanceof
name|SqlTableRef
assert|;
specifier|final
name|SqlTableRef
name|tableRef
init|=
operator|(
name|SqlTableRef
operator|)
name|insert
operator|.
name|getTargetTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
init|=
name|SqlUtil
operator|.
name|getRelHint
argument_list|(
name|HintTools
operator|.
name|HINT_STRATEGY_TABLE
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|tableRef
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertHintsEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HintTools
operator|.
name|PROPS_HINT
argument_list|,
name|HintTools
operator|.
name|IDX_HINT
argument_list|,
name|HintTools
operator|.
name|JOIN_HINT
argument_list|)
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTableHintsInUpdate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
name|HintTools
operator|.
name|withHint
argument_list|(
literal|"update emp /*+ %s */ "
operator|+
literal|"set name = 'test' where deptno = 1"
argument_list|)
decl_stmt|;
specifier|final
name|SqlUpdate
name|sqlUpdate
init|=
operator|(
name|SqlUpdate
operator|)
name|tester
operator|.
name|parseQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
assert|assert
name|sqlUpdate
operator|.
name|getTargetTable
argument_list|()
operator|instanceof
name|SqlTableRef
assert|;
specifier|final
name|SqlTableRef
name|tableRef
init|=
operator|(
name|SqlTableRef
operator|)
name|sqlUpdate
operator|.
name|getTargetTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
init|=
name|SqlUtil
operator|.
name|getRelHint
argument_list|(
name|HintTools
operator|.
name|HINT_STRATEGY_TABLE
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|tableRef
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertHintsEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HintTools
operator|.
name|PROPS_HINT
argument_list|,
name|HintTools
operator|.
name|IDX_HINT
argument_list|,
name|HintTools
operator|.
name|JOIN_HINT
argument_list|)
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTableHintsInDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
name|HintTools
operator|.
name|withHint
argument_list|(
literal|"delete from emp /*+ %s */ where deptno = 1"
argument_list|)
decl_stmt|;
specifier|final
name|SqlDelete
name|sqlDelete
init|=
operator|(
name|SqlDelete
operator|)
name|tester
operator|.
name|parseQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
assert|assert
name|sqlDelete
operator|.
name|getTargetTable
argument_list|()
operator|instanceof
name|SqlTableRef
assert|;
specifier|final
name|SqlTableRef
name|tableRef
init|=
operator|(
name|SqlTableRef
operator|)
name|sqlDelete
operator|.
name|getTargetTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
init|=
name|SqlUtil
operator|.
name|getRelHint
argument_list|(
name|HintTools
operator|.
name|HINT_STRATEGY_TABLE
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|tableRef
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertHintsEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HintTools
operator|.
name|PROPS_HINT
argument_list|,
name|HintTools
operator|.
name|IDX_HINT
argument_list|,
name|HintTools
operator|.
name|JOIN_HINT
argument_list|)
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTableHintsInMerge
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"merge into emps\n"
operator|+
literal|"/*+ %s */ e\n"
operator|+
literal|"using tempemps as t\n"
operator|+
literal|"on e.empno = t.empno\n"
operator|+
literal|"when matched then update\n"
operator|+
literal|"set name = t.name, deptno = t.deptno, salary = t.salary * .1\n"
operator|+
literal|"when not matched then insert (name, dept, salary)\n"
operator|+
literal|"values(t.name, 10, t.salary * .15)"
decl_stmt|;
specifier|final
name|String
name|sql1
init|=
name|HintTools
operator|.
name|withHint
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|SqlMerge
name|sqlMerge
init|=
operator|(
name|SqlMerge
operator|)
name|tester
operator|.
name|parseQuery
argument_list|(
name|sql1
argument_list|)
decl_stmt|;
assert|assert
name|sqlMerge
operator|.
name|getTargetTable
argument_list|()
operator|instanceof
name|SqlTableRef
assert|;
specifier|final
name|SqlTableRef
name|tableRef
init|=
operator|(
name|SqlTableRef
operator|)
name|sqlMerge
operator|.
name|getTargetTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelHint
argument_list|>
name|hints
init|=
name|SqlUtil
operator|.
name|getRelHint
argument_list|(
name|HintTools
operator|.
name|HINT_STRATEGY_TABLE
argument_list|,
operator|(
name|SqlNodeList
operator|)
name|tableRef
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertHintsEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HintTools
operator|.
name|PROPS_HINT
argument_list|,
name|HintTools
operator|.
name|IDX_HINT
argument_list|,
name|HintTools
operator|.
name|JOIN_HINT
argument_list|)
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testInvalidTableHints
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp /*+ weird_hint(idx1, idx2) */\n"
operator|+
literal|"join dept /*+ properties(k1='v1', k2='v2') */\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|warns
argument_list|(
literal|"Hint: WEIRD_HINT should be registered in the HintStrategyTable"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql1
init|=
literal|"select\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp /*+ index(idx1, idx2) */\n"
operator|+
literal|"join dept /*+ weird_kv_hint(k1='v1', k2='v2') */\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|sql
argument_list|(
name|sql1
argument_list|)
operator|.
name|warns
argument_list|(
literal|"Hint: WEIRD_KV_HINT should be registered in the HintStrategyTable"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testJoinHintRequiresSpecificInputs
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ use_hash_join(r, s), use_hash_join(emp, dept) */\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp join dept on emp.deptno = dept.deptno"
decl_stmt|;
comment|// Hint use_hash_join(r, s) expect to be ignored by the join node.
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsForCalc
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ resource(mem='1024MB')*/ ename, sal, deptno from emp"
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
operator|.
name|rel
decl_stmt|;
specifier|final
name|RelHint
name|hint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"RESOURCE"
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"MEM"
argument_list|,
literal|"1024MB"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// planner rule to convert Project to Calc.
name|HepProgram
name|program
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|CoreRules
operator|.
name|PROJECT_TO_CALC
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HepPlanner
name|planner
init|=
operator|new
name|HepPlanner
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|RelNode
name|newRel
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
operator|new
name|ValidateHintVisitor
argument_list|(
name|hint
argument_list|,
name|Calc
operator|.
name|class
argument_list|)
operator|.
name|go
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsPropagationInHepPlannerRules
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ use_hash_join(r, s), use_hash_join(emp, dept) */\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp join dept on emp.deptno = dept.deptno"
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
operator|.
name|rel
decl_stmt|;
specifier|final
name|RelHint
name|hint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"USE_HASH_JOIN"
argument_list|)
operator|.
name|inheritPath
argument_list|(
literal|0
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"DEPT"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Validate Hep planner.
name|HepProgram
name|program
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|MockJoinRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HepPlanner
name|planner
init|=
operator|new
name|HepPlanner
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|RelNode
name|newRel
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
operator|new
name|ValidateHintVisitor
argument_list|(
name|hint
argument_list|,
name|Join
operator|.
name|class
argument_list|)
operator|.
name|go
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsPropagationInVolcanoPlannerRules
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ use_hash_join(r, s), use_hash_join(emp, dept) */\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp join dept on emp.deptno = dept.deptno"
decl_stmt|;
name|RelOptPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|Tester
name|tester1
init|=
name|tester
operator|.
name|withDecorrelation
argument_list|(
literal|true
argument_list|)
operator|.
name|withClusterFactory
argument_list|(
name|relOptCluster
lambda|->
name|RelOptCluster
operator|.
name|create
argument_list|(
name|planner
argument_list|,
name|relOptCluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|tester1
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
operator|.
name|rel
decl_stmt|;
specifier|final
name|RelHint
name|hint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"USE_HASH_JOIN"
argument_list|)
operator|.
name|inheritPath
argument_list|(
literal|0
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"DEPT"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Validate Volcano planner.
name|RuleSet
name|ruleSet
init|=
name|RuleSets
operator|.
name|ofList
argument_list|(
name|MockEnumerableJoinRule
operator|.
name|create
argument_list|(
name|hint
argument_list|)
argument_list|,
comment|// Rule to validate the hint.
name|CoreRules
operator|.
name|FILTER_PROJECT_TRANSPOSE
argument_list|,
name|CoreRules
operator|.
name|FILTER_MERGE
argument_list|,
name|CoreRules
operator|.
name|PROJECT_MERGE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_FILTER_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_LIMIT_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_TABLE_SCAN_RULE
argument_list|)
decl_stmt|;
name|Program
name|program
init|=
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
decl_stmt|;
name|RelTraitSet
name|toTraits
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|traitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|program
operator|.
name|run
argument_list|(
name|planner
argument_list|,
name|rel
argument_list|,
name|toTraits
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testHintsPropagateWithDifferentKindOfRels
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ AGG_STRATEGY(TWO_PHASE) */\n"
operator|+
literal|"ename, avg(sal)\n"
operator|+
literal|"from emp group by ename"
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
operator|.
name|rel
decl_stmt|;
specifier|final
name|RelHint
name|hint
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"AGG_STRATEGY"
argument_list|)
operator|.
name|inheritPath
argument_list|(
literal|0
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"TWO_PHASE"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// AggregateReduceFunctionsRule does the transformation:
comment|// AGG -> PROJECT + AGG
name|HepProgram
name|program
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|CoreRules
operator|.
name|AGGREGATE_REDUCE_FUNCTIONS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HepPlanner
name|planner
init|=
operator|new
name|HepPlanner
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|RelNode
name|newRel
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
operator|new
name|ValidateHintVisitor
argument_list|(
name|hint
argument_list|,
name|Aggregate
operator|.
name|class
argument_list|)
operator|.
name|go
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testUseMergeJoin
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select /*+ use_merge_join(emp, dept) */\n"
operator|+
literal|"ename, job, sal, dept.name\n"
operator|+
literal|"from emp join dept on emp.deptno = dept.deptno"
decl_stmt|;
name|RelOptPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|Tester
name|tester1
init|=
name|tester
operator|.
name|withDecorrelation
argument_list|(
literal|true
argument_list|)
operator|.
name|withClusterFactory
argument_list|(
name|relOptCluster
lambda|->
name|RelOptCluster
operator|.
name|create
argument_list|(
name|planner
argument_list|,
name|relOptCluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|tester1
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
operator|.
name|rel
decl_stmt|;
name|RuleSet
name|ruleSet
init|=
name|RuleSets
operator|.
name|ofList
argument_list|(
name|EnumerableRules
operator|.
name|ENUMERABLE_MERGE_JOIN_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_PROJECT_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_TABLE_SCAN_RULE
argument_list|,
name|EnumerableRules
operator|.
name|ENUMERABLE_SORT_RULE
argument_list|,
name|AbstractConverter
operator|.
name|ExpandConversionRule
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|Program
name|program
init|=
name|Programs
operator|.
name|of
argument_list|(
name|ruleSet
argument_list|)
decl_stmt|;
name|RelTraitSet
name|toTraits
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|traitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RelNode
name|relAfter
init|=
name|program
operator|.
name|run
argument_list|(
name|planner
argument_list|,
name|rel
argument_list|,
name|toTraits
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|planAfter
init|=
name|NL
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|relAfter
argument_list|)
decl_stmt|;
name|getDiffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"planAfter"
argument_list|,
literal|"${planAfter}"
argument_list|,
name|planAfter
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|protected
name|Tester
name|createTester
parameter_list|()
block|{
return|return
name|super
operator|.
name|createTester
argument_list|()
operator|.
name|withConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withHintStrategyTable
argument_list|(
name|HintTools
operator|.
name|HINT_STRATEGY_TABLE
argument_list|)
argument_list|)
return|;
block|}
comment|/** Sets the SQL statement for a test. */
specifier|public
specifier|final
name|Sql
name|sql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
operator|new
name|Sql
argument_list|(
name|sql
argument_list|,
name|tester
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equalsStringList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|l
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|r
parameter_list|)
block|{
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|!=
name|r
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|s
range|:
name|l
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|void
name|assertHintsEquals
parameter_list|(
name|List
argument_list|<
name|RelHint
argument_list|>
name|expected
parameter_list|,
name|List
argument_list|<
name|RelHint
argument_list|>
name|actual
parameter_list|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
operator|.
name|toArray
argument_list|(
operator|new
name|RelHint
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|actual
operator|.
name|toArray
argument_list|(
operator|new
name|RelHint
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Class ------------------------------------------------------------
comment|/** A Mock rule to validate the hint. */
specifier|public
specifier|static
class|class
name|MockJoinRule
extends|extends
name|RelRule
argument_list|<
name|MockJoinRule
operator|.
name|Config
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|MockJoinRule
name|INSTANCE
init|=
name|ImmutableMockJoinRuleConfig
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|withOperandSupplier
argument_list|(
name|b
lambda|->
name|b
operator|.
name|operand
argument_list|(
name|LogicalJoin
operator|.
name|class
argument_list|)
operator|.
name|anyInputs
argument_list|()
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"MockJoinRule"
argument_list|)
operator|.
name|as
argument_list|(
name|Config
operator|.
name|class
argument_list|)
operator|.
name|toRule
argument_list|()
decl_stmt|;
name|MockJoinRule
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LogicalJoin
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|join
operator|.
name|getHints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|LogicalJoin
operator|.
name|create
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|join
operator|.
name|getHints
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|join
operator|.
name|getVariablesSet
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Rule configuration. */
annotation|@
name|Value
operator|.
name|Immutable
annotation|@
name|Value
operator|.
name|Style
argument_list|(
name|typeImmutable
operator|=
literal|"ImmutableMockJoinRuleConfig"
argument_list|)
specifier|public
interface|interface
name|Config
extends|extends
name|RelRule
operator|.
name|Config
block|{
annotation|@
name|Override
specifier|default
name|MockJoinRule
name|toRule
parameter_list|()
block|{
return|return
operator|new
name|MockJoinRule
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** A Mock rule to validate the hint.    * This rule also converts the rel to EnumerableConvention. */
specifier|private
specifier|static
class|class
name|MockEnumerableJoinRule
extends|extends
name|ConverterRule
block|{
specifier|static
name|MockEnumerableJoinRule
name|create
parameter_list|(
name|RelHint
name|hint
parameter_list|)
block|{
return|return
name|Config
operator|.
name|INSTANCE
operator|.
name|withConversion
argument_list|(
name|LogicalJoin
operator|.
name|class
argument_list|,
name|Convention
operator|.
name|NONE
argument_list|,
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|,
literal|"MockEnumerableJoinRule"
argument_list|)
operator|.
name|withRuleFactory
argument_list|(
name|c
lambda|->
operator|new
name|MockEnumerableJoinRule
argument_list|(
name|c
argument_list|,
name|hint
argument_list|)
argument_list|)
operator|.
name|toRule
argument_list|(
name|MockEnumerableJoinRule
operator|.
name|class
argument_list|)
return|;
block|}
name|MockEnumerableJoinRule
parameter_list|(
name|Config
name|config
parameter_list|,
name|RelHint
name|hint
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedHint
operator|=
name|hint
expr_stmt|;
block|}
specifier|private
specifier|final
name|RelHint
name|expectedHint
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RelNode
name|convert
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|LogicalJoin
name|join
init|=
operator|(
name|LogicalJoin
operator|)
name|rel
decl_stmt|;
name|assertThat
argument_list|(
name|join
operator|.
name|getHints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|join
operator|.
name|getHints
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|expectedHint
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|.
name|getConvention
argument_list|()
operator|instanceof
name|EnumerableConvention
operator|)
condition|)
block|{
name|input
operator|=
name|convert
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|EnumerableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newInputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelOptCluster
name|cluster
init|=
name|join
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|left
init|=
name|newInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|right
init|=
name|newInputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|JoinInfo
name|info
init|=
name|join
operator|.
name|analyzeCondition
argument_list|()
decl_stmt|;
return|return
name|EnumerableHashJoin
operator|.
name|create
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|info
operator|.
name|getEquiCondition
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
argument_list|,
name|join
operator|.
name|getVariablesSet
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** A visitor to validate a hintable node has specific hint. **/
specifier|private
specifier|static
class|class
name|ValidateHintVisitor
extends|extends
name|RelVisitor
block|{
specifier|private
specifier|final
name|RelHint
name|expectedHint
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
comment|/**      * Creates the validate visitor.      *      * @param hint  the hint to validate      * @param clazz the node type to validate the hint with      */
name|ValidateHintVisitor
parameter_list|(
name|RelHint
name|hint
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|expectedHint
operator|=
name|hint
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|int
name|ordinal
parameter_list|,
annotation|@
name|Nullable
name|RelNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|Hintable
name|rel
init|=
operator|(
name|Hintable
operator|)
name|node
decl_stmt|;
name|assertThat
argument_list|(
name|rel
operator|.
name|getHints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rel
operator|.
name|getHints
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|expectedHint
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|,
name|ordinal
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Sql test tool. */
specifier|private
specifier|static
class|class
name|Sql
block|{
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
specifier|private
specifier|final
name|Tester
name|tester
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|hintsCollect
decl_stmt|;
name|Sql
parameter_list|(
name|String
name|sql
parameter_list|,
name|Tester
name|tester
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|tester
operator|=
name|tester
expr_stmt|;
name|this
operator|.
name|hintsCollect
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/** Create a new Sql instance with new tester      * applied with the {@code transform}. **/
name|Sql
name|withTester
parameter_list|(
name|UnaryOperator
argument_list|<
name|Tester
argument_list|>
name|transform
parameter_list|)
block|{
return|return
operator|new
name|Sql
argument_list|(
name|this
operator|.
name|sql
argument_list|,
name|transform
operator|.
name|apply
argument_list|(
name|tester
argument_list|)
argument_list|)
return|;
block|}
name|void
name|ok
parameter_list|()
block|{
name|assertHintsEquals
argument_list|(
name|sql
argument_list|,
literal|"${hints}"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertHintsEquals
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|hint
parameter_list|)
block|{
name|tester
operator|.
name|getDiffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"sql"
argument_list|,
literal|"${sql}"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|String
name|sql2
init|=
name|tester
operator|.
name|getDiffRepos
argument_list|()
operator|.
name|expand
argument_list|(
literal|"sql"
argument_list|,
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql2
argument_list|)
operator|.
name|project
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
name|rel
argument_list|)
expr_stmt|;
specifier|final
name|HintCollector
name|collector
init|=
operator|new
name|HintCollector
argument_list|(
name|hintsCollect
argument_list|)
decl_stmt|;
name|rel
operator|.
name|accept
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|NL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|hintLine
range|:
name|hintsCollect
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|hintLine
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
name|tester
operator|.
name|getDiffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"hints"
argument_list|,
name|hint
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|fails
parameter_list|(
name|String
name|failedMsg
parameter_list|)
block|{
try|try
block|{
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unexpected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
name|failedMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|warns
parameter_list|(
name|String
name|expectWarning
parameter_list|)
block|{
name|MockAppender
name|appender
init|=
operator|new
name|MockAppender
argument_list|()
decl_stmt|;
name|MockLogger
name|logger
init|=
operator|new
name|MockLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
name|appender
operator|.
name|loggingEvents
operator|.
name|add
argument_list|(
name|expectWarning
argument_list|)
expr_stmt|;
comment|// TODO: remove
name|assertThat
argument_list|(
name|expectWarning
argument_list|,
name|is
argument_list|(
name|in
argument_list|(
name|appender
operator|.
name|loggingEvents
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A shuttle to collect all the hints within the relational expression into a collection. */
specifier|private
specifier|static
class|class
name|HintCollector
extends|extends
name|RelShuttleImpl
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|hintsCollect
decl_stmt|;
name|HintCollector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hintsCollect
parameter_list|)
block|{
name|this
operator|.
name|hintsCollect
operator|=
name|hintsCollect
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
if|if
condition|(
name|scan
operator|.
name|getHints
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|hintsCollect
operator|.
name|add
argument_list|(
literal|"TableScan:"
operator|+
name|scan
operator|.
name|getHints
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visit
argument_list|(
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalJoin
name|join
parameter_list|)
block|{
if|if
condition|(
name|join
operator|.
name|getHints
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|hintsCollect
operator|.
name|add
argument_list|(
literal|"LogicalJoin:"
operator|+
name|join
operator|.
name|getHints
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visit
argument_list|(
name|join
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalProject
name|project
parameter_list|)
block|{
if|if
condition|(
name|project
operator|.
name|getHints
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|hintsCollect
operator|.
name|add
argument_list|(
literal|"Project:"
operator|+
name|project
operator|.
name|getHints
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visit
argument_list|(
name|project
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalAggregate
name|aggregate
parameter_list|)
block|{
if|if
condition|(
name|aggregate
operator|.
name|getHints
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|hintsCollect
operator|.
name|add
argument_list|(
literal|"Aggregate:"
operator|+
name|aggregate
operator|.
name|getHints
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visit
argument_list|(
name|aggregate
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Mock appender to collect the logging events. */
specifier|private
specifier|static
class|class
name|MockAppender
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|loggingEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|void
name|append
parameter_list|(
name|String
name|event
parameter_list|)
block|{
name|loggingEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** An utterly useless Logger; a placeholder so that the test compiles and    * trivially succeeds. */
specifier|private
specifier|static
class|class
name|MockLogger
block|{
name|void
name|addAppender
parameter_list|(
name|MockAppender
name|appender
parameter_list|)
block|{
block|}
name|void
name|removeAppender
parameter_list|(
name|MockAppender
name|appender
parameter_list|)
block|{
block|}
block|}
comment|/** Define some tool members and methods for hints test. */
specifier|private
specifier|static
class|class
name|HintTools
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|static
specifier|final
name|String
name|HINT
init|=
literal|"properties(k1='v1', k2='v2'), index(ename), no_hash_join"
decl_stmt|;
specifier|static
specifier|final
name|RelHint
name|PROPS_HINT
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"PROPERTIES"
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"K1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"K2"
argument_list|,
literal|"v2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|RelHint
name|IDX_HINT
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"INDEX"
argument_list|)
operator|.
name|hintOption
argument_list|(
literal|"ENAME"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|RelHint
name|JOIN_HINT
init|=
name|RelHint
operator|.
name|builder
argument_list|(
literal|"NO_HASH_JOIN"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|HintStrategyTable
name|HINT_STRATEGY_TABLE
init|=
name|createHintStrategies
argument_list|()
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/**      * Creates mock hint strategies.      *      * @return HintStrategyTable instance      */
specifier|private
specifier|static
name|HintStrategyTable
name|createHintStrategies
parameter_list|()
block|{
return|return
name|createHintStrategies
argument_list|(
name|HintStrategyTable
operator|.
name|builder
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates mock hint strategies with given builder.      *      * @return HintStrategyTable instance      */
specifier|static
name|HintStrategyTable
name|createHintStrategies
parameter_list|(
name|HintStrategyTable
operator|.
name|Builder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|hintStrategy
argument_list|(
literal|"no_hash_join"
argument_list|,
name|HintPredicates
operator|.
name|JOIN
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"time_zone"
argument_list|,
name|HintPredicates
operator|.
name|SET_VAR
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"REPARTITION"
argument_list|,
name|HintPredicates
operator|.
name|SET_VAR
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"index"
argument_list|,
name|HintPredicates
operator|.
name|TABLE_SCAN
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"properties"
argument_list|,
name|HintPredicates
operator|.
name|TABLE_SCAN
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"resource"
argument_list|,
name|HintPredicates
operator|.
name|or
argument_list|(
name|HintPredicates
operator|.
name|PROJECT
argument_list|,
name|HintPredicates
operator|.
name|AGGREGATE
argument_list|,
name|HintPredicates
operator|.
name|CALC
argument_list|)
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"AGG_STRATEGY"
argument_list|,
name|HintStrategy
operator|.
name|builder
argument_list|(
name|HintPredicates
operator|.
name|AGGREGATE
argument_list|)
operator|.
name|optionChecker
argument_list|(
parameter_list|(
name|hint
parameter_list|,
name|errorHandler
parameter_list|)
lambda|->
name|errorHandler
operator|.
name|check
argument_list|(
name|hint
operator|.
name|listOptions
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|hint
operator|.
name|listOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ONE_PHASE"
argument_list|)
operator|||
name|hint
operator|.
name|listOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TWO_PHASE"
argument_list|)
operator|)
argument_list|,
literal|"Hint {} only allows single option, "
operator|+
literal|"allowed options: [ONE_PHASE, TWO_PHASE]"
argument_list|,
name|hint
operator|.
name|hintName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"use_hash_join"
argument_list|,
name|HintPredicates
operator|.
name|and
argument_list|(
name|HintPredicates
operator|.
name|JOIN
argument_list|,
name|joinWithFixedTableName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hintStrategy
argument_list|(
literal|"use_merge_join"
argument_list|,
name|HintStrategy
operator|.
name|builder
argument_list|(
name|HintPredicates
operator|.
name|and
argument_list|(
name|HintPredicates
operator|.
name|JOIN
argument_list|,
name|joinWithFixedTableName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|excludedRules
argument_list|(
name|EnumerableRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Returns a {@link HintPredicate} for join with specified table references. */
specifier|private
specifier|static
name|HintPredicate
name|joinWithFixedTableName
parameter_list|()
block|{
return|return
parameter_list|(
name|hint
parameter_list|,
name|rel
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
operator|(
name|rel
operator|instanceof
name|LogicalJoin
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LogicalJoin
name|join
init|=
operator|(
name|LogicalJoin
operator|)
name|rel
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|hint
operator|.
name|listOptions
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|inputTables
init|=
name|join
operator|.
name|getInputs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|input
lambda|->
name|input
operator|instanceof
name|TableScan
argument_list|)
operator|.
name|map
argument_list|(
name|scan
lambda|->
name|Util
operator|.
name|last
argument_list|(
name|scan
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|equalsStringList
argument_list|(
name|tableNames
argument_list|,
name|inputTables
argument_list|)
return|;
block|}
return|;
block|}
comment|/** Format the query with hint {@link #HINT}. */
specifier|static
name|String
name|withHint
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|sql
argument_list|,
name|HINT
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

