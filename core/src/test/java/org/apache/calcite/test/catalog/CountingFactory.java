begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ColumnStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|NullInitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/** To check whether  * {@link InitializerExpressionFactory#newColumnDefaultValue} is called.  *  *<p>If a column is in {@code defaultColumns}, returns 1 as the default  * value. */
end_comment

begin_class
specifier|public
class|class
name|CountingFactory
extends|extends
name|NullInitializerExpressionFactory
block|{
specifier|public
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|AtomicInteger
argument_list|>
name|THREAD_CALL_COUNT
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|AtomicInteger
operator|::
operator|new
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|defaultColumns
decl_stmt|;
name|CountingFactory
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|defaultColumns
parameter_list|)
block|{
name|this
operator|.
name|defaultColumns
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|defaultColumns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStrategy
name|generationStrategy
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|table
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultColumns
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ColumnStrategy
operator|.
name|DEFAULT
return|;
block|}
return|return
name|super
operator|.
name|generationStrategy
argument_list|(
name|table
argument_list|,
name|iColumn
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|newColumnDefaultValue
parameter_list|(
name|RelOptTable
name|table
parameter_list|,
name|int
name|iColumn
parameter_list|,
name|InitializerContext
name|context
parameter_list|)
block|{
name|THREAD_CALL_COUNT
operator|.
name|get
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
specifier|final
name|RelDataTypeField
name|field
init|=
name|table
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultColumns
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|context
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|newColumnDefaultValue
argument_list|(
name|table
argument_list|,
name|iColumn
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|newAttributeInitializer
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|SqlFunction
name|constructor
parameter_list|,
name|int
name|iAttribute
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|constructorArgs
parameter_list|,
name|InitializerContext
name|context
parameter_list|)
block|{
name|THREAD_CALL_COUNT
operator|.
name|get
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|newAttributeInitializer
argument_list|(
name|type
argument_list|,
name|constructor
argument_list|,
name|iAttribute
argument_list|,
name|constructorArgs
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End CountingFactory.java
end_comment

end_unit

