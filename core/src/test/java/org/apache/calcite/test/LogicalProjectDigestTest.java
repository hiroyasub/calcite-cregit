begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|isLinux
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Verifies digest for {@link LogicalProject}.  */
end_comment

begin_class
class|class
name|LogicalProjectDigestTest
block|{
comment|/** Planner does not compare. */
annotation|@
name|Test
name|void
name|fieldNamesDoNotInfluenceDigest
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|rb
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|xAsEmpid
init|=
name|rb
operator|.
name|values
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"x"
block|,
literal|"y"
block|,
literal|"z"
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|project
argument_list|(
name|rb
operator|.
name|alias
argument_list|(
name|rb
operator|.
name|field
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"renamed_x"
argument_list|)
argument_list|,
name|rb
operator|.
name|alias
argument_list|(
name|rb
operator|.
name|field
argument_list|(
literal|"y"
argument_list|)
argument_list|,
literal|"renamed_y"
argument_list|)
argument_list|,
name|rb
operator|.
name|alias
argument_list|(
name|rb
operator|.
name|literal
argument_list|(
literal|"u"
argument_list|)
argument_list|,
literal|"extra_field"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"project column name should not be included to the project digest"
argument_list|,
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|xAsEmpid
argument_list|,
name|SqlExplainLevel
operator|.
name|DIGEST_ATTRIBUTES
argument_list|)
argument_list|,
name|isLinux
argument_list|(
literal|""
operator|+
literal|"LogicalProject(inputs=[0..1], exprs=[['u']])\n"
operator|+
literal|"  LogicalValues(type=[RecordType(INTEGER x, INTEGER y, INTEGER z)], tuples=[[{ 1, 2, 3 }]])\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"project column names should be present in EXPPLAN_ATTRIBUTES"
argument_list|,
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|xAsEmpid
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
argument_list|,
name|isLinux
argument_list|(
literal|""
operator|+
literal|"LogicalProject(renamed_x=[$0], renamed_y=[$1], extra_field=['u'])\n"
operator|+
literal|"  LogicalValues(tuples=[[{ 1, 2, 3 }]])\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"project column names should be present with default RelOptUtil.toString(...)"
argument_list|,
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|xAsEmpid
argument_list|)
argument_list|,
name|isLinux
argument_list|(
literal|""
operator|+
literal|"LogicalProject(renamed_x=[$0], renamed_y=[$1], extra_field=['u'])\n"
operator|+
literal|"  LogicalValues(tuples=[[{ 1, 2, 3 }]])\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testProjectDigestWithOneTrivialField
parameter_list|()
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|builder
operator|.
name|scan
argument_list|(
literal|"EMP"
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|digest
init|=
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|rel
argument_list|,
name|SqlExplainLevel
operator|.
name|DIGEST_ATTRIBUTES
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|""
operator|+
literal|"LogicalProject(inputs=[0])\n"
operator|+
literal|"  LogicalTableScan(table=[[scott, EMP]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|digest
argument_list|,
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

