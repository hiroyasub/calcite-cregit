begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|ReflectiveSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|Lex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|CoreRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|JdbcTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|RelBuilderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|EQUALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|isLinux
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test cases for  *<a href="https://issues.apache.org/jira/browse/CALCITE-3951">[CALCITE-3951]  * Support different string comparison based on SqlCollation</a>.  */
end_comment

begin_class
class|class
name|EnumerableStringComparisonTest
block|{
specifier|private
specifier|static
specifier|final
name|SqlCollation
name|SPECIAL_COLLATION_PRIMARY
init|=
operator|new
name|JavaCollation
argument_list|(
name|SqlCollation
operator|.
name|Coercibility
operator|.
name|IMPLICIT
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
name|Util
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|Collator
operator|.
name|PRIMARY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlCollation
name|SPECIAL_COLLATION_SECONDARY
init|=
operator|new
name|JavaCollation
argument_list|(
name|SqlCollation
operator|.
name|Coercibility
operator|.
name|IMPLICIT
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
name|Util
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|Collator
operator|.
name|SECONDARY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlCollation
name|SPECIAL_COLLATION_TERTIARY
init|=
operator|new
name|JavaCollation
argument_list|(
name|SqlCollation
operator|.
name|Coercibility
operator|.
name|IMPLICIT
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
name|Util
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|Collator
operator|.
name|TERTIARY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlCollation
name|SPECIAL_COLLATION_IDENTICAL
init|=
operator|new
name|JavaCollation
argument_list|(
name|SqlCollation
operator|.
name|Coercibility
operator|.
name|IMPLICIT
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
name|Util
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|Collator
operator|.
name|IDENTICAL
argument_list|)
decl_stmt|;
specifier|private
name|RelDataType
name|createRecordVarcharSpecialCollation
parameter_list|(
name|RelBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createTypeWithCharsetAndCollation
argument_list|(
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|,
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|SPECIAL_COLLATION_TERTIARY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|RelDataType
name|createVarcharSpecialCollation
parameter_list|(
name|RelBuilder
name|builder
parameter_list|,
name|SqlCollation
name|collation
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createTypeWithCharsetAndCollation
argument_list|(
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|,
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|collation
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testSortStringDefault
parameter_list|()
block|{
name|tester
argument_list|()
operator|.
name|query
argument_list|(
literal|"?"
argument_list|)
operator|.
name|withRel
argument_list|(
name|builder
lambda|->
name|builder
operator|.
name|values
argument_list|(
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|builder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"Legal"
argument_list|,
literal|"presales"
argument_list|,
literal|"hr"
argument_list|,
literal|"Administration"
argument_list|,
literal|"MARKETING"
argument_list|)
operator|.
name|sort
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|explainHookMatches
argument_list|(
literal|""
operator|+
literal|"EnumerableSort(sort0=[$0], dir0=[ASC])\n"
operator|+
literal|"  EnumerableValues(tuples=[[{ 'Legal' }, { 'presales' }, { 'hr' }, { 'Administration' }, { 'MARKETING' }]])\n"
argument_list|)
operator|.
name|returnsOrdered
argument_list|(
literal|"name=Administration\n"
operator|+
literal|"name=Legal\n"
operator|+
literal|"name=MARKETING\n"
operator|+
literal|"name=hr\n"
operator|+
literal|"name=presales"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSortStringSpecialCollation
parameter_list|()
block|{
name|tester
argument_list|()
operator|.
name|query
argument_list|(
literal|"?"
argument_list|)
operator|.
name|withRel
argument_list|(
name|builder
lambda|->
name|builder
operator|.
name|values
argument_list|(
name|createRecordVarcharSpecialCollation
argument_list|(
name|builder
argument_list|)
argument_list|,
literal|"Legal"
argument_list|,
literal|"presales"
argument_list|,
literal|"hr"
argument_list|,
literal|"Administration"
argument_list|,
literal|"MARKETING"
argument_list|)
operator|.
name|sort
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|explainHookMatches
argument_list|(
literal|""
operator|+
literal|"EnumerableSort(sort0=[$0], dir0=[ASC])\n"
operator|+
literal|"  EnumerableValues(tuples=[[{ 'Legal' }, { 'presales' }, { 'hr' }, { 'Administration' }, { 'MARKETING' }]])\n"
argument_list|)
operator|.
name|returnsOrdered
argument_list|(
literal|"name=Administration\n"
operator|+
literal|"name=hr\n"
operator|+
literal|"name=Legal\n"
operator|+
literal|"name=MARKETING\n"
operator|+
literal|"name=presales"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testMergeJoinOnStringSpecialCollation
parameter_list|()
block|{
name|tester
argument_list|()
operator|.
name|query
argument_list|(
literal|"?"
argument_list|)
operator|.
name|withHook
argument_list|(
name|Hook
operator|.
name|PLANNER
argument_list|,
operator|(
name|Consumer
argument_list|<
name|RelOptPlanner
argument_list|>
operator|)
name|planner
lambda|->
block|{
name|planner
operator|.
name|addRule
argument_list|(
name|EnumerableRules
operator|.
name|ENUMERABLE_MERGE_JOIN_RULE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|removeRule
argument_list|(
name|EnumerableRules
operator|.
name|ENUMERABLE_JOIN_RULE
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|withRel
argument_list|(
name|builder
lambda|->
name|builder
operator|.
name|values
argument_list|(
name|createRecordVarcharSpecialCollation
argument_list|(
name|builder
argument_list|)
argument_list|,
literal|"Legal"
argument_list|,
literal|"presales"
argument_list|,
literal|"HR"
argument_list|,
literal|"Administration"
argument_list|,
literal|"Marketing"
argument_list|)
operator|.
name|as
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|values
argument_list|(
name|createRecordVarcharSpecialCollation
argument_list|(
name|builder
argument_list|)
argument_list|,
literal|"Marketing"
argument_list|,
literal|"bureaucracy"
argument_list|,
literal|"Sales"
argument_list|,
literal|"HR"
argument_list|)
operator|.
name|as
argument_list|(
literal|"v2"
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|builder
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"name"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|field
argument_list|(
literal|"v1"
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"v2"
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|explainHookMatches
argument_list|(
literal|""
comment|// It is important that we have MergeJoin in the plan
operator|+
literal|"EnumerableMergeJoin(condition=[=($0, $1)], joinType=[inner])\n"
operator|+
literal|"  EnumerableSort(sort0=[$0], dir0=[ASC])\n"
operator|+
literal|"    EnumerableValues(tuples=[[{ 'Legal' }, { 'presales' }, { 'HR' }, { 'Administration' }, { 'Marketing' }]])\n"
operator|+
literal|"  EnumerableSort(sort0=[$0], dir0=[ASC])\n"
operator|+
literal|"    EnumerableValues(tuples=[[{ 'Marketing' }, { 'bureaucracy' }, { 'Sales' }, { 'HR' }]])\n"
argument_list|)
operator|.
name|returnsOrdered
argument_list|(
literal|"name=HR; name0=HR\n"
operator|+
literal|"name=Marketing; name0=Marketing"
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-4195">[CALCITE-4195]    * Cast between types with different collators must be evaluated as not monotonic</a>. */
annotation|@
name|Test
name|void
name|testCastDifferentCollationShouldNotApplySortProjectTranspose
parameter_list|()
block|{
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|RelBuilder
operator|.
name|create
argument_list|(
name|RelBuilderTest
operator|.
name|config
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|relNode
init|=
name|relBuilder
operator|.
name|values
argument_list|(
name|createRecordVarcharSpecialCollation
argument_list|(
name|relBuilder
argument_list|)
argument_list|,
literal|"Legal"
argument_list|,
literal|"presales"
argument_list|,
literal|"hr"
argument_list|,
literal|"Administration"
argument_list|,
literal|"MARKETING"
argument_list|)
operator|.
name|project
argument_list|(
name|relBuilder
operator|.
name|cast
argument_list|(
name|relBuilder
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
operator|.
name|sort
argument_list|(
name|relBuilder
operator|.
name|field
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Cast to a type with a different collation, and then sort;
comment|// in this scenario SORT_PROJECT_TRANSPOSE must not be applied.
specifier|final
name|HepProgram
name|program
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|CoreRules
operator|.
name|SORT_PROJECT_TRANSPOSE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HepPlanner
name|hepPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|hepPlanner
operator|.
name|setRoot
argument_list|(
name|relNode
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|output
init|=
name|hepPlanner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
specifier|final
name|String
name|planBefore
init|=
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|relNode
argument_list|)
decl_stmt|;
specifier|final
name|String
name|planAfter
init|=
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|output
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"LogicalSort(sort0=[$0], dir0=[ASC])\n"
operator|+
literal|"  LogicalProject(name=[CAST($0):VARCHAR NOT NULL])\n"
operator|+
literal|"    LogicalValues(tuples=[[{ 'Legal' }, { 'presales' }, { 'hr' }, { 'Administration' }, { 'MARKETING' }]])\n"
decl_stmt|;
name|assertThat
argument_list|(
name|planBefore
argument_list|,
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|planAfter
argument_list|,
name|isLinux
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testStringComparison
parameter_list|()
block|{
name|testStringComparison
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|,
name|LESS_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"A"
argument_list|,
literal|"a"
argument_list|,
name|LESS_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"A"
argument_list|,
literal|"a"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"aaa"
argument_list|,
literal|"AAA"
argument_list|,
name|EQUALS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"aaa"
argument_list|,
literal|"AAA"
argument_list|,
name|NOT_EQUALS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"AAA"
argument_list|,
literal|"AAA"
argument_list|,
name|EQUALS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"AAA"
argument_list|,
literal|"AAA"
argument_list|,
name|NOT_EQUALS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"AAA"
argument_list|,
literal|"BBB"
argument_list|,
name|EQUALS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"AAA"
argument_list|,
literal|"BBB"
argument_list|,
name|NOT_EQUALS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
name|LESS_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
name|LESS_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"a"
argument_list|,
literal|"B"
argument_list|,
name|LESS_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"A"
argument_list|,
literal|"b"
argument_list|,
name|LESS_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"a"
argument_list|,
literal|"B"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"A"
argument_list|,
literal|"b"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"b"
argument_list|,
literal|"a"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"B"
argument_list|,
literal|"A"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"B"
argument_list|,
literal|"a"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"b"
argument_list|,
literal|"A"
argument_list|,
name|GREATER_THAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"b"
argument_list|,
literal|"a"
argument_list|,
name|LESS_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"B"
argument_list|,
literal|"A"
argument_list|,
name|LESS_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"B"
argument_list|,
literal|"a"
argument_list|,
name|LESS_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"b"
argument_list|,
literal|"A"
argument_list|,
name|LESS_THAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check differences regarding strength:
name|testStringComparison
argument_list|(
literal|"ABC"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_PRIMARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"ABC"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_SECONDARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"ABC"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_TERTIARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"ABC"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_IDENTICAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ÃBC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_PRIMARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ÃBC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_SECONDARY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ÃBC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_TERTIARY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ÃBC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_IDENTICAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_PRIMARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_SECONDARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_TERTIARY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"abc"
argument_list|,
literal|"ABC"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_IDENTICAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"\u0001"
argument_list|,
literal|"\u0002"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_PRIMARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"\u0001"
argument_list|,
literal|"\u0002"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_SECONDARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"\u0001"
argument_list|,
literal|"\u0002"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_TERTIARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStringComparison
argument_list|(
literal|"\u0001"
argument_list|,
literal|"\u0002"
argument_list|,
name|EQUALS
argument_list|,
name|SPECIAL_COLLATION_IDENTICAL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testStringComparison
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|boolean
name|expectedResult
parameter_list|)
block|{
name|testStringComparison
argument_list|(
name|str1
argument_list|,
name|str2
argument_list|,
name|operator
argument_list|,
name|SPECIAL_COLLATION_TERTIARY
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testStringComparison
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|,
name|SqlOperator
name|operator
parameter_list|,
name|SqlCollation
name|col
parameter_list|,
name|boolean
name|expectedResult
parameter_list|)
block|{
name|tester
argument_list|()
operator|.
name|query
argument_list|(
literal|"?"
argument_list|)
operator|.
name|withRel
argument_list|(
name|builder
lambda|->
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|builder
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|varcharSpecialCollation
init|=
name|createVarcharSpecialCollation
argument_list|(
name|builder
argument_list|,
name|col
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|values
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"aux"
block|}
operator|,
literal|false
argument_list|)
operator|.
name|project
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|operator
argument_list|,
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varcharSpecialCollation
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
name|str1
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varcharSpecialCollation
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
name|str2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"result"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|)
operator|.
name|returnsUnordered
argument_list|(
literal|"result="
operator|+
name|expectedResult
argument_list|)
expr_stmt|;
end_class

begin_function
unit|}    private
name|CalciteAssert
operator|.
name|AssertThat
name|tester
parameter_list|()
block|{
return|return
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|CalciteConnectionProperty
operator|.
name|LEX
argument_list|,
name|Lex
operator|.
name|JAVA
argument_list|)
operator|.
name|with
argument_list|(
name|CalciteConnectionProperty
operator|.
name|FORCE_DECORRELATE
argument_list|,
literal|false
argument_list|)
operator|.
name|withSchema
argument_list|(
literal|"s"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

