begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Fluent class that contains information necessary to run a test.  */
end_comment

begin_class
specifier|public
class|class
name|MaterializedViewFixture
block|{
specifier|public
specifier|final
name|String
name|query
decl_stmt|;
specifier|public
specifier|final
name|MaterializedViewTester
name|tester
decl_stmt|;
specifier|public
name|final
name|CalciteAssert
operator|.
expr|@
name|Nullable
name|SchemaSpec
name|schemaSpec
expr_stmt|;
specifier|public
specifier|final
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|materializationList
decl_stmt|;
specifier|public
specifier|final
annotation|@
name|Nullable
name|Predicate
argument_list|<
name|String
argument_list|>
name|checker
decl_stmt|;
specifier|public
specifier|static
name|MaterializedViewFixture
name|create
parameter_list|(
name|String
name|query
parameter_list|,
name|MaterializedViewTester
name|tester
parameter_list|)
block|{
return|return
operator|new
name|MaterializedViewFixture
argument_list|(
name|tester
argument_list|,
name|query
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|MaterializedViewFixture
argument_list|(
name|MaterializedViewTester
name|tester
argument_list|,
name|String
name|query
argument_list|,
name|CalciteAssert
operator|.
expr|@
name|Nullable
name|SchemaSpec
name|schemaSpec
argument_list|,
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|materializationList
argument_list|,
annotation|@
name|Nullable
name|Predicate
argument_list|<
name|String
argument_list|>
name|checker
argument_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
block|;
name|this
operator|.
name|tester
operator|=
name|tester
block|;
name|this
operator|.
name|schemaSpec
operator|=
name|schemaSpec
block|;
name|this
operator|.
name|materializationList
operator|=
name|materializationList
block|;
name|this
operator|.
name|checker
operator|=
name|checker
block|;   }
specifier|public
name|void
name|ok
argument_list|()
block|{
name|tester
operator|.
name|checkMaterialize
argument_list|(
name|this
argument_list|)
block|;   }
specifier|public
name|void
name|noMat
argument_list|()
block|{
name|tester
operator|.
name|checkNoMaterialize
argument_list|(
name|this
argument_list|)
block|;   }
specifier|public
name|MaterializedViewFixture
name|withDefaultSchemaSpec
argument_list|(
name|CalciteAssert
operator|.
expr|@
name|Nullable
name|SchemaSpec
name|schemaSpec
argument_list|)
block|{
if|if
condition|(
name|schemaSpec
operator|==
name|this
operator|.
name|schemaSpec
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|MaterializedViewFixture
argument_list|(
name|tester
argument_list|,
name|query
argument_list|,
name|schemaSpec
argument_list|,
name|materializationList
argument_list|,
name|checker
argument_list|)
return|;
block|}
end_class

begin_function
specifier|public
name|MaterializedViewFixture
name|withMaterializations
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|materialize
parameter_list|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|materializationList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|materialize
argument_list|)
decl_stmt|;
if|if
condition|(
name|materializationList
operator|.
name|equals
argument_list|(
name|this
operator|.
name|materializationList
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|MaterializedViewFixture
argument_list|(
name|tester
argument_list|,
name|query
argument_list|,
name|schemaSpec
argument_list|,
name|materializationList
argument_list|,
name|checker
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|MaterializedViewFixture
name|withQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|.
name|equals
argument_list|(
name|this
operator|.
name|query
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|MaterializedViewFixture
argument_list|(
name|tester
argument_list|,
name|query
argument_list|,
name|schemaSpec
argument_list|,
name|materializationList
argument_list|,
name|checker
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|MaterializedViewFixture
name|withChecker
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|checker
parameter_list|)
block|{
if|if
condition|(
name|checker
operator|==
name|this
operator|.
name|checker
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|MaterializedViewFixture
argument_list|(
name|tester
argument_list|,
name|query
argument_list|,
name|schemaSpec
argument_list|,
name|materializationList
argument_list|,
name|checker
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|MaterializedViewFixture
name|checkingThatResultContains
parameter_list|(
name|String
modifier|...
name|expectedStrings
parameter_list|)
block|{
return|return
name|withChecker
argument_list|(
name|s
lambda|->
name|resultContains
argument_list|(
name|s
argument_list|,
name|expectedStrings
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns whether the result contains all the given strings. */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|resultContains
parameter_list|(
name|String
name|result
parameter_list|,
specifier|final
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|String
name|sLinux
init|=
name|Util
operator|.
name|toLinux
argument_list|(
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|st
range|:
name|expected
control|)
block|{
if|if
condition|(
operator|!
name|sLinux
operator|.
name|contains
argument_list|(
name|Util
operator|.
name|toLinux
argument_list|(
name|st
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

unit|}
end_unit

