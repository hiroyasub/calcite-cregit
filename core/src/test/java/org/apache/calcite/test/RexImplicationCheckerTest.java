begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RexImplicationChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexSimplify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUnknownAs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimeString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|RexImplicationCheckerFixtures
operator|.
name|Fixture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link RexImplicationChecker}.  */
end_comment

begin_class
specifier|public
class|class
name|RexImplicationCheckerTest
block|{
comment|//~ Instance fields --------------------------------------------------------
comment|//~ Methods ----------------------------------------------------------------
comment|// Simple Tests for Operators
annotation|@
name|Test
name|void
name|testSimpleGreaterCond
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|iGt10
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iGt30
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iGe30
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iGe10
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iEq30
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iNe10
init|=
name|f
operator|.
name|ne
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iGt30
argument_list|,
name|iGt10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGt10
argument_list|,
name|iGt30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGt10
argument_list|,
name|iGe30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iGe30
argument_list|,
name|iGt10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iEq30
argument_list|,
name|iGt10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGt10
argument_list|,
name|iEq30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGt10
argument_list|,
name|iNe10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGe10
argument_list|,
name|iNe10
argument_list|)
expr_stmt|;
comment|// identity
name|f
operator|.
name|checkImplies
argument_list|(
name|iGt10
argument_list|,
name|iGt10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iGe30
argument_list|,
name|iGe30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleLesserCond
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|iLt10
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iLt30
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iLe30
init|=
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iLe10
init|=
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iEq10
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iNe10
init|=
name|f
operator|.
name|ne
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iLt10
argument_list|,
name|iLt30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iLt30
argument_list|,
name|iLt10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iLt10
argument_list|,
name|iLe30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iLe30
argument_list|,
name|iLt10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iEq10
argument_list|,
name|iLt30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iLt30
argument_list|,
name|iEq10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iLt10
argument_list|,
name|iEq10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iLt10
argument_list|,
name|iNe10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iLe10
argument_list|,
name|iNe10
argument_list|)
expr_stmt|;
comment|// identity
name|f
operator|.
name|checkImplies
argument_list|(
name|iLt10
argument_list|,
name|iLt10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iLe30
argument_list|,
name|iLe30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleEq
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|iEq30
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iNe10
init|=
name|f
operator|.
name|ne
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iNe30
init|=
name|f
operator|.
name|ne
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iEq30
argument_list|,
name|iEq30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iNe10
argument_list|,
name|iNe10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iEq30
argument_list|,
name|iNe10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iNe10
argument_list|,
name|iEq30
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iNe30
argument_list|,
name|iEq30
argument_list|)
expr_stmt|;
block|}
comment|// Simple Tests for DataTypes
annotation|@
name|Test
name|void
name|testSimpleDec
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|node1
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|dec
argument_list|,
name|f
operator|.
name|floatLiteral
argument_list|(
literal|30.9
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node2
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|dec
argument_list|,
name|f
operator|.
name|floatLiteral
argument_list|(
literal|40.33
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|node2
argument_list|,
name|node1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleBoolean
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|bEqTrue
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|bl
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|bEqFalse
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|bl
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: Need to support false => true
comment|//f.checkImplies(bEqFalse, bEqTrue);
name|f
operator|.
name|checkNotImplies
argument_list|(
name|bEqTrue
argument_list|,
name|bEqFalse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleLong
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|xGeBig
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|lg
argument_list|,
name|f
operator|.
name|longLiteral
argument_list|(
literal|324324L
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|xGtBigger
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|lg
argument_list|,
name|f
operator|.
name|longLiteral
argument_list|(
literal|324325L
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|xGeBigger
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|lg
argument_list|,
name|f
operator|.
name|longLiteral
argument_list|(
literal|324325L
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|xGtBigger
argument_list|,
name|xGeBig
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|xGtBigger
argument_list|,
name|xGeBigger
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|xGeBigger
argument_list|,
name|xGeBig
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|xGeBig
argument_list|,
name|xGtBigger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleShort
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|xGe10
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|sh
argument_list|,
name|f
operator|.
name|shortLiteral
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|xGe11
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|sh
argument_list|,
name|f
operator|.
name|shortLiteral
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|xGe11
argument_list|,
name|xGe10
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|xGe10
argument_list|,
name|xGe11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleChar
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|xGeB
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|ch
argument_list|,
name|f
operator|.
name|charLiteral
argument_list|(
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|xGeA
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|ch
argument_list|,
name|f
operator|.
name|charLiteral
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|xGeB
argument_list|,
name|xGeA
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|xGeA
argument_list|,
name|xGeB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleString
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|node1
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|str
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|"en"
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node1
argument_list|,
name|node1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleDate
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|DateString
name|d
init|=
name|DateString
operator|.
name|fromCalendarFields
argument_list|(
name|Util
operator|.
name|calendar
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node1
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|d
argument_list|,
name|f
operator|.
name|dateLiteral
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node2
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|d
argument_list|,
name|f
operator|.
name|dateLiteral
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node2
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
specifier|final
name|DateString
name|dBeforeEpoch1
init|=
name|DateString
operator|.
name|fromDaysSinceEpoch
argument_list|(
operator|-
literal|12345
argument_list|)
decl_stmt|;
specifier|final
name|DateString
name|dBeforeEpoch2
init|=
name|DateString
operator|.
name|fromDaysSinceEpoch
argument_list|(
operator|-
literal|123
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|nodeBe1
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|d
argument_list|,
name|f
operator|.
name|dateLiteral
argument_list|(
name|dBeforeEpoch1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|nodeBe2
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|d
argument_list|,
name|f
operator|.
name|dateLiteral
argument_list|(
name|dBeforeEpoch2
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|nodeBe1
argument_list|,
name|nodeBe2
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|nodeBe2
argument_list|,
name|nodeBe1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleTimeStamp
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|TimestampString
name|ts
init|=
name|TimestampString
operator|.
name|fromCalendarFields
argument_list|(
name|Util
operator|.
name|calendar
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node1
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|ts
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|ts
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node2
init|=
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|ts
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|ts
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|node2
argument_list|,
name|node1
argument_list|)
expr_stmt|;
specifier|final
name|TimestampString
name|tsBeforeEpoch1
init|=
name|TimestampString
operator|.
name|fromMillisSinceEpoch
argument_list|(
operator|-
literal|1234567890L
argument_list|)
decl_stmt|;
specifier|final
name|TimestampString
name|tsBeforeEpoch2
init|=
name|TimestampString
operator|.
name|fromMillisSinceEpoch
argument_list|(
operator|-
literal|1234567L
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|nodeBe1
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|ts
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|tsBeforeEpoch1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|nodeBe2
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|ts
argument_list|,
name|f
operator|.
name|timestampLiteral
argument_list|(
name|tsBeforeEpoch2
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|nodeBe1
argument_list|,
name|nodeBe2
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|nodeBe2
argument_list|,
name|nodeBe1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleTime
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|TimeString
name|t
init|=
name|TimeString
operator|.
name|fromCalendarFields
argument_list|(
name|Util
operator|.
name|calendar
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node1
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|t
argument_list|,
name|f
operator|.
name|timeLiteral
argument_list|(
name|t
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node2
init|=
name|f
operator|.
name|le
argument_list|(
name|f
operator|.
name|t
argument_list|,
name|f
operator|.
name|timeLiteral
argument_list|(
name|t
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|node2
argument_list|,
name|node1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleBetween
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|iGe30
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iLt70
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|70
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iGe30AndLt70
init|=
name|f
operator|.
name|and
argument_list|(
name|iGe30
argument_list|,
name|iLt70
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iGe50
init|=
name|f
operator|.
name|ge
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|50
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iLt60
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|60
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iGe50AndLt60
init|=
name|f
operator|.
name|and
argument_list|(
name|iGe50
argument_list|,
name|iLt60
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGe30AndLt70
argument_list|,
name|iGe50
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGe30AndLt70
argument_list|,
name|iLt60
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGe30AndLt70
argument_list|,
name|iGe50AndLt60
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iGe30
argument_list|,
name|iGe50AndLt60
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iLt70
argument_list|,
name|iGe50AndLt60
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iGe50AndLt60
argument_list|,
name|iGe30AndLt70
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iGe50AndLt60
argument_list|,
name|iLt70
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|iGe50AndLt60
argument_list|,
name|iGe30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSimpleBetweenCornerCases
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|node1
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node2
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|50
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node3
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|60
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node4
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|80
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node5
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|90
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node6
init|=
name|f
operator|.
name|lt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|node3
argument_list|,
name|node4
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|node5
argument_list|,
name|node6
argument_list|)
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|node3
argument_list|,
name|node4
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|,
name|node6
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|node6
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|node3
argument_list|,
name|node4
argument_list|)
argument_list|,
name|f
operator|.
name|and
argument_list|(
name|node5
argument_list|,
name|node6
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to {@link MaterializedViewSubstitutionVisitorTest#testAlias()}:    * {@code x> 1 OR (y> 2 AND z> 4)}    * implies    * {@code (y> 3 AND z> 5)}. */
annotation|@
name|Test
name|void
name|testOr
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|xGt1
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|yGt2
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|dec
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|yGt3
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|dec
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|zGt4
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|lg
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|zGt5
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|lg
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|yGt2AndZGt4
init|=
name|f
operator|.
name|and
argument_list|(
name|yGt2
argument_list|,
name|zGt4
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|yGt3AndZGt5
init|=
name|f
operator|.
name|and
argument_list|(
name|yGt3
argument_list|,
name|zGt5
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|or
init|=
name|f
operator|.
name|or
argument_list|(
name|xGt1
argument_list|,
name|yGt2AndZGt4
argument_list|)
decl_stmt|;
comment|//f.checkNotImplies(or, yGt3AndZGt5);
name|f
operator|.
name|checkImplies
argument_list|(
name|yGt3AndZGt5
argument_list|,
name|or
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testNotNull
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|node1
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|str
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|"en"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node2
init|=
name|f
operator|.
name|notNull
argument_list|(
name|f
operator|.
name|str
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|node3
init|=
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|str
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|node2
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node3
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|node2
argument_list|,
name|node2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testIsNull
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|sEqEn
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|str
argument_list|,
name|f
operator|.
name|charLiteral
argument_list|(
literal|"en"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sIsNotNull
init|=
name|f
operator|.
name|notNull
argument_list|(
name|f
operator|.
name|str
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|sIsNull
init|=
name|f
operator|.
name|isNull
argument_list|(
name|f
operator|.
name|str
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iEq5
init|=
name|f
operator|.
name|eq
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iIsNull
init|=
name|f
operator|.
name|isNull
argument_list|(
name|f
operator|.
name|i
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|iIsNotNull
init|=
name|f
operator|.
name|notNull
argument_list|(
name|f
operator|.
name|i
argument_list|)
decl_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|sIsNotNull
argument_list|,
name|sIsNull
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|sIsNull
argument_list|,
name|sIsNotNull
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|sEqEn
argument_list|,
name|sIsNull
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkNotImplies
argument_list|(
name|sIsNull
argument_list|,
name|sEqEn
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkImplies
argument_list|(
name|sEqEn
argument_list|,
name|sIsNotNull
argument_list|)
expr_stmt|;
comment|// "s = literal" implies "s is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|sIsNotNull
argument_list|,
name|sIsNotNull
argument_list|)
expr_stmt|;
comment|// "s is not null" implies "s is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|sIsNull
argument_list|,
name|sIsNull
argument_list|)
expr_stmt|;
comment|// "s is null" implies "s is null"
comment|// "s is not null and y = 5" implies "s is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|sIsNotNull
argument_list|,
name|iEq5
argument_list|)
argument_list|,
name|sIsNotNull
argument_list|)
expr_stmt|;
comment|// "y = 5 and s is not null" implies "s is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|iEq5
argument_list|,
name|sIsNotNull
argument_list|)
argument_list|,
name|sIsNotNull
argument_list|)
expr_stmt|;
comment|// "y is not null" does not imply "s is not null"
name|f
operator|.
name|checkNotImplies
argument_list|(
name|iIsNull
argument_list|,
name|sIsNotNull
argument_list|)
expr_stmt|;
comment|// "s is not null or i = 5" does not imply "s is not null"
name|f
operator|.
name|checkNotImplies
argument_list|(
name|f
operator|.
name|or
argument_list|(
name|sIsNotNull
argument_list|,
name|iEq5
argument_list|)
argument_list|,
name|sIsNotNull
argument_list|)
expr_stmt|;
comment|// "s is not null" implies "s is not null or i = 5"
name|f
operator|.
name|checkImplies
argument_list|(
name|sIsNotNull
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|sIsNotNull
argument_list|,
name|iEq5
argument_list|)
argument_list|)
expr_stmt|;
comment|// "s is not null" implies "i = 5 or s is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|sIsNotNull
argument_list|,
name|f
operator|.
name|or
argument_list|(
name|iEq5
argument_list|,
name|sIsNotNull
argument_list|)
argument_list|)
expr_stmt|;
comment|// "i> 10" implies "x is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|iIsNotNull
argument_list|)
expr_stmt|;
comment|// "-20> i" implies "x is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|literal
argument_list|(
operator|-
literal|20
argument_list|)
argument_list|,
name|f
operator|.
name|i
argument_list|)
argument_list|,
name|iIsNotNull
argument_list|)
expr_stmt|;
comment|// "s is null and -20> i" implies "x is not null"
name|f
operator|.
name|checkImplies
argument_list|(
name|f
operator|.
name|and
argument_list|(
name|sIsNull
argument_list|,
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|literal
argument_list|(
operator|-
literal|20
argument_list|)
argument_list|,
name|f
operator|.
name|i
argument_list|)
argument_list|)
argument_list|,
name|iIsNotNull
argument_list|)
expr_stmt|;
comment|// "i> 10" does not imply "x is null"
name|f
operator|.
name|checkNotImplies
argument_list|(
name|f
operator|.
name|gt
argument_list|(
name|f
operator|.
name|i
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|iIsNull
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-2041">[CALCITE-2041]    * When simplifying a nullable expression, allow the result to change type to    * NOT NULL</a> and match nullability.    *    * @see RexSimplify#simplifyPreservingType(RexNode, RexUnknownAs, boolean) */
annotation|@
name|Test
name|void
name|testSimplifyCastMatchNullability
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
comment|// The cast is nullable, while the literal is not nullable. When we simplify
comment|// it, we end up with the literal. If defaultSimplifier is used, a CAST is
comment|// introduced on top of the expression, as nullability of the new expression
comment|// does not match the nullability of the original one. If
comment|// nonMatchingNullabilitySimplifier is used, the CAST is not added and the
comment|// simplified expression only consists of the literal.
specifier|final
name|RexNode
name|e
init|=
name|f
operator|.
name|cast
argument_list|(
name|f
operator|.
name|intRelDataType
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|e
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"CAST(2014):JavaType(class java.lang.Integer)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|e
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2014"
argument_list|)
argument_list|)
expr_stmt|;
comment|// In this case, the cast is not nullable. Thus, in both cases, the
comment|// simplified expression only consists of the literal.
name|RelDataType
name|notNullIntRelDataType
init|=
name|f
operator|.
name|typeFactory
operator|.
name|createJavaType
argument_list|(
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|e2
init|=
name|f
operator|.
name|cast
argument_list|(
name|notNullIntRelDataType
argument_list|,
name|f
operator|.
name|cast
argument_list|(
name|notNullIntRelDataType
argument_list|,
name|f
operator|.
name|literal
argument_list|(
literal|2014
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|e2
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2014"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|e2
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2014"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for simplifier of ceil/floor. */
annotation|@
name|Test
name|void
name|testSimplifyCeilFloor
parameter_list|()
block|{
comment|// We can add more time units here once they are supported in
comment|// RexInterpreter, e.g., TimeUnitRange.HOUR, TimeUnitRange.MINUTE,
comment|// TimeUnitRange.SECOND.
specifier|final
name|ImmutableList
argument_list|<
name|TimeUnitRange
argument_list|>
name|timeUnitRanges
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|TimeUnitRange
operator|.
name|YEAR
argument_list|,
name|TimeUnitRange
operator|.
name|MONTH
argument_list|)
decl_stmt|;
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|literalTs
init|=
name|f
operator|.
name|timestampLiteral
argument_list|(
operator|new
name|TimestampString
argument_list|(
literal|"2010-10-10 00:00:00"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timeUnitRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|innerFloorCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|literalTs
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|innerCeilCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|literalTs
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|i
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|RexNode
name|outerFloorCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|innerFloorCall
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|outerCeilCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|innerCeilCall
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexCall
name|floorSimplifiedExpr
init|=
operator|(
name|RexCall
operator|)
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|outerFloorCall
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|floorSimplifiedExpr
operator|.
name|getKind
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlKind
operator|.
name|FLOOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|floorSimplifiedExpr
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floorSimplifiedExpr
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|literalTs
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexCall
name|ceilSimplifiedExpr
init|=
operator|(
name|RexCall
operator|)
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|outerCeilCall
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ceilSimplifiedExpr
operator|.
name|getKind
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlKind
operator|.
name|CEIL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|ceilSimplifiedExpr
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ceilSimplifiedExpr
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|literalTs
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Negative test
for|for
control|(
name|int
name|i
init|=
name|timeUnitRanges
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|RexNode
name|innerFloorCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|literalTs
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|innerCeilCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|literalTs
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|timeUnitRanges
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|j
operator|>
name|i
condition|;
name|j
operator|--
control|)
block|{
specifier|final
name|RexNode
name|outerFloorCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
name|innerFloorCall
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|outerCeilCall
init|=
name|f
operator|.
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
name|innerCeilCall
argument_list|,
name|f
operator|.
name|rexBuilder
operator|.
name|makeFlag
argument_list|(
name|timeUnitRanges
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexCall
name|floorSimplifiedExpr
init|=
operator|(
name|RexCall
operator|)
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|outerFloorCall
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|floorSimplifiedExpr
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|outerFloorCall
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexCall
name|ceilSimplifiedExpr
init|=
operator|(
name|RexCall
operator|)
name|f
operator|.
name|simplify
operator|.
name|simplifyPreservingType
argument_list|(
name|outerCeilCall
argument_list|,
name|RexUnknownAs
operator|.
name|UNKNOWN
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ceilSimplifiedExpr
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|outerCeilCall
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

