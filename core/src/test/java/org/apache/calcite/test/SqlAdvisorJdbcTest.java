begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|ReflectiveSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|advise
operator|.
name|SqlAdvisorGetHintsFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|advise
operator|.
name|SqlAdvisorGetHintsFunction2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|StringAndPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * Tests for {@link org.apache.calcite.sql.advise.SqlAdvisor}.  */
end_comment

begin_class
class|class
name|SqlAdvisorJdbcTest
block|{
specifier|private
name|void
name|adviseSql
parameter_list|(
name|int
name|apiVersion
parameter_list|,
name|String
name|sql
parameter_list|,
name|Consumer
argument_list|<
name|ResultSet
argument_list|>
name|checker
parameter_list|)
throws|throws
name|SQLException
block|{
name|Properties
name|info
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|apiVersion
operator|==
literal|1
condition|)
block|{
name|info
operator|.
name|put
argument_list|(
literal|"lex"
argument_list|,
literal|"JAVA"
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"quoting"
argument_list|,
literal|"DOUBLE_QUOTE"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|apiVersion
operator|==
literal|2
condition|)
block|{
name|info
operator|.
name|put
argument_list|(
literal|"lex"
argument_list|,
literal|"SQL_SERVER"
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"quoting"
argument_list|,
literal|"BRACKET"
argument_list|)
expr_stmt|;
block|}
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
name|calciteConnection
operator|.
name|setSchema
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
specifier|final
name|TableFunction
name|getHints
init|=
name|apiVersion
operator|==
literal|1
condition|?
operator|new
name|SqlAdvisorGetHintsFunction
argument_list|()
else|:
operator|new
name|SqlAdvisorGetHintsFunction2
argument_list|()
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"get_hints"
argument_list|,
name|getHints
argument_list|)
expr_stmt|;
name|String
name|getHintsSql
decl_stmt|;
if|if
condition|(
name|apiVersion
operator|==
literal|1
condition|)
block|{
name|getHintsSql
operator|=
literal|"select id, names, type from table(\"s\".\"get_hints\"(?, ?)) as t"
expr_stmt|;
block|}
else|else
block|{
name|getHintsSql
operator|=
literal|"select id, names, type, replacement from table([s].[get_hints](?, ?)) as t"
expr_stmt|;
block|}
name|PreparedStatement
name|ps
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|getHintsSql
argument_list|)
decl_stmt|;
name|StringAndPos
name|sap
init|=
name|StringAndPos
operator|.
name|of
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sap
operator|.
name|sql
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|sap
operator|.
name|cursor
argument_list|)
expr_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|checker
operator|.
name|accept
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlAdvisorGetHintsFunction
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|1
argument_list|,
literal|"select e.e^ from \"emps\" e"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=e; names=null; type=MATCH"
argument_list|,
literal|"id=empid; names=[empid]; type=COLUMN"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlAdvisorGetHintsFunction2
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|2
argument_list|,
literal|"select [e].e^ from [emps] e"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=e; names=null; type=MATCH; replacement=null"
argument_list|,
literal|"id=empid; names=[empid]; type=COLUMN; replacement=empid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlAdvisorNonExistingColumn
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|1
argument_list|,
literal|"select e.empdid_wrong_name.^ from \"hr\".\"emps\" e"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=*; names=[*]; type=KEYWORD"
argument_list|,
literal|"id=; names=null; type=MATCH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlAdvisorNonStructColumn
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|1
argument_list|,
literal|"select e.\"empid\".^ from \"hr\".\"emps\" e"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=*; names=[*]; type=KEYWORD"
argument_list|,
literal|"id=; names=null; type=MATCH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlAdvisorSubSchema
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|1
argument_list|,
literal|"select * from \"hr\".^.test_test_test"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=; names=null; type=MATCH"
argument_list|,
literal|"id=hr.dependents; names=[hr, dependents]; type=TABLE"
argument_list|,
literal|"id=hr.depts; names=[hr, depts]; type=TABLE"
argument_list|,
literal|"id=hr.emps; names=[hr, emps]; type=TABLE"
argument_list|,
literal|"id=hr.locations; names=[hr, locations]; type=TABLE"
argument_list|,
literal|"id=hr; names=[hr]; type=SCHEMA"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlAdvisorSubSchema2
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|2
argument_list|,
literal|"select * from [hr].^.test_test_test"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=; names=null; type=MATCH; replacement=null"
argument_list|,
literal|"id=hr.dependents; names=[hr, dependents]; type=TABLE; replacement=dependents"
argument_list|,
literal|"id=hr.depts; names=[hr, depts]; type=TABLE; replacement=depts"
argument_list|,
literal|"id=hr.emps; names=[hr, emps]; type=TABLE; replacement=emps"
argument_list|,
literal|"id=hr.locations; names=[hr, locations]; type=TABLE; replacement=locations"
argument_list|,
literal|"id=hr; names=[hr]; type=SCHEMA; replacement=hr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSqlAdvisorTableInSchema
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|1
argument_list|,
literal|"select * from \"hr\".^"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=; names=null; type=MATCH"
argument_list|,
literal|"id=hr.dependents; names=[hr, dependents]; type=TABLE"
argument_list|,
literal|"id=hr.depts; names=[hr, depts]; type=TABLE"
argument_list|,
literal|"id=hr.emps; names=[hr, emps]; type=TABLE"
argument_list|,
literal|"id=hr.locations; names=[hr, locations]; type=TABLE"
argument_list|,
literal|"id=hr; names=[hr]; type=SCHEMA"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link org.apache.calcite.sql.advise.SqlAdvisorGetHintsFunction}.    */
annotation|@
name|Test
name|void
name|testSqlAdvisorSchemaNames
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|adviseSql
argument_list|(
literal|1
argument_list|,
literal|"select empid from \"emps\" e, ^"
argument_list|,
name|CalciteAssert
operator|.
name|checkResultUnordered
argument_list|(
literal|"id=; names=null; type=MATCH"
argument_list|,
literal|"id=(; names=[(]; type=KEYWORD"
argument_list|,
literal|"id=LATERAL; names=[LATERAL]; type=KEYWORD"
argument_list|,
literal|"id=TABLE; names=[TABLE]; type=KEYWORD"
argument_list|,
literal|"id=UNNEST; names=[UNNEST]; type=KEYWORD"
argument_list|,
literal|"id=hr; names=[hr]; type=SCHEMA"
argument_list|,
literal|"id=metadata; names=[metadata]; type=SCHEMA"
argument_list|,
literal|"id=s; names=[s]; type=SCHEMA"
argument_list|,
literal|"id=hr.dependents; names=[hr, dependents]; type=TABLE"
argument_list|,
literal|"id=hr.depts; names=[hr, depts]; type=TABLE"
argument_list|,
literal|"id=hr.emps; names=[hr, emps]; type=TABLE"
argument_list|,
literal|"id=hr.locations; names=[hr, locations]; type=TABLE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

