begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Smalls
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/** Test case for CALCITE-542. */
end_comment

begin_class
class|class
name|RelMdColumnOriginsTest
block|{
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-542">[CALCITE-542]    * Support for Aggregate with grouping sets in RelMdColumnOrigins</a>. */
annotation|@
name|Test
name|void
name|testQueryWithAggregateGroupingSets
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
operator|.
name|add
argument_list|(
literal|"T1"
argument_list|,
operator|new
name|Smalls
operator|.
name|SimpleTable
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|statement
init|=
name|calciteConnection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT TABLE1.ID, TABLE2.ID FROM "
operator|+
literal|"(SELECT GROUPING(A) AS ID FROM T1 "
operator|+
literal|"GROUP BY ROLLUP(A,B)) TABLE1 "
operator|+
literal|"JOIN "
operator|+
literal|"(SELECT GROUPING(A) AS ID FROM T1 "
operator|+
literal|"GROUP BY ROLLUP(A,B)) TABLE2 "
operator|+
literal|"ON TABLE1.ID = TABLE2.ID"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|result1
init|=
literal|"ID=0; ID=0"
decl_stmt|;
specifier|final
name|String
name|result2
init|=
literal|"ID=1; ID=1"
decl_stmt|;
specifier|final
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|expectedResult
init|=
name|ImmutableMultiset
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|addCopies
argument_list|(
name|result1
argument_list|,
literal|25
argument_list|)
operator|.
name|add
argument_list|(
name|result2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toSet
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedResult
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ResultSetMetaData
name|resultSetMetaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getTableName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getSchemaName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getTableName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSetMetaData
operator|.
name|getSchemaName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

