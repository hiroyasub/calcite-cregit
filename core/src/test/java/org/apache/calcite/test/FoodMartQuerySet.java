begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Set of queries against the FoodMart database. */
end_comment

begin_class
specifier|public
class|class
name|FoodMartQuerySet
block|{
specifier|private
specifier|static
name|SoftReference
argument_list|<
name|FoodMartQuerySet
argument_list|>
name|ref
decl_stmt|;
specifier|public
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FoodmartQuery
argument_list|>
name|queries
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|FoodMartQuerySet
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_UNQUOTED_FIELD_NAMES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|ALLOW_SINGLE_QUOTES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|inputStream
init|=
operator|new
name|net
operator|.
name|hydromatic
operator|.
name|foodmart
operator|.
name|queries
operator|.
name|FoodmartQuerySet
argument_list|()
operator|.
name|getQueries
argument_list|()
decl_stmt|;
name|FoodmartRoot
name|root
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|inputStream
argument_list|,
name|FoodmartRoot
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|FoodmartQuery
name|query
range|:
name|root
operator|.
name|queries
control|)
block|{
name|queries
operator|.
name|put
argument_list|(
name|query
operator|.
name|id
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns the singleton instance of the query set. It is backed by a    * soft reference, so it may be freed if memory is short and no one is    * using it. */
specifier|public
specifier|static
specifier|synchronized
name|FoodMartQuerySet
name|instance
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|SoftReference
argument_list|<
name|FoodMartQuerySet
argument_list|>
name|refLocal
init|=
name|ref
decl_stmt|;
if|if
condition|(
name|refLocal
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FoodMartQuerySet
name|set
init|=
name|refLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
return|return
name|set
return|;
block|}
block|}
specifier|final
name|FoodMartQuerySet
name|set
init|=
operator|new
name|FoodMartQuerySet
argument_list|()
decl_stmt|;
name|ref
operator|=
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|set
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
comment|/** JSON root element. */
specifier|public
specifier|static
class|class
name|FoodmartRoot
block|{
specifier|public
specifier|final
name|List
argument_list|<
name|FoodmartQuery
argument_list|>
name|queries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
block|}
comment|/** JSON query element. */
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|value
operator|=
block|{
literal|"columns"
block|,
literal|"rows"
block|}
argument_list|)
specifier|public
specifier|static
class|class
name|FoodmartQuery
block|{
specifier|public
name|int
name|id
decl_stmt|;
specifier|public
name|String
name|sql
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"id="
operator|+
name|id
return|;
block|}
block|}
block|}
end_class

end_unit

