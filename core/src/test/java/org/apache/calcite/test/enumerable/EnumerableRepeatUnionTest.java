begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableRepeatUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Unit tests for  * {@link EnumerableRepeatUnion}  *<a href="https://issues.apache.org/jira/browse/CALCITE-2812">[CALCITE-2812]  * Add algebraic operators to allow expressing recursive queries</a>.  */
end_comment

begin_class
specifier|public
class|class
name|EnumerableRepeatUnionTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGenerateNumbers
parameter_list|()
block|{
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|query
argument_list|(
literal|"?"
argument_list|)
operator|.
name|withRel
argument_list|(
comment|//   WITH RECURSIVE delta(n) AS (
comment|//     VALUES (1)
comment|//     UNION ALL
comment|//     SELECT n+1 FROM delta WHERE n< 10
comment|//   )
comment|//   SELECT * FROM delta
name|builder
lambda|->
name|builder
operator|.
name|values
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"i"
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|transientScan
argument_list|(
literal|"DELTA"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|repeatUnion
argument_list|(
literal|"DELTA"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|returnsOrdered
argument_list|(
literal|"i=1"
argument_list|,
literal|"i=2"
argument_list|,
literal|"i=3"
argument_list|,
literal|"i=4"
argument_list|,
literal|"i=5"
argument_list|,
literal|"i=6"
argument_list|,
literal|"i=7"
argument_list|,
literal|"i=8"
argument_list|,
literal|"i=9"
argument_list|,
literal|"i=10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFactorial
parameter_list|()
block|{
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|query
argument_list|(
literal|"?"
argument_list|)
operator|.
name|withRel
argument_list|(
comment|//   WITH RECURSIVE d(n, fact) AS (
comment|//     VALUES (0, 1)
comment|//     UNION ALL
comment|//     SELECT n+1, (n+1)*fact FROM d WHERE n< 7
comment|//   )
comment|//   SELECT * FROM delta
name|builder
lambda|->
name|builder
operator|.
name|values
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"n"
block|,
literal|"fact"
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|transientScan
argument_list|(
literal|"D"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"fact"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"n"
argument_list|,
literal|"fact"
argument_list|)
argument_list|)
operator|.
name|repeatUnion
argument_list|(
literal|"D"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|returnsOrdered
argument_list|(
literal|"n=0; fact=1"
argument_list|,
literal|"n=1; fact=1"
argument_list|,
literal|"n=2; fact=2"
argument_list|,
literal|"n=3; fact=6"
argument_list|,
literal|"n=4; fact=24"
argument_list|,
literal|"n=5; fact=120"
argument_list|,
literal|"n=6; fact=720"
argument_list|,
literal|"n=7; fact=5040"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenerateNumbersNestedRecursion
parameter_list|()
block|{
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|query
argument_list|(
literal|"?"
argument_list|)
operator|.
name|withRel
argument_list|(
comment|//   WITH RECURSIVE t_out(n) AS (
comment|//     WITH RECURSIVE t_in(n) AS (
comment|//       VALUES (1)
comment|//       UNION ALL
comment|//       SELECT n+1 FROM t_in WHERE n< 9
comment|//     )
comment|//     SELECT n FROM t_in
comment|//     UNION ALL
comment|//     SELECT n*10 FROM t_out WHERE n< 100
comment|//   )
comment|//   SELECT n FROM t_out
name|builder
lambda|->
name|builder
operator|.
name|values
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"n"
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|transientScan
argument_list|(
literal|"T_IN"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|repeatUnion
argument_list|(
literal|"T_IN"
argument_list|,
literal|true
argument_list|)
operator|.
name|transientScan
argument_list|(
literal|"T_OUT"
argument_list|)
operator|.
name|filter
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|builder
operator|.
name|call
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|builder
operator|.
name|field
argument_list|(
literal|"n"
argument_list|)
argument_list|,
name|builder
operator|.
name|literal
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|repeatUnion
argument_list|(
literal|"T_OUT"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|returnsOrdered
argument_list|(
literal|"n=1"
argument_list|,
literal|"n=2"
argument_list|,
literal|"n=3"
argument_list|,
literal|"n=4"
argument_list|,
literal|"n=5"
argument_list|,
literal|"n=6"
argument_list|,
literal|"n=7"
argument_list|,
literal|"n=8"
argument_list|,
literal|"n=9"
argument_list|,
literal|"n=10"
argument_list|,
literal|"n=20"
argument_list|,
literal|"n=30"
argument_list|,
literal|"n=40"
argument_list|,
literal|"n=50"
argument_list|,
literal|"n=60"
argument_list|,
literal|"n=70"
argument_list|,
literal|"n=80"
argument_list|,
literal|"n=90"
argument_list|,
literal|"n=100"
argument_list|,
literal|"n=200"
argument_list|,
literal|"n=300"
argument_list|,
literal|"n=400"
argument_list|,
literal|"n=500"
argument_list|,
literal|"n=600"
argument_list|,
literal|"n=700"
argument_list|,
literal|"n=800"
argument_list|,
literal|"n=900"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End EnumerableRepeatUnionTest.java
end_comment

end_unit

