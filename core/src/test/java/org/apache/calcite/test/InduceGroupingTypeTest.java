begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Unit test for  * {@link org.apache.calcite.rel.core.Aggregate.Group#induce(ImmutableBitSet, List)}.  */
end_comment

begin_class
specifier|public
class|class
name|InduceGroupingTypeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testInduceGroupingType
parameter_list|()
block|{
name|ImmutableBitSet
name|groupSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// SIMPLE
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|groupSets
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|groupSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|SIMPLE
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
comment|// CUBE
name|groupSets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|groupSet
operator|.
name|powerSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|CUBE
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
comment|// ROLLUP
name|groupSets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|ROLLUP
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
comment|// OTHER
name|groupSets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|OTHER
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|OTHER
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|OTHER
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|OTHER
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
name|groupSets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|groupSets
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Aggregate
operator|.
name|Group
operator|.
name|OTHER
argument_list|,
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupSet
argument_list|,
name|groupSets
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End InduceGroupingTypeTest.java
end_comment

end_unit

