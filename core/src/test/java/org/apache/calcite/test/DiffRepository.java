begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Spaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Sources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|XmlOutput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opentest4j
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_comment
comment|/**  * A collection of resources used by tests.  *  *<p>Loads files containing test input and output into memory. If there are  * differences, writes out a log file containing the actual output.  *  *<p>Typical usage is as follows. A test case class defines a method  *  *<blockquote><pre><code>  * package com.acme.test;  *&nbsp;  * public class MyTest extends TestCase {  *   public DiffRepository getDiffRepos() {  *     return DiffRepository.lookup(MyTest.class);  *   }  *&nbsp;  *&#64;Test public void testToUpper() {  *     getDiffRepos().assertEquals("${result}", "${string}");  *   }  *&nbsp;  *&#64;Test public void testToLower() {  *     getDiffRepos().assertEquals("Multi-line\nstring", "${string}");  *   }  * }  *</code></pre></blockquote>  *  *<p>There is an accompanying reference file named after the class,  *<code>src/test/resources/com/acme/test/MyTest.xml</code>:</p>  *  *<blockquote><pre><code>  *&lt;Root&gt;  *&lt;TestCase name="testToUpper"&gt;  *&lt;Resource name="string"&gt;  *&lt;![CDATA[String to be converted to upper case]]&gt;  *&lt;/Resource&gt;  *&lt;Resource name="result"&gt;  *&lt;![CDATA[STRING TO BE CONVERTED TO UPPER CASE]]&gt;  *&lt;/Resource&gt;  *&lt;/TestCase&gt;  *&lt;TestCase name="testToLower"&gt;  *&lt;Resource name="result"&gt;  *&lt;![CDATA[multi-line  * string]]&gt;  *&lt;/Resource&gt;  *&lt;/TestCase&gt;  *&lt;/Root&gt;  *  *</code></pre></blockquote>  *  *<p>If any of the test cases fails, a log file is generated, called  *<code>target/surefire/com/acme/test/MyTest.xml</code>, containing the actual  * output.</p>  *  *<p>(Maven sometimes removes this file; if it is not present, run maven with  * an extra {@code -X} flag.  * See<a href="http://jira.codehaus.org/browse/SUREFIRE-846">[SUREFIRE-846]</a>  * for details.)</p>  *  *<p>The log  * file is otherwise identical to the reference log, so once the log file has  * been verified, it can simply be copied over to become the new reference  * log:</p>  *  *<blockquote><code>cp target/surefire/com/acme/test/MyTest.xml  * src/test/resources/com/acme/test/MyTest.xml</code></blockquote>  *  *<p>If a resource or test case does not exist,<code>DiffRepository</code>  * creates them in the log file. Because DiffRepository is so forgiving, it is  * very easy to create new tests and test cases.</p>  *  *<p>The {@link #lookup} method ensures that all test cases share the same  * instance of the repository. This is important more than one one test case  * fails. The shared instance ensures that the generated  *<code>target/surefire/com/acme/test/MyTest.xml</code>  * file contains the actual for<em>both</em> test cases.  */
end_comment

begin_class
specifier|public
class|class
name|DiffRepository
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/*       Example XML document:<Root><TestCase name="testFoo"><Resource name="sql"><![CDATA[select from emps]]></Resource><Resource name="plan"><![CDATA[MockTableImplRel.FENNEL_EXEC(table=[SALES, EMP])]]></Resource></TestCase><TestCase name="testBar"><Resource name="sql"><![CDATA[select * from depts where deptno = 10]]></Resource><Resource name="output"><![CDATA[10, 'Sales']]></Resource></TestCase></Root> */
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_TAG
init|=
literal|"Root"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CASE_TAG
init|=
literal|"TestCase"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CASE_NAME_ATTR
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CASE_OVERRIDES_ATTR
init|=
literal|"overrides"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_TAG
init|=
literal|"Resource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_NAME_ATTR
init|=
literal|"name"
decl_stmt|;
comment|/**    * Holds one diff-repository per class. It is necessary for all test cases in    * the same class to share the same diff-repository: if the repository gets    * loaded once per test case, then only one diff is recorded.    */
specifier|private
specifier|static
specifier|final
name|LoadingCache
argument_list|<
name|Key
argument_list|,
name|DiffRepository
argument_list|>
name|REPOSITORY_CACHE
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|CacheLoader
operator|.
name|from
argument_list|(
name|Key
operator|::
name|toRepo
argument_list|)
argument_list|)
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|DiffRepository
name|baseRepository
decl_stmt|;
specifier|private
specifier|final
name|int
name|indent
decl_stmt|;
specifier|private
specifier|final
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|outOfOrderTests
decl_stmt|;
specifier|private
name|Document
name|doc
decl_stmt|;
specifier|private
specifier|final
name|Element
name|root
decl_stmt|;
specifier|private
specifier|final
name|URL
name|refFile
decl_stmt|;
specifier|private
specifier|final
name|File
name|logFile
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
comment|/**    * Creates a DiffRepository.    *    * @param refFile   Reference file    * @param logFile   Log file    * @param baseRepository Parent repository or null    * @param filter    Filter or null    * @param indent    Indentation of XML file    */
specifier|private
name|DiffRepository
parameter_list|(
name|URL
name|refFile
parameter_list|,
name|File
name|logFile
parameter_list|,
name|DiffRepository
name|baseRepository
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|this
operator|.
name|baseRepository
operator|=
name|baseRepository
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|indent
operator|=
name|indent
expr_stmt|;
if|if
condition|(
name|refFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"url must not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|refFile
operator|=
name|refFile
expr_stmt|;
name|this
operator|.
name|logFile
operator|=
name|logFile
expr_stmt|;
comment|// Load the document.
name|DocumentBuilderFactory
name|fac
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|docBuilder
init|=
name|fac
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Parse the reference file.
name|this
operator|.
name|doc
operator|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|refFile
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't write a log file yet -- as far as we know, it's still
comment|// identical.
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// There's no reference file. Create and write a log file.
name|this
operator|.
name|doc
operator|=
name|docBuilder
operator|.
name|newDocument
argument_list|()
expr_stmt|;
name|this
operator|.
name|doc
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
name|ROOT_TAG
argument_list|)
argument_list|)
expr_stmt|;
name|flushDoc
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|root
operator|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
name|outOfOrderTests
operator|=
name|validate
argument_list|(
name|this
operator|.
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
decl||
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error while creating xml parser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|private
specifier|static
name|URL
name|findFile
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
comment|// The reference file for class "com.foo.Bar" is "com/foo/Bar.xml"
name|String
name|rest
init|=
literal|"/"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|+
name|suffix
decl_stmt|;
return|return
name|clazz
operator|.
name|getResource
argument_list|(
name|rest
argument_list|)
return|;
block|}
comment|/**    * Expands a string containing one or more variables. (Currently only works    * if there is one variable.)    */
specifier|public
name|String
name|expand
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
literal|"${"
argument_list|)
operator|&&
name|text
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|testCaseName
init|=
name|getCurrentTestCaseName
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|token
init|=
name|text
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|null
condition|)
block|{
name|tag
operator|=
name|token
expr_stmt|;
block|}
assert|assert
name|token
operator|.
name|startsWith
argument_list|(
name|tag
argument_list|)
operator|:
literal|"token '"
operator|+
name|token
operator|+
literal|"' does not match tag '"
operator|+
name|tag
operator|+
literal|"'"
assert|;
name|String
name|expanded
init|=
name|get
argument_list|(
name|testCaseName
argument_list|,
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|expanded
operator|==
literal|null
condition|)
block|{
comment|// Token is not specified. Return the original text: this will
comment|// cause a diff, and the actual value will be written to the
comment|// log file.
return|return
name|text
return|;
block|}
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|expanded
operator|=
name|filter
operator|.
name|filter
argument_list|(
name|this
argument_list|,
name|testCaseName
argument_list|,
name|tag
argument_list|,
name|text
argument_list|,
name|expanded
argument_list|)
expr_stmt|;
block|}
return|return
name|expanded
return|;
block|}
else|else
block|{
comment|// Make sure what appears in the resource file is consistent with
comment|// what is in the Java. It helps to have a redundant copy in the
comment|// resource file.
specifier|final
name|String
name|testCaseName
init|=
name|getCurrentTestCaseName
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseRepository
operator|==
literal|null
operator|||
name|baseRepository
operator|.
name|get
argument_list|(
name|testCaseName
argument_list|,
name|tag
argument_list|)
operator|==
literal|null
condition|)
block|{
name|set
argument_list|(
name|tag
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
block|}
comment|/**    * Sets the value of a given resource of the current test case.    *    * @param resourceName Name of the resource, e.g. "sql"    * @param value        Value of the resource    */
specifier|public
specifier|synchronized
name|void
name|set
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
assert|assert
name|resourceName
operator|!=
literal|null
assert|;
specifier|final
name|String
name|testCaseName
init|=
name|getCurrentTestCaseName
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|testCaseName
argument_list|,
name|resourceName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|amend
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|.
name|startsWith
argument_list|(
literal|"${"
argument_list|)
operator|&&
name|expected
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
name|String
name|token
init|=
name|expected
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|set
argument_list|(
name|token
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns a given resource from a given test case.    *    * @param testCaseName Name of test case, e.g. "testFoo"    * @param resourceName Name of resource, e.g. "sql", "plan"    * @return The value of the resource, or null if not found    */
specifier|private
specifier|synchronized
name|String
name|get
parameter_list|(
specifier|final
name|String
name|testCaseName
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
name|Element
name|testCaseElement
init|=
name|getTestCaseElement
argument_list|(
name|testCaseName
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCaseElement
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|baseRepository
operator|!=
literal|null
condition|)
block|{
return|return
name|baseRepository
operator|.
name|get
argument_list|(
name|testCaseName
argument_list|,
name|resourceName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|Element
name|resourceElement
init|=
name|getResourceElement
argument_list|(
name|testCaseElement
argument_list|,
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceElement
operator|!=
literal|null
condition|)
block|{
return|return
name|getText
argument_list|(
name|resourceElement
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the text under an element.    */
specifier|private
specifier|static
name|String
name|getText
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
comment|// If there is a<![CDATA[ ... ]]> child, return its text and ignore
comment|// all other child elements.
specifier|final
name|NodeList
name|childNodes
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|CDATASection
condition|)
block|{
return|return
name|node
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
comment|// Otherwise return all the text under this element (including
comment|// whitespace).
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Text
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|node
operator|)
operator|.
name|getWholeText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns the&lt;TestCase&gt; element corresponding to the current test    * case.    *    * @param testCaseName  Name of test case    * @param checkOverride Make sure that if an element overrides an element in    *                      a base repository, it has overrides="true"    * @return TestCase element, or null if not found    */
specifier|private
specifier|synchronized
name|Element
name|getTestCaseElement
parameter_list|(
specifier|final
name|String
name|testCaseName
parameter_list|,
name|boolean
name|checkOverride
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|>
name|elements
parameter_list|)
block|{
specifier|final
name|NodeList
name|childNodes
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_CASE_TAG
argument_list|)
condition|)
block|{
name|Element
name|testCase
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|testCase
operator|.
name|getAttribute
argument_list|(
name|TEST_CASE_NAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCaseName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|checkOverride
operator|&&
operator|(
name|baseRepository
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|baseRepository
operator|.
name|getTestCaseElement
argument_list|(
name|testCaseName
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
operator|)
operator|&&
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|testCase
operator|.
name|getAttribute
argument_list|(
name|TEST_CASE_OVERRIDES_ATTR
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TestCase  '"
operator|+
name|testCaseName
operator|+
literal|"' overrides a "
operator|+
literal|"test case in the base repository, but does "
operator|+
literal|"not specify 'overrides=true'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|outOfOrderTests
operator|.
name|contains
argument_list|(
name|testCaseName
argument_list|)
condition|)
block|{
name|flushDoc
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TestCase '"
operator|+
name|testCaseName
operator|+
literal|"' is out of order in the reference file: "
operator|+
name|Sources
operator|.
name|of
argument_list|(
name|refFile
argument_list|)
operator|.
name|file
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"To fix, copy the generated log file: "
operator|+
name|logFile
operator|+
literal|"\n"
argument_list|)
throw|;
block|}
return|return
name|testCase
return|;
block|}
if|if
condition|(
name|elements
operator|!=
literal|null
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|testCase
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the name of the current test case by looking up the call stack for    * a method whose name starts with "test", for example "testFoo".    *    * @param fail Whether to fail if no method is found    * @return Name of current test case, or null if not found    */
specifier|private
name|String
name|getCurrentTestCaseName
parameter_list|(
name|boolean
name|fail
parameter_list|)
block|{
comment|// REVIEW jvs 12-Mar-2006: Too clever by half.  Someone might not know
comment|// about this and use a private helper method whose name also starts
comment|// with test. Perhaps just require them to pass in getName() from the
comment|// calling TestCase's setUp method and store it in a thread-local,
comment|// failing here if they forgot?
comment|// Clever, this. Dump the stack and look up it for a method which
comment|// looks like a test case name, e.g. "testFoo".
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
decl_stmt|;
name|Throwable
name|runtimeException
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|runtimeException
operator|.
name|fillInStackTrace
argument_list|()
expr_stmt|;
name|stackTrace
operator|=
name|runtimeException
operator|.
name|getStackTrace
argument_list|()
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|stackTraceElement
range|:
name|stackTrace
control|)
block|{
specifier|final
name|String
name|methodName
init|=
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
return|return
name|methodName
return|;
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no test case on current call stack"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|assertEquals
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
specifier|final
name|String
name|testCaseName
init|=
name|getCurrentTestCaseName
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|expected2
init|=
name|expand
argument_list|(
name|tag
argument_list|,
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected2
operator|==
literal|null
condition|)
block|{
name|update
argument_list|(
name|testCaseName
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"reference file does not contain resource '"
operator|+
name|expected
operator|+
literal|"' for test case '"
operator|+
name|testCaseName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
comment|// TODO jvs 25-Apr-2006:  reuse bulk of
comment|// DiffTestCase.diffTestLog here; besides newline
comment|// insensitivity, it can report on the line
comment|// at which the first diff occurs, which is useful
comment|// for largish snippets
name|String
name|expected2Canonical
init|=
name|expected2
operator|.
name|replace
argument_list|(
name|Util
operator|.
name|LINE_SEPARATOR
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|String
name|actualCanonical
init|=
name|actual
operator|.
name|replace
argument_list|(
name|Util
operator|.
name|LINE_SEPARATOR
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertEquals
argument_list|(
name|expected2Canonical
argument_list|,
name|actualCanonical
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
name|amend
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Creates a new document with a given resource.    *    *<p>This method is synchronized, in case two threads are running test    * cases of this test at the same time.    *    * @param testCaseName Test case name    * @param resourceName Resource name    * @param value        New value of resource    */
specifier|private
specifier|synchronized
name|void
name|update
parameter_list|(
name|String
name|testCaseName
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Element
name|testCaseElement
init|=
name|getTestCaseElement
argument_list|(
name|testCaseName
argument_list|,
literal|true
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCaseElement
operator|==
literal|null
condition|)
block|{
name|testCaseElement
operator|=
name|doc
operator|.
name|createElement
argument_list|(
name|TEST_CASE_TAG
argument_list|)
expr_stmt|;
name|testCaseElement
operator|.
name|setAttribute
argument_list|(
name|TEST_CASE_NAME_ATTR
argument_list|,
name|testCaseName
argument_list|)
expr_stmt|;
name|Node
name|refElement
init|=
name|ref
argument_list|(
name|testCaseName
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|root
operator|.
name|insertBefore
argument_list|(
name|testCaseElement
argument_list|,
name|refElement
argument_list|)
expr_stmt|;
block|}
name|Element
name|resourceElement
init|=
name|getResourceElement
argument_list|(
name|testCaseElement
argument_list|,
name|resourceName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceElement
operator|==
literal|null
condition|)
block|{
name|resourceElement
operator|=
name|doc
operator|.
name|createElement
argument_list|(
name|RESOURCE_TAG
argument_list|)
expr_stmt|;
name|resourceElement
operator|.
name|setAttribute
argument_list|(
name|RESOURCE_NAME_ATTR
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|testCaseElement
operator|.
name|appendChild
argument_list|(
name|resourceElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeAllChildren
argument_list|(
name|resourceElement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|resourceElement
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createCDATASection
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Write out the document.
name|flushDoc
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Node
name|ref
parameter_list|(
name|String
name|testCaseName
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Compute the position that the new element should be if the map were
comment|// sorted.
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Pair
operator|.
name|left
argument_list|(
name|map
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|names
control|)
block|{
if|if
condition|(
name|s
operator|.
name|compareToIgnoreCase
argument_list|(
name|testCaseName
argument_list|)
operator|<=
literal|0
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
block|}
comment|// Starting at a proportional position in the list,
comment|// move forwards through lesser names, then
comment|// move backwards through greater names.
comment|//
comment|// The intended effect is that if the list is already sorted, the new item
comment|// will end up in exactly the right position, and if the list is not sorted,
comment|// the new item will end up in approximately the right position.
while|while
condition|(
name|i
operator|<
name|map
operator|.
name|size
argument_list|()
operator|&&
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|compareToIgnoreCase
argument_list|(
name|testCaseName
argument_list|)
operator|<
literal|0
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
name|map
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
while|while
condition|(
name|i
operator|>=
literal|0
operator|&&
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|compareToIgnoreCase
argument_list|(
name|testCaseName
argument_list|)
operator|>
literal|0
condition|)
block|{
operator|--
name|i
expr_stmt|;
block|}
return|return
name|map
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|right
return|;
block|}
comment|/**    * Flushes the reference document to the file system.    */
specifier|private
name|void
name|flushDoc
parameter_list|()
block|{
try|try
block|{
name|boolean
name|b
init|=
name|logFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|b
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|w
init|=
name|Util
operator|.
name|printWriter
argument_list|(
name|logFile
argument_list|)
init|)
block|{
name|write
argument_list|(
name|doc
argument_list|,
name|w
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error while writing test reference log '"
operator|+
name|logFile
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Validates the root element.    *    *<p>Returns the set of test names that are out of order in the reference    * file (empty if the reference file is fully sorted). */
specifier|private
specifier|static
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|validate
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|ROOT_TAG
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"expected root element of type '"
operator|+
name|ROOT_TAG
operator|+
literal|"', but found '"
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// Make sure that there are no duplicate test cases, and count how many
comment|// tests are out of order.
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|testCases
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|NodeList
name|childNodes
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outOfOrderNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|previousName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_CASE_TAG
argument_list|)
condition|)
block|{
name|Element
name|testCase
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|testCase
operator|.
name|getAttribute
argument_list|(
name|TEST_CASE_NAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCases
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|testCase
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TestCase '"
operator|+
name|name
operator|+
literal|"' is duplicate"
argument_list|)
throw|;
block|}
if|if
condition|(
name|previousName
operator|!=
literal|null
operator|&&
name|previousName
operator|.
name|compareTo
argument_list|(
name|name
argument_list|)
operator|>
literal|0
condition|)
block|{
name|outOfOrderNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|previousName
operator|=
name|name
expr_stmt|;
block|}
block|}
comment|// If any nodes were out of order, rebuild the document in sorted order.
if|if
condition|(
operator|!
name|outOfOrderNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Node
name|testCase
range|:
name|testCases
operator|.
name|values
argument_list|()
control|)
block|{
name|root
operator|.
name|removeChild
argument_list|(
name|testCase
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Node
name|testCase
range|:
name|testCases
operator|.
name|values
argument_list|()
control|)
block|{
name|root
operator|.
name|appendChild
argument_list|(
name|testCase
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|outOfOrderNames
argument_list|)
return|;
block|}
comment|/**    * Returns a given resource from a given test case.    *    * @param testCaseElement The enclosing TestCase element, e.g.<code>    *&lt;TestCase name="testFoo"&gt;</code>.    * @param resourceName    Name of resource, e.g. "sql", "plan"    * @return The value of the resource, or null if not found    */
specifier|private
specifier|static
name|Element
name|getResourceElement
parameter_list|(
name|Element
name|testCaseElement
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|getResourceElement
argument_list|(
name|testCaseElement
argument_list|,
name|resourceName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Returns a given resource from a given test case.    *    * @param testCaseElement The enclosing TestCase element, e.g.<code>    *&lt;TestCase name="testFoo"&gt;</code>.    * @param resourceName    Name of resource, e.g. "sql", "plan"    * @param killYoungerSiblings Whether to remove resources with the same    *                        name and the same parent that are eclipsed    * @return The value of the resource, or null if not found    */
specifier|private
specifier|static
name|Element
name|getResourceElement
parameter_list|(
name|Element
name|testCaseElement
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|boolean
name|killYoungerSiblings
parameter_list|)
block|{
specifier|final
name|NodeList
name|childNodes
init|=
name|testCaseElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Element
name|found
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|kills
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|RESOURCE_TAG
argument_list|)
operator|&&
name|resourceName
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Element
operator|)
name|child
operator|)
operator|.
name|getAttribute
argument_list|(
name|RESOURCE_NAME_ATTR
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
name|found
operator|=
operator|(
name|Element
operator|)
name|child
expr_stmt|;
block|}
if|else if
condition|(
name|killYoungerSiblings
condition|)
block|{
name|kills
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Node
name|kill
range|:
name|kills
control|)
block|{
name|testCaseElement
operator|.
name|removeChild
argument_list|(
name|kill
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
specifier|private
specifier|static
name|void
name|removeAllChildren
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
specifier|final
name|NodeList
name|childNodes
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|childNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|element
operator|.
name|removeChild
argument_list|(
name|childNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Serializes an XML document as text.    *    *<p>FIXME: I'm sure there's a library call to do this, but I'm danged if I    * can find it. -- jhyde, 2006/2/9.    */
specifier|private
specifier|static
name|void
name|write
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Writer
name|w
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
specifier|final
name|XmlOutput
name|out
init|=
operator|new
name|XmlOutput
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|out
operator|.
name|setGlob
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|setIndentString
argument_list|(
name|Spaces
operator|.
name|of
argument_list|(
name|indent
argument_list|)
argument_list|)
expr_stmt|;
name|writeNode
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|XmlOutput
name|out
parameter_list|)
block|{
specifier|final
name|NodeList
name|childNodes
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
name|out
operator|.
name|print
argument_list|(
literal|"<?xml version=\"1.0\" ?>\n"
argument_list|)
expr_stmt|;
name|childNodes
operator|=
name|node
operator|.
name|getChildNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeNode
argument_list|(
name|child
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
specifier|final
name|String
name|tagName
init|=
name|element
operator|.
name|getTagName
argument_list|()
decl_stmt|;
name|out
operator|.
name|beginBeginTag
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
comment|// Attributes.
specifier|final
name|NamedNodeMap
name|attributeMap
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributeMap
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|att
init|=
name|attributeMap
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|out
operator|.
name|attribute
argument_list|(
name|att
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|att
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|endBeginTag
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
comment|// Write child nodes, ignoring attributes but including text.
name|childNodes
operator|=
name|node
operator|.
name|getChildNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
continue|continue;
block|}
name|writeNode
argument_list|(
name|child
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|endTag
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|out
operator|.
name|attribute
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|CDATASection
name|cdata
init|=
operator|(
name|CDATASection
operator|)
name|node
decl_stmt|;
name|out
operator|.
name|cdata
argument_list|(
name|cdata
operator|.
name|getNodeValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|node
decl_stmt|;
specifier|final
name|String
name|wholeText
init|=
name|text
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isWhitespace
argument_list|(
name|wholeText
argument_list|)
condition|)
block|{
name|out
operator|.
name|cdata
argument_list|(
name|wholeText
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|Comment
name|comment
init|=
operator|(
name|Comment
operator|)
name|node
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<!--"
operator|+
name|comment
operator|.
name|getNodeValue
argument_list|()
operator|+
literal|"-->\n"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected node type: "
operator|+
name|node
operator|.
name|getNodeType
argument_list|()
operator|+
literal|" ("
operator|+
name|node
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isWhitespace
parameter_list|(
name|String
name|text
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
name|text
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|char
name|c
init|=
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|' '
case|:
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Finds the repository instance for a given class, with no base    * repository or filter.    *    * @param clazz Test case class    * @return The diff repository shared between test cases in this class.    */
specifier|public
specifier|static
name|DiffRepository
name|lookup
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 1.28
specifier|public
specifier|static
name|DiffRepository
name|lookup
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|DiffRepository
name|baseRepository
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|clazz
argument_list|,
name|baseRepository
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
comment|// to be removed before 1.28
specifier|public
specifier|static
name|DiffRepository
name|lookup
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|DiffRepository
name|baseRepository
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|clazz
argument_list|,
name|baseRepository
argument_list|,
name|filter
argument_list|,
literal|2
argument_list|)
return|;
block|}
comment|/**    * Finds the repository instance for a given class.    *    *<p>It is important that all test cases in a class share the same    * repository instance. This ensures that, if two or more test cases fail,    * the log file will contains the actual results of both test cases.    *    *<p>The<code>baseRepository</code> parameter is useful if the test is an    * extension to a previous test. If the test class has a base class which    * also has a repository, specify the repository here. DiffRepository will    * look for resources in the base class if it cannot find them in this    * repository. If test resources from test cases in the base class are    * missing or incorrect, it will not write them to the log file -- you    * probably need to fix the base test.    *    *<p>Use the<code>filter</code> parameter if you expect the test to    * return results slightly different than in the repository. This happens    * if the behavior of a derived test is slightly different than a base    * test. If you do not specify a filter, no filtering will happen.    *    * @param clazz     Test case class    * @param baseRepository Base repository    * @param filter    Filters each string returned by the repository    * @param indent    Indent of the XML file (usually 2)    *    * @return The diff repository shared between test cases in this class    */
specifier|public
specifier|static
name|DiffRepository
name|lookup
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|DiffRepository
name|baseRepository
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
specifier|final
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|clazz
argument_list|,
name|baseRepository
argument_list|,
name|filter
argument_list|,
name|indent
argument_list|)
decl_stmt|;
return|return
name|REPOSITORY_CACHE
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Callback to filter strings before returning them.    */
specifier|public
interface|interface
name|Filter
block|{
comment|/**      * Filters a string.      *      * @param diffRepository Repository      * @param testCaseName   Test case name      * @param tag            Tag being expanded      * @param text           Text being expanded      * @param expanded       Expanded text      * @return Expanded text after filtering      */
name|String
name|filter
parameter_list|(
name|DiffRepository
name|diffRepository
parameter_list|,
name|String
name|testCaseName
parameter_list|,
name|String
name|tag
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|expanded
parameter_list|)
function_decl|;
block|}
comment|/** Cache key. */
specifier|private
specifier|static
class|class
name|Key
block|{
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
specifier|private
specifier|final
name|DiffRepository
name|baseRepository
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|int
name|indent
decl_stmt|;
name|Key
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|DiffRepository
name|baseRepository
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|clazz
argument_list|,
literal|"clazz"
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseRepository
operator|=
name|baseRepository
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|indent
operator|=
name|indent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|clazz
argument_list|,
name|baseRepository
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|this
operator|==
name|obj
operator|||
name|obj
operator|instanceof
name|Key
operator|&&
name|clazz
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Key
operator|)
name|obj
operator|)
operator|.
name|clazz
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|baseRepository
argument_list|,
operator|(
operator|(
name|Key
operator|)
name|obj
operator|)
operator|.
name|baseRepository
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|filter
argument_list|,
operator|(
operator|(
name|Key
operator|)
name|obj
operator|)
operator|.
name|filter
argument_list|)
return|;
block|}
name|DiffRepository
name|toRepo
parameter_list|()
block|{
specifier|final
name|URL
name|refFile
init|=
name|findFile
argument_list|(
name|clazz
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|refFilePath
init|=
name|Sources
operator|.
name|of
argument_list|(
name|refFile
argument_list|)
operator|.
name|file
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|logFilePath
init|=
name|refFilePath
operator|.
name|replace
argument_list|(
literal|".xml"
argument_list|,
literal|"_actual.xml"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|logFile
init|=
operator|new
name|File
argument_list|(
name|logFilePath
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|refFilePath
operator|.
name|equals
argument_list|(
name|logFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
assert|;
return|return
operator|new
name|DiffRepository
argument_list|(
name|refFile
argument_list|,
name|logFile
argument_list|,
name|baseRepository
argument_list|,
name|filter
argument_list|,
name|indent
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Node
argument_list|>
name|iterate
parameter_list|(
name|NodeList
name|nodeList
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Node
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|nodeList
operator|.
name|item
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|nodeList
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

