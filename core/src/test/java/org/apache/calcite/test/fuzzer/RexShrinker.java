begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|fuzzer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Reduces {@link RexNode} by removing random bits of it.  */
end_comment

begin_class
specifier|public
class|class
name|RexShrinker
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|Random
name|r
decl_stmt|;
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
name|boolean
name|didWork
decl_stmt|;
name|RexShrinker
parameter_list|(
name|Random
name|r
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|RelDataType
name|type
init|=
name|call
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|didWork
operator|||
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|>
literal|80
condition|)
block|{
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
operator|&&
operator|!
name|call
operator|.
name|operands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Replace with its argument
name|RexNode
name|node
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|call
operator|.
name|operands
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|)
block|{
comment|// Replace with simple value
name|RexNode
name|res
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
name|type
operator|.
name|isNullable
argument_list|()
condition|?
literal|3
else|:
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
name|res
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|INTEGER
condition|)
block|{
name|res
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|1
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
name|res
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|INTEGER
condition|)
block|{
name|res
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|0
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|res
operator|=
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|didWork
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|type
argument_list|,
name|res
argument_list|)
return|;
block|}
return|return
name|res
return|;
block|}
block|}
name|int
name|operandSize
init|=
name|call
operator|.
name|operands
operator|.
name|size
argument_list|()
decl_stmt|;
name|SqlKind
name|kind
init|=
name|call
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|kind
operator|==
name|SqlKind
operator|.
name|AND
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|OR
operator|)
operator|&&
name|operandSize
operator|>
literal|2
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|COALESCE
condition|)
block|{
comment|// Trim random item
if|if
condition|(
name|operandSize
operator|==
literal|1
condition|)
block|{
return|return
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|call
operator|.
name|operands
argument_list|)
decl_stmt|;
name|newOperands
operator|.
name|remove
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|operandSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newOperands
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|didWork
operator|=
literal|true
expr_stmt|;
return|return
name|call
operator|.
name|clone
argument_list|(
name|type
argument_list|,
name|newOperands
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|kind
operator|==
name|SqlKind
operator|.
name|MINUS_PREFIX
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|PLUS_PREFIX
operator|)
operator|&&
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|)
block|{
name|didWork
operator|=
literal|true
expr_stmt|;
return|return
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|kind
operator|==
name|SqlKind
operator|.
name|CASE
condition|)
block|{
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|call
operator|.
name|operands
argument_list|)
decl_stmt|;
name|int
name|indexToRemove
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|newOperands
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|&
literal|0xfffe
decl_stmt|;
comment|// remove case branch
name|newOperands
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
expr_stmt|;
name|newOperands
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
expr_stmt|;
name|didWork
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|newOperands
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|newOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|call
operator|.
name|clone
argument_list|(
name|type
argument_list|,
name|newOperands
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
end_class

end_unit

