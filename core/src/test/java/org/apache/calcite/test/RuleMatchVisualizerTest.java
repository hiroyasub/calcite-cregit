begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|ConventionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|visualizer
operator|.
name|RuleMatchVisualizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|VolcanoPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|CoreRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Check the output of {@link RuleMatchVisualizer}.  */
end_comment

begin_class
specifier|public
class|class
name|RuleMatchVisualizerTest
extends|extends
name|RelOptTestBase
block|{
specifier|protected
name|DiffRepository
name|getDiffRepos
parameter_list|()
block|{
return|return
name|DiffRepository
operator|.
name|lookup
argument_list|(
name|RuleMatchVisualizerTest
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testHepPlanner
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select a.name from dept a\n"
operator|+
literal|"union all\n"
operator|+
literal|"select b.name from dept b\n"
operator|+
literal|"order by name limit 10"
decl_stmt|;
specifier|final
name|HepProgram
name|program
init|=
name|HepProgram
operator|.
name|builder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|CoreRules
operator|.
name|PROJECT_SET_OP_TRANSPOSE
argument_list|)
operator|.
name|addRuleInstance
argument_list|(
name|CoreRules
operator|.
name|SORT_UNION_TRANSPOSE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HepPlanner
name|planner
init|=
operator|new
name|HepPlanner
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|RuleMatchVisualizer
name|viz
init|=
operator|new
name|RuleMatchVisualizer
argument_list|()
decl_stmt|;
name|viz
operator|.
name|attachTo
argument_list|(
name|planner
argument_list|)
expr_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|with
argument_list|(
name|planner
argument_list|)
operator|.
name|check
argument_list|()
expr_stmt|;
name|String
name|result
init|=
name|normalize
argument_list|(
name|viz
operator|.
name|getJsonStringResult
argument_list|()
argument_list|)
decl_stmt|;
name|getDiffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"visualizer"
argument_list|,
literal|"${visualizer}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testVolcanoPlanner
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select a.name from dept a"
decl_stmt|;
name|VolcanoPlanner
name|planner
init|=
operator|new
name|VolcanoPlanner
argument_list|()
decl_stmt|;
name|planner
operator|.
name|setTopDownOpt
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|ConventionTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|addRelTraitDef
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|RelOptUtil
operator|.
name|registerDefaultRules
argument_list|(
name|planner
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RuleMatchVisualizer
name|viz
init|=
operator|new
name|RuleMatchVisualizer
argument_list|()
decl_stmt|;
name|viz
operator|.
name|attachTo
argument_list|(
name|planner
argument_list|)
expr_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|with
argument_list|(
name|planner
argument_list|)
operator|.
name|withTester
argument_list|(
name|t
lambda|->
name|t
operator|.
name|withClusterFactory
argument_list|(
name|cluster
lambda|->
name|RelOptCluster
operator|.
name|create
argument_list|(
name|planner
argument_list|,
name|cluster
operator|.
name|getRexBuilder
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|check
argument_list|()
expr_stmt|;
name|String
name|result
init|=
name|normalize
argument_list|(
name|viz
operator|.
name|getJsonStringResult
argument_list|()
argument_list|)
decl_stmt|;
name|getDiffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"visualizer"
argument_list|,
literal|"${visualizer}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Normalize the visualizer output, so that it is independent of other tests.    */
specifier|private
name|String
name|normalize
parameter_list|(
name|String
name|str
parameter_list|)
block|{
comment|// rename rel ids
name|str
operator|=
name|renameMatches
argument_list|(
name|str
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\"([0-9]+)\"|"
operator|+
literal|"\"label\" *: *\"#([0-9]+)-|"
operator|+
literal|"\"label\" *: *\"subset#([0-9]+)-|"
operator|+
literal|"\"explanation\" *: *\"\\{subset=rel#([0-9]+):"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// rename rule call ids
name|str
operator|=
name|renameMatches
argument_list|(
name|str
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\"id\" *: *\"([0-9]+)-"
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
comment|/**    * Rename the first group of each match to a consecutive index, starting at the offset.    */
specifier|private
name|String
name|renameMatches
parameter_list|(
specifier|final
name|String
name|str
parameter_list|,
specifier|final
name|Pattern
name|pattern
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rename
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|oldName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|m
operator|.
name|groupCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|oldName
operator|=
name|m
operator|.
name|group
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|start
operator|=
name|m
operator|.
name|start
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|end
operator|=
name|m
operator|.
name|end
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
assert|assert
name|oldName
operator|!=
literal|null
assert|;
name|String
name|newName
init|=
name|rename
operator|.
name|computeIfAbsent
argument_list|(
name|oldName
argument_list|,
name|k
lambda|->
literal|""
operator|+
operator|(
name|rename
operator|.
name|size
argument_list|()
operator|+
name|offset
operator|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|str
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|last
operator|=
name|end
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

