begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
operator|.
name|Logic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|LogicVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests transformations on rex nodes.  */
end_comment

begin_class
specifier|public
class|class
name|RexTransformerTest
block|{
comment|//~ Instance fields --------------------------------------------------------
name|RexBuilder
name|rexBuilder
init|=
literal|null
decl_stmt|;
name|RexNode
name|x
decl_stmt|;
name|RexNode
name|y
decl_stmt|;
name|RexNode
name|z
decl_stmt|;
name|RexNode
name|trueRex
decl_stmt|;
name|RexNode
name|falseRex
decl_stmt|;
name|RelDataType
name|boolRelDataType
decl_stmt|;
name|RelDataTypeFactory
name|typeFactory
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
comment|/** Converts a SQL string to a relational expression using mock schema. */
specifier|private
specifier|static
name|RelNode
name|toRel
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|SqlToRelTestBase
name|test
init|=
operator|new
name|SqlToRelTestBase
argument_list|()
block|{     }
decl_stmt|;
return|return
name|test
operator|.
name|createTester
argument_list|()
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
operator|.
name|rel
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|typeFactory
operator|=
operator|new
name|JavaTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|rexBuilder
operator|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
name|boolRelDataType
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|x
operator|=
operator|new
name|RexInputRef
argument_list|(
literal|0
argument_list|,
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|boolRelDataType
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|y
operator|=
operator|new
name|RexInputRef
argument_list|(
literal|1
argument_list|,
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|boolRelDataType
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|z
operator|=
operator|new
name|RexInputRef
argument_list|(
literal|2
argument_list|,
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|boolRelDataType
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|trueRex
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|falseRex
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|testDown
parameter_list|()
block|{
name|typeFactory
operator|=
literal|null
expr_stmt|;
name|rexBuilder
operator|=
literal|null
expr_stmt|;
name|boolRelDataType
operator|=
literal|null
expr_stmt|;
name|x
operator|=
name|y
operator|=
name|z
operator|=
name|trueRex
operator|=
name|falseRex
operator|=
literal|null
expr_stmt|;
block|}
name|void
name|check
parameter_list|(
name|Boolean
name|encapsulateType
parameter_list|,
name|RexNode
name|node
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|RexNode
name|root
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|encapsulateType
condition|)
block|{
name|root
operator|=
name|node
expr_stmt|;
block|}
if|else if
condition|(
name|encapsulateType
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
name|root
operator|=
name|isTrue
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// encapsulateType.equals(Boolean.FALSE)
name|root
operator|=
name|isFalse
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|RexTransformer
name|transformer
init|=
operator|new
name|RexTransformer
argument_list|(
name|root
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|RexNode
name|result
init|=
name|transformer
operator|.
name|transformNullSemantics
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|result
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|actual
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"\nExpected=<"
operator|+
name|expected
operator|+
literal|">\n  Actual=<"
operator|+
name|actual
operator|+
literal|">"
decl_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RexNode
name|lessThan
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|lessThanOrEqual
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|greaterThan
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|greaterThanOrEqual
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|equals
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|notEquals
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|and
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|or
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|not
parameter_list|(
name|RexNode
name|a0
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|a0
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|plus
parameter_list|(
name|RexNode
name|a0
parameter_list|,
name|RexNode
name|a1
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|isNotNull
parameter_list|(
name|RexNode
name|a0
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|a0
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|isFalse
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_FALSE
argument_list|,
name|node
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|isTrue
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreTests
parameter_list|()
block|{
comment|// can make variable nullable?
name|RexNode
name|node
init|=
operator|new
name|RexInputRef
argument_list|(
literal|0
argument_list|,
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
argument_list|)
expr_stmt|;
comment|// can make variable not nullable?
name|node
operator|=
operator|new
name|RexInputRef
argument_list|(
literal|0
argument_list|,
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonBooleans
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|plus
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|node
operator|.
name|toString
argument_list|()
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|node
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|node
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|check
argument_list|(
literal|null
argument_list|,
name|node
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**    * the or operator should pass through unchanged since e.g. x OR y should    * return true if x=null and y=true if it was transformed into something    * like (x IS NOT NULL) AND (y IS NOT NULL) AND (x OR y) an incorrect result    * could be produced    */
annotation|@
name|Test
specifier|public
name|void
name|testOrUnchanged
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|node
operator|.
name|toString
argument_list|()
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|node
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|node
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|check
argument_list|(
literal|null
argument_list|,
name|node
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleAnd
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|node
argument_list|,
literal|"AND(AND(IS NOT NULL($0), IS NOT NULL($1)), AND($0, $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleEquals
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|equals
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|node
argument_list|,
literal|"AND(AND(IS NOT NULL($0), IS NOT NULL($1)), =($0, $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleNotEquals
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|notEquals
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|node
argument_list|,
literal|"AND(AND(IS NOT NULL($0), IS NOT NULL($1)),<>($0, $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleGreaterThan
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|greaterThan
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|node
argument_list|,
literal|"AND(AND(IS NOT NULL($0), IS NOT NULL($1)),>($0, $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleGreaterEquals
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|greaterThanOrEqual
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|node
argument_list|,
literal|"AND(AND(IS NOT NULL($0), IS NOT NULL($1)),>=($0, $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleLessThan
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|lessThan
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|node
argument_list|,
literal|"AND(AND(IS NOT NULL($0), IS NOT NULL($1)),<($0, $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleLessEqual
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|lessThanOrEqual
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|node
argument_list|,
literal|"AND(AND(IS NOT NULL($0), IS NOT NULL($1)),<=($0, $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeNonNullLiterals
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|lessThanOrEqual
argument_list|(
name|x
argument_list|,
name|trueRex
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|node
argument_list|,
literal|"AND(IS NOT NULL($0),<=($0, true))"
argument_list|)
expr_stmt|;
name|node
operator|=
name|lessThanOrEqual
argument_list|(
name|trueRex
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|node
argument_list|,
literal|"AND(IS NOT NULL($0),<=(true, $0))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleIdentifier
parameter_list|()
block|{
name|RexNode
name|node
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|boolRelDataType
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|node
argument_list|,
literal|"=(IS TRUE($0), true)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixed1
parameter_list|()
block|{
comment|// x=true AND y
name|RexNode
name|op1
init|=
name|equals
argument_list|(
name|x
argument_list|,
name|trueRex
argument_list|)
decl_stmt|;
name|RexNode
name|and
init|=
name|and
argument_list|(
name|op1
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|and
argument_list|,
literal|"AND(IS NOT NULL($1), AND(AND(IS NOT NULL($0), =($0, true)), $1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixed2
parameter_list|()
block|{
comment|// x!=true AND y>z
name|RexNode
name|op1
init|=
name|notEquals
argument_list|(
name|x
argument_list|,
name|trueRex
argument_list|)
decl_stmt|;
name|RexNode
name|op2
init|=
name|greaterThan
argument_list|(
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|RexNode
name|and
init|=
name|and
argument_list|(
name|op1
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|and
argument_list|,
literal|"AND(AND(IS NOT NULL($0),<>($0, true)), AND(AND(IS NOT NULL($1), IS NOT NULL($2)),>($1, $2)))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixed3
parameter_list|()
block|{
comment|// x=y AND false>z
name|RexNode
name|op1
init|=
name|equals
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|RexNode
name|op2
init|=
name|greaterThan
argument_list|(
name|falseRex
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|RexNode
name|and
init|=
name|and
argument_list|(
name|op1
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|and
argument_list|,
literal|"AND(AND(AND(IS NOT NULL($0), IS NOT NULL($1)), =($0, $1)), AND(IS NOT NULL($2),>(false, $2)))"
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-814">[CALCITE-814]    * RexBuilder reverses precision and scale of DECIMAL literal</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testExactLiteral
parameter_list|()
block|{
specifier|final
name|RexLiteral
name|literal
init|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-1234.56"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getFullTypeString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"DECIMAL(6, 2) NOT NULL"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"-1234.56"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexLiteral
name|literal2
init|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"1234.56"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal2
operator|.
name|getType
argument_list|()
operator|.
name|getFullTypeString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"DECIMAL(6, 2) NOT NULL"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal2
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1234.56"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexLiteral
name|literal3
init|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"0.0123456"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal3
operator|.
name|getType
argument_list|()
operator|.
name|getFullTypeString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"DECIMAL(6, 7) NOT NULL"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal3
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"0.0123456"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-833">[CALCITE-833]    * RelOptUtil.splitJoinCondition attempts to split a Join-Condition which    * has a remaining condition</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testSplitJoinCondition
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * \n"
operator|+
literal|"from emp a \n"
operator|+
literal|"INNER JOIN dept b \n"
operator|+
literal|"ON CAST(a.empno AS int)<> b.deptno"
decl_stmt|;
specifier|final
name|RelNode
name|relNode
init|=
name|toRel
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|LogicalProject
name|project
init|=
operator|(
name|LogicalProject
operator|)
name|relNode
decl_stmt|;
specifier|final
name|LogicalJoin
name|join
init|=
operator|(
name|LogicalJoin
operator|)
name|project
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|leftJoinKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|rightJoinKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|RelDataTypeField
argument_list|>
name|sysFieldList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|remaining
init|=
name|RelOptUtil
operator|.
name|splitJoinCondition
argument_list|(
name|sysFieldList
argument_list|,
name|join
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|join
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftJoinKeys
argument_list|,
name|rightJoinKeys
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|remaining
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"<>(CAST($0):INTEGER NOT NULL, $9)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|leftJoinKeys
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rightJoinKeys
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for {@link org.apache.calcite.rex.LogicVisitor}. */
annotation|@
name|Test
specifier|public
name|void
name|testLogic
parameter_list|()
block|{
comment|// x> FALSE AND ((y = z) IS NOT NULL)
specifier|final
name|RexNode
name|node
init|=
name|and
argument_list|(
name|greaterThan
argument_list|(
name|x
argument_list|,
name|falseRex
argument_list|)
argument_list|,
name|isNotNull
argument_list|(
name|equals
argument_list|(
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|node
argument_list|,
name|x
argument_list|,
name|Logic
operator|.
name|TRUE_FALSE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE_FALSE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|node
argument_list|,
name|y
argument_list|,
name|Logic
operator|.
name|TRUE_FALSE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE_FALSE_UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|node
argument_list|,
name|z
argument_list|,
name|Logic
operator|.
name|TRUE_FALSE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE_FALSE_UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
comment|// TRUE means that a value of FALSE or UNKNOWN will kill the row
comment|// (therefore we can safely use a semijoin)
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|x
argument_list|,
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|y
argument_list|,
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|and
argument_list|(
name|x
argument_list|,
name|and
argument_list|(
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
argument_list|,
name|z
argument_list|,
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|and
argument_list|(
name|x
argument_list|,
name|not
argument_list|(
name|y
argument_list|)
argument_list|)
argument_list|,
name|x
argument_list|,
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|and
argument_list|(
name|x
argument_list|,
name|not
argument_list|(
name|y
argument_list|)
argument_list|)
argument_list|,
name|y
argument_list|,
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|UNKNOWN_AS_TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|and
argument_list|(
name|x
argument_list|,
name|not
argument_list|(
name|and
argument_list|(
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|z
argument_list|,
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|UNKNOWN_AS_TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deduceLogic
argument_list|(
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|x
argument_list|,
name|Logic
operator|.
name|TRUE
argument_list|)
argument_list|,
name|is
argument_list|(
name|Logic
operator|.
name|TRUE_FALSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Logic
name|deduceLogic
parameter_list|(
name|RexNode
name|root
parameter_list|,
name|RexNode
name|seek
parameter_list|,
name|Logic
name|logic
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Logic
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LogicVisitor
operator|.
name|collect
argument_list|(
name|root
argument_list|,
name|seek
argument_list|,
name|logic
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RexTransformerTest.java
end_comment

end_unit

