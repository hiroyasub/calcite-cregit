begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|DynamicRecordTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeComparability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFieldImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypePrecedenceList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|StructKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|CustomColumnResolvingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSyntax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ObjectSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlModality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMoniker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonikerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonikerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorCatalogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Mock implementation of {@link SqlValidatorCatalogReader} which returns tables  * "EMP", "DEPT", "BONUS", "SALGRADE" (same as Oracle's SCOTT schema).  * Also two streams "ORDERS", "SHIPMENTS";  * and a view "EMP_20".  */
end_comment

begin_class
specifier|public
class|class
name|MockCatalogReader
implements|implements
name|Prepare
operator|.
name|CatalogReader
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_CATALOG
init|=
literal|"CATALOG"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_SCHEMA
init|=
literal|"SALES"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|CASE_INSENSITIVE_LIST_COMPARATOR
init|=
name|Ordering
operator|.
name|from
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
operator|.
name|lexicographical
argument_list|()
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|RelDataTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|MockTable
argument_list|>
name|tables
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MockSchema
argument_list|>
name|schemas
decl_stmt|;
specifier|private
name|RelDataType
name|addressType
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a MockCatalogReader.    *    *<p>Caller must then call {@link #init} to populate with data.</p>    *    * @param typeFactory Type factory    */
specifier|public
name|MockCatalogReader
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
if|if
condition|(
name|caseSensitive
condition|)
block|{
name|tables
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|schemas
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tables
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|CASE_INSENSITIVE_LIST_COMPARATOR
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|caseSensitive
return|;
block|}
comment|/**    * Initializes this catalog reader.    */
specifier|public
name|MockCatalogReader
name|init
parameter_list|()
block|{
specifier|final
name|RelDataType
name|intType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|intTypeNull
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|intType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varchar10Type
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varchar20Type
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|dateType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|booleanType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|rectilinearCoordType
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"X"
argument_list|,
name|intType
argument_list|)
operator|.
name|add
argument_list|(
literal|"Y"
argument_list|,
name|intType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|rectilinearPeekCoordType
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"X"
argument_list|,
name|intType
argument_list|)
operator|.
name|add
argument_list|(
literal|"Y"
argument_list|,
name|intType
argument_list|)
operator|.
name|kind
argument_list|(
name|StructKind
operator|.
name|PEEK_FIELDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|empRecordType
init|=
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"EMPNO"
argument_list|,
name|intType
argument_list|)
operator|.
name|add
argument_list|(
literal|"ENAME"
argument_list|,
name|varchar10Type
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|empListType
init|=
name|typeFactory
operator|.
name|createArrayType
argument_list|(
name|empRecordType
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// TODO jvs 12-Feb-2005: register this canonical instance with type
comment|// factory
name|addressType
operator|=
operator|new
name|ObjectSqlType
argument_list|(
name|SqlTypeName
operator|.
name|STRUCTURED
argument_list|,
operator|new
name|SqlIdentifier
argument_list|(
literal|"ADDRESS"
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"STREET"
argument_list|,
literal|0
argument_list|,
name|varchar20Type
argument_list|)
argument_list|,
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"CITY"
argument_list|,
literal|1
argument_list|,
name|varchar20Type
argument_list|)
argument_list|,
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"ZIP"
argument_list|,
literal|2
argument_list|,
name|intType
argument_list|)
argument_list|,
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"STATE"
argument_list|,
literal|3
argument_list|,
name|varchar20Type
argument_list|)
argument_list|)
argument_list|,
name|RelDataTypeComparability
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// Register "SALES" schema.
name|MockSchema
name|salesSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"SALES"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|salesSchema
argument_list|)
expr_stmt|;
comment|// Register "EMP" table.
specifier|final
name|MockTable
name|empTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMP"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|intTypeNull
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|timestampType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|booleanType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empTable
argument_list|)
expr_stmt|;
comment|// Register "EMP_B" table. As "EMP", birth with a "BIRTHDATE" column.
specifier|final
name|MockTable
name|empBTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMP_B"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|intTypeNull
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|timestampType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|booleanType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"BIRTHDATE"
argument_list|,
name|dateType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empBTable
argument_list|)
expr_stmt|;
comment|// Register "DEPT" table.
name|MockTable
name|deptTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"DEPT"
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|deptTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|deptTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|deptTable
argument_list|)
expr_stmt|;
comment|// Register "DEPT_NESTED" table.
name|MockTable
name|deptNestedTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"DEPT_NESTED"
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|deptNestedTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|deptNestedTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|deptNestedTable
operator|.
name|addColumn
argument_list|(
literal|"EMPLOYEES"
argument_list|,
name|empListType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|deptNestedTable
argument_list|)
expr_stmt|;
comment|// Register "BONUS" table.
name|MockTable
name|bonusTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"BONUS"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|bonusTable
argument_list|)
expr_stmt|;
comment|// Register "SALGRADE" table.
name|MockTable
name|salgradeTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"SALGRADE"
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|salgradeTable
operator|.
name|addColumn
argument_list|(
literal|"GRADE"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|salgradeTable
operator|.
name|addColumn
argument_list|(
literal|"LOSAL"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|salgradeTable
operator|.
name|addColumn
argument_list|(
literal|"HISAL"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|salgradeTable
argument_list|)
expr_stmt|;
comment|// Register "EMP_ADDRESS" table
name|MockTable
name|contactAddressTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMP_ADDRESS"
argument_list|,
literal|false
argument_list|,
literal|26
argument_list|)
decl_stmt|;
name|contactAddressTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|contactAddressTable
operator|.
name|addColumn
argument_list|(
literal|"HOME_ADDRESS"
argument_list|,
name|addressType
argument_list|)
expr_stmt|;
name|contactAddressTable
operator|.
name|addColumn
argument_list|(
literal|"MAILING_ADDRESS"
argument_list|,
name|addressType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|contactAddressTable
argument_list|)
expr_stmt|;
comment|// Register "DYNAMIC" schema.
name|MockSchema
name|dynamicSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"DYNAMIC"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|dynamicSchema
argument_list|)
expr_stmt|;
name|MockTable
name|nationTable
init|=
operator|new
name|MockDynamicTable
argument_list|(
name|this
argument_list|,
name|dynamicSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|dynamicSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"NATION"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|registerTable
argument_list|(
name|nationTable
argument_list|)
expr_stmt|;
name|MockTable
name|customerTable
init|=
operator|new
name|MockDynamicTable
argument_list|(
name|this
argument_list|,
name|dynamicSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|dynamicSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"CUSTOMER"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|registerTable
argument_list|(
name|customerTable
argument_list|)
expr_stmt|;
comment|// Register "CUSTOMER" schema.
name|MockSchema
name|customerSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"CUSTOMER"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|customerSchema
argument_list|)
expr_stmt|;
comment|// Register "CONTACT" table.
name|MockTable
name|contactTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|customerSchema
argument_list|,
literal|"CONTACT"
argument_list|,
literal|false
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"CONTACTNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"FNAME"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"LNAME"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"EMAIL"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"COORD"
argument_list|,
name|rectilinearCoordType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|contactTable
argument_list|)
expr_stmt|;
comment|// Register "CONTACT_PEEK" table. The
name|MockTable
name|contactPeekTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|customerSchema
argument_list|,
literal|"CONTACT_PEEK"
argument_list|,
literal|false
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"CONTACTNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"FNAME"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"LNAME"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"EMAIL"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"COORD"
argument_list|,
name|rectilinearPeekCoordType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|contactPeekTable
argument_list|)
expr_stmt|;
comment|// Register "ACCOUNT" table.
name|MockTable
name|accountTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|customerSchema
argument_list|,
literal|"ACCOUNT"
argument_list|,
literal|false
argument_list|,
literal|457
argument_list|)
decl_stmt|;
name|accountTable
operator|.
name|addColumn
argument_list|(
literal|"ACCTNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|accountTable
operator|.
name|addColumn
argument_list|(
literal|"TYPE"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|accountTable
operator|.
name|addColumn
argument_list|(
literal|"BALANCE"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|accountTable
argument_list|)
expr_stmt|;
comment|// Register "ORDERS" stream.
name|MockTable
name|ordersStream
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"ORDERS"
argument_list|,
literal|true
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|ordersStream
operator|.
name|addColumn
argument_list|(
literal|"ROWTIME"
argument_list|,
name|timestampType
argument_list|)
expr_stmt|;
name|ordersStream
operator|.
name|addMonotonic
argument_list|(
literal|"ROWTIME"
argument_list|)
expr_stmt|;
name|ordersStream
operator|.
name|addColumn
argument_list|(
literal|"PRODUCTID"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|ordersStream
operator|.
name|addColumn
argument_list|(
literal|"ORDERID"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|ordersStream
argument_list|)
expr_stmt|;
comment|// Register "SHIPMENTS" stream.
name|MockTable
name|shipmentsStream
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"SHIPMENTS"
argument_list|,
literal|true
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|shipmentsStream
operator|.
name|addColumn
argument_list|(
literal|"ROWTIME"
argument_list|,
name|timestampType
argument_list|)
expr_stmt|;
name|shipmentsStream
operator|.
name|addMonotonic
argument_list|(
literal|"ROWTIME"
argument_list|)
expr_stmt|;
name|shipmentsStream
operator|.
name|addColumn
argument_list|(
literal|"ORDERID"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|shipmentsStream
argument_list|)
expr_stmt|;
comment|// Register "PRODUCTS" table.
name|MockTable
name|productsTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"PRODUCTS"
argument_list|,
literal|false
argument_list|,
literal|200D
argument_list|)
decl_stmt|;
name|productsTable
operator|.
name|addColumn
argument_list|(
literal|"PRODUCTID"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|productsTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|productsTable
operator|.
name|addColumn
argument_list|(
literal|"SUPPLIERID"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|productsTable
argument_list|)
expr_stmt|;
comment|// Register "SUPPLIERS" table.
name|MockTable
name|suppliersTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"SUPPLIERS"
argument_list|,
literal|false
argument_list|,
literal|10D
argument_list|)
decl_stmt|;
name|suppliersTable
operator|.
name|addColumn
argument_list|(
literal|"SUPPLIERID"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|suppliersTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|suppliersTable
operator|.
name|addColumn
argument_list|(
literal|"CITY"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|suppliersTable
argument_list|)
expr_stmt|;
comment|// Register "EMP_20" view.
comment|// Same columns as "EMP",
comment|// but "DEPTNO" not visible and set to 20 by default
comment|// and "SAL" is visible but must be greater than 1000,
comment|// which is the equivalent of:
comment|//   SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, SLACKER
comment|//   FROM EMP
comment|//   WHERE DEPTNO = 20 AND SAL> 1000
name|MockTable
name|emp20View
init|=
operator|new
name|MockViewTable
argument_list|(
name|this
argument_list|,
name|salesSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|salesSchema
operator|.
name|name
argument_list|,
literal|"EMP_20"
argument_list|,
literal|false
argument_list|,
literal|600
argument_list|,
name|empTable
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
name|deptnoField
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|salField
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|deptnoField
operator|.
name|getType
argument_list|()
argument_list|,
name|deptnoField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|20L
argument_list|)
argument_list|,
name|deptnoField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|salField
operator|.
name|getType
argument_list|()
argument_list|,
name|salField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000L
argument_list|)
argument_list|,
name|salField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|nodes
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|salesSchema
operator|.
name|addTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|emp20View
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|varchar20Type
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|varchar10Type
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|intTypeNull
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|timestampType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|booleanType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|emp20View
argument_list|)
expr_stmt|;
name|MockSchema
name|structTypeSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"STRUCT"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|structTypeSchema
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CompoundNameColumn
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"K0"
argument_list|,
name|varchar20Type
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"C1"
argument_list|,
name|varchar20Type
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"A0"
argument_list|,
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F2"
argument_list|,
literal|"A0"
argument_list|,
name|booleanType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F0"
argument_list|,
literal|"C0"
argument_list|,
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"C0"
argument_list|,
name|intTypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F0"
argument_list|,
literal|"C1"
argument_list|,
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"C2"
argument_list|,
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F2"
argument_list|,
literal|"C3"
argument_list|,
name|intType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CompoundNameColumnResolver
name|structTypeTableResolver
init|=
operator|new
name|CompoundNameColumnResolver
argument_list|(
name|columns
argument_list|,
literal|"F0"
argument_list|)
decl_stmt|;
specifier|final
name|MockTable
name|structTypeTable
init|=
operator|new
name|MockTable
argument_list|(
name|this
argument_list|,
name|structTypeSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|structTypeSchema
operator|.
name|name
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
name|structTypeTableResolver
argument_list|)
decl_stmt|;
for|for
control|(
name|CompoundNameColumn
name|column
range|:
name|columns
control|)
block|{
name|structTypeTable
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|registerTable
argument_list|(
name|structTypeTable
argument_list|)
expr_stmt|;
comment|// Register "STRUCT.T_10" view.
comment|// Same columns as "STRUCT.T",
comment|// but "F0.C0" is set to 10 by default,
comment|// which is the equivalent of:
comment|//   SELECT *
comment|//   FROM T
comment|//   WHERE F0.C0 = 10
name|MockTable
name|struct10View
init|=
operator|new
name|MockViewTable
argument_list|(
name|this
argument_list|,
name|structTypeSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|structTypeSchema
operator|.
name|name
argument_list|,
literal|"T_10"
argument_list|,
literal|false
argument_list|,
literal|20
argument_list|,
name|structTypeTable
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|,
name|structTypeTableResolver
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
name|c0Field
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|c0Field
operator|.
name|getType
argument_list|()
argument_list|,
name|c0Field
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|10L
argument_list|)
argument_list|,
name|c0Field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|structTypeSchema
operator|.
name|addTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|struct10View
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CompoundNameColumn
name|column
range|:
name|columns
control|)
block|{
name|struct10View
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|registerTable
argument_list|(
name|struct10View
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|lookupOperatorOverloads
parameter_list|(
name|SqlIdentifier
name|opName
parameter_list|,
name|SqlFunctionCategory
name|category
parameter_list|,
name|SqlSyntax
name|syntax
parameter_list|,
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|operatorList
parameter_list|)
block|{
block|}
specifier|public
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|getOperatorList
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
specifier|public
name|Prepare
operator|.
name|CatalogReader
name|withSchemaPath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|)
block|{
return|return
name|this
return|;
block|}
specifier|public
name|Prepare
operator|.
name|PreparingTable
name|getTableForMember
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|getTable
argument_list|(
name|names
argument_list|)
return|;
block|}
specifier|public
name|RelDataTypeFactory
name|getTypeFactory
parameter_list|()
block|{
return|return
name|typeFactory
return|;
block|}
specifier|public
name|void
name|registerRules
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
block|}
specifier|protected
name|void
name|registerTable
parameter_list|(
name|MockTable
name|table
parameter_list|)
block|{
name|table
operator|.
name|onRegister
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|table
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerSchema
parameter_list|(
name|MockSchema
name|schema
parameter_list|)
block|{
name|schemas
operator|.
name|put
argument_list|(
name|schema
operator|.
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Prepare
operator|.
name|PreparingTable
name|getTable
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
switch|switch
condition|(
name|names
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
comment|// assume table in SALES schema (the original default)
comment|// if it's not supplied, because SqlValidatorTest is effectively
comment|// using SALES as its default schema.
return|return
name|tables
operator|.
name|get
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|DEFAULT_CATALOG
argument_list|,
name|DEFAULT_SCHEMA
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|tables
operator|.
name|get
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|DEFAULT_CATALOG
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|tables
operator|.
name|get
argument_list|(
name|names
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|RelDataType
name|getNamedType
parameter_list|(
name|SqlIdentifier
name|typeName
parameter_list|)
block|{
if|if
condition|(
name|typeName
operator|.
name|equalsDeep
argument_list|(
name|addressType
operator|.
name|getSqlIdentifier
argument_list|()
argument_list|,
name|Litmus
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
return|return
name|addressType
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|getAllSchemaObjectNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|SqlMoniker
argument_list|>
name|result
decl_stmt|;
switch|switch
condition|(
name|names
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// looking for catalog and schema names
return|return
name|ImmutableList
operator|.
expr|<
name|SqlMoniker
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SqlMonikerImpl
argument_list|(
name|DEFAULT_CATALOG
argument_list|,
name|SqlMonikerType
operator|.
name|CATALOG
argument_list|)
argument_list|)
operator|.
name|addAll
argument_list|(
name|getAllSchemaObjectNames
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|DEFAULT_CATALOG
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
literal|1
case|:
comment|// looking for schema names
name|result
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|MockSchema
name|schema
range|:
name|schemas
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|String
name|catalogName
init|=
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|.
name|getCatalogName
argument_list|()
operator|.
name|equals
argument_list|(
name|catalogName
argument_list|)
condition|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|names1
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|catalogName
argument_list|,
name|schema
operator|.
name|name
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|SqlMonikerImpl
argument_list|(
name|names1
argument_list|,
name|SqlMonikerType
operator|.
name|SCHEMA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
case|case
literal|2
case|:
comment|// looking for table names in the given schema
name|MockSchema
name|schema
init|=
name|schemas
operator|.
name|get
argument_list|(
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|result
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|schema
operator|.
name|tableNames
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|SqlMonikerImpl
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|SqlMonikerType
operator|.
name|TABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
default|default:
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSchemaName
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|DEFAULT_CATALOG
argument_list|,
name|DEFAULT_SCHEMA
argument_list|)
return|;
block|}
specifier|public
name|RelDataTypeField
name|field
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
return|return
name|SqlValidatorUtil
operator|.
name|lookupField
argument_list|(
name|caseSensitive
argument_list|,
name|rowType
argument_list|,
name|alias
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|Util
operator|.
name|matches
argument_list|(
name|caseSensitive
argument_list|,
name|string
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|createTypeFromProjection
parameter_list|(
specifier|final
name|RelDataType
name|type
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNameList
parameter_list|)
block|{
return|return
name|SqlValidatorUtil
operator|.
name|createTypeFromProjection
argument_list|(
name|type
argument_list|,
name|columnNameList
argument_list|,
name|typeFactory
argument_list|,
name|caseSensitive
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RelCollation
argument_list|>
name|deduceMonotonicity
parameter_list|(
name|Prepare
operator|.
name|PreparingTable
name|table
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Deduce which fields the table is sorted on.
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|table
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
operator|++
name|i
expr_stmt|;
specifier|final
name|SqlMonotonicity
name|monotonicity
init|=
name|table
operator|.
name|getMonotonicity
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|monotonicity
operator|!=
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
condition|)
block|{
specifier|final
name|RelFieldCollation
operator|.
name|Direction
name|direction
init|=
name|monotonicity
operator|.
name|isDecreasing
argument_list|()
condition|?
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
else|:
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
decl_stmt|;
name|collationList
operator|.
name|add
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|i
argument_list|,
name|direction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|collationList
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/** Column resolver*/
specifier|public
interface|interface
name|ColumnResolver
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resolveColumn
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
function_decl|;
block|}
comment|/** Mock schema. */
specifier|public
specifier|static
class|class
name|MockSchema
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|MockSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|addTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCatalogName
parameter_list|()
block|{
return|return
name|DEFAULT_CATALOG
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**    * Mock implementation of    * {@link org.apache.calcite.prepare.Prepare.PreparingTable}.    */
specifier|public
specifier|static
class|class
name|MockTable
implements|implements
name|Prepare
operator|.
name|PreparingTable
block|{
specifier|protected
specifier|final
name|MockCatalogReader
name|catalogReader
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|stream
decl_stmt|;
specifier|private
specifier|final
name|double
name|rowCount
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
name|columnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|monotonicColumnSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|StructKind
name|kind
init|=
name|StructKind
operator|.
name|FULLY_QUALIFIED
decl_stmt|;
specifier|protected
specifier|final
name|ColumnResolver
name|resolver
decl_stmt|;
specifier|public
name|MockTable
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|catalogReader
operator|=
name|catalogReader
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
comment|/** Implementation of AbstractModifiableTable. */
specifier|private
class|class
name|ModifiableTable
extends|extends
name|JdbcTest
operator|.
name|AbstractModifiableTable
block|{
specifier|protected
name|ModifiableTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|getModifiableCollection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|Queryable
argument_list|<
name|E
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getElementType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Subclass of ModifiableTable that also implements      * CustomColumnResolvingTable.      */
specifier|private
class|class
name|ModifiableTableWithCustomColumnResolving
extends|extends
name|ModifiableTable
implements|implements
name|CustomColumnResolvingTable
block|{
specifier|protected
name|ModifiableTableWithCustomColumnResolving
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resolveColumn
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|resolver
operator|.
name|resolveColumn
argument_list|(
name|rowType
argument_list|,
name|typeFactory
argument_list|,
name|names
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|MockTable
name|create
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|MockSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|)
block|{
name|MockTable
name|table
init|=
operator|new
name|MockTable
argument_list|(
name|catalogReader
argument_list|,
name|schema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Table
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|Table
name|table
init|=
name|resolver
operator|==
literal|null
condition|?
operator|new
name|ModifiableTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
argument_list|)
else|:
operator|new
name|ModifiableTableWithCustomColumnResolving
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|table
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|double
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|RelOptSchema
name|getRelOptSchema
parameter_list|()
block|{
return|return
name|catalogReader
return|;
block|}
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
return|return
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelCollation
argument_list|>
name|getCollationList
parameter_list|()
block|{
return|return
name|collationList
return|;
block|}
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|()
block|{
return|return
name|RelDistributions
operator|.
name|BROADCAST_DISTRIBUTED
return|;
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|ImmutableBitSet
name|columns
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|boolean
name|supportsModality
parameter_list|(
name|SqlModality
name|modality
parameter_list|)
block|{
return|return
name|modality
operator|==
operator|(
name|stream
condition|?
name|SqlModality
operator|.
name|STREAM
else|:
name|SqlModality
operator|.
name|RELATION
operator|)
return|;
block|}
specifier|public
name|void
name|onRegister
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|rowType
operator|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|kind
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|columnList
argument_list|)
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|columnList
argument_list|)
argument_list|)
expr_stmt|;
name|collationList
operator|=
name|deduceMonotonicity
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQualifiedName
parameter_list|()
block|{
return|return
name|names
return|;
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|monotonicColumnSet
operator|.
name|contains
argument_list|(
name|columnName
argument_list|)
condition|?
name|SqlMonotonicity
operator|.
name|INCREASING
else|:
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
return|;
block|}
specifier|public
name|SqlAccessType
name|getAllowedAccess
parameter_list|()
block|{
return|return
name|SqlAccessType
operator|.
name|ALL
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|addColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|columnList
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMonotonic
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|monotonicColumnSet
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
assert|assert
name|Pair
operator|.
name|left
argument_list|(
name|columnList
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
assert|;
block|}
specifier|public
name|RelOptTable
name|extend
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|extendedFields
parameter_list|)
block|{
specifier|final
name|MockTable
name|table
init|=
operator|new
name|MockTable
argument_list|(
name|catalogReader
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|)
decl_stmt|;
name|table
operator|.
name|columnList
operator|.
name|addAll
argument_list|(
name|columnList
argument_list|)
expr_stmt|;
name|table
operator|.
name|columnList
operator|.
name|addAll
argument_list|(
name|extendedFields
argument_list|)
expr_stmt|;
name|table
operator|.
name|onRegister
argument_list|(
name|catalogReader
operator|.
name|typeFactory
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
name|void
name|setKind
parameter_list|(
name|StructKind
name|kind
parameter_list|)
block|{
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
block|}
specifier|public
name|StructKind
name|getKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
block|}
comment|/**    * Mock implementation of    * {@link org.apache.calcite.prepare.Prepare.PreparingTable} for views.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|MockViewTable
extends|extends
name|MockTable
block|{
specifier|private
specifier|final
name|MockTable
name|fromTable
decl_stmt|;
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|ImmutableIntList
name|mapping
decl_stmt|;
name|MockViewTable
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|MockTable
name|fromTable
parameter_list|,
name|ImmutableIntList
name|mapping
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|)
block|{
name|super
argument_list|(
name|catalogReader
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
name|this
operator|.
name|fromTable
operator|=
name|fromTable
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|fromTable
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
comment|/** Implementation of AbstractModifiableView. */
specifier|private
class|class
name|ModifiableView
extends|extends
name|JdbcTest
operator|.
name|AbstractModifiableView
block|{
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|fromTable
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getTablePath
parameter_list|()
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|fromTable
operator|.
name|names
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
expr|<
name|String
argument_list|,
name|Schema
operator|>
name|of
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Schemas
operator|.
name|path
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableIntList
name|getColumnMapping
parameter_list|()
block|{
return|return
name|mapping
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
return|return
name|MockViewTable
operator|.
name|this
operator|.
name|getConstraint
argument_list|(
name|rexBuilder
argument_list|,
name|tableRowType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
specifier|final
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
operator|new
name|AbstractList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|table
operator|.
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|/**      * Subclass of ModifiableView that also implements      * CustomColumnResolvingTable.      */
specifier|private
class|class
name|ModifiableViewWithCustomColumnResolving
extends|extends
name|ModifiableView
implements|implements
name|CustomColumnResolvingTable
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resolveColumn
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|resolver
operator|.
name|resolveColumn
argument_list|(
name|rowType
argument_list|,
name|typeFactory
argument_list|,
name|names
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|onRegister
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
operator|.
name|onRegister
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
comment|// To simulate getRowType() behavior in ViewTable.
specifier|final
name|RelProtoDataType
name|protoRowType
init|=
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|rowType
argument_list|)
decl_stmt|;
name|rowType
operator|=
name|protoRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|fromTable
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|context
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|rel
operator|=
name|LogicalFilter
operator|.
name|create
argument_list|(
name|rel
argument_list|,
name|getConstraint
argument_list|(
name|rexBuilder
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fieldList
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|projects
init|=
operator|new
name|AbstractList
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|RexInputRef
operator|.
name|of2
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|fieldList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
name|LogicalProject
operator|.
name|create
argument_list|(
name|rel
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|projects
argument_list|)
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|projects
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|ModifiableView
operator|.
name|class
argument_list|)
condition|)
block|{
name|ModifiableView
name|view
init|=
name|resolver
operator|==
literal|null
condition|?
operator|new
name|ModifiableView
argument_list|()
else|:
operator|new
name|ModifiableViewWithCustomColumnResolving
argument_list|()
decl_stmt|;
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|view
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
comment|/**    * Mock implementation of    * {@link org.apache.calcite.prepare.Prepare.PreparingTable} with dynamic record type.    */
specifier|public
specifier|static
class|class
name|MockDynamicTable
extends|extends
name|MockTable
block|{
name|MockDynamicTable
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|)
block|{
name|super
argument_list|(
name|catalogReader
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onRegister
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|rowType
operator|=
operator|new
name|DynamicRecordTypeImpl
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recreates an immutable rowType, if the table has Dynamic Record Type,      * when converts table to Rel.      */
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|rowType
operator|.
name|isDynamicStruct
argument_list|()
condition|)
block|{
name|rowType
operator|=
operator|new
name|RelRecordType
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|toRel
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
comment|/** Struct type based on another struct type. */
specifier|private
specifier|static
class|class
name|DelegateStructType
implements|implements
name|RelDataType
block|{
specifier|private
name|RelDataType
name|delegate
decl_stmt|;
specifier|private
name|StructKind
name|structKind
decl_stmt|;
name|DelegateStructType
parameter_list|(
name|RelDataType
name|delegate
parameter_list|,
name|StructKind
name|structKind
parameter_list|)
block|{
assert|assert
name|delegate
operator|.
name|isStruct
argument_list|()
assert|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|structKind
operator|=
name|structKind
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStruct
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isStruct
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDynamicStruct
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isDynamicStruct
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|getFieldList
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFieldList
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFieldNames
argument_list|()
return|;
block|}
specifier|public
name|int
name|getFieldCount
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFieldCount
argument_list|()
return|;
block|}
specifier|public
name|StructKind
name|getStructKind
parameter_list|()
block|{
return|return
name|structKind
return|;
block|}
specifier|public
name|RelDataTypeField
name|getField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|boolean
name|elideRecord
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|,
name|caseSensitive
argument_list|,
name|elideRecord
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isNullable
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isNullable
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getComponentType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getComponentType
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getKeyType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getKeyType
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getValueType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getValueType
argument_list|()
return|;
block|}
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCharset
argument_list|()
return|;
block|}
specifier|public
name|SqlCollation
name|getCollation
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCollation
argument_list|()
return|;
block|}
specifier|public
name|SqlIntervalQualifier
name|getIntervalQualifier
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getIntervalQualifier
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPrecision
argument_list|()
return|;
block|}
specifier|public
name|int
name|getScale
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getScale
argument_list|()
return|;
block|}
specifier|public
name|SqlTypeName
name|getSqlTypeName
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getSqlTypeName
argument_list|()
return|;
block|}
specifier|public
name|SqlIdentifier
name|getSqlIdentifier
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getSqlIdentifier
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFullTypeString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFullTypeString
argument_list|()
return|;
block|}
specifier|public
name|RelDataTypeFamily
name|getFamily
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFamily
argument_list|()
return|;
block|}
specifier|public
name|RelDataTypePrecedenceList
name|getPrecedenceList
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPrecedenceList
argument_list|()
return|;
block|}
specifier|public
name|RelDataTypeComparability
name|getComparability
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getComparability
argument_list|()
return|;
block|}
block|}
comment|/** Column having names with multiple parts. */
specifier|private
specifier|static
specifier|final
class|class
name|CompoundNameColumn
block|{
specifier|final
name|String
name|first
decl_stmt|;
specifier|final
name|String
name|second
decl_stmt|;
specifier|final
name|RelDataType
name|type
decl_stmt|;
name|CompoundNameColumn
parameter_list|(
name|String
name|first
parameter_list|,
name|String
name|second
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|first
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
operator|(
literal|"\""
operator|+
name|first
operator|+
literal|"\"."
operator|)
operator|)
operator|+
operator|(
literal|"\""
operator|+
name|second
operator|+
literal|"\""
operator|)
return|;
block|}
block|}
comment|/** ColumnResolver implementation that resolves CompoundNameColumn by simulating    *  Phoenix behaviors. */
specifier|private
specifier|static
specifier|final
class|class
name|CompoundNameColumnResolver
implements|implements
name|ColumnResolver
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nameMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|groupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|defaultColumnGroup
decl_stmt|;
name|CompoundNameColumnResolver
parameter_list|(
name|List
argument_list|<
name|CompoundNameColumn
argument_list|>
name|columns
parameter_list|,
name|String
name|defaultColumnGroup
parameter_list|)
block|{
name|this
operator|.
name|defaultColumnGroup
operator|=
name|defaultColumnGroup
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|CompoundNameColumn
argument_list|>
name|column
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|columns
argument_list|)
control|)
block|{
name|nameMap
operator|.
name|put
argument_list|(
name|column
operator|.
name|e
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|i
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|subMap
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|column
operator|.
name|e
operator|.
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|==
literal|null
condition|)
block|{
name|subMap
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|groupMap
operator|.
name|put
argument_list|(
name|column
operator|.
name|e
operator|.
name|first
argument_list|,
name|subMap
argument_list|)
expr_stmt|;
block|}
name|subMap
operator|.
name|put
argument_list|(
name|column
operator|.
name|e
operator|.
name|second
argument_list|,
name|column
operator|.
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resolveColumn
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|subMap
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|!=
literal|null
condition|)
block|{
name|Integer
name|index
init|=
name|subMap
operator|.
name|get
argument_list|(
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|names
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|String
name|columnName
init|=
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|remainder
init|=
name|names
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|index
init|=
name|nameMap
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|remainder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|priorityGroups
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
name|defaultColumnGroup
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|priorityGroups
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|subMap
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|!=
literal|null
condition|)
block|{
name|index
operator|=
name|subMap
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|remainder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|groupMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|priorityGroups
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|index
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|remainder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|&&
name|names
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|subMap
init|=
name|groupMap
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o1
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getValue
argument_list|()
operator|-
name|o2
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
operator|new
name|RelDataTypeFieldImpl
argument_list|(
name|columnName
argument_list|,
operator|-
literal|1
argument_list|,
name|createStructType
argument_list|(
name|rowType
argument_list|,
name|typeFactory
argument_list|,
name|entries
argument_list|)
argument_list|)
argument_list|,
name|remainder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|RelDataType
name|createStructType
parameter_list|(
specifier|final
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|StructKind
operator|.
name|PEEK_FIELDS
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RelDataType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|i
init|=
name|entries
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entries
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|entries
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entries
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End MockCatalogReader.java
end_comment

end_unit

