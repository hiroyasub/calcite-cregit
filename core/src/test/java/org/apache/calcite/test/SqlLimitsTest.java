begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|dialect
operator|.
name|AnsiSqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|BasicSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Unit test for SQL limits.  */
end_comment

begin_class
specifier|public
class|class
name|SqlLimitsTest
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|SqlLimitsTest
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
name|DiffRepository
name|getDiffRepos
parameter_list|()
block|{
return|return
name|DiffRepository
operator|.
name|lookup
argument_list|(
name|SqlLimitsTest
operator|.
name|class
argument_list|)
return|;
block|}
comment|/** Returns a list of typical types. */
specifier|public
specifier|static
name|List
argument_list|<
name|RelDataType
argument_list|>
name|getTypes
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|int
name|maxPrecision
init|=
name|typeFactory
operator|.
name|getTypeSystem
argument_list|()
operator|.
name|getMaxPrecision
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
decl_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|5
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|maxPrecision
argument_list|,
literal|0
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|maxPrecision
argument_list|,
literal|5
argument_list|)
argument_list|,
comment|// todo: test IntervalDayTime and IntervalYearMonth
comment|// todo: test Float, Real, Double
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
literal|5
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|1
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|20
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|,
literal|3
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|,
literal|4
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
literal|0
argument_list|)
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|BeforeAll
specifier|public
specifier|static
name|void
name|setUSLocale
parameter_list|()
block|{
comment|// This ensures numbers in exceptions are printed as in asserts.
comment|// For example, 1,000 vs 1 000
name|Locale
operator|.
name|setDefault
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrintLimits
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
init|=
name|getTypes
argument_list|(
operator|new
name|JavaTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RelDataType
name|type
range|:
name|types
control|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  min - epsilon:          "
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|OVERFLOW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  min:                    "
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|OVERFLOW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  zero - delta:           "
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|UNDERFLOW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  zero - delta + epsilon: "
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|UNDERFLOW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  zero:                   "
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|ZERO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  zero + delta - epsilon: "
argument_list|,
name|type
argument_list|,
literal|true
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|UNDERFLOW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  zero + delta:           "
argument_list|,
name|type
argument_list|,
literal|true
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|UNDERFLOW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  max:                    "
argument_list|,
name|type
argument_list|,
literal|true
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|OVERFLOW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLimit
argument_list|(
name|pw
argument_list|,
literal|"  max + epsilon:          "
argument_list|,
name|type
argument_list|,
literal|true
argument_list|,
name|SqlTypeName
operator|.
name|Limit
operator|.
name|OVERFLOW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getDiffRepos
argument_list|()
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
literal|"${output}"
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printLimit
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|String
name|desc
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|boolean
name|sign
parameter_list|,
name|SqlTypeName
operator|.
name|Limit
name|limit
parameter_list|,
name|boolean
name|beyond
parameter_list|)
block|{
name|Object
name|o
init|=
operator|(
operator|(
name|BasicSqlType
operator|)
name|type
operator|)
operator|.
name|getLimit
argument_list|(
name|sign
argument_list|,
name|limit
argument_list|,
name|beyond
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|pw
operator|.
name|print
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|String
name|s
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|int
name|k
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
operator|(
name|byte
index|[]
operator|)
name|o
control|)
block|{
if|if
condition|(
name|k
operator|++
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|b
operator|&
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Calendar
condition|)
block|{
name|Calendar
name|calendar
init|=
operator|(
name|Calendar
operator|)
name|o
decl_stmt|;
name|DateFormat
name|dateFormat
init|=
name|getDateFormat
argument_list|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|DateTimeUtils
operator|.
name|UTC_ZONE
argument_list|)
expr_stmt|;
name|s
operator|=
name|dateFormat
operator|.
name|format
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|o
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|SqlLiteral
name|literal
init|=
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|createLiteral
argument_list|(
name|o
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"; as SQL: "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|literal
operator|.
name|toSqlString
argument_list|(
name|AnsiSqlDialect
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|private
name|DateFormat
name|getDateFormat
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|DATE
case|:
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM d, yyyy"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"hh:mm:ss a"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
default|default:
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM d, yyyy hh:mm:ss a"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SqlLimitsTest.java
end_comment

end_unit

