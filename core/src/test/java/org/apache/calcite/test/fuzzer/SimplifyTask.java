begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|fuzzer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_comment
comment|/**  * Tracks rex nodes used in {@link RexProgramFuzzyTest} to identify the ones  * which take most time to simplify.  */
end_comment

begin_class
class|class
name|SimplifyTask
implements|implements
name|Comparable
argument_list|<
name|SimplifyTask
argument_list|>
block|{
specifier|public
specifier|final
name|RexNode
name|node
decl_stmt|;
specifier|public
specifier|final
name|long
name|seed
decl_stmt|;
specifier|public
specifier|final
name|RexNode
name|result
decl_stmt|;
specifier|public
specifier|final
name|long
name|duration
decl_stmt|;
name|SimplifyTask
parameter_list|(
name|RexNode
name|node
parameter_list|,
name|long
name|seed
parameter_list|,
name|RexNode
name|result
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|SimplifyTask
name|o
parameter_list|)
block|{
if|if
condition|(
name|duration
operator|!=
name|o
operator|.
name|duration
condition|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|duration
argument_list|,
name|o
operator|.
name|duration
argument_list|)
return|;
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|node
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|o
operator|.
name|node
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

