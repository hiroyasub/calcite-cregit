begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCharStringLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDataTypeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link SqlOperatorBinding} and its sub-classes  * {@link SqlCallBinding} and {@link RexCallBinding}.  */
end_comment

begin_class
class|class
name|SqlOperatorBindingTest
block|{
specifier|private
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
name|RelDataType
name|integerDataType
decl_stmt|;
specifier|private
name|SqlDataTypeSpec
name|integerType
decl_stmt|;
annotation|@
name|BeforeEach
name|void
name|setUp
parameter_list|()
block|{
name|JavaTypeFactory
name|typeFactory
init|=
operator|new
name|JavaTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|integerDataType
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|integerType
operator|=
name|SqlTypeUtil
operator|.
name|convertTypeToSpec
argument_list|(
name|integerDataType
argument_list|)
expr_stmt|;
name|rexBuilder
operator|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link org.apache.calcite.sql.SqlUtil#isLiteral(SqlNode, boolean)},    * which was added to enhance Calcite's public API    *<a href="https://issues.apache.org/jira/browse/CALCITE-1219">[CALCITE-1219]    * Add a method to SqlOperatorBinding to determine whether operand is a    * literal</a>.    */
annotation|@
name|Test
name|void
name|testSqlNodeLiteral
parameter_list|()
block|{
specifier|final
name|SqlParserPos
name|pos
init|=
name|SqlParserPos
operator|.
name|ZERO
decl_stmt|;
specifier|final
name|SqlNode
name|zeroLiteral
init|=
name|SqlLiteral
operator|.
name|createExactNumeric
argument_list|(
literal|"0"
argument_list|,
name|pos
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|oneLiteral
init|=
name|SqlLiteral
operator|.
name|createExactNumeric
argument_list|(
literal|"1"
argument_list|,
name|pos
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|nullLiteral
init|=
name|SqlLiteral
operator|.
name|createNull
argument_list|(
name|pos
argument_list|)
decl_stmt|;
specifier|final
name|SqlCharStringLiteral
name|aLiteral
init|=
name|SqlLiteral
operator|.
name|createCharString
argument_list|(
literal|"a"
argument_list|,
name|pos
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|castLiteral
init|=
name|SqlStdOperatorTable
operator|.
name|CAST
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|zeroLiteral
argument_list|,
name|integerType
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|castCastLiteral
init|=
name|SqlStdOperatorTable
operator|.
name|CAST
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|castLiteral
argument_list|,
name|integerType
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|mapLiteral
init|=
name|SqlStdOperatorTable
operator|.
name|MAP_VALUE_CONSTRUCTOR
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|aLiteral
argument_list|,
name|oneLiteral
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|map2Literal
init|=
name|SqlStdOperatorTable
operator|.
name|MAP_VALUE_CONSTRUCTOR
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|aLiteral
argument_list|,
name|castLiteral
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|arrayLiteral
init|=
name|SqlStdOperatorTable
operator|.
name|ARRAY_VALUE_CONSTRUCTOR
operator|.
name|createCall
argument_list|(
name|pos
argument_list|,
name|zeroLiteral
argument_list|,
name|oneLiteral
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|defaultCall
init|=
name|SqlStdOperatorTable
operator|.
name|DEFAULT
operator|.
name|createCall
argument_list|(
name|pos
argument_list|)
decl_stmt|;
comment|// SqlLiteral is considered a literal
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|zeroLiteral
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|zeroLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// NULL literal is considered a literal
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|nullLiteral
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|nullLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// CAST(SqlLiteral as type) is considered a literal, iff allowCast
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|castLiteral
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|castLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// CAST(CAST(SqlLiteral as type) as type) is considered a literal,
comment|// iff allowCast
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|castCastLiteral
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|castCastLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// MAP['a', 1] and MAP['a', CAST(0 AS INTEGER)] are considered literals,
comment|// iff allowCast
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|mapLiteral
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|mapLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|map2Literal
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|map2Literal
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// ARRAY[0, 1] is considered a literal, iff allowCast
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|arrayLiteral
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|arrayLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// DEFAULT is considered a literal, iff allowCast
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|defaultCall
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlUtil
operator|.
name|isLiteral
argument_list|(
name|defaultCall
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link org.apache.calcite.rex.RexUtil#isLiteral(RexNode, boolean)},    * which was added to enhance Calcite's public API    *<a href="https://issues.apache.org/jira/browse/CALCITE-1219">[CALCITE-1219]    * Add a method to SqlOperatorBinding to determine whether operand is a    * literal</a>.    */
annotation|@
name|Test
name|void
name|testRexNodeLiteral
parameter_list|()
block|{
specifier|final
name|RexNode
name|literal
init|=
name|rexBuilder
operator|.
name|makeZeroLiteral
argument_list|(
name|integerDataType
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|castLiteral
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|integerDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CAST
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|literal
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|castCastLiteral
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|integerDataType
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CAST
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|castLiteral
argument_list|)
argument_list|)
decl_stmt|;
comment|// RexLiteral is considered a literal
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLiteral
argument_list|(
name|literal
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// CAST(RexLiteral as type) is considered a literal
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLiteral
argument_list|(
name|castLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// CAST(CAST(RexLiteral as type) as type) is NOT considered a literal
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLiteral
argument_list|(
name|castCastLiteral
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

