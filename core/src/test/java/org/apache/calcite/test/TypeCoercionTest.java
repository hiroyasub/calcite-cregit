begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTestFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|test
operator|.
name|SqlValidatorTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|implicit
operator|.
name|AbstractTypeCoercion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|implicit
operator|.
name|TypeCoercion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
operator|.
name|MockCatalogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test cases for implicit type coercion. see {@link TypeCoercion} doc  * or<a href="https://docs.google.com/spreadsheets/d/1GhleX5h5W8-kJKh7NMJ4vtoE78pwfaZRJl88ULX_MgU/edit?usp=sharing">CalciteImplicitCasts</a>  * for conversion details.  */
end_comment

begin_class
specifier|public
class|class
name|TypeCoercionTest
extends|extends
name|SqlValidatorTestCase
block|{
specifier|private
name|TypeCoercion
name|typeCoercion
decl_stmt|;
specifier|private
name|RelDataTypeFactory
name|dataTypeFactory
decl_stmt|;
specifier|private
name|SqlTestFactory
operator|.
name|MockCatalogReaderFactory
name|catalogReaderFactory
decl_stmt|;
comment|// type category.
specifier|private
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|numericTypes
decl_stmt|;
specifier|private
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|atomicTypes
decl_stmt|;
specifier|private
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|allTypes
decl_stmt|;
specifier|private
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|charTypes
decl_stmt|;
specifier|private
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|binaryTypes
decl_stmt|;
specifier|private
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|booleanTypes
decl_stmt|;
comment|// single types
specifier|private
name|RelDataType
name|nullType
decl_stmt|;
specifier|private
name|RelDataType
name|booleanType
decl_stmt|;
specifier|private
name|RelDataType
name|tinyintType
decl_stmt|;
specifier|private
name|RelDataType
name|smallintType
decl_stmt|;
specifier|private
name|RelDataType
name|intType
decl_stmt|;
specifier|private
name|RelDataType
name|bigintType
decl_stmt|;
specifier|private
name|RelDataType
name|floatType
decl_stmt|;
specifier|private
name|RelDataType
name|doubleType
decl_stmt|;
specifier|private
name|RelDataType
name|decimalType
decl_stmt|;
specifier|private
name|RelDataType
name|dateType
decl_stmt|;
specifier|private
name|RelDataType
name|timeType
decl_stmt|;
specifier|private
name|RelDataType
name|timestampType
decl_stmt|;
specifier|private
name|RelDataType
name|binaryType
decl_stmt|;
specifier|private
name|RelDataType
name|varbinaryType
decl_stmt|;
specifier|private
name|RelDataType
name|charType
decl_stmt|;
specifier|private
name|RelDataType
name|varcharType
decl_stmt|;
specifier|private
name|RelDataType
name|varchar20Type
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|TypeCoercionTest
parameter_list|()
block|{
comment|// tool tester impl.
name|SqlTester
name|tester1
init|=
operator|new
name|SqlValidatorTester
argument_list|(
name|SqlTestFactory
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|this
operator|.
name|typeCoercion
operator|=
name|tester1
operator|.
name|getValidator
argument_list|()
operator|.
name|getTypeCoercion
argument_list|()
expr_stmt|;
name|this
operator|.
name|dataTypeFactory
operator|=
name|tester1
operator|.
name|getValidator
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
expr_stmt|;
name|initializeSingleTypes
argument_list|()
expr_stmt|;
name|initializeCategoryTypes
argument_list|()
expr_stmt|;
comment|// sql validator tester.
name|catalogReaderFactory
operator|=
parameter_list|(
name|factory
parameter_list|,
name|caseSensitive
parameter_list|)
lambda|->
operator|new
name|TCatalogReader
argument_list|(
name|this
operator|.
name|dataTypeFactory
argument_list|,
name|caseSensitive
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|tester
operator|=
name|getTester
argument_list|()
expr_stmt|;
block|}
comment|//~ fields initialize ------------------------------------------------------
specifier|private
name|void
name|initializeSingleTypes
parameter_list|()
block|{
name|nullType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|booleanType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|tinyintType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|smallintType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|intType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|bigintType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|floatType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|doubleType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|decimalType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|dateType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|timeType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|timestampType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|binaryType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|varbinaryType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|charType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|varcharType
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|varchar20Type
operator|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeCategoryTypes
parameter_list|()
block|{
comment|// INT
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|INT_TYPES
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|numericTypes
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// ATOMIC
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|builder3
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|DATETIME_TYPES
control|)
block|{
name|builder3
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder3
operator|.
name|addAll
argument_list|(
name|numericTypes
argument_list|)
expr_stmt|;
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|STRING_TYPES
control|)
block|{
name|builder3
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|BOOLEAN_TYPES
control|)
block|{
name|builder3
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|atomicTypes
operator|=
name|builder3
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// COMPLEX
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|builder4
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createArrayType
argument_list|(
name|intType
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createArrayType
argument_list|(
name|varcharType
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createMapType
argument_list|(
name|varcharType
argument_list|,
name|varcharType
argument_list|)
argument_list|)
expr_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
literal|"a1"
argument_list|,
name|varcharType
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
name|ll
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
literal|"a1"
argument_list|,
name|varbinaryType
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"a2"
argument_list|,
name|intType
argument_list|)
argument_list|)
decl_stmt|;
name|builder4
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createStructType
argument_list|(
name|ll
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|complexTypes
init|=
name|builder4
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// ALL
name|SqlIntervalQualifier
name|intervalQualifier
init|=
operator|new
name|SqlIntervalQualifier
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|MINUTE
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|allTypes
operator|=
name|combine
argument_list|(
name|atomicTypes
argument_list|,
name|complexTypes
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|nullType
argument_list|,
name|dataTypeFactory
operator|.
name|createSqlIntervalType
argument_list|(
name|intervalQualifier
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// CHARACTERS
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|builder6
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|CHAR_TYPES
control|)
block|{
name|builder6
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|charTypes
operator|=
name|builder6
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// BINARY
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|builder7
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|BINARY_TYPES
control|)
block|{
name|builder7
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|binaryTypes
operator|=
name|builder7
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// BOOLEAN
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|builder8
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SqlTypeName
name|typeName
range|:
name|SqlTypeName
operator|.
name|BOOLEAN_TYPES
control|)
block|{
name|builder8
operator|.
name|add
argument_list|(
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|booleanTypes
operator|=
name|builder8
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|//~ Tool methods -----------------------------------------------------------
specifier|private
name|RelDataType
name|arrayType
parameter_list|(
name|RelDataType
name|type
parameter_list|)
block|{
return|return
name|dataTypeFactory
operator|.
name|createArrayType
argument_list|(
name|type
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
name|RelDataType
name|mapType
parameter_list|(
name|RelDataType
name|keyType
parameter_list|,
name|RelDataType
name|valType
parameter_list|)
block|{
return|return
name|dataTypeFactory
operator|.
name|createMapType
argument_list|(
name|keyType
argument_list|,
name|valType
argument_list|)
return|;
block|}
specifier|private
name|RelDataType
name|recordType
parameter_list|(
name|String
name|name
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
return|return
name|dataTypeFactory
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RelDataType
name|recordType
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
return|return
name|dataTypeFactory
operator|.
name|createStructType
argument_list|(
name|pairs
argument_list|)
return|;
block|}
specifier|private
name|RelDataType
name|decimalType
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
return|;
block|}
comment|/** Decision method for {@link AbstractTypeCoercion#implicitCast}. */
specifier|private
name|void
name|shouldCast
parameter_list|(
name|RelDataType
name|from
parameter_list|,
name|SqlTypeFamily
name|family
parameter_list|,
name|RelDataType
name|expected
parameter_list|)
block|{
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
comment|// ROW type do not have a family.
return|return;
block|}
name|RelDataType
name|castedType
init|=
operator|(
operator|(
name|AbstractTypeCoercion
operator|)
name|typeCoercion
operator|)
operator|.
name|implicitCast
argument_list|(
name|from
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|boolean
name|equals
init|=
name|castedType
operator|!=
literal|null
operator|&&
operator|(
name|from
operator|.
name|equals
argument_list|(
name|castedType
argument_list|)
operator|||
name|SqlTypeUtil
operator|.
name|equalSansNullability
argument_list|(
name|dataTypeFactory
argument_list|,
name|castedType
argument_list|,
name|expected
argument_list|)
operator|||
name|expected
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|.
name|contains
argument_list|(
name|castedType
argument_list|)
operator|)
decl_stmt|;
assert|assert
name|equals
operator|:
literal|"Failed to cast from "
operator|+
name|from
operator|.
name|getSqlTypeName
argument_list|()
operator|+
literal|" to "
operator|+
name|family
assert|;
block|}
specifier|private
name|void
name|shouldNotCast
parameter_list|(
name|RelDataType
name|from
parameter_list|,
name|SqlTypeFamily
name|family
parameter_list|)
block|{
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
comment|// ROW type do not have a family.
return|return;
block|}
name|RelDataType
name|castedType
init|=
operator|(
operator|(
name|AbstractTypeCoercion
operator|)
name|typeCoercion
operator|)
operator|.
name|implicitCast
argument_list|(
name|from
argument_list|,
name|family
argument_list|)
decl_stmt|;
assert|assert
name|castedType
operator|==
literal|null
operator|:
literal|"Should not be able to cast from "
operator|+
name|from
operator|.
name|getSqlTypeName
argument_list|()
operator|+
literal|" to "
operator|+
name|family
assert|;
block|}
specifier|private
name|void
name|checkShouldCast
parameter_list|(
name|RelDataType
name|checked
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
parameter_list|)
block|{
for|for
control|(
name|RelDataType
name|type
range|:
name|allTypes
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|types
argument_list|,
name|type
argument_list|)
condition|)
block|{
name|shouldCast
argument_list|(
name|checked
argument_list|,
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shouldNotCast
argument_list|(
name|checked
argument_list|,
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// some data types has the same type family, i.e. TIMESTAMP and
comment|// TIMESTAMP_WITH_LOCAL_TIME_ZONE all have TIMESTAMP family.
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|types
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
for|for
control|(
name|RelDataType
name|type1
range|:
name|types
control|)
block|{
if|if
condition|(
name|type1
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|type1
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
operator|==
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getFamily
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|equals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|!=
literal|null
operator|||
name|o1
operator|!=
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|o1
operator|==
name|o2
return|;
block|}
specifier|private
name|String
name|toStringNullable
parameter_list|(
name|Object
name|o1
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
literal|"NULL"
return|;
block|}
return|return
name|o1
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Decision method for finding a common type. */
specifier|private
name|void
name|checkCommonType
parameter_list|(
name|RelDataType
name|type1
parameter_list|,
name|RelDataType
name|type2
parameter_list|,
name|RelDataType
name|expected
parameter_list|,
name|boolean
name|isSymmetric
parameter_list|)
block|{
name|RelDataType
name|result
init|=
name|typeCoercion
operator|.
name|getTightestCommonType
argument_list|(
name|type1
argument_list|,
name|type2
argument_list|)
decl_stmt|;
assert|assert
name|equals
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
operator|:
literal|"Expected "
operator|+
name|toStringNullable
argument_list|(
name|expected
argument_list|)
operator|+
literal|" as common type for "
operator|+
name|type1
operator|.
name|toString
argument_list|()
operator|+
literal|" and "
operator|+
name|type2
operator|.
name|toString
argument_list|()
operator|+
literal|", but found "
operator|+
name|toStringNullable
argument_list|(
name|result
argument_list|)
assert|;
if|if
condition|(
name|isSymmetric
condition|)
block|{
name|RelDataType
name|result1
init|=
name|typeCoercion
operator|.
name|getTightestCommonType
argument_list|(
name|type2
argument_list|,
name|type1
argument_list|)
decl_stmt|;
assert|assert
name|equals
argument_list|(
name|result1
argument_list|,
name|expected
argument_list|)
operator|:
literal|"Expected "
operator|+
name|toStringNullable
argument_list|(
name|expected
argument_list|)
operator|+
literal|" as common type for "
operator|+
name|type2
operator|.
name|toString
argument_list|()
operator|+
literal|" and "
operator|+
name|type1
operator|.
name|toString
argument_list|()
operator|+
literal|", but found "
operator|+
name|toStringNullable
argument_list|(
name|result1
argument_list|)
assert|;
block|}
block|}
comment|/** Decision method for finding a wider type. */
specifier|private
name|void
name|checkWiderType
parameter_list|(
name|RelDataType
name|type1
parameter_list|,
name|RelDataType
name|type2
parameter_list|,
name|RelDataType
name|expected
parameter_list|,
name|boolean
name|stringPromotion
parameter_list|,
name|boolean
name|isSymmetric
parameter_list|)
block|{
name|RelDataType
name|result
init|=
name|typeCoercion
operator|.
name|getWiderTypeForTwo
argument_list|(
name|type1
argument_list|,
name|type2
argument_list|,
name|stringPromotion
argument_list|)
decl_stmt|;
assert|assert
name|equals
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
operator|:
literal|"Expected "
operator|+
name|toStringNullable
argument_list|(
name|expected
argument_list|)
operator|+
literal|" as common type for "
operator|+
name|type1
operator|.
name|toString
argument_list|()
operator|+
literal|" and "
operator|+
name|type2
operator|.
name|toString
argument_list|()
operator|+
literal|", but found "
operator|+
name|toStringNullable
argument_list|(
name|result
argument_list|)
assert|;
if|if
condition|(
name|isSymmetric
condition|)
block|{
name|RelDataType
name|result1
init|=
name|typeCoercion
operator|.
name|getWiderTypeForTwo
argument_list|(
name|type2
argument_list|,
name|type1
argument_list|,
name|stringPromotion
argument_list|)
decl_stmt|;
assert|assert
name|equals
argument_list|(
name|result1
argument_list|,
name|expected
argument_list|)
operator|:
literal|"Expected "
operator|+
name|toStringNullable
argument_list|(
name|expected
argument_list|)
operator|+
literal|" as common type for "
operator|+
name|type2
operator|.
name|toString
argument_list|()
operator|+
literal|" and "
operator|+
name|type1
operator|.
name|toString
argument_list|()
operator|+
literal|", but found "
operator|+
name|toStringNullable
argument_list|(
name|result1
argument_list|)
assert|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SqlTester
name|getTester
parameter_list|()
block|{
return|return
operator|new
name|SqlValidatorTester
argument_list|(
name|SqlTestFactory
operator|.
name|INSTANCE
operator|.
name|withCatalogReader
argument_list|(
name|getCatalogReaderFactory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|combine
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|list0
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|list1
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
expr|<
name|RelDataType
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|list0
argument_list|)
operator|.
name|addAll
argument_list|(
name|list1
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|RelDataType
argument_list|>
name|combine
parameter_list|(
name|List
argument_list|<
name|RelDataType
argument_list|>
name|list0
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|list1
parameter_list|,
name|List
argument_list|<
name|RelDataType
argument_list|>
name|list2
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
expr|<
name|RelDataType
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|list0
argument_list|)
operator|.
name|addAll
argument_list|(
name|list1
argument_list|)
operator|.
name|addAll
argument_list|(
name|list2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|SqlTestFactory
operator|.
name|MockCatalogReaderFactory
name|getCatalogReaderFactory
parameter_list|()
block|{
return|return
name|catalogReaderFactory
return|;
block|}
comment|//~ Tests ------------------------------------------------------------------
comment|/**    * Test case for {@link TypeCoercion#getTightestCommonType}.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetTightestCommonType
parameter_list|()
block|{
comment|// NULL
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|nullType
argument_list|,
name|nullType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// BOOLEAN
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|booleanType
argument_list|,
name|booleanType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|booleanType
argument_list|,
name|booleanType
argument_list|,
name|booleanType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|intType
argument_list|,
name|booleanType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|bigintType
argument_list|,
name|booleanType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// INT
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|tinyintType
argument_list|,
name|tinyintType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|intType
argument_list|,
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|bigintType
argument_list|,
name|bigintType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|smallintType
argument_list|,
name|intType
argument_list|,
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|smallintType
argument_list|,
name|bigintType
argument_list|,
name|bigintType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|intType
argument_list|,
name|bigintType
argument_list|,
name|bigintType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|bigintType
argument_list|,
name|bigintType
argument_list|,
name|bigintType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// FLOAT/DOUBLE
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|floatType
argument_list|,
name|floatType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|doubleType
argument_list|,
name|doubleType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Use RelDataTypeFactory#leastRestrictive to find the common type, it's not symmetric but
comment|// it's ok because precision does not become lower.
name|checkCommonType
argument_list|(
name|floatType
argument_list|,
name|doubleType
argument_list|,
name|floatType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|floatType
argument_list|,
name|floatType
argument_list|,
name|floatType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|doubleType
argument_list|,
name|doubleType
argument_list|,
name|doubleType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// EXACT + FRACTIONAL
name|checkCommonType
argument_list|(
name|intType
argument_list|,
name|floatType
argument_list|,
name|floatType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|intType
argument_list|,
name|doubleType
argument_list|,
name|doubleType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|bigintType
argument_list|,
name|floatType
argument_list|,
name|floatType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|bigintType
argument_list|,
name|doubleType
argument_list|,
name|doubleType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Fixed precision decimal
name|RelDataType
name|decimal54
init|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|RelDataType
name|decimal71
init|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|checkCommonType
argument_list|(
name|decimal54
argument_list|,
name|decimal71
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|decimal54
argument_list|,
name|doubleType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|decimal54
argument_list|,
name|intType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// CHAR/VARCHAR
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|charType
argument_list|,
name|charType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|charType
argument_list|,
name|varcharType
argument_list|,
name|varcharType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|intType
argument_list|,
name|charType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|doubleType
argument_list|,
name|charType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TIMESTAMP
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|timestampType
argument_list|,
name|timestampType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|timestampType
argument_list|,
name|timestampType
argument_list|,
name|timestampType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|dateType
argument_list|,
name|timestampType
argument_list|,
name|timestampType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|intType
argument_list|,
name|timestampType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|varcharType
argument_list|,
name|timestampType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// STRUCT
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|mapType
argument_list|(
name|intType
argument_list|,
name|charType
argument_list|)
argument_list|,
name|mapType
argument_list|(
name|intType
argument_list|,
name|charType
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|nullType
argument_list|,
name|recordType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
name|recordType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|charType
argument_list|,
name|mapType
argument_list|(
name|intType
argument_list|,
name|charType
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|arrayType
argument_list|(
name|intType
argument_list|)
argument_list|,
name|recordType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|recordType
argument_list|(
literal|"a"
argument_list|,
name|intType
argument_list|)
argument_list|,
name|recordType
argument_list|(
literal|"b"
argument_list|,
name|intType
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|recordType
argument_list|(
literal|"a"
argument_list|,
name|intType
argument_list|)
argument_list|,
name|recordType
argument_list|(
literal|"a"
argument_list|,
name|intType
argument_list|)
argument_list|,
name|recordType
argument_list|(
literal|"a"
argument_list|,
name|intType
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkCommonType
argument_list|(
name|recordType
argument_list|(
literal|"a"
argument_list|,
name|arrayType
argument_list|(
name|intType
argument_list|)
argument_list|)
argument_list|,
name|recordType
argument_list|(
literal|"a"
argument_list|,
name|arrayType
argument_list|(
name|intType
argument_list|)
argument_list|)
argument_list|,
name|recordType
argument_list|(
literal|"a"
argument_list|,
name|arrayType
argument_list|(
name|intType
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for {@link TypeCoercion#getWiderTypeForTwo}    * and {@link TypeCoercion#getWiderTypeFor} */
annotation|@
name|Test
specifier|public
name|void
name|testWiderTypeFor
parameter_list|()
block|{
comment|// DECIMAL please see details in SqlTypeFactoryImpl#leastRestrictiveSqlType.
name|checkWiderType
argument_list|(
name|decimalType
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|,
name|decimalType
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|)
argument_list|,
name|decimalType
argument_list|(
literal|10
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|decimalType
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|,
name|doubleType
argument_list|,
name|doubleType
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|decimalType
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|,
name|intType
argument_list|,
name|decimalType
argument_list|(
literal|14
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|decimalType
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|,
name|bigintType
argument_list|,
name|decimalType
argument_list|(
literal|19
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Array
name|checkWiderType
argument_list|(
name|arrayType
argument_list|(
name|smallintType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|doubleType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|doubleType
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|arrayType
argument_list|(
name|timestampType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|varcharType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|varcharType
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|arrayType
argument_list|(
name|intType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|bigintType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|bigintType
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// No string promotion
name|checkWiderType
argument_list|(
name|intType
argument_list|,
name|charType
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|timestampType
argument_list|,
name|charType
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|arrayType
argument_list|(
name|bigintType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|charType
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|arrayType
argument_list|(
name|charType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|timestampType
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// String promotion
name|checkWiderType
argument_list|(
name|intType
argument_list|,
name|charType
argument_list|,
name|varcharType
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|timestampType
argument_list|,
name|charType
argument_list|,
name|varcharType
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|arrayType
argument_list|(
name|bigintType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|varcharType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|varcharType
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkWiderType
argument_list|(
name|arrayType
argument_list|(
name|charType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|timestampType
argument_list|)
argument_list|,
name|arrayType
argument_list|(
name|varcharType
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Test set operations: UNION, INTERSECT, EXCEPT type coercion. */
annotation|@
name|Test
specifier|public
name|void
name|testSetOperations
parameter_list|()
block|{
comment|// union
name|sql
argument_list|(
literal|"select 1 from (values(true)) union select '2' from (values(true))"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select 1 from (values(true)) union select '2' from (values(true))"
operator|+
literal|"union select '3' from (values(true))"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select 1, '2' from (values(true, false)) union select '3', 4 from (values(true, false))"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0, VARCHAR NOT NULL EXPR$1) NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select '1' from (values(true)) union values 2"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select (select 1+2 from (values true)) tt from (values(true)) union values '2'"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL TT) NOT NULL"
argument_list|)
expr_stmt|;
comment|// union with star
name|sql
argument_list|(
literal|"select * from (values(1, '3')) union select * from (values('2', 4))"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0, VARCHAR NOT NULL EXPR$1) NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select 1 from (values(true)) union values (select '1' from (values (true)) as tt)"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// union with func
name|sql
argument_list|(
literal|"select LOCALTIME from (values(true)) union values '1'"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL LOCALTIME) NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select t1_int, t1_decimal, t1_smallint, t1_double from t1 "
operator|+
literal|"union select t2_varchar20, t2_decimal, t2_float, t2_bigint from t2 "
operator|+
literal|"union select t1_varchar20, t1_decimal, t1_float, t1_double from t1 "
operator|+
literal|"union select t2_varchar20, t2_decimal, t2_smallint, t2_double from t2"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL T1_INT,"
operator|+
literal|" DECIMAL(19, 0) NOT NULL T1_DECIMAL,"
operator|+
literal|" FLOAT NOT NULL T1_SMALLINT,"
operator|+
literal|" DOUBLE NOT NULL T1_DOUBLE) NOT NULL"
argument_list|)
expr_stmt|;
comment|// (int) union (int) union (varchar(20))
name|sql
argument_list|(
literal|"select t1_int from t1 "
operator|+
literal|"union select t2_int from t2 "
operator|+
literal|"union select t1_varchar20 from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR NOT NULL"
argument_list|)
expr_stmt|;
comment|// (varchar(20)) union (int) union (int)
name|sql
argument_list|(
literal|"select t1_varchar20 from t1 "
operator|+
literal|"union select t2_int from t2 "
operator|+
literal|"union select t1_int from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR NOT NULL"
argument_list|)
expr_stmt|;
comment|// intersect
name|sql
argument_list|(
literal|"select t1_int, t1_decimal, t1_smallint, t1_double from t1 "
operator|+
literal|"intersect select t2_varchar20, t2_decimal, t2_float, t2_bigint from t2 "
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL T1_INT,"
operator|+
literal|" DECIMAL(19, 0) NOT NULL T1_DECIMAL,"
operator|+
literal|" FLOAT NOT NULL T1_SMALLINT,"
operator|+
literal|" DOUBLE NOT NULL T1_DOUBLE) NOT NULL"
argument_list|)
expr_stmt|;
comment|// except
name|sql
argument_list|(
literal|"select t1_int, t1_decimal, t1_smallint, t1_double from t1 "
operator|+
literal|"except select t2_varchar20, t2_decimal, t2_float, t2_bigint from t2 "
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL T1_INT,"
operator|+
literal|" DECIMAL(19, 0) NOT NULL T1_DECIMAL,"
operator|+
literal|" FLOAT NOT NULL T1_SMALLINT,"
operator|+
literal|" DOUBLE NOT NULL T1_DOUBLE) NOT NULL"
argument_list|)
expr_stmt|;
block|}
comment|/** Test arithmetic expressions with string type arguments. */
annotation|@
name|Test
specifier|public
name|void
name|testArithmeticExpressionsWithStrings
parameter_list|()
block|{
comment|// for null type in binary arithmetic.
name|expr
argument_list|(
literal|"1 + null"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"1 - null"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"1 / null"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"1 * null"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"MOD(1, null)"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|sql
argument_list|(
literal|"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') "
operator|+
literal|"from (values (true, true, true, true, true))"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(INTEGER NOT NULL EXPR$0, "
operator|+
literal|"INTEGER NOT NULL EXPR$1, "
operator|+
literal|"INTEGER NOT NULL EXPR$2, "
operator|+
literal|"INTEGER NOT NULL EXPR$3, "
operator|+
literal|"DECIMAL(19, 19) "
operator|+
literal|"NOT NULL EXPR$4) NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"select abs(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"select sum(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"select avg(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|tester
operator|.
name|setFor
argument_list|(
name|SqlStdOperatorTable
operator|.
name|STDDEV_POP
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setFor
argument_list|(
name|SqlStdOperatorTable
operator|.
name|STDDEV_SAMP
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"select STDDEV_POP(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"select STDDEV_SAMP(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"select -(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"select +(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|tester
operator|.
name|setFor
argument_list|(
name|SqlStdOperatorTable
operator|.
name|VAR_POP
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setFor
argument_list|(
name|SqlStdOperatorTable
operator|.
name|VAR_SAMP
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"select VAR_POP(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
name|expr
argument_list|(
literal|"select VAR_SAMP(t1_varchar20) from t1"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
comment|// test divide with strings
name|expr
argument_list|(
literal|"'12.3'/5"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"INTEGER NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'12.3'/cast(5 as bigint)"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BIGINT NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'12.3'/cast(5 as float)"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"FLOAT NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'12.3'/cast(5 as double)"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"DOUBLE NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'12.3'/5.1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"DECIMAL(19, 18) NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"12.3/'5.1'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"DECIMAL(19, 0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// test binary arithmetic with two strings.
name|expr
argument_list|(
literal|"'12.3' + '5'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"DECIMAL(19, 19) NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'12.3' - '5'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"DECIMAL(19, 19) NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'12.3' * '5'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"DECIMAL(19, 19) NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'12.3' / '5'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"DECIMAL(19, 0) NOT NULL"
argument_list|)
expr_stmt|;
block|}
comment|/** Test cases for binary comparison expressions. */
annotation|@
name|Test
specifier|public
name|void
name|testBinaryComparisonCoercion
parameter_list|()
block|{
name|expr
argument_list|(
literal|"'2' = 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'> 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'>= 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'< 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'<= 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2' is distinct from 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2' is not distinct from 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
comment|// NULL operand
name|expr
argument_list|(
literal|"'2' = null"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'> null"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'>= null"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'< null"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2'<= null"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2' is distinct from null"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"'2' is not distinct from null"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
comment|// BETWEEN operator
name|expr
argument_list|(
literal|"'2' between 1 and 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"NULL between 1 and 3"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select '2019-09-23' between t1_date and t1_timestamp from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select t1_date between '2019-09-23' and t1_timestamp from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select cast('2019-09-23' as date) between t1_date and t1_timestamp from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
name|sql
argument_list|(
literal|"select t1_date between cast('2019-09-23' as date) and t1_timestamp from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"BOOLEAN NOT NULL"
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for case when expression and COALESCE operator. */
annotation|@
name|Test
specifier|public
name|void
name|testCaseWhen
parameter_list|()
block|{
comment|// coalesce
comment|// double int float
name|sql
argument_list|(
literal|"select COALESCE(t1_double, t1_int, t1_float) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(DOUBLE NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// bigint int decimal
name|sql
argument_list|(
literal|"select COALESCE(t1_bigint, t1_int, t1_decimal) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(DECIMAL(19, 0) NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// null int
name|sql
argument_list|(
literal|"select COALESCE(null, t1_int) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(INTEGER EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// timestamp varchar
name|sql
argument_list|(
literal|"select COALESCE(t1_varchar20, t1_timestamp) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// null float int
name|sql
argument_list|(
literal|"select COALESCE(null, t1_float, t1_int) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(FLOAT EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// null int decimal double
name|sql
argument_list|(
literal|"select COALESCE(null, t1_int, t1_decimal, t1_double) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(DOUBLE EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// null float double varchar
name|sql
argument_list|(
literal|"select COALESCE(null, t1_float, t1_double, t1_varchar20) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// timestamp int varchar
name|sql
argument_list|(
literal|"select COALESCE(t1_timestamp, t1_int, t1_varchar20) from t1"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(TIMESTAMP(0) NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// case when
comment|// smallint int char
name|sql
argument_list|(
literal|"select case "
operator|+
literal|"when 1> 0 then t2_smallint "
operator|+
literal|"when 2> 3 then t2_int "
operator|+
literal|"else t2_varchar20 end from t2"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// boolean int char
name|sql
argument_list|(
literal|"select case "
operator|+
literal|"when 1> 0 then t2_boolean "
operator|+
literal|"when 2> 3 then t2_int "
operator|+
literal|"else t2_varchar20 end from t2"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(VARCHAR NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// float decimal
name|sql
argument_list|(
literal|"select case when 1> 0 then t2_float else t2_decimal end from t2"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(DOUBLE NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
comment|// bigint decimal
name|sql
argument_list|(
literal|"select case when 1> 0 then t2_bigint else t2_decimal end from t2"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(DECIMAL(19, 0) NOT NULL EXPR$0) NOT NULL"
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for {@link AbstractTypeCoercion#implicitCast} */
annotation|@
name|Test
specifier|public
name|void
name|testImplicitCasts
parameter_list|()
block|{
comment|// TINYINT
name|RelDataType
name|checkedType1
init|=
name|dataTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType1
argument_list|,
name|combine
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType1
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType1
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType1
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|checkedType1
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType1
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|checkedType1
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType1
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|checkedType1
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType1
argument_list|,
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
argument_list|)
expr_stmt|;
comment|// SMALLINT
name|RelDataType
name|checkedType2
init|=
name|smallintType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType2
argument_list|,
name|combine
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType2
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType2
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType2
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|checkedType2
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType2
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|checkedType2
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType2
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|checkedType2
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType2
argument_list|,
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
argument_list|)
expr_stmt|;
comment|// INT
name|RelDataType
name|checkedType3
init|=
name|intType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType3
argument_list|,
name|combine
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType3
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType3
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType3
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|checkedType3
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType3
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|checkedType3
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType3
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|checkedType3
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType3
argument_list|,
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
argument_list|)
expr_stmt|;
comment|// BIGINT
name|RelDataType
name|checkedType4
init|=
name|bigintType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType4
argument_list|,
name|combine
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType4
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType4
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType4
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|checkedType4
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType4
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|,
name|checkedType4
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType4
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|checkedType4
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType4
argument_list|,
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
argument_list|)
expr_stmt|;
comment|// FLOAT/REAL
name|RelDataType
name|checkedType5
init|=
name|floatType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType5
argument_list|,
name|combine
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType5
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType5
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType5
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|checkedType5
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType5
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType5
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType5
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType5
argument_list|,
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
argument_list|,
name|checkedType5
argument_list|)
expr_stmt|;
comment|// DOUBLE
name|RelDataType
name|checkedType6
init|=
name|doubleType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType6
argument_list|,
name|combine
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType6
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType6
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType6
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|checkedType6
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType6
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType6
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType5
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType6
argument_list|,
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
argument_list|,
name|checkedType6
argument_list|)
expr_stmt|;
comment|// DECIMAL(10, 2)
name|RelDataType
name|checkedType7
init|=
name|decimalType
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType7
argument_list|,
name|combine
argument_list|(
name|numericTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType7
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|dataTypeFactory
operator|.
name|decimalOf
argument_list|(
name|checkedType7
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType7
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|checkedType7
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType7
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType7
argument_list|,
name|SqlTypeFamily
operator|.
name|EXACT_NUMERIC
argument_list|,
name|checkedType7
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType7
argument_list|,
name|SqlTypeFamily
operator|.
name|APPROXIMATE_NUMERIC
argument_list|)
expr_stmt|;
comment|// BINARY
name|RelDataType
name|checkedType8
init|=
name|binaryType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType8
argument_list|,
name|combine
argument_list|(
name|binaryTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType8
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType8
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType8
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// BOOLEAN
name|RelDataType
name|checkedType9
init|=
name|booleanType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType9
argument_list|,
name|combine
argument_list|(
name|booleanTypes
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType9
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType9
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType9
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// CHARACTER
name|RelDataType
name|checkedType10
init|=
name|varcharType
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataType
name|type
range|:
name|atomicTypes
control|)
block|{
if|if
condition|(
operator|!
name|SqlTypeUtil
operator|.
name|isBoolean
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|checkShouldCast
argument_list|(
name|checkedType10
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType10
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|SqlTypeUtil
operator|.
name|getMaxPrecisionScaleDecimal
argument_list|(
name|dataTypeFactory
argument_list|)
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType10
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|SqlTypeUtil
operator|.
name|getMaxPrecisionScaleDecimal
argument_list|(
name|dataTypeFactory
argument_list|)
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType10
argument_list|,
name|SqlTypeFamily
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
comment|// DATE
name|RelDataType
name|checkedType11
init|=
name|dateType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType11
argument_list|,
name|combine
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|timestampType
argument_list|,
name|checkedType11
argument_list|)
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType11
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType11
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType11
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// TIME
name|RelDataType
name|checkedType12
init|=
name|timeType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType12
argument_list|,
name|combine
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|checkedType12
argument_list|)
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType12
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType12
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType12
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// TIMESTAMP
name|RelDataType
name|checkedType13
init|=
name|timestampType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType13
argument_list|,
name|combine
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|dateType
argument_list|,
name|checkedType13
argument_list|)
argument_list|,
name|charTypes
argument_list|)
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType13
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType13
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType13
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// NULL
name|RelDataType
name|checkedType14
init|=
name|nullType
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType14
argument_list|,
name|allTypes
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType14
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|,
name|decimalType
argument_list|)
expr_stmt|;
name|shouldCast
argument_list|(
name|checkedType14
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|,
name|intType
argument_list|)
expr_stmt|;
comment|// INTERVAL
name|RelDataType
name|checkedType15
init|=
name|dataTypeFactory
operator|.
name|createSqlIntervalType
argument_list|(
operator|new
name|SqlIntervalQualifier
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|,
name|SqlParserPos
operator|.
name|ZERO
argument_list|)
argument_list|)
decl_stmt|;
name|checkShouldCast
argument_list|(
name|checkedType15
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|checkedType15
argument_list|)
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType15
argument_list|,
name|SqlTypeFamily
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType15
argument_list|,
name|SqlTypeFamily
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|shouldNotCast
argument_list|(
name|checkedType15
argument_list|,
name|SqlTypeFamily
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for {@link AbstractTypeCoercion#implicitCast}. */
annotation|@
name|Test
specifier|public
name|void
name|testBuiltinFunctionCoercion
parameter_list|()
block|{
comment|// concat
name|expr
argument_list|(
literal|"'ab'||'cde'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"CHAR(5) NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"null||'cde'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"1||'234'"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR NOT NULL"
argument_list|)
expr_stmt|;
name|expr
argument_list|(
literal|"select ^'a'||t1_binary^ from t1"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"(?s).*Cannot apply.*"
argument_list|)
expr_stmt|;
comment|// smallint int double
name|expr
argument_list|(
literal|"select t1_smallint||t1_int||t1_double from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR"
argument_list|)
expr_stmt|;
comment|// boolean float smallint
name|expr
argument_list|(
literal|"select t1_boolean||t1_float||t1_smallint from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR"
argument_list|)
expr_stmt|;
comment|// decimal
name|expr
argument_list|(
literal|"select t1_decimal||t1_varchar20 from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR"
argument_list|)
expr_stmt|;
comment|// date timestamp
name|expr
argument_list|(
literal|"select t1_timestamp||t1_date from t1"
argument_list|)
operator|.
name|columnType
argument_list|(
literal|"VARCHAR"
argument_list|)
expr_stmt|;
block|}
comment|//~ Inner Class ------------------------------------------------------------
comment|/** A catalog reader with table t1 and t2 whose schema contains all the test data types. */
specifier|public
class|class
name|TCatalogReader
extends|extends
name|MockCatalogReader
block|{
specifier|private
name|boolean
name|isCaseSensitive
decl_stmt|;
name|TCatalogReader
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|isCaseSensitive
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|isCaseSensitive
operator|=
name|isCaseSensitive
expr_stmt|;
block|}
specifier|public
name|MockCatalogReader
name|init
parameter_list|()
block|{
name|MockSchema
name|tSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"SALES"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|tSchema
argument_list|)
expr_stmt|;
comment|// Register "T1" table.
specifier|final
name|MockTable
name|t1
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|tSchema
argument_list|,
literal|"T1"
argument_list|,
literal|false
argument_list|,
literal|7.0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_varchar20"
argument_list|,
name|varchar20Type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_smallint"
argument_list|,
name|smallintType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_int"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_bigint"
argument_list|,
name|bigintType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_float"
argument_list|,
name|floatType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_double"
argument_list|,
name|doubleType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_decimal"
argument_list|,
name|decimalType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_timestamp"
argument_list|,
name|timestampType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_date"
argument_list|,
name|dateType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_binary"
argument_list|,
name|binaryType
argument_list|)
expr_stmt|;
name|t1
operator|.
name|addColumn
argument_list|(
literal|"t1_boolean"
argument_list|,
name|booleanType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|t1
argument_list|)
expr_stmt|;
specifier|final
name|MockTable
name|t2
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|tSchema
argument_list|,
literal|"T2"
argument_list|,
literal|false
argument_list|,
literal|7.0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_varchar20"
argument_list|,
name|varchar20Type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_smallint"
argument_list|,
name|smallintType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_int"
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_bigint"
argument_list|,
name|bigintType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_float"
argument_list|,
name|floatType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_double"
argument_list|,
name|doubleType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_decimal"
argument_list|,
name|decimalType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_timestamp"
argument_list|,
name|timestampType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_date"
argument_list|,
name|dateType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_binary"
argument_list|,
name|binaryType
argument_list|)
expr_stmt|;
name|t2
operator|.
name|addColumn
argument_list|(
literal|"t2_boolean"
argument_list|,
name|booleanType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|t2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|isCaseSensitive
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End TypeCoercionTest.java
end_comment

end_unit

