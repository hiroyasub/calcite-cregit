begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ObjectSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|NullInitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Simple catalog reader for testing.  */
end_comment

begin_class
specifier|public
class|class
name|MockCatalogReaderSimple
extends|extends
name|MockCatalogReader
block|{
specifier|private
specifier|final
name|Fixture
name|fixture
decl_stmt|;
comment|/**    * Creates a MockCatalogReader.    *    *<p>Caller must then call {@link #init} to populate with data.</p>    *    * @param typeFactory   Type factory    * @param caseSensitive case sensitivity    */
specifier|public
name|MockCatalogReaderSimple
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|super
argument_list|(
name|typeFactory
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
name|fixture
operator|=
operator|new
name|Fixture
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getNamedType
parameter_list|(
name|SqlIdentifier
name|typeName
parameter_list|)
block|{
if|if
condition|(
name|typeName
operator|.
name|equalsDeep
argument_list|(
name|fixture
operator|.
name|addressType
operator|.
name|getSqlIdentifier
argument_list|()
argument_list|,
name|Litmus
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
return|return
name|fixture
operator|.
name|addressType
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getNamedType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MockCatalogReader
name|init
parameter_list|()
block|{
name|ObjectSqlType
name|addressType
init|=
name|fixture
operator|.
name|addressType
decl_stmt|;
comment|// Register "SALES" schema.
name|MockSchema
name|salesSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"SALES"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|salesSchema
argument_list|)
expr_stmt|;
comment|// Register "EMP" table with customer InitializerExpressionFactory
comment|// to check whether newDefaultValue method called or not.
specifier|final
name|InitializerExpressionFactory
name|countingInitializerExpressionFactory
init|=
operator|new
name|CountingFactory
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
decl_stmt|;
name|registerType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|salesSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|salesSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"customBigInt"
argument_list|)
argument_list|,
name|typeFactory
lambda|->
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Register "EMP" table.
specifier|final
name|MockTable
name|empTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMP"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|,
literal|null
argument_list|,
name|countingInitializerExpressionFactory
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|fixture
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|fixture
operator|.
name|booleanType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empTable
argument_list|)
expr_stmt|;
comment|// Register "EMPNULLABLES" table with nullable columns.
specifier|final
name|MockTable
name|empNullablesTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMPNULLABLES"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|fixture
operator|.
name|varchar10TypeNull
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|fixture
operator|.
name|timestampTypeNull
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empNullablesTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|fixture
operator|.
name|booleanTypeNull
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empNullablesTable
argument_list|)
expr_stmt|;
comment|// Register "EMPDEFAULTS" table with default values for some columns.
specifier|final
name|MockTable
name|empDefaultsTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMPDEFAULTS"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|,
literal|null
argument_list|,
operator|new
name|EmpInitializerExpressionFactory
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|fixture
operator|.
name|varchar10TypeNull
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|fixture
operator|.
name|timestampTypeNull
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empDefaultsTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|fixture
operator|.
name|booleanTypeNull
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empDefaultsTable
argument_list|)
expr_stmt|;
comment|// Register "EMP_B" table. As "EMP", birth with a "BIRTHDATE" column.
specifier|final
name|MockTable
name|empBTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMP_B"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|fixture
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|fixture
operator|.
name|booleanType
argument_list|)
expr_stmt|;
name|empBTable
operator|.
name|addColumn
argument_list|(
literal|"BIRTHDATE"
argument_list|,
name|fixture
operator|.
name|dateType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empBTable
argument_list|)
expr_stmt|;
comment|// Register "DEPT" table.
name|MockTable
name|deptTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"DEPT"
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|deptTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deptTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|deptTable
argument_list|)
expr_stmt|;
comment|// Register "DEPT_NESTED" table.
name|MockTable
name|deptNestedTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"DEPT_NESTED"
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|deptNestedTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deptNestedTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|deptNestedTable
operator|.
name|addColumn
argument_list|(
literal|"SKILL"
argument_list|,
name|fixture
operator|.
name|skillRecordType
argument_list|)
expr_stmt|;
name|deptNestedTable
operator|.
name|addColumn
argument_list|(
literal|"EMPLOYEES"
argument_list|,
name|fixture
operator|.
name|empListType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|deptNestedTable
argument_list|)
expr_stmt|;
comment|// Register "BONUS" table.
name|MockTable
name|bonusTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"BONUS"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|bonusTable
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|bonusTable
argument_list|)
expr_stmt|;
comment|// Register "SALGRADE" table.
name|MockTable
name|salgradeTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"SALGRADE"
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|salgradeTable
operator|.
name|addColumn
argument_list|(
literal|"GRADE"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|salgradeTable
operator|.
name|addColumn
argument_list|(
literal|"LOSAL"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|salgradeTable
operator|.
name|addColumn
argument_list|(
literal|"HISAL"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|salgradeTable
argument_list|)
expr_stmt|;
comment|// Register "EMP_ADDRESS" table
name|MockTable
name|contactAddressTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"EMP_ADDRESS"
argument_list|,
literal|false
argument_list|,
literal|26
argument_list|)
decl_stmt|;
name|contactAddressTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|contactAddressTable
operator|.
name|addColumn
argument_list|(
literal|"HOME_ADDRESS"
argument_list|,
name|addressType
argument_list|)
expr_stmt|;
name|contactAddressTable
operator|.
name|addColumn
argument_list|(
literal|"MAILING_ADDRESS"
argument_list|,
name|addressType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|contactAddressTable
argument_list|)
expr_stmt|;
comment|// Register "CUSTOMER" schema.
name|MockSchema
name|customerSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"CUSTOMER"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|customerSchema
argument_list|)
expr_stmt|;
comment|// Register "CONTACT" table.
name|MockTable
name|contactTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|customerSchema
argument_list|,
literal|"CONTACT"
argument_list|,
literal|false
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"CONTACTNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"FNAME"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"LNAME"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"EMAIL"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|contactTable
operator|.
name|addColumn
argument_list|(
literal|"COORD"
argument_list|,
name|fixture
operator|.
name|rectilinearCoordType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|contactTable
argument_list|)
expr_stmt|;
comment|// Register "CONTACT_PEEK" table. The
name|MockTable
name|contactPeekTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|customerSchema
argument_list|,
literal|"CONTACT_PEEK"
argument_list|,
literal|false
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"CONTACTNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"FNAME"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"LNAME"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"EMAIL"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"COORD"
argument_list|,
name|fixture
operator|.
name|rectilinearPeekCoordType
argument_list|)
expr_stmt|;
name|contactPeekTable
operator|.
name|addColumn
argument_list|(
literal|"COORD_NE"
argument_list|,
name|fixture
operator|.
name|rectilinearPeekNoExpandCoordType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|contactPeekTable
argument_list|)
expr_stmt|;
comment|// Register "ACCOUNT" table.
name|MockTable
name|accountTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|customerSchema
argument_list|,
literal|"ACCOUNT"
argument_list|,
literal|false
argument_list|,
literal|457
argument_list|)
decl_stmt|;
name|accountTable
operator|.
name|addColumn
argument_list|(
literal|"ACCTNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|accountTable
operator|.
name|addColumn
argument_list|(
literal|"TYPE"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|accountTable
operator|.
name|addColumn
argument_list|(
literal|"BALANCE"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|accountTable
argument_list|)
expr_stmt|;
comment|// Register "ORDERS" stream.
name|MockTable
name|ordersStream
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"ORDERS"
argument_list|,
literal|true
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|ordersStream
operator|.
name|addColumn
argument_list|(
literal|"ROWTIME"
argument_list|,
name|fixture
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|ordersStream
operator|.
name|addMonotonic
argument_list|(
literal|"ROWTIME"
argument_list|)
expr_stmt|;
name|ordersStream
operator|.
name|addColumn
argument_list|(
literal|"PRODUCTID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|ordersStream
operator|.
name|addColumn
argument_list|(
literal|"ORDERID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|ordersStream
argument_list|)
expr_stmt|;
comment|// Register "SHIPMENTS" stream.
comment|// "ROWTIME" is not column 0, just to mix things up.
name|MockTable
name|shipmentsStream
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"SHIPMENTS"
argument_list|,
literal|true
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|shipmentsStream
operator|.
name|addColumn
argument_list|(
literal|"ORDERID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|shipmentsStream
operator|.
name|addColumn
argument_list|(
literal|"ROWTIME"
argument_list|,
name|fixture
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|shipmentsStream
operator|.
name|addMonotonic
argument_list|(
literal|"ROWTIME"
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|shipmentsStream
argument_list|)
expr_stmt|;
comment|// Register "PRODUCTS" table.
name|MockTable
name|productsTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"PRODUCTS"
argument_list|,
literal|false
argument_list|,
literal|200D
argument_list|)
decl_stmt|;
name|productsTable
operator|.
name|addColumn
argument_list|(
literal|"PRODUCTID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|productsTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|productsTable
operator|.
name|addColumn
argument_list|(
literal|"SUPPLIERID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|productsTable
argument_list|)
expr_stmt|;
comment|// Register "PRODUCTS_TEMPORAL" table.
name|MockTable
name|productsTemporalTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"PRODUCTS_TEMPORAL"
argument_list|,
literal|false
argument_list|,
literal|200D
argument_list|,
literal|null
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|productsTemporalTable
operator|.
name|addColumn
argument_list|(
literal|"PRODUCTID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|productsTemporalTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|productsTemporalTable
operator|.
name|addColumn
argument_list|(
literal|"SUPPLIERID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|productsTemporalTable
operator|.
name|addColumn
argument_list|(
literal|"SYS_START"
argument_list|,
name|fixture
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|productsTemporalTable
operator|.
name|addColumn
argument_list|(
literal|"SYS_END"
argument_list|,
name|fixture
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|productsTemporalTable
argument_list|)
expr_stmt|;
comment|// Register "SUPPLIERS" table.
name|MockTable
name|suppliersTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|salesSchema
argument_list|,
literal|"SUPPLIERS"
argument_list|,
literal|false
argument_list|,
literal|10D
argument_list|)
decl_stmt|;
name|suppliersTable
operator|.
name|addColumn
argument_list|(
literal|"SUPPLIERID"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|suppliersTable
operator|.
name|addColumn
argument_list|(
literal|"NAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|suppliersTable
operator|.
name|addColumn
argument_list|(
literal|"CITY"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|suppliersTable
argument_list|)
expr_stmt|;
comment|// Register "EMP_20" and "EMPNULLABLES_20 views.
comment|// Same columns as "EMP" amd "EMPNULLABLES",
comment|// but "DEPTNO" not visible and set to 20 by default
comment|// and "SAL" is visible but must be greater than 1000,
comment|// which is the equivalent of:
comment|//   SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, SLACKER
comment|//   FROM EMP
comment|//   WHERE DEPTNO = 20 AND SAL> 1000
specifier|final
name|ImmutableIntList
name|m0
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|MockTable
name|emp20View
init|=
operator|new
name|MockViewTable
argument_list|(
name|this
argument_list|,
name|salesSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|salesSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"EMP_20"
argument_list|,
literal|false
argument_list|,
literal|600
argument_list|,
name|empTable
argument_list|,
name|m0
argument_list|,
literal|null
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|)
block|{
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
name|deptnoField
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|salField
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|deptnoField
operator|.
name|getType
argument_list|()
argument_list|,
name|deptnoField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|20L
argument_list|)
argument_list|,
name|deptnoField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|salField
operator|.
name|getType
argument_list|()
argument_list|,
name|salField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000L
argument_list|)
argument_list|,
name|salField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|nodes
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|salesSchema
operator|.
name|addTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|emp20View
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|fixture
operator|.
name|varchar10Type
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|fixture
operator|.
name|timestampType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|emp20View
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|fixture
operator|.
name|booleanType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|emp20View
argument_list|)
expr_stmt|;
name|MockTable
name|empNullables20View
init|=
operator|new
name|MockViewTable
argument_list|(
name|this
argument_list|,
name|salesSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|salesSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"EMPNULLABLES_20"
argument_list|,
literal|false
argument_list|,
literal|600
argument_list|,
name|empNullablesTable
argument_list|,
name|m0
argument_list|,
literal|null
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|)
block|{
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
name|deptnoField
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|salField
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|deptnoField
operator|.
name|getType
argument_list|()
argument_list|,
name|deptnoField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|20L
argument_list|)
argument_list|,
name|deptnoField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|salField
operator|.
name|getType
argument_list|()
argument_list|,
name|salField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000L
argument_list|)
argument_list|,
name|salField
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|nodes
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|salesSchema
operator|.
name|addTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|empNullables20View
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"ENAME"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"JOB"
argument_list|,
name|fixture
operator|.
name|varchar10TypeNull
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"MGR"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"HIREDATE"
argument_list|,
name|fixture
operator|.
name|timestampTypeNull
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"SAL"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"COMM"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
expr_stmt|;
name|empNullables20View
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|fixture
operator|.
name|booleanTypeNull
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empNullables20View
argument_list|)
expr_stmt|;
name|MockSchema
name|structTypeSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"STRUCT"
argument_list|)
decl_stmt|;
name|registerSchema
argument_list|(
name|structTypeSchema
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CompoundNameColumn
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"K0"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"C1"
argument_list|,
name|fixture
operator|.
name|varchar20Type
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"A0"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F2"
argument_list|,
literal|"A0"
argument_list|,
name|fixture
operator|.
name|booleanType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F0"
argument_list|,
literal|"C0"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"C0"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F0"
argument_list|,
literal|"C1"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"C2"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F2"
argument_list|,
literal|"C3"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CompoundNameColumnResolver
name|structTypeTableResolver
init|=
operator|new
name|CompoundNameColumnResolver
argument_list|(
name|columns
argument_list|,
literal|"F0"
argument_list|)
decl_stmt|;
specifier|final
name|MockTable
name|structTypeTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|structTypeSchema
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
name|structTypeTableResolver
argument_list|)
decl_stmt|;
for|for
control|(
name|CompoundNameColumn
name|column
range|:
name|columns
control|)
block|{
name|structTypeTable
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|registerTable
argument_list|(
name|structTypeTable
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CompoundNameColumn
argument_list|>
name|columnsNullable
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"K0"
argument_list|,
name|fixture
operator|.
name|varchar20TypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|""
argument_list|,
literal|"C1"
argument_list|,
name|fixture
operator|.
name|varchar20TypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"A0"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F2"
argument_list|,
literal|"A0"
argument_list|,
name|fixture
operator|.
name|booleanTypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F0"
argument_list|,
literal|"C0"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"C0"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F0"
argument_list|,
literal|"C1"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F1"
argument_list|,
literal|"C2"
argument_list|,
name|fixture
operator|.
name|intType
argument_list|)
argument_list|,
operator|new
name|CompoundNameColumn
argument_list|(
literal|"F2"
argument_list|,
literal|"C3"
argument_list|,
name|fixture
operator|.
name|intTypeNull
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|MockTable
name|structNullableTypeTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|structTypeSchema
argument_list|,
literal|"T_NULLABLES"
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|,
name|structTypeTableResolver
argument_list|)
decl_stmt|;
for|for
control|(
name|CompoundNameColumn
name|column
range|:
name|columnsNullable
control|)
block|{
name|structNullableTypeTable
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|registerTable
argument_list|(
name|structNullableTypeTable
argument_list|)
expr_stmt|;
comment|// Register "STRUCT.T_10" view.
comment|// Same columns as "STRUCT.T",
comment|// but "F0.C0" is set to 10 by default,
comment|// which is the equivalent of:
comment|//   SELECT *
comment|//   FROM T
comment|//   WHERE F0.C0 = 10
comment|// This table uses MockViewTable which does not populate the constrained columns with default
comment|// values on INSERT.
specifier|final
name|ImmutableIntList
name|m1
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|MockTable
name|struct10View
init|=
operator|new
name|MockViewTable
argument_list|(
name|this
argument_list|,
name|structTypeSchema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|structTypeSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|"T_10"
argument_list|,
literal|false
argument_list|,
literal|20
argument_list|,
name|structTypeTable
argument_list|,
name|m1
argument_list|,
name|structTypeTableResolver
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
specifier|final
name|RelDataTypeField
name|c0Field
init|=
name|tableRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|c0Field
operator|.
name|getType
argument_list|()
argument_list|,
name|c0Field
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|10L
argument_list|)
argument_list|,
name|c0Field
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|structTypeSchema
operator|.
name|addTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|struct10View
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CompoundNameColumn
name|column
range|:
name|columns
control|)
block|{
name|struct10View
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|registerTable
argument_list|(
name|struct10View
argument_list|)
expr_stmt|;
name|registerTablesWithRollUp
argument_list|(
name|salesSchema
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

