begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|CachingRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ChainedRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|DefaultRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ReflectiveRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelColumnOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link DefaultRelMetadataProvider}. See  * {@link SqlToRelTestBase} class comments for details on the schema used. Note  * that no optimizer rules are fired on the translation of the SQL into  * relational algebra (e.g. join conditions in the WHERE clause will look like  * filters), so it's necessary to phrase the SQL carefully.  */
end_comment

begin_class
specifier|public
class|class
name|RelMetadataTest
extends|extends
name|SqlToRelTestBase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|double
name|EPSILON
init|=
literal|1.0e-5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_EQUAL_SELECTIVITY
init|=
literal|0.15
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
init|=
name|DEFAULT_EQUAL_SELECTIVITY
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_COMP_SELECTIVITY
init|=
literal|0.5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_NOTNULL_SELECTIVITY
init|=
literal|0.9
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_SELECTIVITY
init|=
literal|0.25
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|EMP_SIZE
init|=
literal|1000.0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEPT_SIZE
init|=
literal|100.0
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|private
specifier|static
name|Matcher
argument_list|<
name|?
super|super
name|Number
argument_list|>
name|nearTo
parameter_list|(
name|Number
name|v
parameter_list|,
name|Number
name|epsilon
parameter_list|)
block|{
return|return
name|CoreMatchers
operator|.
name|equalTo
argument_list|(
name|v
argument_list|)
return|;
comment|// TODO: use epsilon
block|}
comment|// ----------------------------------------------------------------------
comment|// Tests for getPercentageOriginalRows
comment|// ----------------------------------------------------------------------
specifier|private
name|RelNode
name|convertSql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|DefaultRelMetadataProvider
name|provider
init|=
operator|new
name|DefaultRelMetadataProvider
argument_list|()
decl_stmt|;
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
return|return
name|rel
return|;
block|}
specifier|private
name|void
name|checkPercentageOriginalRows
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|checkPercentageOriginalRows
argument_list|(
name|sql
argument_list|,
name|expected
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPercentageOriginalRows
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|,
name|double
name|epsilon
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getPercentageOriginalRows
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsTableOnly
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from dept"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsAgg
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select deptno from dept group by deptno"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsOneFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from dept where deptno = 20"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsTwoFilters
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from dept where name='X')\n"
operator|+
literal|"where deptno = 20"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsRedundantFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from dept where deptno=20)\n"
operator|+
literal|"where deptno = 20"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsJoin
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from emp inner join dept on emp.deptno=dept.deptno"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsJoinTwoFilters
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from emp where deptno=10) e\n"
operator|+
literal|"inner join (select * from dept where deptno=10) d\n"
operator|+
literal|"on e.deptno=d.deptno"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsUnionNoFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select name from dept union all select ename from emp"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsUnionLittleFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select name from dept where deptno=20"
operator|+
literal|" union all select ename from emp"
argument_list|,
operator|(
operator|(
name|DEPT_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
operator|)
operator|+
name|EMP_SIZE
operator|)
operator|/
operator|(
name|DEPT_SIZE
operator|+
name|EMP_SIZE
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsUnionBigFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select name from dept"
operator|+
literal|" union all select ename from emp where deptno=20"
argument_list|,
operator|(
operator|(
name|EMP_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
operator|)
operator|+
name|DEPT_SIZE
operator|)
operator|/
operator|(
name|DEPT_SIZE
operator|+
name|EMP_SIZE
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------------
comment|// Tests for getColumnOrigins
comment|// ----------------------------------------------------------------------
specifier|private
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|checkColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
return|return
name|RelMetadataQuery
operator|.
name|getColumnOrigins
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkNoColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|result
init|=
name|checkColumnOrigin
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkColumnOrigin
parameter_list|(
name|RelColumnOrigin
name|rco
parameter_list|,
name|String
name|expectedTableName
parameter_list|,
name|String
name|expectedColumnName
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|RelOptTable
name|actualTable
init|=
name|rco
operator|.
name|getOriginTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualTableName
init|=
name|actualTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|actualTableName
argument_list|)
argument_list|,
name|expectedTableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|actualTable
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|rco
operator|.
name|getOriginColumnOrdinal
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|expectedColumnName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rco
operator|.
name|isDerived
argument_list|()
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSingleColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedTableName
parameter_list|,
name|String
name|expectedColumnName
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|result
init|=
name|checkColumnOrigin
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RelColumnOrigin
name|rco
init|=
name|result
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName
argument_list|,
name|expectedColumnName
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
comment|// WARNING:  this requires the two table names to be different
specifier|private
name|void
name|checkTwoColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedTableName1
parameter_list|,
name|String
name|expectedColumnName1
parameter_list|,
name|String
name|expectedTableName2
parameter_list|,
name|String
name|expectedColumnName2
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|result
init|=
name|checkColumnOrigin
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RelColumnOrigin
name|rco
range|:
name|result
control|)
block|{
name|RelOptTable
name|actualTable
init|=
name|rco
operator|.
name|getOriginTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualTableName
init|=
name|actualTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|String
name|actualUnqualifiedName
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|actualTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualUnqualifiedName
operator|.
name|equals
argument_list|(
name|expectedTableName1
argument_list|)
condition|)
block|{
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName1
argument_list|,
name|expectedColumnName1
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName2
argument_list|,
name|expectedColumnName2
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsTableOnly
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from dept"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsExpression
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select upper(name) as dname from dept"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsDyadicExpression
parameter_list|()
block|{
name|checkTwoColumnOrigin
argument_list|(
literal|"select name||ename from dept,emp"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsConstant
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"select 'Minstrelsy' as dname from dept"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsFilter
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from dept where deptno=10"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinLeft
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select ename from emp,dept"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinRight
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from emp,dept"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinOuter
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from emp left outer join dept"
operator|+
literal|" on emp.deptno = dept.deptno"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinFullOuter
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from emp full outer join dept"
operator|+
literal|" on emp.deptno = dept.deptno"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggKey
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name,count(deptno) from dept group by name"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggReduced
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"select count(deptno),name from dept group by name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggCountNullable
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select count(mgr),ename from emp group by ename"
argument_list|,
literal|"EMP"
argument_list|,
literal|"MGR"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggCountStar
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"select count(*),name from dept group by name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsValues
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"values(1,2,3)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsUnion
parameter_list|()
block|{
name|checkTwoColumnOrigin
argument_list|(
literal|"select name from dept union all select ename from emp"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsSelfUnion
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select ename from emp union all select ename from emp"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRowCount
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testRowCountEmp
parameter_list|()
block|{
name|checkRowCount
argument_list|(
literal|"select * from emp"
argument_list|,
name|EMP_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testRowCountDept
parameter_list|()
block|{
name|checkRowCount
argument_list|(
literal|"select * from dept"
argument_list|,
name|DEPT_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testRowCountCartesian
parameter_list|()
block|{
name|checkRowCount
argument_list|(
literal|"select * from emp,dept"
argument_list|,
name|EMP_SIZE
operator|*
name|DEPT_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testRowCountJoin
parameter_list|()
block|{
name|checkRowCount
argument_list|(
literal|"select * from emp inner join dept on emp.deptno = dept.deptno"
argument_list|,
name|EMP_SIZE
operator|*
name|DEPT_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testRowCountUnion
parameter_list|()
block|{
name|checkRowCount
argument_list|(
literal|"select ename from emp union all select name from dept"
argument_list|,
name|EMP_SIZE
operator|+
name|DEPT_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testRowCountFilter
parameter_list|()
block|{
name|checkRowCount
argument_list|(
literal|"select * from emp where ename='Mathilda'"
argument_list|,
name|EMP_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSort
parameter_list|()
block|{
name|checkRowCount
argument_list|(
literal|"select * from emp order by ename"
argument_list|,
name|EMP_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFilterSelectivity
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityIsNotNullFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where mgr is not null"
argument_list|,
name|DEFAULT_NOTNULL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityIsNotNullFilterOnNotNullColumn
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where deptno is not null"
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityComparisonFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where deptno> 10"
argument_list|,
name|DEFAULT_COMP_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityAndFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where ename = 'foo' and deptno = 10"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityOrFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where ename = 'foo' or deptno = 10"
argument_list|,
name|DEFAULT_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRelSelectivity
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityRedundantFilter
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp where deptno = 10"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivitySort
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp where deptno = 10"
operator|+
literal|"order by ename"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityUnion
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from emp union all select * from emp) "
operator|+
literal|"where deptno = 10"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityAgg
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno, count(*) from emp where deptno> 10 "
operator|+
literal|"group by deptno having count(*) = 0"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_COMP_SELECTIVITY
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
comment|/** Checks that we can cache a metadata request that includes a null    * argument. */
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityAggCached
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno, count(*) from emp where deptno> 10 "
operator|+
literal|"group by deptno having count(*) = 0"
argument_list|)
decl_stmt|;
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
operator|new
name|CachingRelMetadataProvider
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataProvider
argument_list|()
argument_list|,
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|nearTo
argument_list|(
name|DEFAULT_COMP_SELECTIVITY
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDistinctRowCountTable
parameter_list|()
block|{
comment|// no unique key information is available so return null
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp where deptno = 10"
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|groupKey
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getDistinctRowCount
argument_list|(
name|rel
argument_list|,
name|groupKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomProvider
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|buf
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ColTypeImpl
operator|.
name|THREAD_LIST
operator|.
name|set
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno, count(*) from emp where deptno> 10 "
operator|+
literal|"group by deptno having count(*) = 0"
argument_list|)
decl_stmt|;
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
name|ChainedRelMetadataProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ColTypeImpl
operator|.
name|SOURCE
argument_list|,
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataProvider
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Top node is a filter. Its metadata uses getColType(RelNode, int).
name|assertThat
argument_list|(
name|rel
argument_list|,
name|instanceOf
argument_list|(
name|LogicalFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rel
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-rel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rel
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EXPR$1-rel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next node is an aggregate. Its metadata uses
comment|// getColType(LogicalAggregate, int).
specifier|final
name|RelNode
name|input
init|=
name|rel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|input
argument_list|,
name|instanceOf
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
comment|// There is no caching. Another request causes another call to the provider.
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now add a cache. Only the first request for each piece of metadata
comment|// generates a new call to the provider.
specifier|final
name|RelOptPlanner
name|planner
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
decl_stmt|;
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
operator|new
name|CachingRelMetadataProvider
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataProvider
argument_list|()
argument_list|,
name|planner
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EXPR$1-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EXPR$1-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// With a different timestamp, a metadata item is re-computed on first call.
name|long
name|timestamp
init|=
name|planner
operator|.
name|getRelMetadataTimestamp
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timestamp
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MockRelOptPlanner
operator|)
name|planner
operator|)
operator|.
name|setRelMetadataTimestamp
argument_list|(
name|timestamp
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Custom metadata interface. */
specifier|public
interface|interface
name|ColType
extends|extends
name|Metadata
block|{
name|String
name|getColType
parameter_list|(
name|int
name|column
parameter_list|)
function_decl|;
block|}
comment|/** A provider for {@link org.apache.calcite.test.RelMetadataTest.ColType} via    * reflection. */
specifier|public
specifier|static
class|class
name|ColTypeImpl
block|{
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|THREAD_LIST
init|=
operator|new
name|ThreadLocal
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Method
name|METHOD
decl_stmt|;
static|static
block|{
try|try
block|{
name|METHOD
operator|=
name|ColType
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getColType"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|METHOD
argument_list|,
operator|new
name|ColTypeImpl
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Implementation of {@link ColType#getColType(int)} for      * {@link org.apache.calcite.rel.logical.LogicalAggregate}, called via      * reflection. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|String
name|getColType
parameter_list|(
name|Aggregate
name|rel
parameter_list|,
name|int
name|column
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|column
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"-agg"
decl_stmt|;
name|THREAD_LIST
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
comment|/** Implementation of {@link ColType#getColType(int)} for      * {@link RelNode}, called via reflection. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|String
name|getColType
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|int
name|column
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|column
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"-rel"
decl_stmt|;
name|THREAD_LIST
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RelMetadataTest.java
end_comment

end_unit

