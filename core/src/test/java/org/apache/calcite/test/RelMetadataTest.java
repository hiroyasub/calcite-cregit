begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
operator|.
name|EnumerableMergeJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|CachingRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ChainedRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|DefaultRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ReflectiveRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelColumnOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link DefaultRelMetadataProvider}. See  * {@link SqlToRelTestBase} class comments for details on the schema used. Note  * that no optimizer rules are fired on the translation of the SQL into  * relational algebra (e.g. join conditions in the WHERE clause will look like  * filters), so it's necessary to phrase the SQL carefully.  */
end_comment

begin_class
specifier|public
class|class
name|RelMetadataTest
extends|extends
name|SqlToRelTestBase
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|double
name|EPSILON
init|=
literal|1.0e-5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_EQUAL_SELECTIVITY
init|=
literal|0.15
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
init|=
name|DEFAULT_EQUAL_SELECTIVITY
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_COMP_SELECTIVITY
init|=
literal|0.5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_NOTNULL_SELECTIVITY
init|=
literal|0.9
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_SELECTIVITY
init|=
literal|0.25
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|EMP_SIZE
init|=
literal|14d
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEPT_SIZE
init|=
literal|4d
decl_stmt|;
comment|//~ Methods ----------------------------------------------------------------
specifier|private
specifier|static
name|Matcher
argument_list|<
name|?
super|super
name|Number
argument_list|>
name|nearTo
parameter_list|(
name|Number
name|v
parameter_list|,
name|Number
name|epsilon
parameter_list|)
block|{
return|return
name|equalTo
argument_list|(
name|v
argument_list|)
return|;
comment|// TODO: use epsilon
block|}
comment|// ----------------------------------------------------------------------
comment|// Tests for getPercentageOriginalRows
comment|// ----------------------------------------------------------------------
specifier|private
name|RelNode
name|convertSql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
specifier|final
name|RelRoot
name|root
init|=
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|DefaultRelMetadataProvider
name|provider
init|=
operator|new
name|DefaultRelMetadataProvider
argument_list|()
decl_stmt|;
name|root
operator|.
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
return|return
name|root
operator|.
name|rel
return|;
block|}
specifier|private
name|void
name|checkPercentageOriginalRows
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|checkPercentageOriginalRows
argument_list|(
name|sql
argument_list|,
name|expected
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPercentageOriginalRows
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|,
name|double
name|epsilon
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getPercentageOriginalRows
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsTableOnly
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from dept"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsAgg
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select deptno from dept group by deptno"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsOneFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from dept where deptno = 20"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsTwoFilters
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from dept where name='X')\n"
operator|+
literal|"where deptno = 20"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsRedundantFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from dept where deptno=20)\n"
operator|+
literal|"where deptno = 20"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsJoin
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from emp inner join dept on emp.deptno=dept.deptno"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsJoinTwoFilters
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from emp where deptno=10) e\n"
operator|+
literal|"inner join (select * from dept where deptno=10) d\n"
operator|+
literal|"on e.deptno=d.deptno"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsUnionNoFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select name from dept union all select ename from emp"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsUnionLittleFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select name from dept where deptno=20"
operator|+
literal|" union all select ename from emp"
argument_list|,
operator|(
operator|(
name|DEPT_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
operator|)
operator|+
name|EMP_SIZE
operator|)
operator|/
operator|(
name|DEPT_SIZE
operator|+
name|EMP_SIZE
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPercentageOriginalRowsUnionBigFilter
parameter_list|()
block|{
name|checkPercentageOriginalRows
argument_list|(
literal|"select name from dept"
operator|+
literal|" union all select ename from emp where deptno=20"
argument_list|,
operator|(
operator|(
name|EMP_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
operator|)
operator|+
name|DEPT_SIZE
operator|)
operator|/
operator|(
name|DEPT_SIZE
operator|+
name|EMP_SIZE
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------------
comment|// Tests for getColumnOrigins
comment|// ----------------------------------------------------------------------
specifier|private
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|checkColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
return|return
name|RelMetadataQuery
operator|.
name|getColumnOrigins
argument_list|(
name|rel
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkNoColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|result
init|=
name|checkColumnOrigin
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkColumnOrigin
parameter_list|(
name|RelColumnOrigin
name|rco
parameter_list|,
name|String
name|expectedTableName
parameter_list|,
name|String
name|expectedColumnName
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|RelOptTable
name|actualTable
init|=
name|rco
operator|.
name|getOriginTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualTableName
init|=
name|actualTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|actualTableName
argument_list|)
argument_list|,
name|expectedTableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|actualTable
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|rco
operator|.
name|getOriginColumnOrdinal
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|expectedColumnName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rco
operator|.
name|isDerived
argument_list|()
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSingleColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedTableName
parameter_list|,
name|String
name|expectedColumnName
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|result
init|=
name|checkColumnOrigin
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RelColumnOrigin
name|rco
init|=
name|result
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName
argument_list|,
name|expectedColumnName
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
comment|// WARNING:  this requires the two table names to be different
specifier|private
name|void
name|checkTwoColumnOrigin
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedTableName1
parameter_list|,
name|String
name|expectedColumnName1
parameter_list|,
name|String
name|expectedTableName2
parameter_list|,
name|String
name|expectedColumnName2
parameter_list|,
name|boolean
name|expectedDerived
parameter_list|)
block|{
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|result
init|=
name|checkColumnOrigin
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RelColumnOrigin
name|rco
range|:
name|result
control|)
block|{
name|RelOptTable
name|actualTable
init|=
name|rco
operator|.
name|getOriginTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualTableName
init|=
name|actualTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|String
name|actualUnqualifiedName
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|actualTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualUnqualifiedName
operator|.
name|equals
argument_list|(
name|expectedTableName1
argument_list|)
condition|)
block|{
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName1
argument_list|,
name|expectedColumnName1
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkColumnOrigin
argument_list|(
name|rco
argument_list|,
name|expectedTableName2
argument_list|,
name|expectedColumnName2
argument_list|,
name|expectedDerived
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsTableOnly
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from dept"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsExpression
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select upper(name) as dname from dept"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsDyadicExpression
parameter_list|()
block|{
name|checkTwoColumnOrigin
argument_list|(
literal|"select name||ename from dept,emp"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsConstant
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"select 'Minstrelsy' as dname from dept"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsFilter
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from dept where deptno=10"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinLeft
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select ename from emp,dept"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinRight
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from emp,dept"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinOuter
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from emp left outer join dept"
operator|+
literal|" on emp.deptno = dept.deptno"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsJoinFullOuter
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name as dname from emp full outer join dept"
operator|+
literal|" on emp.deptno = dept.deptno"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggKey
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select name,count(deptno) from dept group by name"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggReduced
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"select count(deptno),name from dept group by name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggCountNullable
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select count(mgr),ename from emp group by ename"
argument_list|,
literal|"EMP"
argument_list|,
literal|"MGR"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsAggCountStar
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"select count(*),name from dept group by name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsValues
parameter_list|()
block|{
name|checkNoColumnOrigin
argument_list|(
literal|"values(1,2,3)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsUnion
parameter_list|()
block|{
name|checkTwoColumnOrigin
argument_list|(
literal|"select name from dept union all select ename from emp"
argument_list|,
literal|"DEPT"
argument_list|,
literal|"NAME"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnOriginsSelfUnion
parameter_list|()
block|{
name|checkSingleColumnOrigin
argument_list|(
literal|"select ename from emp union all select ename from emp"
argument_list|,
literal|"EMP"
argument_list|,
literal|"ENAME"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRowCount
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkMaxRowCount
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getMaxRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountEmp
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountDept
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from dept"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|DEPT_SIZE
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountValues
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (values (1), (2)) as t(c)"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountCartesian
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp,dept"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
operator|*
name|DEPT_SIZE
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountJoin
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp\n"
operator|+
literal|"inner join dept on emp.deptno = dept.deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
operator|*
name|DEPT_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountJoinFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 14) as emp\n"
operator|+
literal|"inner join (select * from dept limit 4) as dept\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
operator|*
name|DEPT_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|56D
argument_list|)
expr_stmt|;
comment|// 4 * 14
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountJoinEmptyFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 0) as emp\n"
operator|+
literal|"inner join (select * from dept limit 4) as dept\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
comment|// 0, rounded up to row count's minimum 1
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
comment|// 0 * 4
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountLeftJoinEmptyFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 0) as emp\n"
operator|+
literal|"left join (select * from dept limit 4) as dept\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
comment|// 0, rounded up to row count's minimum 1
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
comment|// 0 * 4
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountRightJoinEmptyFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 0) as emp\n"
operator|+
literal|"right join (select * from dept limit 4) as dept\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
comment|// 0, rounded up to row count's minimum 1
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|4D
argument_list|)
expr_stmt|;
comment|// 1 * 4
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountJoinFiniteEmpty
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 7) as emp\n"
operator|+
literal|"inner join (select * from dept limit 0) as dept\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
comment|// 0, rounded up to row count's minimum 1
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
comment|// 7 * 0
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountJoinEmptyEmpty
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 0) as emp\n"
operator|+
literal|"inner join (select * from dept limit 0) as dept\n"
operator|+
literal|"on emp.deptno = dept.deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
comment|// 0, rounded up to row count's minimum 1
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
comment|// 0 * 0
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountUnion
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select ename from emp\n"
operator|+
literal|"union all\n"
operator|+
literal|"select name from dept"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
operator|+
name|DEPT_SIZE
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountUnionOnFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select ename from (select * from emp limit 100)\n"
operator|+
literal|"union all\n"
operator|+
literal|"select name from (select * from dept limit 40)"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
operator|+
name|DEPT_SIZE
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|140D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountIntersectOnFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select ename from (select * from emp limit 100)\n"
operator|+
literal|"intersect\n"
operator|+
literal|"select name from (select * from dept limit 40)"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|EMP_SIZE
argument_list|,
name|DEPT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|40D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountMinusOnFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select ename from (select * from emp limit 100)\n"
operator|+
literal|"except\n"
operator|+
literal|"select name from (select * from dept limit 40)"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|4D
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|100D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountFilter
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp where ename='Mathilda'"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountFilterOnFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 10)\n"
operator|+
literal|"where ename='Mathilda'"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|10D
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|10D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSort
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp order by ename"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSortHighLimit
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp order by ename limit 123456"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
name|EMP_SIZE
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|123456D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSortHighOffset
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp order by ename offset 123456"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSortHighOffsetLimit
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp order by ename limit 5 offset 123456"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|5D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSortLimit
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp order by ename limit 10"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|10d
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|10d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSortLimit0
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp order by ename limit 10"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|10d
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|10d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSortLimitOffset
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from emp order by ename limit 10 offset 5"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|9D
argument_list|)
expr_stmt|;
comment|// 14 - 5
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|10d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountSortLimitOffsetOnFinite
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from (select * from emp limit 12)\n"
operator|+
literal|"order by ename limit 20 offset 5"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|7d
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|7d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountAggregate
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select deptno from emp group by deptno"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1.4D
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountAggregateGroupingSets
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select deptno from emp\n"
operator|+
literal|"group by grouping sets ((deptno), (empno, deptno))"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|2.8D
argument_list|)
expr_stmt|;
comment|// EMP_SIZE / 10 * 2
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountAggregateGroupingSetsOneEmpty
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select deptno from emp\n"
operator|+
literal|"group by grouping sets ((deptno), ())"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|2.8D
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountAggregateEmptyKey
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select count(*) from emp"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountAggregateEmptyKeyOnEmptyTable
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select count(*) from (select * from emp limit 0)"
decl_stmt|;
name|checkRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
name|checkMaxRowCount
argument_list|(
name|sql
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFilterSelectivity
parameter_list|(
name|String
name|sql
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityIsNotNullFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where mgr is not null"
argument_list|,
name|DEFAULT_NOTNULL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityIsNotNullFilterOnNotNullColumn
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where deptno is not null"
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityComparisonFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where deptno> 10"
argument_list|,
name|DEFAULT_COMP_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityAndFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where ename = 'foo' and deptno = 10"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY_SQUARED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityOrFilter
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp where ename = 'foo' or deptno = 10"
argument_list|,
name|DEFAULT_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityJoin
parameter_list|()
block|{
name|checkFilterSelectivity
argument_list|(
literal|"select * from emp join dept using (deptno) where ename = 'foo'"
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRelSelectivity
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|double
name|expected
parameter_list|)
block|{
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityRedundantFilter
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp where deptno = 10"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivitySort
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp where deptno = 10"
operator|+
literal|"order by ename"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityUnion
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from (\n"
operator|+
literal|"  select * from emp union all select * from emp) "
operator|+
literal|"where deptno = 10"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityAgg
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno, count(*) from emp where deptno> 10 "
operator|+
literal|"group by deptno having count(*) = 0"
argument_list|)
decl_stmt|;
name|checkRelSelectivity
argument_list|(
name|rel
argument_list|,
name|DEFAULT_COMP_SELECTIVITY
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|)
expr_stmt|;
block|}
comment|/** Checks that we can cache a metadata request that includes a null    * argument. */
annotation|@
name|Test
specifier|public
name|void
name|testSelectivityAggCached
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno, count(*) from emp where deptno> 10 "
operator|+
literal|"group by deptno having count(*) = 0"
argument_list|)
decl_stmt|;
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
operator|new
name|CachingRelMetadataProvider
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataProvider
argument_list|()
argument_list|,
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getSelectivity
argument_list|(
name|rel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|nearTo
argument_list|(
name|DEFAULT_COMP_SELECTIVITY
operator|*
name|DEFAULT_EQUAL_SELECTIVITY
argument_list|,
name|EPSILON
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDistinctRowCountTable
parameter_list|()
block|{
comment|// no unique key information is available so return null
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp where deptno = 10"
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|groupKey
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
decl_stmt|;
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getDistinctRowCount
argument_list|(
name|rel
argument_list|,
name|groupKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDistinctRowCountTableEmptyKey
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp where deptno = 10"
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|groupKey
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
decl_stmt|;
comment|// empty key
name|Double
name|result
init|=
name|RelMetadataQuery
operator|.
name|getDistinctRowCount
argument_list|(
name|rel
argument_list|,
name|groupKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
literal|1D
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Asserts that {@link RelMetadataQuery#getUniqueKeys(RelNode)}    * and {@link RelMetadataQuery#areColumnsUnique(RelNode, ImmutableBitSet)}    * return consistent results. */
specifier|private
name|void
name|assertUniqueConsistent
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|uniqueKeys
init|=
name|RelMetadataQuery
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|allCols
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|key
range|:
name|allCols
operator|.
name|powerSet
argument_list|()
control|)
block|{
name|Boolean
name|result2
init|=
name|RelMetadataQuery
operator|.
name|areColumnsUnique
argument_list|(
name|rel
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result2
operator|==
literal|null
operator|||
name|result2
operator|==
name|isUnique
argument_list|(
name|uniqueKeys
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns whether {@code keys} is unique, that is, whether it or a superset    * is in {@code keySets}. */
specifier|private
name|boolean
name|isUnique
parameter_list|(
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|uniqueKeys
parameter_list|,
name|ImmutableBitSet
name|key
parameter_list|)
block|{
for|for
control|(
name|ImmutableBitSet
name|uniqueKey
range|:
name|uniqueKeys
control|)
block|{
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
name|uniqueKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-509">[CALCITE-509]    * "RelMdColumnUniqueness uses ImmutableBitSet.Builder twice, gets    * NullPointerException"</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testJoinUniqueKeys
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select * from emp join dept using (deptno)"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|result
init|=
name|RelMetadataQuery
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertUniqueConsistent
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByEmptyUniqueKeys
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select count(*) from emp"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|result
init|=
name|RelMetadataQuery
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertUniqueConsistent
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupByEmptyHavingUniqueKeys
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select count(*) from emp where 1 = 1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|result
init|=
name|RelMetadataQuery
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertUniqueConsistent
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupBy
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno, count(*), sum(sal) from emp\n"
operator|+
literal|"group by deptno"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|result
init|=
name|RelMetadataQuery
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertUniqueConsistent
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnion
parameter_list|()
block|{
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno from emp\n"
operator|+
literal|"union\n"
operator|+
literal|"select deptno from dept"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|result
init|=
name|RelMetadataQuery
operator|.
name|getUniqueKeys
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|CoreMatchers
operator|.
expr|<
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
operator|>
name|equalTo
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertUniqueConsistent
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomProvider
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|buf
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ColTypeImpl
operator|.
name|THREAD_LIST
operator|.
name|set
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
literal|"select deptno, count(*) from emp where deptno> 10 "
operator|+
literal|"group by deptno having count(*) = 0"
argument_list|)
decl_stmt|;
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
name|ChainedRelMetadataProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ColTypeImpl
operator|.
name|SOURCE
argument_list|,
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataProvider
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Top node is a filter. Its metadata uses getColType(RelNode, int).
name|assertThat
argument_list|(
name|rel
argument_list|,
name|instanceOf
argument_list|(
name|LogicalFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rel
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-rel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rel
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EXPR$1-rel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next node is an aggregate. Its metadata uses
comment|// getColType(LogicalAggregate, int).
specifier|final
name|RelNode
name|input
init|=
name|rel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|input
argument_list|,
name|instanceOf
argument_list|(
name|LogicalAggregate
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
comment|// There is no caching. Another request causes another call to the provider.
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[DEPTNO-rel, EXPR$1-rel, DEPTNO-agg]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now add a cache. Only the first request for each piece of metadata
comment|// generates a new call to the provider.
specifier|final
name|RelOptPlanner
name|planner
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
decl_stmt|;
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
operator|new
name|CachingRelMetadataProvider
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataProvider
argument_list|()
argument_list|,
name|planner
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EXPR$1-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"EXPR$1-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// With a different timestamp, a metadata item is re-computed on first call.
name|long
name|timestamp
init|=
name|planner
operator|.
name|getRelMetadataTimestamp
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timestamp
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MockRelOptPlanner
operator|)
name|planner
operator|)
operator|.
name|setRelMetadataTimestamp
argument_list|(
name|timestamp
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|metadata
argument_list|(
name|ColType
operator|.
name|class
argument_list|)
operator|.
name|getColType
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DEPTNO-agg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for    * {@link org.apache.calcite.rel.metadata.RelMdCollation#project}    * and other helper functions for deducing collations. */
annotation|@
name|Test
specifier|public
name|void
name|testCollation
parameter_list|()
block|{
specifier|final
name|Project
name|rel
init|=
operator|(
name|Project
operator|)
name|convertSql
argument_list|(
literal|"select * from emp, dept"
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|rel
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|empTable
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|deptTable
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Frameworks
operator|.
name|withPlanner
argument_list|(
operator|new
name|Frameworks
operator|.
name|PlannerAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|relOptSchema
parameter_list|,
name|SchemaPlus
name|rootSchema
parameter_list|)
block|{
name|checkCollation
argument_list|(
name|cluster
argument_list|,
name|empTable
argument_list|,
name|deptTable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCollation
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptTable
name|empTable
parameter_list|,
name|RelOptTable
name|deptTable
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|LogicalTableScan
name|empScan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|empTable
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collations
init|=
name|RelMdCollation
operator|.
name|table
argument_list|(
name|empScan
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// ORDER BY field#0 ASC, field#1 ASC
specifier|final
name|RelCollation
name|collation
init|=
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|RelFieldCollation
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|collations
operator|=
name|RelMdCollation
operator|.
name|sort
argument_list|(
name|collation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Sort
name|empSort
init|=
name|LogicalSort
operator|.
name|create
argument_list|(
name|empScan
argument_list|,
name|collation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|empSort
argument_list|,
literal|1
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|empSort
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|empSort
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|empSort
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|collations
operator|=
name|RelMdCollation
operator|.
name|project
argument_list|(
name|empSort
argument_list|,
name|projects
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LogicalProject
name|project
init|=
name|LogicalProject
operator|.
name|create
argument_list|(
name|empSort
argument_list|,
name|projects
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LogicalTableScan
name|deptScan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|deptTable
argument_list|)
decl_stmt|;
specifier|final
name|RelCollation
name|deptCollation
init|=
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|RelFieldCollation
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Sort
name|deptSort
init|=
name|LogicalSort
operator|.
name|create
argument_list|(
name|deptScan
argument_list|,
name|deptCollation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableIntList
name|leftKeys
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableIntList
name|rightKeys
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|EnumerableMergeJoin
name|join
decl_stmt|;
try|try
block|{
name|join
operator|=
name|EnumerableMergeJoin
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|deptSort
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|collations
operator|=
name|RelMdCollation
operator|.
name|mergeJoin
argument_list|(
name|project
argument_list|,
name|deptSort
argument_list|,
name|leftKeys
argument_list|,
name|rightKeys
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
argument_list|,
name|equalTo
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
operator|.
name|getTraits
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Values (empty)
name|collations
operator|=
name|RelMdCollation
operator|.
name|values
argument_list|(
name|empTable
operator|.
name|getRowType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[[0, 1, 2, 3, 4, 5, 6, 7, 8], "
operator|+
literal|"[1, 2, 3, 4, 5, 6, 7, 8], "
operator|+
literal|"[2, 3, 4, 5, 6, 7, 8], "
operator|+
literal|"[3, 4, 5, 6, 7, 8], "
operator|+
literal|"[4, 5, 6, 7, 8], "
operator|+
literal|"[5, 6, 7, 8], "
operator|+
literal|"[6, 7, 8], "
operator|+
literal|"[7, 8], "
operator|+
literal|"[8]]"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LogicalValues
name|emptyValues
init|=
name|LogicalValues
operator|.
name|createEmpty
argument_list|(
name|cluster
argument_list|,
name|empTable
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|RelMetadataQuery
operator|.
name|collations
argument_list|(
name|emptyValues
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|collations
argument_list|)
argument_list|)
expr_stmt|;
comment|// Values (non-empty)
specifier|final
name|RelDataType
name|rowType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"d"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// sort keys are [a], [a, b], [a, b, c], [a, b, c, d], [a, c], [b], [b, a],
comment|//   [b, d]
comment|// algorithm deduces [a, b, c, d], [b, d] which is a useful sub-set
name|addRow
argument_list|(
name|tuples
argument_list|,
name|rexBuilder
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|tuples
argument_list|,
name|rexBuilder
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|tuples
argument_list|,
name|rexBuilder
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|tuples
argument_list|,
name|rexBuilder
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|collations
operator|=
name|RelMdCollation
operator|.
name|values
argument_list|(
name|rowType
argument_list|,
name|tuples
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collations
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[[0, 1, 2, 3], [1, 3]]"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LogicalValues
name|values
init|=
name|LogicalValues
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|tuples
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|RelMetadataQuery
operator|.
name|collations
argument_list|(
name|values
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|collations
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRow
parameter_list|(
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|builder
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexLiteral
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
specifier|final
name|RexLiteral
name|literal
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|literal
operator|=
operator|(
name|RexLiteral
operator|)
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|literal
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|literal
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for    * {@link org.apache.calcite.rel.metadata.RelMetadataQuery#getAverageColumnSizes(org.apache.calcite.rel.RelNode)},    * {@link org.apache.calcite.rel.metadata.RelMetadataQuery#getAverageRowSize(org.apache.calcite.rel.RelNode)}. */
annotation|@
name|Test
specifier|public
name|void
name|testAverageRowSize
parameter_list|()
block|{
specifier|final
name|Project
name|rel
init|=
operator|(
name|Project
operator|)
name|convertSql
argument_list|(
literal|"select * from emp, dept"
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|rel
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|empTable
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|deptTable
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Frameworks
operator|.
name|withPlanner
argument_list|(
operator|new
name|Frameworks
operator|.
name|PlannerAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|relOptSchema
parameter_list|,
name|SchemaPlus
name|rootSchema
parameter_list|)
block|{
name|checkAverageRowSize
argument_list|(
name|cluster
argument_list|,
name|empTable
argument_list|,
name|deptTable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAverageRowSize
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptTable
name|empTable
parameter_list|,
name|RelOptTable
name|deptTable
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|LogicalTableScan
name|empScan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|empTable
argument_list|)
decl_stmt|;
name|Double
name|rowSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|empScan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|columnSizes
init|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|empScan
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|40.0
argument_list|,
literal|20.0
argument_list|,
literal|4.0
argument_list|,
literal|8.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|1.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|89.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty values
specifier|final
name|LogicalValues
name|emptyValues
init|=
name|LogicalValues
operator|.
name|createEmpty
argument_list|(
name|cluster
argument_list|,
name|empTable
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|rowSize
operator|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|emptyValues
argument_list|)
expr_stmt|;
name|columnSizes
operator|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|emptyValues
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|emptyValues
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|40.0
argument_list|,
literal|20.0
argument_list|,
literal|4.0
argument_list|,
literal|8.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|1.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|89.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Values
specifier|final
name|RelDataType
name|rowType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|tuples
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|addRow
argument_list|(
name|tuples
argument_list|,
name|rexBuilder
argument_list|,
literal|1
argument_list|,
literal|"1234567890"
argument_list|,
literal|"ABC"
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|tuples
argument_list|,
name|rexBuilder
argument_list|,
literal|2
argument_list|,
literal|"1"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|tuples
argument_list|,
name|rexBuilder
argument_list|,
literal|3
argument_list|,
literal|"2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|LogicalValues
name|values
init|=
name|LogicalValues
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|rowType
argument_list|,
name|tuples
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|rowSize
operator|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|columnSizes
operator|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|values
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|8.0
argument_list|,
literal|3.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|15.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Union
specifier|final
name|LogicalUnion
name|union
init|=
name|LogicalUnion
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
expr|<
name|RelNode
operator|>
name|of
argument_list|(
name|empScan
argument_list|,
name|emptyValues
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rowSize
operator|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|union
argument_list|)
expr_stmt|;
name|columnSizes
operator|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|union
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|40.0
argument_list|,
literal|20.0
argument_list|,
literal|4.0
argument_list|,
literal|8.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|1.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|89.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Filter
specifier|final
name|LogicalTableScan
name|deptScan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|deptTable
argument_list|)
decl_stmt|;
specifier|final
name|LogicalFilter
name|filter
init|=
name|LogicalFilter
operator|.
name|create
argument_list|(
name|deptScan
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|deptScan
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|TEN
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|rowSize
operator|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|columnSizes
operator|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|20.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|24.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Project
specifier|final
name|LogicalProject
name|deptProject
init|=
name|LogicalProject
operator|.
name|create
argument_list|(
name|filter
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|filter
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|filter
argument_list|,
literal|1
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|filter
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CHAR_LENGTH
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|filter
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
decl_stmt|;
name|rowSize
operator|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|deptProject
argument_list|)
expr_stmt|;
name|columnSizes
operator|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|deptProject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|20.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|32.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Join
specifier|final
name|LogicalJoin
name|join
init|=
name|LogicalJoin
operator|.
name|create
argument_list|(
name|empScan
argument_list|,
name|deptProject
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|rowSize
operator|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
argument_list|)
expr_stmt|;
name|columnSizes
operator|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|join
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|40.0
argument_list|,
literal|20.0
argument_list|,
literal|4.0
argument_list|,
literal|8.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|,
literal|1.0
argument_list|,
literal|4.0
argument_list|,
literal|20.0
argument_list|,
literal|4.0
argument_list|,
literal|4.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|121.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Aggregate
specifier|final
name|LogicalAggregate
name|aggregate
init|=
name|LogicalAggregate
operator|.
name|create
argument_list|(
name|join
argument_list|,
literal|false
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ImmutableBitSet
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
literal|false
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
name|join
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|rowSize
operator|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|aggregate
argument_list|)
expr_stmt|;
name|columnSizes
operator|=
name|RelMetadataQuery
operator|.
name|getAverageColumnSizes
argument_list|(
name|aggregate
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|columnSizes
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4.0
argument_list|,
literal|20.0
argument_list|,
literal|8.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rowSize
argument_list|,
name|equalTo
argument_list|(
literal|32.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Smoke test Parallelism and Memory metadata providers
name|assertThat
argument_list|(
name|RelMetadataQuery
operator|.
name|memory
argument_list|(
name|aggregate
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RelMetadataQuery
operator|.
name|cumulativeMemoryWithinPhase
argument_list|(
name|aggregate
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RelMetadataQuery
operator|.
name|cumulativeMemoryWithinPhaseSplit
argument_list|(
name|aggregate
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RelMetadataQuery
operator|.
name|isPhaseTransition
argument_list|(
name|aggregate
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|aggregate
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for    * {@link org.apache.calcite.rel.metadata.RelMdPredicates#getPredicates(SemiJoin)}. */
annotation|@
name|Test
specifier|public
name|void
name|testPredicates
parameter_list|()
block|{
specifier|final
name|Project
name|rel
init|=
operator|(
name|Project
operator|)
name|convertSql
argument_list|(
literal|"select * from emp, dept"
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|rel
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|empTable
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|RelOptTable
name|deptTable
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Frameworks
operator|.
name|withPlanner
argument_list|(
operator|new
name|Frameworks
operator|.
name|PlannerAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptSchema
name|relOptSchema
parameter_list|,
name|SchemaPlus
name|rootSchema
parameter_list|)
block|{
name|checkPredicates
argument_list|(
name|cluster
argument_list|,
name|empTable
argument_list|,
name|deptTable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPredicates
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptTable
name|empTable
parameter_list|,
name|RelOptTable
name|deptTable
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|LogicalTableScan
name|empScan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|empTable
argument_list|)
decl_stmt|;
name|RelOptPredicateList
name|predicates
init|=
name|RelMetadataQuery
operator|.
name|getPulledUpPredicates
argument_list|(
name|empScan
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|predicates
operator|.
name|pulledUpPredicates
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LogicalFilter
name|filter
init|=
name|LogicalFilter
operator|.
name|create
argument_list|(
name|empScan
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|empScan
argument_list|,
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"EMPNO"
argument_list|)
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|predicates
operator|=
name|RelMetadataQuery
operator|.
name|getPulledUpPredicates
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|predicates
operator|.
name|pulledUpPredicates
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[=($0, 1)]"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LogicalTableScan
name|deptScan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|deptTable
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|leftDeptnoField
init|=
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeField
name|rightDeptnoField
init|=
name|deptScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|deptScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DEPTNO"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SemiJoin
name|semiJoin
init|=
name|SemiJoin
operator|.
name|create
argument_list|(
name|filter
argument_list|,
name|deptScan
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|leftDeptnoField
operator|.
name|getType
argument_list|()
argument_list|,
name|leftDeptnoField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|rightDeptnoField
operator|.
name|getType
argument_list|()
argument_list|,
name|rightDeptnoField
operator|.
name|getIndex
argument_list|()
operator|+
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|leftDeptnoField
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|rightDeptnoField
operator|.
name|getIndex
argument_list|()
operator|+
name|empScan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|predicates
operator|=
name|RelMetadataQuery
operator|.
name|getPulledUpPredicates
argument_list|(
name|semiJoin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|predicates
operator|.
name|pulledUpPredicates
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[=($0, 1)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|predicates
operator|.
name|leftInferredPredicates
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|predicates
operator|.
name|rightInferredPredicates
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for    * {@link org.apache.calcite.rel.metadata.RelMdPredicates#getPredicates(Aggregate)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testPullUpPredicatesFromAggregation
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select a, max(b) from (\n"
operator|+
literal|"  select 1 as a, 2 as b from emp)subq\n"
operator|+
literal|"group by a"
decl_stmt|;
specifier|final
name|Aggregate
name|rel
init|=
operator|(
name|Aggregate
operator|)
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|RelOptPredicateList
name|inputSet
init|=
name|RelMetadataQuery
operator|.
name|getPulledUpPredicates
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicates
init|=
name|inputSet
operator|.
name|pulledUpPredicates
decl_stmt|;
name|assertThat
argument_list|(
name|pulledUpPredicates
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[=($0, 1)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPullUpPredicatesFromProject
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select deptno, mgr, x, 'y' as y from (\n"
operator|+
literal|"  select deptno, mgr, cast(null as integer) as x\n"
operator|+
literal|"  from emp\n"
operator|+
literal|"  where mgr is null and deptno< 10)"
decl_stmt|;
specifier|final
name|RelNode
name|rel
init|=
name|convertSql
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|RelOptPredicateList
name|list
init|=
name|RelMetadataQuery
operator|.
name|getPulledUpPredicates
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|pulledUpPredicates
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[IS NULL($1),<($0, 10), IS NULL($2), =($3, 'y')]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Custom metadata interface. */
specifier|public
interface|interface
name|ColType
extends|extends
name|Metadata
block|{
name|String
name|getColType
parameter_list|(
name|int
name|column
parameter_list|)
function_decl|;
block|}
comment|/** A provider for {@link org.apache.calcite.test.RelMetadataTest.ColType} via    * reflection. */
specifier|public
specifier|static
class|class
name|ColTypeImpl
block|{
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|THREAD_LIST
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Method
name|METHOD
decl_stmt|;
static|static
block|{
try|try
block|{
name|METHOD
operator|=
name|ColType
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getColType"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|METHOD
argument_list|,
operator|new
name|ColTypeImpl
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Implementation of {@link ColType#getColType(int)} for      * {@link org.apache.calcite.rel.logical.LogicalAggregate}, called via      * reflection. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|String
name|getColType
parameter_list|(
name|Aggregate
name|rel
parameter_list|,
name|int
name|column
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|column
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"-agg"
decl_stmt|;
name|THREAD_LIST
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
comment|/** Implementation of {@link ColType#getColType(int)} for      * {@link RelNode}, called via reflection. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|String
name|getColType
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|int
name|column
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|column
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"-rel"
decl_stmt|;
name|THREAD_LIST
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RelMetadataTest.java
end_comment

end_unit

