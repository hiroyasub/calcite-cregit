begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|DelegatingEnumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|FilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
operator|.
name|ConnectionPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NlsString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link org.apache.calcite.schema.ScannableTable}.  */
end_comment

begin_class
specifier|public
class|class
name|ScannableTableTest
block|{
annotation|@
name|Test
name|void
name|testTens
parameter_list|()
throws|throws
name|SQLException
block|{
specifier|final
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|cursor
init|=
name|tens
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** A table with one column. */
annotation|@
name|Test
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"simple"
argument_list|,
operator|new
name|SimpleTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"simple\""
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"i=0"
argument_list|,
literal|"i=10"
argument_list|,
literal|"i=20"
argument_list|,
literal|"i=30"
argument_list|)
expr_stmt|;
block|}
comment|/** A table with two columns. */
annotation|@
name|Test
name|void
name|testSimple2
parameter_list|()
throws|throws
name|Exception
block|{
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
operator|new
name|BeatlesTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"beatles\""
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"i=4; j=John"
argument_list|,
literal|"i=4; j=Paul"
argument_list|,
literal|"i=6; j=George"
argument_list|,
literal|"i=5; j=Ringo"
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link FilterableTable} with two columns (cooperative). */
annotation|@
name|Test
name|void
name|testFilterableTableCooperative
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"beatles\" where \"i\" = 4"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"i=4; j=John; k=1940"
argument_list|,
literal|"i=4; j=Paul; k=1942"
argument_list|)
expr_stmt|;
comment|// Only 2 rows came out of the table. If the value is 4, it means that the
comment|// planner did not pass the filter down.
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=2, filter=<0, 4>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link FilterableTable} with two columns (noncooperative). */
annotation|@
name|Test
name|void
name|testFilterableTableNonCooperative
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles2"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"beatles2\" where \"i\" = 4"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"i=4; j=John; k=1940"
argument_list|,
literal|"i=4; j=Paul; k=1942"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link org.apache.calcite.schema.ProjectableFilterableTable}    * with two columns (cooperative). */
annotation|@
name|Test
name|void
name|testProjectableFilterableCooperative
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]], projects=[[1]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"j\" from \"s\".\"beatles\" where \"i\" = 4"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"j=John"
argument_list|,
literal|"j=Paul"
argument_list|)
expr_stmt|;
comment|// Only 2 rows came out of the table. If the value is 4, it means that the
comment|// planner did not pass the filter down.
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=2, filter=<0, 4>, projects=[1, 0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testProjectableFilterableNonCooperative
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles2"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"j\" from \"s\".\"beatles2\" where \"i\" = 4"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"j=John"
argument_list|,
literal|"j=Paul"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4, projects=[1, 0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link org.apache.calcite.schema.ProjectableFilterableTable}    * with two columns, and a project in the query. (Cooperative)*/
annotation|@
name|Test
name|void
name|testProjectableFilterableWithProjectAndFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]], projects=[[2, 1]]"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"k\",\"j\" from \"s\".\"beatles\" where \"i\" = 4"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"k=1940; j=John"
argument_list|,
literal|"k=1942; j=Paul"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=2, filter=<0, 4>, projects=[2, 1, 0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link org.apache.calcite.schema.ProjectableFilterableTable}    * with two columns, and a project in the query (NonCooperative). */
annotation|@
name|Test
name|void
name|testProjectableFilterableWithProjectFilterNonCooperative
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles]], filters=[[>($2, 1941)]], "
operator|+
literal|"projects=[[0, 2]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"i\",\"k\" from \"s\".\"beatles\" where \"k\"> 1941"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"i=4; k=1942"
argument_list|,
literal|"i=6; k=1943"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4, projects=[0, 2]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A filter and project on a    * {@link org.apache.calcite.schema.ProjectableFilterableTable}. The table    * refuses to execute the filter, so Calcite should add a pull up and    * transform the filter (projecting the column needed by the filter). */
annotation|@
name|Test
name|void
name|testPFTableRefusesFilterCooperative
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN=EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles2"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"k\" from \"s\".\"beatles2\" where \"i\" = 4"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"k=1940"
argument_list|,
literal|"k=1942"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4, projects=[2, 0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testPFPushDownProjectFilterInAggregateNoGroup
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN=EnumerableAggregate(group=[{}], M=[MAX($0)])\n"
operator|+
literal|"  EnumerableInterpreter\n"
operator|+
literal|"    BindableTableScan(table=[[s, beatles]], filters=[[>($0, 1)]], projects=[[2]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select max(\"k\") as m from \"s\".\"beatles\" where \"i\"> 1"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"M=1943"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testPFPushDownProjectFilterAggregateGroup
parameter_list|()
block|{
specifier|final
name|String
name|sql
init|=
literal|"select \"i\", count(*) as c\n"
operator|+
literal|"from \"s\".\"beatles\"\n"
operator|+
literal|"where \"k\"> 1900\n"
operator|+
literal|"group by \"i\""
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableAggregate(group=[{0}], C=[COUNT()])\n"
operator|+
literal|"  EnumerableInterpreter\n"
operator|+
literal|"    BindableTableScan(table=[[s, beatles]], filters=[[>($2, 1900)]], "
operator|+
literal|"projects=[[0]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|sql
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"i=4; C=2"
argument_list|,
literal|"i=5; C=1"
argument_list|,
literal|"i=6; C=1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testPFPushDownProjectFilterAggregateNested
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select \"k\", count(*) as c\n"
operator|+
literal|"from (\n"
operator|+
literal|"  select \"k\", \"i\" from \"s\".\"beatles\" group by \"k\", \"i\") t\n"
operator|+
literal|"where \"k\" = 1940\n"
operator|+
literal|"group by \"k\""
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableAggregate(group=[{0}], C=[COUNT()])\n"
operator|+
literal|"  EnumerableAggregate(group=[{0, 1}])\n"
operator|+
literal|"    EnumerableInterpreter\n"
operator|+
literal|"      BindableTableScan(table=[[s, beatles]], filters=[[=($2, 1940)]], projects=[[2, 0]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|sql
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"k=1940; C=2"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|getFilter
parameter_list|(
name|boolean
name|cooperative
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|RexNode
argument_list|>
name|filterIter
init|=
name|filters
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|filterIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|RexNode
name|node
init|=
name|filterIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cooperative
operator|&&
name|node
operator|instanceof
name|RexCall
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperator
argument_list|()
operator|==
name|SqlStdOperatorTable
operator|.
name|EQUALS
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
name|filterIter
operator|.
name|remove
argument_list|()
expr_stmt|;
specifier|final
name|int
name|pos
init|=
operator|(
operator|(
name|RexInputRef
operator|)
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|RexLiteral
name|op1
init|=
operator|(
name|RexLiteral
operator|)
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pos
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|2
case|:
return|return
name|Pair
operator|.
name|of
argument_list|(
name|pos
argument_list|,
operator|(
operator|(
name|BigDecimal
operator|)
name|op1
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|Pair
operator|.
name|of
argument_list|(
name|pos
argument_list|,
operator|(
operator|(
name|NlsString
operator|)
name|op1
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-458">[CALCITE-458]    * ArrayIndexOutOfBoundsException when using just a single column in    * interpreter</a>. */
annotation|@
name|Test
name|void
name|testPFTableRefusesFilterSingleColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles2]], filters=[[>($2, 1941)]], projects=[[2]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles2"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"k\" from \"s\".\"beatles2\" where \"k\"> 1941"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"k=1942"
argument_list|,
literal|"k=1943"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4, projects=[2]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-3405">[CALCITE-3405]    * Prune columns for ProjectableFilterable when project is not simple mapping</a>. */
annotation|@
name|Test
name|void
name|testPushNonSimpleMappingProject
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableCalc(expr#0..1=[{inputs}], expr#2=[+($t1, $t1)], expr#3=[3],"
operator|+
literal|" proj#0..1=[{exprs}], k0=[$t0], $f3=[$t2], $f4=[$t3])\n"
operator|+
literal|"  EnumerableInterpreter\n"
operator|+
literal|"    BindableTableScan(table=[[s, beatles]], projects=[[2, 0]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"k\", \"i\", \"k\", \"i\"+\"i\" \"ii\", 3 from \"s\".\"beatles\""
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"k=1940; i=4; k=1940; ii=8; EXPR$3=3"
argument_list|,
literal|"k=1940; i=5; k=1940; ii=10; EXPR$3=3"
argument_list|,
literal|"k=1942; i=4; k=1942; ii=8; EXPR$3=3"
argument_list|,
literal|"k=1943; i=6; k=1943; ii=12; EXPR$3=3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4, projects=[2, 0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-3405">[CALCITE-3405]    * Prune columns for ProjectableFilterable when project is not simple mapping</a>. */
annotation|@
name|Test
name|void
name|testPushSimpleMappingProject
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Note that no redundant Project on EnumerableInterpreter
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles]], projects=[[2, 0]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"k\", \"i\" from \"s\".\"beatles\""
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"k=1940; i=4"
argument_list|,
literal|"k=1940; i=5"
argument_list|,
literal|"k=1942; i=4"
argument_list|,
literal|"k=1943; i=6"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4, projects=[2, 0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-3479">[CALCITE-3479]    * Stack overflow error thrown when running join query</a>    * Test two ProjectableFilterableTable can join and produce right plan.    */
annotation|@
name|Test
name|void
name|testProjectableFilterableTableJoin
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableNestedLoopJoin(condition=[true], joinType=[inner])\n"
operator|+
literal|"  EnumerableInterpreter\n"
operator|+
literal|"    BindableTableScan(table=[[s, b1]], filters=[[=($0, 10)]])\n"
operator|+
literal|"  EnumerableInterpreter\n"
operator|+
literal|"    BindableTableScan(table=[[s, b2]], filters=[[=($0, 10)]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"b1"
argument_list|,
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"b2"
argument_list|,
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select * from \"s\".\"b1\", \"s\".\"b2\" "
operator|+
literal|"where \"s\".\"b1\".\"i\" = 10 and \"s\".\"b2\".\"i\" = 10 "
operator|+
literal|"and \"s\".\"b1\".\"i\" = \"s\".\"b2\".\"i\""
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-5019">[CALCITE-5019]    * Avoid multiple scans when table is ProjectableFilterableTable</a>.*/
annotation|@
name|Test
name|void
name|testProjectableFilterableWithScanCounter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|BeatlesProjectableFilterableTable
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"EnumerableInterpreter\n"
operator|+
literal|"  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]], projects=[[1]]"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"j\" from \"s\".\"beatles\" where \"i\" = 4"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"j=John"
argument_list|,
literal|"j=Paul"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|getScanCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=4, projects=[1, 0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-1031">[CALCITE-1031]    * In prepared statement, CsvScannableTable.scan is called twice</a>. */
annotation|@
name|Test
name|void
name|testPrepared2
parameter_list|()
throws|throws
name|SQLException
block|{
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"caseSensitive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|,
name|properties
argument_list|)
init|)
block|{
specifier|final
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|scanCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|enumerateCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|closeCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|Schema
name|schema
init|=
operator|new
name|AbstractSchema
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTableMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"TENS"
argument_list|,
name|countingTable
argument_list|(
name|scanCount
argument_list|,
name|enumerateCount
argument_list|,
name|closeCount
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
operator|.
name|add
argument_list|(
literal|"TEST"
argument_list|,
name|schema
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sql
init|=
literal|"select * from \"TEST\".\"TENS\" where \"i\"< ?"
decl_stmt|;
specifier|final
name|PreparedStatement
name|statement
init|=
name|calciteConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerateCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// First execute
name|statement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerateCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
argument_list|,
name|Matchers
operator|.
name|returnsUnordered
argument_list|(
literal|"i=0"
argument_list|,
literal|"i=10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enumerateCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second execute
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
argument_list|,
name|Matchers
operator|.
name|returnsUnordered
argument_list|(
literal|"i=0"
argument_list|,
literal|"i=10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Third execute
name|statement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultSet
argument_list|,
name|Matchers
operator|.
name|returnsUnordered
argument_list|(
literal|"i=0"
argument_list|,
literal|"i=10"
argument_list|,
literal|"i=20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scanCount
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-3758">[CALCITE-3758]    * FilterTableScanRule generate wrong mapping for filter condition    * when underlying is BindableTableScan</a>. */
annotation|@
name|Test
name|void
name|testPFTableInBindableConvention
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
init|(
name|Hook
operator|.
name|Closeable
name|ignored
init|=
name|Hook
operator|.
name|ENABLE_BINDABLE
operator|.
name|addThread
argument_list|(
name|Hook
operator|.
name|propertyJ
argument_list|(
literal|true
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|String
name|explain
init|=
literal|"PLAN="
operator|+
literal|"BindableTableScan(table=[[s, beatles]], filters=[[=($1, 'John')]], projects=[[1]])"
decl_stmt|;
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|newSchema
argument_list|(
literal|"s"
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|"beatles"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|"select \"j\" from \"s\".\"beatles\" where \"j\" = 'John'"
argument_list|)
operator|.
name|explainContains
argument_list|(
name|explain
argument_list|)
operator|.
name|returnsUnordered
argument_list|(
literal|"j=John"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"returnCount=1, filter=<1, John>, projects=[1]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ConnectionPostProcessor
name|newSchema
parameter_list|(
specifier|final
name|String
name|schemaName
parameter_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
modifier|...
name|tables
parameter_list|)
block|{
return|return
name|connection
lambda|->
block|{
name|CalciteConnection
name|con
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|con
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
name|schemaName
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|t
range|:
name|tables
control|)
block|{
name|schema
operator|.
name|add
argument_list|(
name|t
operator|.
name|left
argument_list|,
name|t
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|setSchema
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
return|;
block|}
comment|/** Table that returns one column via the {@link ScannableTable} interface. */
specifier|public
specifier|static
class|class
name|SimpleTable
extends|extends
name|AbstractTable
implements|implements
name|ScannableTable
block|{
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|tens
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Table that returns two columns via the ScannableTable interface. */
specifier|public
specifier|static
class|class
name|BeatlesTable
extends|extends
name|AbstractTable
implements|implements
name|ScannableTable
block|{
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"j"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|beatles
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Table that returns two columns via the {@link FilterableTable}    * interface. */
specifier|public
specifier|static
class|class
name|BeatlesFilterableTable
extends|extends
name|AbstractTable
implements|implements
name|FilterableTable
block|{
specifier|private
specifier|final
name|StringBuilder
name|buf
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cooperative
decl_stmt|;
specifier|public
name|BeatlesFilterableTable
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|boolean
name|cooperative
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|cooperative
operator|=
name|cooperative
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"j"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"k"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|)
block|{
specifier|final
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|filter
init|=
name|getFilter
argument_list|(
name|cooperative
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|beatles
argument_list|(
name|buf
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Table that returns two columns via the {@link FilterableTable}    * interface. */
specifier|public
specifier|static
class|class
name|BeatlesProjectableFilterableTable
extends|extends
name|AbstractTable
implements|implements
name|ProjectableFilterableTable
block|{
specifier|private
specifier|final
name|AtomicInteger
name|scanCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|buf
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cooperative
decl_stmt|;
name|BeatlesProjectableFilterableTable
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|boolean
name|cooperative
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|cooperative
operator|=
name|cooperative
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"j"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"k"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
argument_list|(
name|DataContext
name|root
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
argument_list|,
name|final
name|int
expr|@
name|Nullable
index|[]
name|projects
argument_list|)
block|{
name|scanCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
specifier|final
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|filter
init|=
name|getFilter
argument_list|(
name|cooperative
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|beatles
argument_list|(
name|buf
argument_list|,
name|filter
argument_list|,
name|projects
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|int
name|getScanCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|scanCounter
operator|.
name|get
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|tens
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
name|Object
index|[]
name|current
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
if|if
condition|(
operator|++
name|row
operator|<
literal|4
condition|)
block|{
name|current
operator|=
operator|new
name|Object
index|[]
block|{
name|row
operator|*
literal|10
block|}
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|row
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/** Returns a table that counts the number of calls to    * {@link ScannableTable#scan}, {@link Enumerable#enumerator()},    * and {@link Enumerator#close()}. */
specifier|static
name|SimpleTable
name|countingTable
parameter_list|(
name|AtomicInteger
name|scanCount
parameter_list|,
name|AtomicInteger
name|enumerateCount
parameter_list|,
name|AtomicInteger
name|closeCount
parameter_list|)
block|{
return|return
operator|new
name|SimpleTable
argument_list|()
block|{
specifier|private
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|superScan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
name|super
operator|.
name|scan
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumerable
argument_list|<
annotation|@
name|Nullable
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
name|scanCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
name|enumerateCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
specifier|final
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
init|=
name|superScan
argument_list|(
name|root
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
return|return
operator|new
name|DelegatingEnumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|(
name|enumerator
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|BEATLES
init|=
block|{
block|{
literal|4
block|,
literal|"John"
block|,
literal|1940
block|}
block|,
block|{
literal|4
block|,
literal|"Paul"
block|,
literal|1942
block|}
block|,
block|{
literal|6
block|,
literal|"George"
block|,
literal|1943
block|}
block|,
block|{
literal|5
block|,
literal|"Ringo"
block|,
literal|1940
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|beatles
parameter_list|(
specifier|final
name|StringBuilder
name|buf
parameter_list|,
specifier|final
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|filter
parameter_list|,
specifier|final
name|int
index|[]
name|projects
parameter_list|)
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|returnCount
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|current
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
while|while
condition|(
operator|++
name|row
operator|<
literal|4
condition|)
block|{
name|Object
index|[]
name|current
init|=
name|BEATLES
index|[
name|row
operator|%
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|right
operator|.
name|equals
argument_list|(
name|current
index|[
name|filter
operator|.
name|left
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|projects
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
block|}
else|else
block|{
name|Object
index|[]
name|newCurrent
init|=
operator|new
name|Object
index|[
name|projects
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newCurrent
index|[
name|i
index|]
operator|=
name|current
index|[
name|projects
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
name|this
operator|.
name|current
operator|=
name|newCurrent
expr_stmt|;
block|}
operator|++
name|returnCount
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|row
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|current
operator|=
literal|null
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"returnCount="
argument_list|)
operator|.
name|append
argument_list|(
name|returnCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", filter="
argument_list|)
operator|.
name|append
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", projects="
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|projects
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

