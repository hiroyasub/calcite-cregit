begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|ReflectiveSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|FilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ProjectableFilterableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ScannableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link org.apache.calcite.schema.ScannableTable}.  */
end_comment

begin_class
specifier|public
class|class
name|ScannableTableTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTens
parameter_list|()
throws|throws
name|SQLException
block|{
specifier|final
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|cursor
init|=
name|tens
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|cursor
operator|.
name|current
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cursor
operator|.
name|moveNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** A table with one column. */
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"simple"
argument_list|,
operator|new
name|SimpleTable
argument_list|()
argument_list|)
expr_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
literal|"select * from \"s\".\"simple\""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"i=0\ni=10\ni=20\ni=30\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A table with two columns. */
annotation|@
name|Test
specifier|public
name|void
name|testSimple2
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"beatles"
argument_list|,
operator|new
name|BeatlesTable
argument_list|()
argument_list|)
expr_stmt|;
name|rootSchema
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|,
operator|new
name|ReflectiveSchema
argument_list|(
operator|new
name|JdbcTest
operator|.
name|HrSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
init|=
name|connection
operator|.
name|createStatement
argument_list|()
operator|.
name|executeQuery
argument_list|(
literal|"select * from \"s\".\"beatles\""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"i=4; j=John\ni=4; j=Paul\ni=6; j=George\ni=5; j=Ringo\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link FilterableTable} with two columns. */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleFilter2
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"beatles"
argument_list|,
operator|new
name|BeatlesFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select * from \"s\".\"beatles\" where \"i\" = 4"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"i=4; j=John; k=1940\ni=4; j=Paul; k=1942\n"
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Only 2 rows came out of the table. If the value is 4, it means that the
comment|// planner did not pass the filter down.
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=2, filter=4"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Now with an "uncooperative" filterable table that refuses to accept
comment|// filters.
name|schema
operator|.
name|add
argument_list|(
literal|"beatles2"
argument_list|,
operator|new
name|BeatlesFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select * from \"s\".\"beatles2\" where \"i\" = 4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"i=4; j=John; k=1940\ni=4; j=Paul; k=1942\n"
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=4"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link org.apache.calcite.schema.ProjectableFilterableTable}    * with two columns. */
annotation|@
name|Test
specifier|public
name|void
name|testProjectableFilterable2
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"beatles"
argument_list|,
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select * from \"s\".\"beatles\" where \"i\" = 4"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"i=4; j=John; k=1940\ni=4; j=Paul; k=1942\n"
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Only 2 rows came out of the table. If the value is 4, it means that the
comment|// planner did not pass the filter down.
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=2, filter=4"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Now with an "uncooperative" filterable table that refuses to accept
comment|// filters.
name|schema
operator|.
name|add
argument_list|(
literal|"beatles2"
argument_list|,
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select * from \"s\".\"beatles2\" where \"i\" = 4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"i=4; j=John; k=1940\ni=4; j=Paul; k=1942\n"
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=4"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** A filter on a {@link org.apache.calcite.schema.ProjectableFilterableTable}    * with two columns, and a project in the query. */
annotation|@
name|Test
specifier|public
name|void
name|testProjectableFilterable2WithProject
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"beatles"
argument_list|,
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with a project.
specifier|final
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select \"k\",\"j\" from \"s\".\"beatles\" where \"i\" = 4"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"k=1940; j=John\nk=1942; j=Paul\n"
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=2, filter=4, projects=[2, 1]"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Filter on one of the projected columns.
name|resultSet
operator|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select \"i\",\"k\" from\n"
operator|+
literal|"\"s\".\"beatles\" where \"k\"> 1941"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"i=4; k=1942\n"
operator|+
literal|"i=6; k=1943\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=4, projects=[0, 2]"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** A filter and project on a    * {@link org.apache.calcite.schema.ProjectableFilterableTable}. The table    * refuses to execute the filter, so Calcite should add a pull up and    * transform the filter (projecting the column needed by the filter). */
annotation|@
name|Test
specifier|public
name|void
name|testPFTableRefusesFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"beatles2"
argument_list|,
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with an "uncooperative" filterable table that refuses to accept
comment|// filters.
specifier|final
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select \"k\" from \"s\".\"beatles2\" where \"i\" = 4"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"k=1940\nk=1942\n"
argument_list|)
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=4, projects=[2, 0]"
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Integer
name|getFilter
parameter_list|(
name|boolean
name|cooperative
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|RexNode
argument_list|>
name|filterIter
init|=
name|filters
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|filterIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|RexNode
name|node
init|=
name|filterIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cooperative
operator|&&
name|node
operator|instanceof
name|RexCall
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperator
argument_list|()
operator|==
name|SqlStdOperatorTable
operator|.
name|EQUALS
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
operator|(
operator|(
name|RexInputRef
operator|)
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIndex
argument_list|()
operator|==
literal|0
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
specifier|final
name|RexNode
name|op1
init|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|filterIter
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
operator|(
operator|(
name|BigDecimal
operator|)
operator|(
operator|(
name|RexLiteral
operator|)
name|op1
operator|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-458">[CALCITE-458]    * ArrayIndexOutOfBoundsException when using just a single column in    * interpreter</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testPFTableRefusesFilterSingleColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:calcite:"
argument_list|)
decl_stmt|;
name|CalciteConnection
name|calciteConnection
init|=
name|connection
operator|.
name|unwrap
argument_list|(
name|CalciteConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|SchemaPlus
name|rootSchema
init|=
name|calciteConnection
operator|.
name|getRootSchema
argument_list|()
decl_stmt|;
name|SchemaPlus
name|schema
init|=
name|rootSchema
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
literal|"beatles2"
argument_list|,
operator|new
name|BeatlesProjectableFilterableTable
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with an "uncooperative" filterable table that refuses to accept
comment|// filters.
specifier|final
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"select \"k\" from \"s\".\"beatles2\" where \"k\"> 1941"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"returnCount=4, projects=[2]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|CalciteAssert
operator|.
name|toString
argument_list|(
name|resultSet
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"k=1942\nk=1943\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Table that returns one column via the {@link ScannableTable} interface. */
specifier|public
specifier|static
class|class
name|SimpleTable
implements|implements
name|ScannableTable
block|{
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|TABLE
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|tens
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Table that returns two columns via the ScannableTable interface. */
specifier|public
specifier|static
class|class
name|BeatlesTable
implements|implements
name|ScannableTable
block|{
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"j"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
name|Statistics
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|Schema
operator|.
name|TableType
operator|.
name|TABLE
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|beatles
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Table that returns two columns via the {@link FilterableTable}    * interface. */
specifier|public
specifier|static
class|class
name|BeatlesFilterableTable
extends|extends
name|AbstractTable
implements|implements
name|FilterableTable
block|{
specifier|private
specifier|final
name|StringBuilder
name|buf
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cooperative
decl_stmt|;
specifier|public
name|BeatlesFilterableTable
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|boolean
name|cooperative
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|cooperative
operator|=
name|cooperative
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"j"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"k"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|)
block|{
specifier|final
name|Integer
name|filter
init|=
name|getFilter
argument_list|(
name|cooperative
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|beatles
argument_list|(
name|buf
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** Table that returns two columns via the {@link FilterableTable}    * interface. */
specifier|public
specifier|static
class|class
name|BeatlesProjectableFilterableTable
extends|extends
name|AbstractTable
implements|implements
name|ProjectableFilterableTable
block|{
specifier|private
specifier|final
name|StringBuilder
name|buf
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cooperative
decl_stmt|;
specifier|public
name|BeatlesProjectableFilterableTable
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|boolean
name|cooperative
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|cooperative
operator|=
name|cooperative
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|add
argument_list|(
literal|"j"
argument_list|,
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
operator|.
name|add
argument_list|(
literal|"k"
argument_list|,
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|Enumerable
argument_list|<
name|Object
index|[]
argument_list|>
name|scan
parameter_list|(
name|DataContext
name|root
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|,
specifier|final
name|int
index|[]
name|projects
parameter_list|)
block|{
specifier|final
name|Integer
name|filter
init|=
name|getFilter
argument_list|(
name|cooperative
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
name|beatles
argument_list|(
name|buf
argument_list|,
name|filter
argument_list|,
name|projects
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|private
specifier|static
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|tens
parameter_list|()
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
name|Object
index|[]
name|current
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
if|if
condition|(
operator|++
name|row
operator|<
literal|4
condition|)
block|{
name|current
operator|=
operator|new
name|Object
index|[]
block|{
name|row
operator|*
literal|10
block|}
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|row
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|BEATLES
init|=
block|{
block|{
literal|4
block|,
literal|"John"
block|,
literal|1940
block|}
block|,
block|{
literal|4
block|,
literal|"Paul"
block|,
literal|1942
block|}
block|,
block|{
literal|6
block|,
literal|"George"
block|,
literal|1943
block|}
block|,
block|{
literal|5
block|,
literal|"Ringo"
block|,
literal|1940
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
name|beatles
parameter_list|(
specifier|final
name|StringBuilder
name|buf
parameter_list|,
specifier|final
name|Integer
name|filter
parameter_list|,
specifier|final
name|int
index|[]
name|projects
parameter_list|)
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|returnCount
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|current
decl_stmt|;
specifier|public
name|Object
index|[]
name|current
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
while|while
condition|(
operator|++
name|row
operator|<
literal|4
condition|)
block|{
name|Object
index|[]
name|current
init|=
name|BEATLES
index|[
name|row
operator|%
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|equals
argument_list|(
name|current
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|projects
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
block|}
else|else
block|{
name|Object
index|[]
name|newCurrent
init|=
operator|new
name|Object
index|[
name|projects
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newCurrent
index|[
name|i
index|]
operator|=
name|current
index|[
name|projects
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
name|this
operator|.
name|current
operator|=
name|newCurrent
expr_stmt|;
block|}
operator|++
name|returnCount
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|row
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|current
operator|=
literal|null
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"returnCount="
argument_list|)
operator|.
name|append
argument_list|(
name|returnCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", filter="
argument_list|)
operator|.
name|append
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", projects="
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|projects
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End ScannableTableTest.java
end_comment

end_unit

