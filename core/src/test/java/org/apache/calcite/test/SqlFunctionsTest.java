begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|CalciteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|dateStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|timeStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|timestampStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|charLength
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|fromBase64
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|greater
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|initcap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|internalToDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|internalToTime
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|internalToTimestamp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|lesser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|lower
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|ltrim
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|md5
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|posixRegex
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|regexpReplace
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|rtrim
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|sha1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|toBase64
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|toInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|toIntOptional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|toLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|toLongOptional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|trim
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
operator|.
name|upper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
operator|.
name|within
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Unit test for the methods in {@link SqlFunctions} that implement SQL  * functions.  *  *<p>Developers, please use {@link org.hamcrest.MatcherAssert#assertThat assertThat}  * rather than {@code assertEquals}.  */
end_comment

begin_class
class|class
name|SqlFunctionsTest
block|{
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|(
name|E
modifier|...
name|es
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|es
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Test
name|void
name|testCharLength
parameter_list|()
block|{
name|assertThat
argument_list|(
name|charLength
argument_list|(
literal|"xyz"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testToString
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|0f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"0E0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|1f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|1.5f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|-
literal|1.5f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-1.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|1.5e8f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1.5E8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|-
literal|0.0625f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-0.0625"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|0.0625f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"0.0625"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|-
literal|5e-12f
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-5E-12"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|0d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"0E0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|1d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|1.5d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|-
literal|1.5d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-1.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|1.5e8d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1.5E8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|-
literal|0.0625d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-0.0625"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
literal|0.0625d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"0.0625"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|-
literal|5e-12d
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-5E-12"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"1.5"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-1.5"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-1.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"1.5e8"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1.5E+8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-0.0625"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-.0625"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"0.0625"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|".0625"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|toString
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"-5e-12"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"-5E-12"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testConcat
parameter_list|()
block|{
name|assertThat
argument_list|(
name|concat
argument_list|(
literal|"a b"
argument_list|,
literal|"cd"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"a bcd"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The code generator will ensure that nulls are never passed in. If we
comment|// pass in null, it is treated like the string "null", as the following
comment|// tests show. Not the desired behavior for SQL.
name|assertThat
argument_list|(
name|concat
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"anull"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|concat
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"nullnull"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|concat
argument_list|(
literal|null
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"nullb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testPosixRegex
parameter_list|()
block|{
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"abc"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"^a"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"(b|d)"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"^(b|c)"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"ABC"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"^A"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"(B|D)"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"^(B|C)"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"^[[:xdigit:]]$"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"^[[:xdigit:]]+$"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abcq"
argument_list|,
literal|"^[[:xdigit:]]+$"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"[[:xdigit:]]"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abc"
argument_list|,
literal|"[[:xdigit:]]+"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|posixRegex
argument_list|(
literal|"abcq"
argument_list|,
literal|"[[:xdigit:]]"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testRegexpReplace
parameter_list|()
block|{
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"a b c"
argument_list|,
literal|"b"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"a X c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"abc def ghi"
argument_list|,
literal|"[g-z]+"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"abc def X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"abc def ghi"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"X X X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"a b c"
argument_list|,
literal|"a|b"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"X X c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"a b c"
argument_list|,
literal|"y"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"a b c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"100-200"
argument_list|,
literal|"(\\d+)"
argument_list|,
literal|"num"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"num-num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"100-200"
argument_list|,
literal|"(\\d+)"
argument_list|,
literal|"###"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"###-###"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"100-200"
argument_list|,
literal|"(-)"
argument_list|,
literal|"###"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"100###200"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"abc def ghi"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"X X X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"abc def ghi"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"aX X X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"abc def ghi"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"abc def X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"abc def GHI"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"abc def GHI"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpReplace
argument_list|(
literal|"abc def GHI"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|"i"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"abc def X"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|regexpReplace
argument_list|(
literal|"abc def ghi"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'regexp_replace' on an invalid pos is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid input for REGEXP_REPLACE: '0'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|regexpReplace
argument_list|(
literal|"abc def ghi"
argument_list|,
literal|"[a-z]+"
argument_list|,
literal|"X"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|"WWW"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'regexp_replace' on an invalid matchType is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid input for REGEXP_REPLACE: 'WWW'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testLower
parameter_list|()
block|{
name|assertThat
argument_list|(
name|lower
argument_list|(
literal|"A bCd Iijk"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"a bcd iijk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testFromBase64
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|expectedList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|,
literal|"\0"
argument_list|,
literal|"0"
argument_list|,
literal|"a"
argument_list|,
literal|" "
argument_list|,
literal|"\n"
argument_list|,
literal|"\r\n"
argument_list|,
literal|"\u03C0"
argument_list|,
literal|"hello\tword"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|expectedList
control|)
block|{
name|assertThat
argument_list|(
name|fromBase64
argument_list|(
name|toBase64
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|ByteString
argument_list|(
name|expected
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"546869732069732061207465737420537472696e672e"
argument_list|,
name|is
argument_list|(
name|fromBase64
argument_list|(
literal|"VGhpcyB  pcyBh\rIHRlc3Qg\tU3Ry\naW5nLg=="
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fromBase64
argument_list|(
literal|"-1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testToBase64
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
literal|""
operator|+
literal|"This is a test String. check resulte out of 76This is a test String."
operator|+
literal|"This is a test String.This is a test String.This is a test String."
operator|+
literal|"This is a test String. This is a test String. check resulte out of 76"
operator|+
literal|"This is a test String.This is a test String.This is a test String."
operator|+
literal|"This is a test String.This is a test String. This is a test String. "
operator|+
literal|"check resulte out of 76This is a test String.This is a test String."
operator|+
literal|"This is a test String.This is a test String.This is a test String."
decl_stmt|;
specifier|final
name|String
name|actual
init|=
literal|""
operator|+
literal|"VGhpcyBpcyBhIHRlc3QgU3RyaW5nLiBjaGVjayByZXN1bHRlIG91dCBvZiA3NlRoaXMgaXMgYSB0\n"
operator|+
literal|"ZXN0IFN0cmluZy5UaGlzIGlzIGEgdGVzdCBTdHJpbmcuVGhpcyBpcyBhIHRlc3QgU3RyaW5nLlRo\n"
operator|+
literal|"aXMgaXMgYSB0ZXN0IFN0cmluZy5UaGlzIGlzIGEgdGVzdCBTdHJpbmcuIFRoaXMgaXMgYSB0ZXN0\n"
operator|+
literal|"IFN0cmluZy4gY2hlY2sgcmVzdWx0ZSBvdXQgb2YgNzZUaGlzIGlzIGEgdGVzdCBTdHJpbmcuVGhp\n"
operator|+
literal|"cyBpcyBhIHRlc3QgU3RyaW5nLlRoaXMgaXMgYSB0ZXN0IFN0cmluZy5UaGlzIGlzIGEgdGVzdCBT\n"
operator|+
literal|"dHJpbmcuVGhpcyBpcyBhIHRlc3QgU3RyaW5nLiBUaGlzIGlzIGEgdGVzdCBTdHJpbmcuIGNoZWNr\n"
operator|+
literal|"IHJlc3VsdGUgb3V0IG9mIDc2VGhpcyBpcyBhIHRlc3QgU3RyaW5nLlRoaXMgaXMgYSB0ZXN0IFN0\n"
operator|+
literal|"cmluZy5UaGlzIGlzIGEgdGVzdCBTdHJpbmcuVGhpcyBpcyBhIHRlc3QgU3RyaW5nLlRoaXMgaXMg\n"
operator|+
literal|"YSB0ZXN0IFN0cmluZy4="
decl_stmt|;
name|assertThat
argument_list|(
name|toBase64
argument_list|(
name|s
argument_list|)
argument_list|,
name|is
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toBase64
argument_list|(
literal|""
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testUpper
parameter_list|()
block|{
name|assertThat
argument_list|(
name|upper
argument_list|(
literal|"A bCd iIjk"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"A BCD IIJK"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testInitcap
parameter_list|()
block|{
name|assertThat
argument_list|(
name|initcap
argument_list|(
literal|"aA"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initcap
argument_list|(
literal|"zz"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Zz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initcap
argument_list|(
literal|"AZ"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Az"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initcap
argument_list|(
literal|"tRy a littlE  "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Try A Little  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initcap
argument_list|(
literal|"won't it?no"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Won'T It?No"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initcap
argument_list|(
literal|"1A"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|initcap
argument_list|(
literal|" b0123B"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|" B0123b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testLesser
parameter_list|()
block|{
name|assertThat
argument_list|(
name|lesser
argument_list|(
literal|"a"
argument_list|,
literal|"bc"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lesser
argument_list|(
literal|"bc"
argument_list|,
literal|"ac"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ac"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|o
init|=
name|lesser
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected NPE, got "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|assertThat
argument_list|(
name|lesser
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lesser
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testGreater
parameter_list|()
block|{
name|assertThat
argument_list|(
name|greater
argument_list|(
literal|"a"
argument_list|,
literal|"bc"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"bc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|greater
argument_list|(
literal|"bc"
argument_list|,
literal|"ac"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"bc"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|o
init|=
name|greater
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected NPE, got "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|assertThat
argument_list|(
name|greater
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|greater
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test for {@link SqlFunctions#rtrim}. */
annotation|@
name|Test
name|void
name|testRtrim
parameter_list|()
block|{
name|assertThat
argument_list|(
name|rtrim
argument_list|(
literal|""
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rtrim
argument_list|(
literal|"    "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rtrim
argument_list|(
literal|"   x  "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"   x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rtrim
argument_list|(
literal|"   x "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"   x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rtrim
argument_list|(
literal|"   x y "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"   x y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rtrim
argument_list|(
literal|"   x"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"   x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rtrim
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test for {@link SqlFunctions#ltrim}. */
annotation|@
name|Test
name|void
name|testLtrim
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ltrim
argument_list|(
literal|""
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ltrim
argument_list|(
literal|"    "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ltrim
argument_list|(
literal|"   x  "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ltrim
argument_list|(
literal|"   x "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ltrim
argument_list|(
literal|"x y "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x y "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ltrim
argument_list|(
literal|"   x"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ltrim
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test for {@link SqlFunctions#trim}. */
annotation|@
name|Test
name|void
name|testTrim
parameter_list|()
block|{
name|assertThat
argument_list|(
name|trimSpacesBoth
argument_list|(
literal|""
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trimSpacesBoth
argument_list|(
literal|"    "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trimSpacesBoth
argument_list|(
literal|"   x  "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trimSpacesBoth
argument_list|(
literal|"   x "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trimSpacesBoth
argument_list|(
literal|"   x y "
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trimSpacesBoth
argument_list|(
literal|"   x"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trimSpacesBoth
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|trimSpacesBoth
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|trim
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|" "
argument_list|,
name|s
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testFloor
parameter_list|()
block|{
name|checkFloor
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkFloor
argument_list|(
literal|27
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|checkFloor
argument_list|(
literal|30
argument_list|,
literal|10
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|checkFloor
argument_list|(
operator|-
literal|30
argument_list|,
literal|10
argument_list|,
operator|-
literal|30
argument_list|)
expr_stmt|;
name|checkFloor
argument_list|(
operator|-
literal|27
argument_list|,
literal|10
argument_list|,
operator|-
literal|30
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFloor
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|result
parameter_list|)
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|floor
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|floor
argument_list|(
operator|(
name|long
operator|)
name|x
argument_list|,
operator|(
name|long
operator|)
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|floor
argument_list|(
operator|(
name|short
operator|)
name|x
argument_list|,
operator|(
name|short
operator|)
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|short
operator|)
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|floor
argument_list|(
operator|(
name|byte
operator|)
name|x
argument_list|,
operator|(
name|byte
operator|)
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|byte
operator|)
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|floor
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testCeil
parameter_list|()
block|{
name|checkCeil
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkCeil
argument_list|(
literal|27
argument_list|,
literal|10
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|checkCeil
argument_list|(
literal|30
argument_list|,
literal|10
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|checkCeil
argument_list|(
operator|-
literal|30
argument_list|,
literal|10
argument_list|,
operator|-
literal|30
argument_list|)
expr_stmt|;
name|checkCeil
argument_list|(
operator|-
literal|27
argument_list|,
literal|10
argument_list|,
operator|-
literal|20
argument_list|)
expr_stmt|;
name|checkCeil
argument_list|(
operator|-
literal|27
argument_list|,
literal|1
argument_list|,
operator|-
literal|27
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCeil
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|result
parameter_list|)
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ceil
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ceil
argument_list|(
operator|(
name|long
operator|)
name|x
argument_list|,
operator|(
name|long
operator|)
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ceil
argument_list|(
operator|(
name|short
operator|)
name|x
argument_list|,
operator|(
name|short
operator|)
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|short
operator|)
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ceil
argument_list|(
operator|(
name|byte
operator|)
name|x
argument_list|,
operator|(
name|byte
operator|)
name|y
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|byte
operator|)
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ceil
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for    * {@link Utilities#compare(java.util.List, java.util.List)}. */
annotation|@
name|Test
name|void
name|testCompare
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ac
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|abc
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|ac
argument_list|,
name|ac
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|ac
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ac
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|ac
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|empty
argument_list|,
name|ac
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|ac
argument_list|,
name|a
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|ac
argument_list|,
name|abc
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|ac
argument_list|,
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Utilities
operator|.
name|compare
argument_list|(
name|empty
argument_list|,
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTruncateLong
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|12345L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|12000L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|12001L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|11999L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|11000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|12345L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|13000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|12000L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|12000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|12001L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|13000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|11999L
argument_list|,
literal|1000L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|12000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTruncateInt
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|12345
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|12000
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|12001
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
literal|11999
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
literal|11000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|12345
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|13000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|12000
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|12000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|12001
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|13000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|truncate
argument_list|(
operator|-
literal|11999
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|12000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|round
argument_list|(
literal|12345
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|round
argument_list|(
literal|12845
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
literal|13000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|round
argument_list|(
operator|-
literal|12345
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|12000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|round
argument_list|(
operator|-
literal|12845
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|13000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSTruncateDouble
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12.345d
argument_list|,
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12.345d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12.345d
argument_list|,
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12.340d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12.345d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12.300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12.999d
argument_list|,
literal|0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12.340d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12.300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12.999d
argument_list|,
literal|0
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12345d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12001d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000d
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000d
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|11999d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|11000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12345d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|11999d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|11000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000d
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000d
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSTruncateLong
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12345L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12001L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000L
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000L
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|11999L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|11000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12345L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|11999L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|11000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000L
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000L
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSTruncateInt
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12345
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12001
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|12000
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
literal|11999
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|11000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12345
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|11999
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|11000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|struncate
argument_list|(
operator|-
literal|12000
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSRoundDouble
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12.345d
argument_list|,
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12.345d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12.345d
argument_list|,
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12.350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12.345d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12.300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12.999d
argument_list|,
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
literal|13.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12.999d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
literal|13.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12.999d
argument_list|,
literal|0
argument_list|)
argument_list|,
name|within
argument_list|(
literal|13.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12.350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12.345d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12.300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12.999d
argument_list|,
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|13.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12.999d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|13.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12.999d
argument_list|,
literal|0
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|13.000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345d
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345d
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12001d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000d
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000d
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|11999d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345d
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345d
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|11999d
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000d
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000d
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSRoundLong
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345L
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345L
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12001L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000L
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000L
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|11999L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345L
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345L
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|11999L
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000L
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000L
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSRoundInt
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12345
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12001
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|12000
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
literal|11999
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12350d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12300d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12345
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|11999
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|12000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|,
name|within
argument_list|(
operator|-
literal|10000d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|sround
argument_list|(
operator|-
literal|12000
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|within
argument_list|(
literal|0d
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSplit
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"no occurrence of delimiter"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|"abc"
argument_list|,
literal|","
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"delimiter in middle"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|"abc"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"delimiter at end"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|"abc"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
literal|"ab"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"delimiter at start"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|"abc"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
literal|""
argument_list|,
literal|"bc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"empty delimiter"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|"abc"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"empty delimiter and string"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"empty string"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|""
argument_list|,
literal|","
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"long delimiter (occurs at start)"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|"abracadabra"
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
literal|""
argument_list|,
literal|"racad"
argument_list|,
literal|"ra"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"long delimiter (occurs at end)"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
literal|"sabracadabrab"
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
literal|"s"
argument_list|,
literal|"racad"
argument_list|,
literal|"r"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same as above but for ByteString
specifier|final
name|ByteString
name|a
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"aa"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|ab
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"aabb"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|abc
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"aabbcc"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|abracadabra
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"aabb44aaccaaddaabb44aa"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|b
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"bb"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|bc
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"bbcc"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|c
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"cc"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|f
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"ff"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|r
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"44"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|ra
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"44aa"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|racad
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"44aaccaadd"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|empty
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|s
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"55"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|sabracadabrab
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"55"
argument_list|,
literal|16
argument_list|)
operator|.
name|concat
argument_list|(
name|abracadabra
argument_list|)
operator|.
name|concat
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"no occurrence of delimiter"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|abc
argument_list|,
name|f
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
name|abc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"delimiter in middle"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|abc
argument_list|,
name|b
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"delimiter at end"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|abc
argument_list|,
name|c
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
name|ab
argument_list|,
name|empty
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"delimiter at start"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|abc
argument_list|,
name|a
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
name|empty
argument_list|,
name|bc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"empty delimiter"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|abc
argument_list|,
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
name|abc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"empty delimiter and string"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|empty
argument_list|,
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"empty string"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|empty
argument_list|,
name|f
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"long delimiter (occurs at start)"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|abracadabra
argument_list|,
name|ab
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
name|empty
argument_list|,
name|racad
argument_list|,
name|ra
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"long delimiter (occurs at end)"
argument_list|,
name|SqlFunctions
operator|.
name|split
argument_list|(
name|sabracadabrab
argument_list|,
name|ab
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|(
name|s
argument_list|,
name|racad
argument_list|,
name|r
argument_list|,
name|empty
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testByteString
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
block|{
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
specifier|final
name|ByteString
name|byteString
init|=
operator|new
name|ByteString
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|length
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"abff"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"abff"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1010101111111111"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ByteString
name|emptyByteString
init|=
operator|new
name|ByteString
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|emptyByteString
operator|.
name|length
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyByteString
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyByteString
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|emptyByteString
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|,
name|is
argument_list|(
name|emptyByteString
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"ff"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"abff"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add empty string, get original string back
name|assertSame
argument_list|(
name|byteString
operator|.
name|concat
argument_list|(
name|emptyByteString
argument_list|)
argument_list|,
name|byteString
argument_list|)
expr_stmt|;
specifier|final
name|ByteString
name|byteString1
init|=
operator|new
name|ByteString
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|12
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|concat
argument_list|(
name|byteString1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"abff0c"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|bytes3
init|=
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
specifier|final
name|ByteString
name|byteString3
init|=
operator|new
name|ByteString
argument_list|(
name|bytes3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|indexOf
argument_list|(
name|emptyByteString
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|indexOf
argument_list|(
name|byteString1
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString
operator|.
name|indexOf
argument_list|(
name|byteString3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString3
operator|.
name|indexOf
argument_list|(
name|byteString
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
name|emptyByteString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|thereAndBack
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|10
block|,
literal|0
block|,
literal|29
block|,
operator|-
literal|80
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ByteString
operator|.
name|of
argument_list|(
literal|"ab12"
argument_list|,
literal|16
argument_list|)
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"ab12"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ByteString
operator|.
name|of
argument_list|(
literal|"AB0001DdeAD3"
argument_list|,
literal|16
argument_list|)
operator|.
name|toString
argument_list|(
literal|16
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"ab0001ddead3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ByteString
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|16
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|emptyByteString
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteString
name|x
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"ABg0"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"invalid hex character: g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ByteString
name|x
init|=
name|ByteString
operator|.
name|of
argument_list|(
literal|"ABC"
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"hex string has odd length"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|bytes4
init|=
block|{
literal|10
block|,
literal|0
block|,
literal|1
block|,
operator|-
literal|80
block|}
decl_stmt|;
specifier|final
name|ByteString
name|byteString4
init|=
operator|new
name|ByteString
argument_list|(
name|bytes4
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes5
init|=
block|{
literal|10
block|,
literal|0
block|,
literal|1
block|,
literal|127
block|}
decl_stmt|;
specifier|final
name|ByteString
name|byteString5
init|=
operator|new
name|ByteString
argument_list|(
name|bytes5
argument_list|)
decl_stmt|;
specifier|final
name|ByteString
name|byteString6
init|=
operator|new
name|ByteString
argument_list|(
name|bytes4
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|byteString4
operator|.
name|compareTo
argument_list|(
name|byteString5
argument_list|)
operator|>
literal|0
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString4
operator|.
name|compareTo
argument_list|(
name|byteString6
argument_list|)
operator|==
literal|0
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|byteString5
operator|.
name|compareTo
argument_list|(
name|byteString4
argument_list|)
operator|<
literal|0
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|thereAndBack
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
specifier|final
name|ByteString
name|byteString
init|=
operator|new
name|ByteString
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes2
init|=
name|byteString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|bytes
argument_list|,
name|equalTo
argument_list|(
name|bytes2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|base64String
init|=
name|byteString
operator|.
name|toBase64String
argument_list|()
decl_stmt|;
specifier|final
name|ByteString
name|byteString1
init|=
name|ByteString
operator|.
name|ofBase64
argument_list|(
name|base64String
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|byteString
argument_list|,
name|equalTo
argument_list|(
name|byteString1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testEqWithAny
parameter_list|()
block|{
comment|// Non-numeric same type equality check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
literal|"hello"
argument_list|,
literal|"hello"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric types equality check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
literal|1
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
literal|1
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
literal|1L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric different type equality check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|eqAny
argument_list|(
literal|"2"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testNeWithAny
parameter_list|()
block|{
comment|// Non-numeric same type inequality check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric types inequality check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
literal|1
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
literal|1
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
literal|1L
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric different type inequality check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|neAny
argument_list|(
literal|"2"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testLtWithAny
parameter_list|()
block|{
comment|// Non-numeric same type "less then" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
literal|"apple"
argument_list|,
literal|"banana"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric types "less than" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
literal|1
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
literal|1
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
literal|1L
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|2.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric different type but both implements Comparable
comment|// "less than" check
try|try
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|ltAny
argument_list|(
literal|"1"
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'lt' on non-numeric different type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for comparison: class java.lang.String< "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testLeWithAny
parameter_list|()
block|{
comment|// Non-numeric same type "less or equal" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|"apple"
argument_list|,
literal|"banana"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|"apple"
argument_list|,
literal|"apple"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric types "less or equal" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|1
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|1
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|1
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|1
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|1L
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|1L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|2.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric different type but both implements Comparable
comment|// "less or equal" check
try|try
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|leAny
argument_list|(
literal|"2"
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'le' on non-numeric different type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for comparison: class java.lang.String<= "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testGtWithAny
parameter_list|()
block|{
comment|// Non-numeric same type "greater then" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
literal|"banana"
argument_list|,
literal|"apple"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric types "greater than" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
literal|2
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
literal|2
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
literal|2L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric different type but both implements Comparable
comment|// "greater than" check
try|try
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|gtAny
argument_list|(
literal|"2"
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'gt' on non-numeric different type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for comparison: class java.lang.String> "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testGeWithAny
parameter_list|()
block|{
comment|// Non-numeric same type "greater or equal" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|"banana"
argument_list|,
literal|"apple"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|"apple"
argument_list|,
literal|"apple"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric types "greater or equal" check
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|2
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|1
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|2
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|1
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|2L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|1L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric different type but both implements Comparable
comment|// "greater or equal" check
try|try
block|{
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|geAny
argument_list|(
literal|"2"
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'ge' on non-numeric different type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for comparison: class java.lang.String>= "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testPlusAny
parameter_list|()
block|{
comment|// null parameters
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Numeric types
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
literal|2
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
literal|2
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
literal|2L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric type
try|try
block|{
name|SqlFunctions
operator|.
name|plusAny
argument_list|(
literal|"2"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'plus' on non-numeric type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for arithmetic: class java.lang.String + "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testMinusAny
parameter_list|()
block|{
comment|// null parameters
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Numeric types
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
literal|2
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
literal|2
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
literal|2L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric type
try|try
block|{
name|SqlFunctions
operator|.
name|minusAny
argument_list|(
literal|"2"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'minus' on non-numeric type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for arithmetic: class java.lang.String - "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testMultiplyAny
parameter_list|()
block|{
comment|// null parameters
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Numeric types
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
literal|2
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
literal|2
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
literal|2L
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric type
try|try
block|{
name|SqlFunctions
operator|.
name|multiplyAny
argument_list|(
literal|"2"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'multiply' on non-numeric type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for arithmetic: class java.lang.String * "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testDivideAny
parameter_list|()
block|{
comment|// null parameters
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Numeric types
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
literal|5
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"2.5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
literal|5
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"2.5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
literal|5L
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"2.5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|5L
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2.5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|5L
argument_list|)
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2.5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|5L
argument_list|)
argument_list|,
literal|2.0D
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2.5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|5L
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|2.0D
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|2.5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-numeric type
try|try
block|{
name|SqlFunctions
operator|.
name|divideAny
argument_list|(
literal|"5"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"'divide' on non-numeric type is not possible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Invalid types for arithmetic: class java.lang.String / "
operator|+
literal|"class java.lang.Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|testMultiset
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|abacee
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|adaa
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|addc
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|z
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptAll
argument_list|(
name|abacee
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptAll
argument_list|(
name|abacee
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|abacee
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptAll
argument_list|(
name|z
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptAll
argument_list|(
name|z
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptDistinct
argument_list|(
name|abacee
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptDistinct
argument_list|(
name|abacee
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptDistinct
argument_list|(
name|z
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetExceptDistinct
argument_list|(
name|z
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectAll
argument_list|(
name|abacee
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectAll
argument_list|(
name|abacee
argument_list|,
name|adaa
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectAll
argument_list|(
name|adaa
argument_list|,
name|abacee
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectAll
argument_list|(
name|abacee
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectAll
argument_list|(
name|z
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectAll
argument_list|(
name|z
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectDistinct
argument_list|(
name|abacee
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectDistinct
argument_list|(
name|abacee
argument_list|,
name|adaa
argument_list|)
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectDistinct
argument_list|(
name|adaa
argument_list|,
name|abacee
argument_list|)
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectDistinct
argument_list|(
name|abacee
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectDistinct
argument_list|(
name|z
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetIntersectDistinct
argument_list|(
name|z
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionAll
argument_list|(
name|abacee
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|,
literal|"a"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionAll
argument_list|(
name|abacee
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|abacee
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionAll
argument_list|(
name|z
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionAll
argument_list|(
name|z
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|addc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionDistinct
argument_list|(
name|abacee
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionDistinct
argument_list|(
name|abacee
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionDistinct
argument_list|(
name|z
argument_list|,
name|z
argument_list|)
argument_list|,
name|is
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SqlFunctions
operator|.
name|multisetUnionDistinct
argument_list|(
name|z
argument_list|,
name|addc
argument_list|)
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testMd5
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"d41d8cd98f00b204e9800998ecf8427e"
argument_list|,
name|is
argument_list|(
name|md5
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"d41d8cd98f00b204e9800998ecf8427e"
argument_list|,
name|is
argument_list|(
name|md5
argument_list|(
name|ByteString
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"902fbdd2b1df0c4f70b4a5d23525e932"
argument_list|,
name|is
argument_list|(
name|md5
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"902fbdd2b1df0c4f70b4a5d23525e932"
argument_list|,
name|is
argument_list|(
name|md5
argument_list|(
operator|new
name|ByteString
argument_list|(
literal|"ABC"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|o
init|=
name|md5
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected NPE, got "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
name|void
name|testSha1
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"da39a3ee5e6b4b0d3255bfef95601890afd80709"
argument_list|,
name|is
argument_list|(
name|sha1
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"da39a3ee5e6b4b0d3255bfef95601890afd80709"
argument_list|,
name|is
argument_list|(
name|sha1
argument_list|(
name|ByteString
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"3c01bdbb26f358bab27f267924aa2c9a03fcfdb8"
argument_list|,
name|is
argument_list|(
name|sha1
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"3c01bdbb26f358bab27f267924aa2c9a03fcfdb8"
argument_list|,
name|is
argument_list|(
name|sha1
argument_list|(
operator|new
name|ByteString
argument_list|(
literal|"ABC"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|o
init|=
name|sha1
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected NPE, got "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
comment|/**    * Tests that a date in the local time zone converts to a Unix timestamp in    * UTC.    */
annotation|@
name|Test
name|void
name|testToIntWithSqlDate
parameter_list|()
block|{
name|assertThat
argument_list|(
name|toInt
argument_list|(
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// rounded to closest day
name|assertThat
argument_list|(
name|sqlDate
argument_list|(
literal|"1970-01-01"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlDate
argument_list|(
literal|"1500-04-30"
argument_list|)
argument_list|,
name|is
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1500-04-30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test calendar conversion from the standard Gregorian calendar used by    * {@code java.sql} and the proleptic Gregorian calendar used by Unix    * timestamps.    */
annotation|@
name|Test
name|void
name|testToIntWithSqlDateInGregorianShift
parameter_list|()
block|{
name|assertThat
argument_list|(
name|sqlDate
argument_list|(
literal|"1582-10-04"
argument_list|)
argument_list|,
name|is
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1582-10-04"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlDate
argument_list|(
literal|"1582-10-05"
argument_list|)
argument_list|,
name|is
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1582-10-15"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlDate
argument_list|(
literal|"1582-10-15"
argument_list|)
argument_list|,
name|is
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1582-10-15"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test date range 0001-01-01 to 9999-12-31 required by ANSI SQL.    *    *<p>Java may not be able to represent 0001-01-01 depending on the default    * time zone. If the date would fall outside of Anno Domini (AD) when    * converted to the default time zone, that date should not be tested.    *    *<p>Not every time zone has a January 1st 12:00am, so this test skips those    * dates.    */
annotation|@
name|Test
name|void
name|testToIntWithSqlDateInAnsiDateRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|9999
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|str
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%04d-01-01"
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|final
name|java
operator|.
name|sql
operator|.
name|Date
name|date
init|=
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
decl_stmt|;
specifier|final
name|Timestamp
name|timestamp
init|=
operator|new
name|Timestamp
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"00:00:00.0"
argument_list|)
condition|)
block|{
comment|// Test equality if the time is valid in Java
name|assertThat
argument_list|(
literal|"Converts '"
operator|+
name|str
operator|+
literal|"' from SQL to Unix date"
argument_list|,
name|toInt
argument_list|(
name|date
argument_list|)
argument_list|,
name|is
argument_list|(
name|dateStringToUnixDate
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Test result matches legacy behavior if the time cannot be
comment|// represented in Java. This probably results in a different date but
comment|// is pretty rare.
specifier|final
name|long
name|expected
init|=
operator|(
name|date
operator|.
name|getTime
argument_list|()
operator|+
name|DateTimeUtils
operator|.
name|DEFAULT_ZONE
operator|.
name|getOffset
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
operator|)
operator|/
name|DateTimeUtils
operator|.
name|MILLIS_PER_DAY
decl_stmt|;
name|assertThat
argument_list|(
literal|"Converts '"
operator|+
name|str
operator|+
literal|"' from SQL to Unix date using legacy behavior"
argument_list|,
name|toInt
argument_list|(
name|date
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|int
operator|)
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test using a custom {@link TimeZone} to calculate the Unix timestamp.    * Dates created by a {@link java.sql.Date} method should be converted    * relative to the local time and not UTC.    */
annotation|@
name|Test
specifier|public
name|void
name|testToIntWithTimeZone
parameter_list|()
block|{
comment|// Dates created by a Calendar should be converted to a Unix date in that
comment|// time zone
specifier|final
name|Calendar
name|utcCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|utcCal
operator|.
name|set
argument_list|(
literal|1970
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|utcCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toInt
argument_list|(
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|utcCal
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|,
name|utcCal
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Dates should be relative to the local time and not UTC
specifier|final
name|java
operator|.
name|sql
operator|.
name|Date
name|epoch
init|=
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01"
argument_list|)
decl_stmt|;
specifier|final
name|TimeZone
name|minusDayZone
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|minusDayZone
operator|.
name|setRawOffset
argument_list|(
operator|(
name|int
operator|)
operator|(
name|minusDayZone
operator|.
name|getRawOffset
argument_list|()
operator|-
name|MILLIS_PER_DAY
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toInt
argument_list|(
name|epoch
argument_list|,
name|minusDayZone
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeZone
name|plusDayZone
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|plusDayZone
operator|.
name|setRawOffset
argument_list|(
operator|(
name|int
operator|)
operator|(
name|plusDayZone
operator|.
name|getRawOffset
argument_list|()
operator|+
name|MILLIS_PER_DAY
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toInt
argument_list|(
name|epoch
argument_list|,
name|plusDayZone
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a nullable date in the local time zone converts to a Unix    * timestamp in UTC.    */
annotation|@
name|Test
name|void
name|testToIntOptionalWithLocalTimeZone
parameter_list|()
block|{
name|assertThat
argument_list|(
name|toIntOptional
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toIntOptional
argument_list|(
operator|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|)
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a nullable date in the given time zone converts to a Unix    * timestamp in UTC.    */
annotation|@
name|Test
name|void
name|testToIntOptionalWithCustomTimeZone
parameter_list|()
block|{
specifier|final
name|TimeZone
name|utc
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toIntOptional
argument_list|(
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|utc
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toIntOptional
argument_list|(
literal|null
argument_list|,
name|utc
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a time in the local time zone converts to a Unix time in UTC.    */
annotation|@
name|Test
name|void
name|testToIntWithSqlTime
parameter_list|()
block|{
name|assertThat
argument_list|(
name|sqlTime
argument_list|(
literal|"00:00:00"
argument_list|)
argument_list|,
name|is
argument_list|(
name|timeStringToUnixDate
argument_list|(
literal|"00:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlTime
argument_list|(
literal|"23:59:59"
argument_list|)
argument_list|,
name|is
argument_list|(
name|timeStringToUnixDate
argument_list|(
literal|"23:59:59"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a nullable time in the local time zone converts to a Unix time    * in UTC.    */
annotation|@
name|Test
name|void
name|testToIntOptionalWithSqlTime
parameter_list|()
block|{
name|assertThat
argument_list|(
name|toIntOptional
argument_list|(
name|Time
operator|.
name|valueOf
argument_list|(
literal|"00:00:00"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toIntOptional
argument_list|(
operator|(
name|Time
operator|)
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a timestamp in the local time zone converts to a Unix timestamp    * in UTC.    */
annotation|@
name|Test
name|void
name|testToLongWithSqlTimestamp
parameter_list|()
block|{
name|assertThat
argument_list|(
name|sqlTimestamp
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlTimestamp
argument_list|(
literal|"2014-09-30 15:28:27.356"
argument_list|)
argument_list|,
name|is
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"2014-09-30 15:28:27.356"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlTimestamp
argument_list|(
literal|"1500-04-30 12:00:00.123"
argument_list|)
argument_list|,
name|is
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1500-04-30 12:00:00.123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test using a custom {@link TimeZone} to calculate the Unix timestamp.    * Timestamps created by a {@link Calendar} should be converted to a Unix    * timestamp in the given time zone. Timestamps created by a {@link Timestamp}    * method should be converted relative to the local time and not UTC.    */
annotation|@
name|Test
name|void
name|testToLongWithSqlTimestampAndCustomTimeZone
parameter_list|()
block|{
specifier|final
name|Timestamp
name|epoch
init|=
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
decl_stmt|;
specifier|final
name|Calendar
name|utcCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|utcCal
operator|.
name|set
argument_list|(
literal|1970
argument_list|,
name|Calendar
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|utcCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toLong
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|utcCal
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|,
name|utcCal
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeZone
name|est
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT-5:00"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toLong
argument_list|(
name|epoch
argument_list|,
name|est
argument_list|)
argument_list|,
name|is
argument_list|(
name|epoch
operator|.
name|getTime
argument_list|()
operator|+
name|est
operator|.
name|getOffset
argument_list|(
name|epoch
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeZone
name|ist
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT+5:00"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toLong
argument_list|(
name|epoch
argument_list|,
name|ist
argument_list|)
argument_list|,
name|is
argument_list|(
name|epoch
operator|.
name|getTime
argument_list|()
operator|+
name|ist
operator|.
name|getOffset
argument_list|(
name|epoch
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test calendar conversion from the standard Gregorian calendar used by    * {@code java.sql} and the proleptic Gregorian calendar used by Unix    * timestamps.    */
annotation|@
name|Test
name|void
name|testToLongWithSqlTimestampInGregorianShift
parameter_list|()
block|{
name|assertThat
argument_list|(
name|sqlTimestamp
argument_list|(
literal|"1582-10-04 00:00:00"
argument_list|)
argument_list|,
name|is
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1582-10-04 00:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlTimestamp
argument_list|(
literal|"1582-10-05 00:00:00"
argument_list|)
argument_list|,
name|is
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1582-10-15 00:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlTimestamp
argument_list|(
literal|"1582-10-15 00:00:00"
argument_list|)
argument_list|,
name|is
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1582-10-15 00:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test date range 0001-01-01 to 9999-12-31 required by ANSI SQL.    *    *<p>Java may not be able to represent 0001-01-01 depending on the default    * time zone. If the date would fall outside of Anno Domini (AD) when    * converted to the default time zone, that date should not be tested.    *    *<p>Not every time zone has a January 1st 12:00am, so this test skips those    * dates.    */
annotation|@
name|Test
name|void
name|testToLongWithSqlTimestampInAnsiDateRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|9999
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|str
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%04d-01-01 00:00:00"
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Timestamp
name|timestamp
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"00:00:00.0"
argument_list|)
condition|)
block|{
comment|// Test equality if the time is valid in Java
name|assertThat
argument_list|(
literal|"Converts '"
operator|+
name|str
operator|+
literal|"' from SQL to Unix timestamp"
argument_list|,
name|toLong
argument_list|(
name|timestamp
argument_list|)
argument_list|,
name|is
argument_list|(
name|timestampStringToUnixDate
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Test result matches legacy behavior if the time cannot be represented in Java
comment|// This probably results in a different date but is pretty rare
specifier|final
name|long
name|expected
init|=
name|timestamp
operator|.
name|getTime
argument_list|()
operator|+
name|DateTimeUtils
operator|.
name|DEFAULT_ZONE
operator|.
name|getOffset
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Converts '"
operator|+
name|str
operator|+
literal|"' from SQL to Unix timestamp using legacy behavior"
argument_list|,
name|toLong
argument_list|(
name|timestamp
argument_list|)
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests that a nullable timestamp in the local time zone converts to a Unix    * timestamp in UTC.    */
annotation|@
name|Test
name|void
name|testToLongOptionalWithLocalTimeZone
parameter_list|()
block|{
name|assertThat
argument_list|(
name|toLongOptional
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toLongOptional
argument_list|(
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a nullable timestamp in the given time zone converts to a Unix    * timestamp in UTC.    */
annotation|@
name|Test
name|void
name|testToLongOptionalWithCustomTimeZone
parameter_list|()
block|{
specifier|final
name|TimeZone
name|utc
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toLongOptional
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|utc
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toLongOptional
argument_list|(
literal|null
argument_list|,
name|utc
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a Unix timestamp converts to a date in the local time zone.    */
annotation|@
name|Test
name|void
name|testInternalToDate
parameter_list|()
block|{
name|assertThat
argument_list|(
name|internalToDate
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToDate
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1500-04-30"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1500-04-30"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test calendar conversion from the standard Gregorian calendar used by    * {@code java.sql} and the proleptic Gregorian calendar used by Unix    * timestamps.    */
annotation|@
name|Test
name|void
name|testInternalToDateWithGregorianShift
parameter_list|()
block|{
comment|// Gregorian shift
name|assertThat
argument_list|(
name|internalToDate
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1582-10-04"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1582-10-04"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToDate
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1582-10-05"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1582-10-15"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToDate
argument_list|(
name|dateStringToUnixDate
argument_list|(
literal|"1582-10-15"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1582-10-15"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test date range 0001-01-01 to 9999-12-31 required by ANSI SQL.    *    *<p>Java may not be able to represent all dates depending on the default time zone, but both    * the expected and actual assertion values handles that in the same way.    */
annotation|@
name|Test
name|void
name|testInternalToDateWithAnsiDateRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|9999
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|str
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%04d-01-01"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|internalToDate
argument_list|(
name|dateStringToUnixDate
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that a Unix time converts to a SQL time in the local time zone.    */
annotation|@
name|Test
name|void
name|testInternalToTime
parameter_list|()
block|{
name|assertThat
argument_list|(
name|internalToTime
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|Time
operator|.
name|valueOf
argument_list|(
literal|"00:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToTime
argument_list|(
literal|86399000
argument_list|)
argument_list|,
name|is
argument_list|(
name|Time
operator|.
name|valueOf
argument_list|(
literal|"23:59:59"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a Unix timestamp converts to a SQL timestamp in the local time    * zone.    */
annotation|@
name|Test
name|void
name|testInternalToTimestamp
parameter_list|()
block|{
name|assertThat
argument_list|(
name|internalToTimestamp
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToTimestamp
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"2014-09-30 15:28:27.356"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2014-09-30 15:28:27.356"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToTimestamp
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1500-04-30 12:00:00.123"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1500-04-30 12:00:00.123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test calendar conversion from the standard Gregorian calendar used by    * {@code java.sql} and the proleptic Gregorian calendar used by Unix timestamps.    */
annotation|@
name|Test
name|void
name|testInternalToTimestampWithGregorianShift
parameter_list|()
block|{
name|assertThat
argument_list|(
name|internalToTimestamp
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1582-10-04 00:00:00"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1582-10-04 00:00:00.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToTimestamp
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1582-10-05 00:00:00"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1582-10-15 00:00:00.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|internalToTimestamp
argument_list|(
name|timestampStringToUnixDate
argument_list|(
literal|"1582-10-15 00:00:00"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1582-10-15 00:00:00.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test date range 0001-01-01 to 9999-12-31 required by ANSI SQL.    *    *<p>Java may not be able to represent all dates depending on the default    * time zone, but both the expected and actual assertion values handles that    * in the same way.    */
annotation|@
name|Test
name|void
name|testInternalToTimestampWithAnsiDateRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|9999
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|str
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%04d-01-01 00:00:00"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|internalToTimestamp
argument_list|(
name|timestampStringToUnixDate
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|sqlDate
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|toInt
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|sqlTime
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|toInt
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|sqlTimestamp
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|toLong
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

