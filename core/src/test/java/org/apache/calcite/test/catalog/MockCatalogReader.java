begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalcitePrepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|CalciteCatalogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|Prepare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelReferentialConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|DynamicRecordTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeComparability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypePrecedenceList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|StructKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|CustomColumnResolvingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ExtensibleTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Schemas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|StreamableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|Wrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ModifiableViewTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|ViewTableMacro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlModality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlMonotonicity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlNameMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlNameMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorCatalogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidatorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|InitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|NullInitializerExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|JdbcTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Mock implementation of {@link SqlValidatorCatalogReader} which returns tables  * "EMP", "DEPT", "BONUS", "SALGRADE" (same as Oracle's SCOTT schema).  * Also two streams "ORDERS", "SHIPMENTS";  * and a view "EMP_20".  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MockCatalogReader
extends|extends
name|CalciteCatalogReader
block|{
specifier|static
specifier|final
name|String
name|DEFAULT_CATALOG
init|=
literal|"CATALOG"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_SCHEMA
init|=
literal|"SALES"
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|PREFIX
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|DEFAULT_SCHEMA
argument_list|)
decl_stmt|;
comment|/**    * Creates a MockCatalogReader.    *    *<p>Caller must then call {@link #init} to populate with data.</p>    *    * @param typeFactory Type factory    */
specifier|public
name|MockCatalogReader
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|super
argument_list|(
name|CalciteSchema
operator|.
name|createRootSchema
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|DEFAULT_CATALOG
argument_list|)
argument_list|,
name|SqlNameMatchers
operator|.
name|withCaseSensitive
argument_list|(
name|caseSensitive
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|PREFIX
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
name|typeFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|nameMatcher
operator|.
name|isCaseSensitive
argument_list|()
return|;
block|}
specifier|public
name|SqlNameMatcher
name|nameMatcher
parameter_list|()
block|{
return|return
name|nameMatcher
return|;
block|}
comment|/**    * Initializes this catalog reader.    */
specifier|public
specifier|abstract
name|MockCatalogReader
name|init
parameter_list|()
function_decl|;
specifier|protected
name|void
name|registerTablesWithRollUp
parameter_list|(
name|MockSchema
name|schema
parameter_list|,
name|Fixture
name|f
parameter_list|)
block|{
comment|// Register "EMP_R" table. Contains a rolled up column.
specifier|final
name|MockTable
name|empRolledTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|schema
argument_list|,
literal|"EMP_R"
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|empRolledTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|f
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|empRolledTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empRolledTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|f
operator|.
name|booleanType
argument_list|)
expr_stmt|;
name|empRolledTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKINGMIN"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|empRolledTable
operator|.
name|registerRolledUpColumn
argument_list|(
literal|"SLACKINGMIN"
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|empRolledTable
argument_list|)
expr_stmt|;
comment|// Register the "DEPT_R" table. Doesn't contain a rolled up column,
comment|// but is useful for testing join
name|MockTable
name|deptSlackingTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|schema
argument_list|,
literal|"DEPT_R"
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|deptSlackingTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|f
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deptSlackingTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKINGMIN"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|deptSlackingTable
argument_list|)
expr_stmt|;
comment|// Register nested schema NEST that contains table with a rolled up column.
name|MockSchema
name|nestedSchema
init|=
operator|new
name|MockSchema
argument_list|(
literal|"NEST"
argument_list|)
decl_stmt|;
name|registerNestedSchema
argument_list|(
name|schema
argument_list|,
name|nestedSchema
argument_list|)
expr_stmt|;
comment|// Register "EMP_R" table which contains a rolled up column in NEST schema.
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|tablePath
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|schema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|nestedSchema
operator|.
name|name
argument_list|,
literal|"EMP_R"
argument_list|)
decl_stmt|;
specifier|final
name|MockTable
name|nestedEmpRolledTable
init|=
name|MockTable
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|tablePath
argument_list|,
literal|false
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|nestedEmpRolledTable
operator|.
name|addColumn
argument_list|(
literal|"EMPNO"
argument_list|,
name|f
operator|.
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nestedEmpRolledTable
operator|.
name|addColumn
argument_list|(
literal|"DEPTNO"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|nestedEmpRolledTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKER"
argument_list|,
name|f
operator|.
name|booleanType
argument_list|)
expr_stmt|;
name|nestedEmpRolledTable
operator|.
name|addColumn
argument_list|(
literal|"SLACKINGMIN"
argument_list|,
name|f
operator|.
name|intType
argument_list|)
expr_stmt|;
name|nestedEmpRolledTable
operator|.
name|registerRolledUpColumn
argument_list|(
literal|"SLACKINGMIN"
argument_list|)
expr_stmt|;
name|registerTable
argument_list|(
name|nestedEmpRolledTable
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|protected
name|void
name|registerType
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
specifier|final
name|RelProtoDataType
name|relProtoDataType
parameter_list|)
block|{
assert|assert
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|DEFAULT_CATALOG
argument_list|)
assert|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
init|=
name|Util
operator|.
name|skipLast
argument_list|(
name|names
argument_list|)
decl_stmt|;
specifier|final
name|CalciteSchema
name|schema
init|=
name|SqlValidatorUtil
operator|.
name|getSchema
argument_list|(
name|rootSchema
argument_list|,
name|schemaPath
argument_list|,
name|SqlNameMatchers
operator|.
name|withCaseSensitive
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
argument_list|,
name|relProtoDataType
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerTable
parameter_list|(
specifier|final
name|MockTable
name|table
parameter_list|)
block|{
name|table
operator|.
name|onRegister
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
specifier|final
name|WrapperTable
name|wrapperTable
init|=
operator|new
name|WrapperTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|stream
condition|)
block|{
name|registerTable
argument_list|(
name|table
operator|.
name|names
argument_list|,
operator|new
name|StreamableWrapperTable
argument_list|(
name|table
argument_list|)
block|{
specifier|public
name|Table
name|stream
parameter_list|()
block|{
return|return
name|wrapperTable
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registerTable
argument_list|(
name|table
operator|.
name|names
argument_list|,
name|wrapperTable
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|registerTable
parameter_list|(
name|MockDynamicTable
name|table
parameter_list|)
block|{
name|registerTable
argument_list|(
name|table
operator|.
name|names
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|void
name|reregisterTable
parameter_list|(
name|MockDynamicTable
name|table
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|table
operator|.
name|names
decl_stmt|;
assert|assert
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|DEFAULT_CATALOG
argument_list|)
assert|;
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
init|=
name|Util
operator|.
name|skipLast
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|CalciteSchema
name|schema
init|=
name|SqlValidatorUtil
operator|.
name|getSchema
argument_list|(
name|rootSchema
argument_list|,
name|schemaPath
argument_list|,
name|SqlNameMatchers
operator|.
name|withCaseSensitive
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|.
name|removeTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|schema
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerTable
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
specifier|final
name|Table
name|table
parameter_list|)
block|{
assert|assert
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|DEFAULT_CATALOG
argument_list|)
assert|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
init|=
name|Util
operator|.
name|skipLast
argument_list|(
name|names
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
decl_stmt|;
specifier|final
name|CalciteSchema
name|schema
init|=
name|SqlValidatorUtil
operator|.
name|getSchema
argument_list|(
name|rootSchema
argument_list|,
name|schemaPath
argument_list|,
name|SqlNameMatchers
operator|.
name|withCaseSensitive
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerSchema
parameter_list|(
name|MockSchema
name|schema
parameter_list|)
block|{
name|rootSchema
operator|.
name|add
argument_list|(
name|schema
operator|.
name|name
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerNestedSchema
parameter_list|(
name|MockSchema
name|parentSchema
parameter_list|,
name|MockSchema
name|schema
parameter_list|)
block|{
name|rootSchema
operator|.
name|getSubSchema
argument_list|(
name|parentSchema
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
name|schema
operator|.
name|name
argument_list|,
operator|new
name|AbstractSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RelCollation
argument_list|>
name|deduceMonotonicity
parameter_list|(
name|Prepare
operator|.
name|PreparingTable
name|table
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Deduce which fields the table is sorted on.
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|table
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
operator|++
name|i
expr_stmt|;
specifier|final
name|SqlMonotonicity
name|monotonicity
init|=
name|table
operator|.
name|getMonotonicity
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|monotonicity
operator|!=
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
condition|)
block|{
specifier|final
name|RelFieldCollation
operator|.
name|Direction
name|direction
init|=
name|monotonicity
operator|.
name|isDecreasing
argument_list|()
condition|?
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
else|:
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
decl_stmt|;
name|collationList
operator|.
name|add
argument_list|(
name|RelCollations
operator|.
name|of
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|i
argument_list|,
name|direction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|collationList
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/** Column resolver. */
specifier|public
interface|interface
name|ColumnResolver
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resolveColumn
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
function_decl|;
block|}
comment|/** Mock schema. */
specifier|public
specifier|static
class|class
name|MockSchema
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|MockSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|addTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCatalogName
parameter_list|()
block|{
return|return
name|DEFAULT_CATALOG
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**    * Mock implementation of    * {@link org.apache.calcite.prepare.Prepare.PreparingTable}.    */
specifier|public
specifier|static
class|class
name|MockTable
extends|extends
name|Prepare
operator|.
name|AbstractPreparingTable
block|{
specifier|protected
specifier|final
name|MockCatalogReader
name|catalogReader
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|stream
decl_stmt|;
specifier|protected
specifier|final
name|double
name|rowCount
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
name|columnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|keyList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|referentialConstraints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|RelDataType
name|rowType
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|monotonicColumnSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|StructKind
name|kind
init|=
name|StructKind
operator|.
name|FULLY_QUALIFIED
decl_stmt|;
specifier|protected
specifier|final
name|ColumnResolver
name|resolver
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|temporal
decl_stmt|;
specifier|protected
specifier|final
name|InitializerExpressionFactory
name|initializerFactory
decl_stmt|;
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|rolledUpColumns
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Wrapped objects that can be obtained by calling      * {@link #unwrap(Class)}. Initially an immutable list, but converted to      * a mutable array list on first assignment. */
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|wraps
decl_stmt|;
specifier|public
name|MockTable
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|boolean
name|temporal
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerFactory
parameter_list|)
block|{
name|this
argument_list|(
name|catalogReader
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|)
argument_list|,
name|stream
argument_list|,
name|temporal
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|initializerFactory
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerRolledUpColumn
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
name|rolledUpColumns
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MockTable
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|boolean
name|temporal
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerFactory
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|wraps
parameter_list|)
block|{
name|this
operator|.
name|catalogReader
operator|=
name|catalogReader
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|temporal
operator|=
name|temporal
expr_stmt|;
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|initializerFactory
operator|=
name|initializerFactory
expr_stmt|;
name|this
operator|.
name|wraps
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|wraps
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy constructor.      */
specifier|protected
name|MockTable
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|boolean
name|temporal
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
name|columnList
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|keyList
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|monotonicColumnSet
parameter_list|,
name|StructKind
name|kind
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerFactory
parameter_list|)
block|{
name|this
operator|.
name|catalogReader
operator|=
name|catalogReader
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|temporal
operator|=
name|temporal
expr_stmt|;
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|collationList
operator|=
name|collationList
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|initializerFactory
operator|=
name|initializerFactory
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|monotonicColumnSet
control|)
block|{
name|addMonotonic
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|wraps
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
name|void
name|addWrap
parameter_list|(
name|Object
name|wrap
parameter_list|)
block|{
if|if
condition|(
name|wraps
operator|instanceof
name|ImmutableList
condition|)
block|{
name|wraps
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|wraps
argument_list|)
expr_stmt|;
block|}
name|wraps
operator|.
name|add
argument_list|(
name|wrap
argument_list|)
expr_stmt|;
block|}
comment|/** Implementation of AbstractModifiableTable. */
specifier|private
class|class
name|ModifiableTable
extends|extends
name|JdbcTest
operator|.
name|AbstractModifiableTable
implements|implements
name|ExtensibleTable
implements|,
name|Wrapper
block|{
specifier|protected
name|ModifiableTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|MockTable
operator|.
name|this
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|getModifiableCollection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|Queryable
argument_list|<
name|E
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getElementType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|C
parameter_list|>
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|initializerFactory
argument_list|)
condition|)
block|{
return|return
name|aClass
operator|.
name|cast
argument_list|(
name|initializerFactory
argument_list|)
return|;
block|}
if|else if
condition|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|MockTable
operator|.
name|this
argument_list|)
condition|)
block|{
return|return
name|aClass
operator|.
name|cast
argument_list|(
name|MockTable
operator|.
name|this
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|aClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|extend
parameter_list|(
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
parameter_list|)
block|{
return|return
operator|new
name|ModifiableTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|ImmutableList
argument_list|<
name|RelDataTypeField
argument_list|>
name|allFields
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|ModifiableTable
operator|.
name|this
operator|.
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
operator|.
name|getFieldList
argument_list|()
argument_list|,
name|fields
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|allFields
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExtendedColumnOffset
parameter_list|()
block|{
return|return
name|rowType
operator|.
name|getFieldCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRolledUp
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
name|rolledUpColumns
operator|.
name|contains
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rolledUpColumnValidInsideAgg
parameter_list|(
name|String
name|column
parameter_list|,
name|SqlCall
name|call
parameter_list|,
annotation|@
name|Nullable
name|SqlNode
name|parent
parameter_list|,
annotation|@
name|Nullable
name|CalciteConnectionConfig
name|config
parameter_list|)
block|{
comment|// For testing
return|return
name|call
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|MAX
operator|&&
operator|(
name|parent
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|SELECT
operator|||
name|parent
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FILTER
operator|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|RelOptTable
name|extend
parameter_list|(
specifier|final
name|Table
name|extendedTable
parameter_list|)
block|{
return|return
operator|new
name|MockTable
argument_list|(
name|catalogReader
argument_list|,
name|names
argument_list|,
name|stream
argument_list|,
name|temporal
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|initializerFactory
argument_list|,
name|wraps
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|extendedTable
operator|.
name|getRowType
argument_list|(
name|catalogReader
operator|.
name|typeFactory
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|MockTable
name|create
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|MockSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|catalogReader
argument_list|,
name|schema
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MockTable
name|create
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|)
block|{
return|return
operator|new
name|MockTable
argument_list|(
name|catalogReader
argument_list|,
name|names
argument_list|,
name|stream
argument_list|,
literal|false
argument_list|,
name|rowCount
argument_list|,
literal|null
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MockTable
name|create
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|MockSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|catalogReader
argument_list|,
name|schema
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MockTable
name|create
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|MockSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerExpressionFactory
parameter_list|,
name|boolean
name|temporal
parameter_list|)
block|{
name|MockTable
name|table
init|=
operator|new
name|MockTable
argument_list|(
name|catalogReader
argument_list|,
name|schema
operator|.
name|getCatalogName
argument_list|()
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|temporal
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|initializerExpressionFactory
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|initializerFactory
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|initializerFactory
argument_list|)
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|Table
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|Table
name|table
init|=
name|resolver
operator|==
literal|null
condition|?
operator|new
name|ModifiableTable
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
argument_list|)
else|:
operator|new
name|ModifiableTableWithCustomColumnResolving
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|names
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|table
argument_list|)
return|;
block|}
for|for
control|(
name|Object
name|handler
range|:
name|wraps
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|handler
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|handler
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|double
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|RelOptSchema
name|getRelOptSchema
parameter_list|()
block|{
return|return
name|catalogReader
return|;
block|}
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
return|return
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|this
argument_list|,
name|context
operator|.
name|getTableHints
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelCollation
argument_list|>
name|getCollationList
parameter_list|()
block|{
return|return
name|collationList
return|;
block|}
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|()
block|{
return|return
name|RelDistributions
operator|.
name|BROADCAST_DISTRIBUTED
return|;
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|ImmutableBitSet
name|columns
parameter_list|)
block|{
return|return
operator|!
name|keyList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|columns
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|keyList
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getKeys
parameter_list|()
block|{
if|if
condition|(
name|keyList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|keyList
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|getReferentialConstraints
parameter_list|()
block|{
return|return
name|referentialConstraints
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
specifier|public
name|boolean
name|supportsModality
parameter_list|(
name|SqlModality
name|modality
parameter_list|)
block|{
return|return
name|modality
operator|==
operator|(
name|stream
condition|?
name|SqlModality
operator|.
name|STREAM
else|:
name|SqlModality
operator|.
name|RELATION
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTemporal
parameter_list|()
block|{
return|return
name|temporal
return|;
block|}
specifier|public
name|void
name|onRegister
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|rowType
operator|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|kind
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|columnList
argument_list|)
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|columnList
argument_list|)
argument_list|)
expr_stmt|;
name|collationList
operator|=
name|deduceMonotonicity
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQualifiedName
parameter_list|()
block|{
return|return
name|names
return|;
block|}
specifier|public
name|SqlMonotonicity
name|getMonotonicity
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|monotonicColumnSet
operator|.
name|contains
argument_list|(
name|columnName
argument_list|)
condition|?
name|SqlMonotonicity
operator|.
name|INCREASING
else|:
name|SqlMonotonicity
operator|.
name|NOT_MONOTONIC
return|;
block|}
specifier|public
name|SqlAccessType
name|getAllowedAccess
parameter_list|()
block|{
return|return
name|SqlAccessType
operator|.
name|ALL
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
comment|// Return a true constant just to pass the tests in EnumerableTableScanRule.
return|return
name|Expressions
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|void
name|addColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
name|addColumn
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|RelDataType
name|type
parameter_list|,
name|boolean
name|isKey
parameter_list|)
block|{
if|if
condition|(
name|isKey
condition|)
block|{
name|keyList
operator|.
name|add
argument_list|(
name|columnList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|columnList
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMonotonic
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|monotonicColumnSet
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
assert|assert
name|Pair
operator|.
name|left
argument_list|(
name|columnList
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
assert|;
block|}
specifier|public
name|void
name|setKind
parameter_list|(
name|StructKind
name|kind
parameter_list|)
block|{
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
block|}
specifier|public
name|StructKind
name|getKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
comment|/**      * Subclass of {@link ModifiableTable} that also implements      * {@link CustomColumnResolvingTable}.      */
specifier|private
class|class
name|ModifiableTableWithCustomColumnResolving
extends|extends
name|ModifiableTable
implements|implements
name|CustomColumnResolvingTable
implements|,
name|Wrapper
block|{
name|ModifiableTableWithCustomColumnResolving
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resolveColumn
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|resolver
operator|.
name|resolveColumn
argument_list|(
name|rowType
argument_list|,
name|typeFactory
argument_list|,
name|names
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Alternative to MockViewTable that exercises code paths in ModifiableViewTable    * and ModifiableViewTableInitializerExpressionFactory.    */
specifier|public
specifier|static
class|class
name|MockModifiableViewRelOptTable
extends|extends
name|MockTable
block|{
specifier|private
specifier|final
name|MockModifiableViewTable
name|modifiableViewTable
decl_stmt|;
specifier|private
name|MockModifiableViewRelOptTable
parameter_list|(
name|MockModifiableViewTable
name|modifiableViewTable
parameter_list|,
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerExpressionFactory
parameter_list|)
block|{
name|super
argument_list|(
name|catalogReader
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|)
argument_list|,
name|stream
argument_list|,
literal|false
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|initializerExpressionFactory
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifiableViewTable
operator|=
name|modifiableViewTable
expr_stmt|;
block|}
comment|/**      * Copy constructor.      */
specifier|private
name|MockModifiableViewRelOptTable
parameter_list|(
name|MockModifiableViewTable
name|modifiableViewTable
parameter_list|,
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
name|columnList
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|keyList
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|RelCollation
argument_list|>
name|collationList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|monotonicColumnSet
parameter_list|,
name|StructKind
name|kind
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerFactory
parameter_list|)
block|{
name|super
argument_list|(
name|catalogReader
argument_list|,
name|stream
argument_list|,
literal|false
argument_list|,
name|rowCount
argument_list|,
name|columnList
argument_list|,
name|keyList
argument_list|,
name|rowType
argument_list|,
name|collationList
argument_list|,
name|names
argument_list|,
name|monotonicColumnSet
argument_list|,
name|kind
argument_list|,
name|resolver
argument_list|,
name|initializerFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifiableViewTable
operator|=
name|modifiableViewTable
expr_stmt|;
block|}
specifier|public
specifier|static
name|MockModifiableViewRelOptTable
name|create
parameter_list|(
name|MockModifiableViewTable
name|modifiableViewTable
parameter_list|,
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|)
block|{
specifier|final
name|Table
name|underlying
init|=
name|modifiableViewTable
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|InitializerExpressionFactory
name|initializerExpressionFactory
init|=
name|underlying
operator|instanceof
name|Wrapper
condition|?
operator|(
operator|(
name|Wrapper
operator|)
name|underlying
operator|)
operator|.
name|unwrap
argument_list|(
name|InitializerExpressionFactory
operator|.
name|class
argument_list|)
else|:
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
decl_stmt|;
return|return
operator|new
name|MockModifiableViewRelOptTable
argument_list|(
name|modifiableViewTable
argument_list|,
name|catalogReader
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|Util
operator|.
name|first
argument_list|(
name|initializerExpressionFactory
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MockViewTableMacro
name|viewMacro
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewPath
parameter_list|,
name|Boolean
name|modifiable
parameter_list|)
block|{
return|return
operator|new
name|MockViewTableMacro
argument_list|(
name|schema
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|viewPath
argument_list|,
name|modifiable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|modifiableViewTable
operator|.
name|getRowType
argument_list|(
name|catalogReader
operator|.
name|typeFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelOptTable
name|extend
parameter_list|(
name|Table
name|extendedTable
parameter_list|)
block|{
return|return
operator|new
name|MockModifiableViewRelOptTable
argument_list|(
operator|(
name|MockModifiableViewTable
operator|)
name|extendedTable
argument_list|,
name|catalogReader
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
name|columnList
argument_list|,
name|keyList
argument_list|,
name|rowType
argument_list|,
name|collationList
argument_list|,
name|names
argument_list|,
name|monotonicColumnSet
argument_list|,
name|kind
argument_list|,
name|resolver
argument_list|,
name|initializerFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|modifiableViewTable
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|modifiableViewTable
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**      * A TableMacro that creates mock ModifiableViewTable.      */
specifier|public
specifier|static
class|class
name|MockViewTableMacro
extends|extends
name|ViewTableMacro
block|{
name|MockViewTableMacro
parameter_list|(
name|CalciteSchema
name|schema
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewPath
parameter_list|,
name|Boolean
name|modifiable
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|viewPath
argument_list|,
name|modifiable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ModifiableViewTable
name|modifiableViewTable
parameter_list|(
name|CalcitePrepare
operator|.
name|AnalyzeViewResult
name|parsed
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewPath
parameter_list|,
name|CalciteSchema
name|schema
parameter_list|)
block|{
specifier|final
name|JavaTypeFactory
name|typeFactory
init|=
operator|(
name|JavaTypeFactory
operator|)
name|parsed
operator|.
name|typeFactory
decl_stmt|;
specifier|final
name|Type
name|elementType
init|=
name|typeFactory
operator|.
name|getJavaClass
argument_list|(
name|parsed
operator|.
name|rowType
argument_list|)
decl_stmt|;
return|return
operator|new
name|MockModifiableViewTable
argument_list|(
name|elementType
argument_list|,
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|parsed
operator|.
name|rowType
argument_list|)
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|viewPath
argument_list|,
name|parsed
operator|.
name|table
argument_list|,
name|Schemas
operator|.
name|path
argument_list|(
name|schema
operator|.
name|root
argument_list|()
argument_list|,
name|parsed
operator|.
name|tablePath
argument_list|)
argument_list|,
name|parsed
operator|.
name|constraint
argument_list|,
name|parsed
operator|.
name|columnMapping
argument_list|)
return|;
block|}
block|}
comment|/**      * A mock of ModifiableViewTable that can unwrap a mock RelOptTable.      */
specifier|public
specifier|static
class|class
name|MockModifiableViewTable
extends|extends
name|ModifiableViewTable
block|{
specifier|private
specifier|final
name|RexNode
name|constraint
decl_stmt|;
name|MockModifiableViewTable
parameter_list|(
name|Type
name|elementType
parameter_list|,
name|RelProtoDataType
name|rowType
parameter_list|,
name|String
name|viewSql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|schemaPath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|viewPath
parameter_list|,
name|Table
name|table
parameter_list|,
name|Path
name|tablePath
parameter_list|,
name|RexNode
name|constraint
parameter_list|,
name|ImmutableIntList
name|columnMapping
parameter_list|)
block|{
name|super
argument_list|(
name|elementType
argument_list|,
name|rowType
argument_list|,
name|viewSql
argument_list|,
name|schemaPath
argument_list|,
name|viewPath
argument_list|,
name|table
argument_list|,
name|tablePath
argument_list|,
name|constraint
argument_list|,
name|columnMapping
argument_list|)
expr_stmt|;
name|this
operator|.
name|constraint
operator|=
name|constraint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ModifiableViewTable
name|extend
parameter_list|(
name|Table
name|extendedTable
parameter_list|,
name|RelProtoDataType
name|protoRowType
parameter_list|,
name|ImmutableIntList
name|newColumnMapping
parameter_list|)
block|{
return|return
operator|new
name|MockModifiableViewTable
argument_list|(
name|getElementType
argument_list|()
argument_list|,
name|protoRowType
argument_list|,
name|getViewSql
argument_list|()
argument_list|,
name|getSchemaPath
argument_list|()
argument_list|,
name|getViewPath
argument_list|()
argument_list|,
name|extendedTable
argument_list|,
name|getTablePath
argument_list|()
argument_list|,
name|constraint
argument_list|,
name|newColumnMapping
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Mock implementation of {@link Prepare.AbstractPreparingTable} which holds {@link ViewTable}    * and delegates {@link MockTable#toRel} call to the view.    */
specifier|public
specifier|static
class|class
name|MockRelViewTable
extends|extends
name|MockTable
block|{
specifier|private
specifier|final
name|ViewTable
name|viewTable
decl_stmt|;
specifier|private
name|MockRelViewTable
parameter_list|(
name|ViewTable
name|viewTable
parameter_list|,
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerExpressionFactory
parameter_list|)
block|{
name|super
argument_list|(
name|catalogReader
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|)
argument_list|,
name|stream
argument_list|,
literal|false
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|initializerExpressionFactory
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|viewTable
operator|=
name|viewTable
expr_stmt|;
block|}
specifier|public
specifier|static
name|MockRelViewTable
name|create
parameter_list|(
name|ViewTable
name|viewTable
parameter_list|,
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|)
block|{
name|Table
name|underlying
init|=
name|viewTable
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|InitializerExpressionFactory
name|initializerExpressionFactory
init|=
name|underlying
operator|instanceof
name|Wrapper
condition|?
operator|(
operator|(
name|Wrapper
operator|)
name|underlying
operator|)
operator|.
name|unwrap
argument_list|(
name|InitializerExpressionFactory
operator|.
name|class
argument_list|)
else|:
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
decl_stmt|;
return|return
operator|new
name|MockRelViewTable
argument_list|(
name|viewTable
argument_list|,
name|catalogReader
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|Util
operator|.
name|first
argument_list|(
name|initializerExpressionFactory
argument_list|,
name|NullInitializerExpressionFactory
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|viewTable
operator|.
name|getRowType
argument_list|(
name|catalogReader
operator|.
name|typeFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|)
block|{
return|return
name|viewTable
operator|.
name|toRel
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|viewTable
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|viewTable
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
comment|/**    * Mock implementation of    * {@link org.apache.calcite.prepare.Prepare.PreparingTable} for views.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|MockViewTable
extends|extends
name|MockTable
block|{
specifier|private
specifier|final
name|MockTable
name|fromTable
decl_stmt|;
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|ImmutableIntList
name|mapping
decl_stmt|;
name|MockViewTable
parameter_list|(
name|MockCatalogReader
name|catalogReader
parameter_list|,
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|stream
parameter_list|,
name|double
name|rowCount
parameter_list|,
name|MockTable
name|fromTable
parameter_list|,
name|ImmutableIntList
name|mapping
parameter_list|,
name|ColumnResolver
name|resolver
parameter_list|,
name|InitializerExpressionFactory
name|initializerFactory
parameter_list|)
block|{
name|super
argument_list|(
name|catalogReader
argument_list|,
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|,
name|stream
argument_list|,
literal|false
argument_list|,
name|rowCount
argument_list|,
name|resolver
argument_list|,
name|initializerFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|fromTable
operator|=
name|fromTable
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|fromTable
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
comment|/** Implementation of AbstractModifiableView. */
specifier|private
class|class
name|ModifiableView
extends|extends
name|JdbcTest
operator|.
name|AbstractModifiableView
implements|implements
name|Wrapper
block|{
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|fromTable
operator|.
name|unwrap
argument_list|(
name|Table
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getTablePath
parameter_list|()
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|fromTable
operator|.
name|names
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Schemas
operator|.
name|path
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableIntList
name|getColumnMapping
parameter_list|()
block|{
return|return
name|mapping
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
block|{
return|return
name|MockViewTable
operator|.
name|this
operator|.
name|getConstraint
argument_list|(
name|rexBuilder
argument_list|,
name|tableRowType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
specifier|final
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createStructType
argument_list|(
operator|new
name|AbstractList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RelDataType
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|table
operator|.
name|getRowType
argument_list|(
name|typeFactory
argument_list|)
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|C
parameter_list|>
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|table
operator|instanceof
name|Wrapper
condition|)
block|{
specifier|final
name|C
name|c
init|=
operator|(
operator|(
name|Wrapper
operator|)
name|table
operator|)
operator|.
name|unwrap
argument_list|(
name|aClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|aClass
argument_list|)
return|;
block|}
block|}
comment|/**      * Subclass of ModifiableView that also implements      * CustomColumnResolvingTable.      */
specifier|private
class|class
name|ModifiableViewWithCustomColumnResolving
extends|extends
name|ModifiableView
implements|implements
name|CustomColumnResolvingTable
implements|,
name|Wrapper
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|RelDataTypeField
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resolveColumn
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|resolver
operator|.
name|resolveColumn
argument_list|(
name|rowType
argument_list|,
name|typeFactory
argument_list|,
name|names
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|C
parameter_list|>
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|table
operator|instanceof
name|Wrapper
condition|)
block|{
specifier|final
name|C
name|c
init|=
operator|(
operator|(
name|Wrapper
operator|)
name|table
operator|)
operator|.
name|unwrap
argument_list|(
name|aClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|aClass
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|RexNode
name|getConstraint
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelDataType
name|tableRowType
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|onRegister
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
operator|.
name|onRegister
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
comment|// To simulate getRowType() behavior in ViewTable.
specifier|final
name|RelProtoDataType
name|protoRowType
init|=
name|RelDataTypeImpl
operator|.
name|proto
argument_list|(
name|rowType
argument_list|)
decl_stmt|;
name|rowType
operator|=
name|protoRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
name|RelNode
name|rel
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|fromTable
argument_list|,
name|context
operator|.
name|getTableHints
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|context
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|rel
operator|=
name|LogicalFilter
operator|.
name|create
argument_list|(
name|rel
argument_list|,
name|getConstraint
argument_list|(
name|rexBuilder
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fieldList
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|projects
init|=
operator|new
name|AbstractList
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|RexInputRef
operator|.
name|of2
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|fieldList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mapping
operator|.
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
name|LogicalProject
operator|.
name|create
argument_list|(
name|rel
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|projects
argument_list|)
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|projects
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|ModifiableView
operator|.
name|class
argument_list|)
condition|)
block|{
name|ModifiableView
name|view
init|=
name|resolver
operator|==
literal|null
condition|?
operator|new
name|ModifiableView
argument_list|()
else|:
operator|new
name|ModifiableViewWithCustomColumnResolving
argument_list|()
decl_stmt|;
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|view
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|unwrap
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
comment|/**    * Mock implementation of {@link AbstractQueryableTable} with dynamic record type.    */
specifier|public
specifier|static
class|class
name|MockDynamicTable
extends|extends
name|AbstractQueryableTable
implements|implements
name|TranslatableTable
block|{
specifier|private
specifier|final
name|DynamicRecordTypeImpl
name|rowType
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
name|MockDynamicTable
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
operator|new
name|DynamicRecordTypeImpl
argument_list|(
operator|new
name|JavaTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|rowType
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
return|return
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|relOptTable
argument_list|,
name|context
operator|.
name|getTableHints
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** Struct type based on another struct type. */
specifier|private
specifier|static
class|class
name|DelegateStructType
implements|implements
name|RelDataType
block|{
specifier|private
name|RelDataType
name|delegate
decl_stmt|;
specifier|private
name|StructKind
name|structKind
decl_stmt|;
name|DelegateStructType
parameter_list|(
name|RelDataType
name|delegate
parameter_list|,
name|StructKind
name|structKind
parameter_list|)
block|{
assert|assert
name|delegate
operator|.
name|isStruct
argument_list|()
assert|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|structKind
operator|=
name|structKind
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStruct
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isStruct
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDynamicStruct
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isDynamicStruct
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|getFieldList
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFieldList
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFieldNames
argument_list|()
return|;
block|}
specifier|public
name|int
name|getFieldCount
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFieldCount
argument_list|()
return|;
block|}
specifier|public
name|StructKind
name|getStructKind
parameter_list|()
block|{
return|return
name|structKind
return|;
block|}
specifier|public
name|RelDataTypeField
name|getField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|,
name|boolean
name|elideRecord
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|,
name|caseSensitive
argument_list|,
name|elideRecord
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isNullable
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isNullable
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getComponentType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getComponentType
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getKeyType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getKeyType
argument_list|()
return|;
block|}
specifier|public
name|RelDataType
name|getValueType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getValueType
argument_list|()
return|;
block|}
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCharset
argument_list|()
return|;
block|}
specifier|public
name|SqlCollation
name|getCollation
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCollation
argument_list|()
return|;
block|}
specifier|public
name|SqlIntervalQualifier
name|getIntervalQualifier
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getIntervalQualifier
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPrecision
argument_list|()
return|;
block|}
specifier|public
name|int
name|getScale
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getScale
argument_list|()
return|;
block|}
specifier|public
name|SqlTypeName
name|getSqlTypeName
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getSqlTypeName
argument_list|()
return|;
block|}
specifier|public
name|SqlIdentifier
name|getSqlIdentifier
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getSqlIdentifier
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFullTypeString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFullTypeString
argument_list|()
return|;
block|}
specifier|public
name|RelDataTypeFamily
name|getFamily
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFamily
argument_list|()
return|;
block|}
specifier|public
name|RelDataTypePrecedenceList
name|getPrecedenceList
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPrecedenceList
argument_list|()
return|;
block|}
specifier|public
name|RelDataTypeComparability
name|getComparability
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getComparability
argument_list|()
return|;
block|}
block|}
comment|/** Wrapper around a {@link MockTable}, giving it a {@link Table} interface.    * You can get the {@code MockTable} by calling {@link #unwrap(Class)}. */
specifier|private
specifier|static
class|class
name|WrapperTable
implements|implements
name|Table
implements|,
name|Wrapper
block|{
specifier|private
specifier|final
name|MockTable
name|table
decl_stmt|;
name|WrapperTable
parameter_list|(
name|MockTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|C
parameter_list|>
name|C
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
name|aClass
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|?
name|aClass
operator|.
name|cast
argument_list|(
name|this
argument_list|)
else|:
name|aClass
operator|.
name|isInstance
argument_list|(
name|table
argument_list|)
condition|?
name|aClass
operator|.
name|cast
argument_list|(
name|table
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|table
operator|.
name|getRowType
argument_list|()
return|;
block|}
specifier|public
name|Statistic
name|getStatistic
parameter_list|()
block|{
return|return
operator|new
name|Statistic
argument_list|()
block|{
specifier|public
name|Double
name|getRowCount
parameter_list|()
block|{
return|return
name|table
operator|.
name|rowCount
return|;
block|}
specifier|public
name|boolean
name|isKey
parameter_list|(
name|ImmutableBitSet
name|columns
parameter_list|)
block|{
return|return
name|table
operator|.
name|isKey
argument_list|(
name|columns
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|table
operator|.
name|getKeys
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|getReferentialConstraints
parameter_list|()
block|{
return|return
name|table
operator|.
name|getReferentialConstraints
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RelCollation
argument_list|>
name|getCollations
parameter_list|()
block|{
return|return
name|table
operator|.
name|collationList
return|;
block|}
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|()
block|{
return|return
name|table
operator|.
name|getDistribution
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRolledUp
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
name|table
operator|.
name|rolledUpColumns
operator|.
name|contains
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rolledUpColumnValidInsideAgg
parameter_list|(
name|String
name|column
parameter_list|,
name|SqlCall
name|call
parameter_list|,
annotation|@
name|Nullable
name|SqlNode
name|parent
parameter_list|,
annotation|@
name|Nullable
name|CalciteConnectionConfig
name|config
parameter_list|)
block|{
comment|// For testing
return|return
name|call
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|MAX
operator|&&
operator|(
name|parent
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|SELECT
operator|||
name|parent
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|FILTER
operator|)
return|;
block|}
specifier|public
name|Schema
operator|.
name|TableType
name|getJdbcTableType
parameter_list|()
block|{
return|return
name|table
operator|.
name|stream
condition|?
name|Schema
operator|.
name|TableType
operator|.
name|STREAM
else|:
name|Schema
operator|.
name|TableType
operator|.
name|TABLE
return|;
block|}
block|}
comment|/** Wrapper around a {@link MockTable}, giving it a {@link StreamableTable}    * interface. */
specifier|private
specifier|static
class|class
name|StreamableWrapperTable
extends|extends
name|WrapperTable
implements|implements
name|StreamableTable
block|{
name|StreamableWrapperTable
parameter_list|(
name|MockTable
name|table
parameter_list|)
block|{
name|super
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Table
name|stream
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

