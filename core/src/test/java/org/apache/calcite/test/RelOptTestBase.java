begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ChainedRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|DefaultRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * RelOptTestBase is an abstract base for tests which exercise a planner and/or  * rules via {@link DiffRepository}.  */
end_comment

begin_class
specifier|abstract
class|class
name|RelOptTestBase
extends|extends
name|SqlToRelTestBase
block|{
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|protected
name|Tester
name|createTester
parameter_list|()
block|{
return|return
name|super
operator|.
name|createTester
argument_list|()
operator|.
name|withDecorrelation
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Checks the plan for a SQL statement before/after executing a given rule.    *    * @param rule Planner rule    * @param sql  SQL query    */
specifier|protected
name|void
name|checkPlanning
parameter_list|(
name|RelOptRule
name|rule
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|HepProgramBuilder
name|programBuilder
init|=
name|HepProgram
operator|.
name|builder
argument_list|()
decl_stmt|;
name|programBuilder
operator|.
name|addRuleInstance
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|checkPlanning
argument_list|(
name|programBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks the plan for a SQL statement before/after executing a given    * program.    *    * @param program Planner program    * @param sql     SQL query    */
specifier|protected
name|void
name|checkPlanning
parameter_list|(
name|HepProgram
name|program
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|checkPlanning
argument_list|(
operator|new
name|HepPlanner
argument_list|(
name|program
argument_list|)
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks the plan for a SQL statement before/after executing a given    * planner.    *    * @param planner Planner    * @param sql     SQL query    */
specifier|protected
name|void
name|checkPlanning
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|checkPlanning
argument_list|(
name|tester
argument_list|,
literal|null
argument_list|,
name|planner
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the plan is the same before and after executing a given    * planner. Useful for checking circumstances where rules should not fire.    *    * @param planner Planner    * @param sql     SQL query    */
specifier|protected
name|void
name|checkPlanUnchanged
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|checkPlanning
argument_list|(
name|tester
argument_list|,
literal|null
argument_list|,
name|planner
argument_list|,
name|sql
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks the plan for a SQL statement before/after executing a given rule,    * with a pre-program to prepare the tree.    *    * @param tester     Tester    * @param preProgram Program to execute before comparing before state    * @param planner    Planner    * @param sql        SQL query    */
specifier|protected
name|void
name|checkPlanning
parameter_list|(
name|Tester
name|tester
parameter_list|,
name|HepProgram
name|preProgram
parameter_list|,
name|RelOptPlanner
name|planner
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|checkPlanning
argument_list|(
name|tester
argument_list|,
name|preProgram
argument_list|,
name|planner
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks the plan for a SQL statement before/after executing a given rule,    * with a pre-program to prepare the tree.    *    * @param tester     Tester    * @param preProgram Program to execute before comparing before state    * @param planner    Planner    * @param sql        SQL query    * @param unchanged  Whether the rule is to have no effect    */
specifier|protected
name|void
name|checkPlanning
parameter_list|(
name|Tester
name|tester
parameter_list|,
name|HepProgram
name|preProgram
parameter_list|,
name|RelOptPlanner
name|planner
parameter_list|,
name|String
name|sql
parameter_list|,
name|boolean
name|unchanged
parameter_list|)
block|{
specifier|final
name|DiffRepository
name|diffRepos
init|=
name|getDiffRepos
argument_list|()
decl_stmt|;
name|String
name|sql2
init|=
name|diffRepos
operator|.
name|expand
argument_list|(
literal|"sql"
argument_list|,
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|RelRoot
name|root
init|=
name|tester
operator|.
name|convertSqlToRel
argument_list|(
name|sql2
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|relInitial
init|=
name|root
operator|.
name|rel
decl_stmt|;
name|assertTrue
argument_list|(
name|relInitial
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RelMetadataProvider
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|DefaultRelMetadataProvider
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|planner
operator|.
name|registerMetadataProviders
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|RelMetadataProvider
name|plannerChain
init|=
name|ChainedRelMetadataProvider
operator|.
name|of
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|relInitial
operator|.
name|getCluster
argument_list|()
operator|.
name|setMetadataProvider
argument_list|(
name|plannerChain
argument_list|)
expr_stmt|;
name|RelNode
name|relBefore
decl_stmt|;
if|if
condition|(
name|preProgram
operator|==
literal|null
condition|)
block|{
name|relBefore
operator|=
name|relInitial
expr_stmt|;
block|}
else|else
block|{
name|HepPlanner
name|prePlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|preProgram
argument_list|)
decl_stmt|;
name|prePlanner
operator|.
name|setRoot
argument_list|(
name|relInitial
argument_list|)
expr_stmt|;
name|relBefore
operator|=
name|prePlanner
operator|.
name|findBestExp
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|relBefore
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|planBefore
init|=
name|NL
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|relBefore
argument_list|)
decl_stmt|;
name|diffRepos
operator|.
name|assertEquals
argument_list|(
literal|"planBefore"
argument_list|,
literal|"${planBefore}"
argument_list|,
name|planBefore
argument_list|)
expr_stmt|;
name|SqlToRelTestBase
operator|.
name|assertValid
argument_list|(
name|relBefore
argument_list|)
expr_stmt|;
name|planner
operator|.
name|setRoot
argument_list|(
name|relBefore
argument_list|)
expr_stmt|;
name|RelNode
name|relAfter
init|=
name|planner
operator|.
name|findBestExp
argument_list|()
decl_stmt|;
name|String
name|planAfter
init|=
name|NL
operator|+
name|RelOptUtil
operator|.
name|toString
argument_list|(
name|relAfter
argument_list|)
decl_stmt|;
if|if
condition|(
name|unchanged
condition|)
block|{
name|assertThat
argument_list|(
name|planAfter
argument_list|,
name|is
argument_list|(
name|planBefore
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffRepos
operator|.
name|assertEquals
argument_list|(
literal|"planAfter"
argument_list|,
literal|"${planAfter}"
argument_list|,
name|planAfter
argument_list|)
expr_stmt|;
if|if
condition|(
name|planBefore
operator|.
name|equals
argument_list|(
name|planAfter
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected plan before and after is the same.\n"
operator|+
literal|"You must use unchanged=true or call checkPlanUnchanged"
argument_list|)
throw|;
block|}
block|}
name|SqlToRelTestBase
operator|.
name|assertValid
argument_list|(
name|relAfter
argument_list|)
expr_stmt|;
block|}
comment|/** Sets the SQL statement for a test. */
name|Sql
name|sql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
operator|new
name|Sql
argument_list|(
name|sql
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Allows fluent testing. */
class|class
name|Sql
block|{
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
specifier|private
specifier|final
name|HepPlanner
name|hepPlanner
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|expand
decl_stmt|;
specifier|public
name|Sql
parameter_list|(
name|String
name|sql
parameter_list|,
name|HepPlanner
name|hepPlanner
parameter_list|,
name|boolean
name|expand
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
name|this
operator|.
name|hepPlanner
operator|=
name|hepPlanner
expr_stmt|;
name|this
operator|.
name|expand
operator|=
name|expand
expr_stmt|;
block|}
specifier|public
name|Sql
name|with
parameter_list|(
name|HepPlanner
name|hepPlanner
parameter_list|)
block|{
return|return
operator|new
name|Sql
argument_list|(
name|sql
argument_list|,
name|hepPlanner
argument_list|,
name|expand
argument_list|)
return|;
block|}
specifier|public
name|Sql
name|expand
parameter_list|(
name|boolean
name|expand
parameter_list|)
block|{
return|return
operator|new
name|Sql
argument_list|(
name|sql
argument_list|,
name|hepPlanner
argument_list|,
name|expand
argument_list|)
return|;
block|}
specifier|public
name|void
name|check
parameter_list|()
block|{
name|checkPlanning
argument_list|(
name|tester
operator|.
name|withExpand
argument_list|(
name|expand
argument_list|)
argument_list|,
literal|null
argument_list|,
name|hepPlanner
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RelOptTestBase.java
end_comment

end_unit

