begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|fuzzer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|RexProgramBuilderBase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Generates random {@link RexNode} instances for tests.  */
end_comment

begin_class
specifier|public
class|class
name|RexFuzzer
extends|extends
name|RexProgramBuilderBase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_VARS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
index|[]
name|BOOL_TO_BOOL
init|=
block|{
name|SqlStdOperatorTable
operator|.
name|NOT
block|,
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
block|,
name|SqlStdOperatorTable
operator|.
name|IS_FALSE
block|,
name|SqlStdOperatorTable
operator|.
name|IS_NOT_TRUE
block|,
name|SqlStdOperatorTable
operator|.
name|IS_NOT_FALSE
block|,   }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
index|[]
name|ANY_TO_BOOL
init|=
block|{
name|SqlStdOperatorTable
operator|.
name|IS_NULL
block|,
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
block|,
name|SqlStdOperatorTable
operator|.
name|IS_UNKNOWN
block|,
name|SqlStdOperatorTable
operator|.
name|IS_NOT_UNKNOWN
block|,   }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
index|[]
name|COMPARABLE_TO_BOOL
init|=
block|{
name|SqlStdOperatorTable
operator|.
name|EQUALS
block|,
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
block|,
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
block|,
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
block|,
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
block|,
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
block|,
name|SqlStdOperatorTable
operator|.
name|IS_DISTINCT_FROM
block|,
name|SqlStdOperatorTable
operator|.
name|IS_NOT_DISTINCT_FROM
block|,   }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
index|[]
name|BOOL_TO_BOOL_MULTI_ARG
init|=
block|{
name|SqlStdOperatorTable
operator|.
name|OR
block|,
name|SqlStdOperatorTable
operator|.
name|AND
block|,
name|SqlStdOperatorTable
operator|.
name|COALESCE
block|,   }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
index|[]
name|ANY_SAME_TYPE_MULTI_ARG
init|=
block|{
name|SqlStdOperatorTable
operator|.
name|COALESCE
block|,   }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
index|[]
name|NUMERIC_TO_NUMERIC
init|=
block|{
name|SqlStdOperatorTable
operator|.
name|PLUS
block|,
name|SqlStdOperatorTable
operator|.
name|MINUS
block|,
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
block|,
comment|// Divide by zero is not allowed, so we do not generate divide
comment|//      SqlStdOperatorTable.DIVIDE,
comment|//      SqlStdOperatorTable.DIVIDE_INTEGER,
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SqlOperator
index|[]
name|UNARY_NUMERIC
init|=
block|{
name|SqlStdOperatorTable
operator|.
name|UNARY_MINUS
block|,
name|SqlStdOperatorTable
operator|.
name|UNARY_PLUS
block|,   }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|INT_VALUES
init|=
block|{
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|100500
block|}
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|intType
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|nullableIntType
decl_stmt|;
comment|/**    * Generates randomized {@link RexNode}.    *    * @param rexBuilder  builder to be used to create nodes    * @param typeFactory type factory    */
specifier|public
name|RexFuzzer
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|intType
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|nullableIntType
operator|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|intType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RexNode
name|getExpression
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
return|return
name|getComparableExpression
argument_list|(
name|r
argument_list|,
name|depth
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|fuzzOperator
parameter_list|(
name|Random
name|r
parameter_list|,
name|SqlOperator
index|[]
name|operators
parameter_list|,
name|RexNode
modifier|...
name|args
parameter_list|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|operators
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|operators
operator|.
name|length
argument_list|)
index|]
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|fuzzOperator
parameter_list|(
name|Random
name|r
parameter_list|,
name|SqlOperator
index|[]
name|operators
parameter_list|,
name|int
name|length
parameter_list|,
name|Function
argument_list|<
name|Random
argument_list|,
name|RexNode
argument_list|>
name|factory
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|args
operator|.
name|add
argument_list|(
name|factory
operator|.
name|apply
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|operators
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|operators
operator|.
name|length
argument_list|)
index|]
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|RexNode
name|getComparableExpression
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|int
name|v
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|v
condition|)
block|{
case|case
literal|0
case|:
return|return
name|getBoolExpression
argument_list|(
name|r
argument_list|,
name|depth
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|getIntExpression
argument_list|(
name|r
argument_list|,
name|depth
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not reach here"
argument_list|)
throw|;
block|}
specifier|public
name|RexNode
name|getSimpleBool
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|int
name|v
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|v
condition|)
block|{
case|case
literal|0
case|:
name|boolean
name|nullable
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|field
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|MAX_VARS
argument_list|)
decl_stmt|;
return|return
name|nullable
condition|?
name|vBool
argument_list|(
name|field
argument_list|)
else|:
name|vBoolNotNull
argument_list|(
name|field
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|r
operator|.
name|nextBoolean
argument_list|()
condition|?
name|trueLiteral
else|:
name|falseLiteral
return|;
case|case
literal|2
case|:
return|return
name|nullBool
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not reach here"
argument_list|)
throw|;
block|}
specifier|public
name|RexNode
name|getBoolExpression
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|int
name|v
init|=
name|depth
operator|<=
literal|0
condition|?
literal|0
else|:
name|r
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|v
condition|)
block|{
case|case
literal|0
case|:
return|return
name|getSimpleBool
argument_list|(
name|r
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|ANY_TO_BOOL
argument_list|,
name|getExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|BOOL_TO_BOOL
argument_list|,
name|getBoolExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|COMPARABLE_TO_BOOL
argument_list|,
name|getBoolExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|,
name|getBoolExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|COMPARABLE_TO_BOOL
argument_list|,
name|getIntExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|,
name|getIntExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|BOOL_TO_BOOL_MULTI_ARG
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|2
argument_list|,
name|x
lambda|->
name|getBoolExpression
argument_list|(
name|x
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|fuzzCase
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|x
lambda|->
name|getBoolExpression
argument_list|(
name|x
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not reach here"
argument_list|)
throw|;
block|}
specifier|public
name|RexNode
name|getSimpleInt
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|int
name|v
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|v
condition|)
block|{
case|case
literal|0
case|:
name|boolean
name|nullable
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|field
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|MAX_VARS
argument_list|)
decl_stmt|;
return|return
name|nullable
condition|?
name|vInt
argument_list|(
name|field
argument_list|)
else|:
name|vIntNotNull
argument_list|(
name|field
argument_list|)
return|;
case|case
literal|1
case|:
block|{
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|INT_VALUES
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|val
init|=
name|i
operator|<
name|INT_VALUES
operator|.
name|length
condition|?
name|INT_VALUES
index|[
name|i
index|]
else|:
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|val
argument_list|,
name|r
operator|.
name|nextBoolean
argument_list|()
condition|?
name|intType
else|:
name|nullableIntType
argument_list|,
literal|false
argument_list|)
return|;
block|}
case|case
literal|2
case|:
return|return
name|nullInt
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not reach here"
argument_list|)
throw|;
block|}
specifier|public
name|RexNode
name|getIntExpression
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|int
name|v
init|=
name|depth
operator|<=
literal|0
condition|?
literal|0
else|:
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|v
condition|)
block|{
case|case
literal|0
case|:
return|return
name|getSimpleInt
argument_list|(
name|r
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|UNARY_NUMERIC
argument_list|,
name|getIntExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|NUMERIC_TO_NUMERIC
argument_list|,
name|getIntExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|,
name|getIntExpression
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|fuzzOperator
argument_list|(
name|r
argument_list|,
name|ANY_SAME_TYPE_MULTI_ARG
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|2
argument_list|,
name|x
lambda|->
name|getIntExpression
argument_list|(
name|x
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|fuzzCase
argument_list|(
name|r
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|x
lambda|->
name|getIntExpression
argument_list|(
name|x
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not reach here"
argument_list|)
throw|;
block|}
specifier|public
name|RexNode
name|fuzzCase
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|depth
parameter_list|,
name|Function
argument_list|<
name|Random
argument_list|,
name|RexNode
argument_list|>
name|resultFactory
parameter_list|)
block|{
name|boolean
name|caseArgWhen
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|caseBranches
init|=
literal|1
operator|+
operator|(
name|depth
operator|<=
literal|0
condition|?
literal|0
else|:
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|caseBranches
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|Random
argument_list|,
name|RexNode
argument_list|>
name|exprFactory
decl_stmt|;
if|if
condition|(
operator|!
name|caseArgWhen
condition|)
block|{
name|exprFactory
operator|=
name|x
lambda|->
name|getBoolExpression
argument_list|(
name|x
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|type
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RexNode
name|arg
decl_stmt|;
name|Function
argument_list|<
name|Random
argument_list|,
name|RexNode
argument_list|>
name|baseExprFactory
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|0
case|:
name|baseExprFactory
operator|=
name|x
lambda|->
name|getBoolExpression
argument_list|(
name|x
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|baseExprFactory
operator|=
name|x
lambda|->
name|getIntExpression
argument_list|(
name|x
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not reach here: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|arg
operator|=
name|baseExprFactory
operator|.
name|apply
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// emulate  case when arg=2 then .. when arg=4 then ...
name|exprFactory
operator|=
name|x
lambda|->
name|eq
argument_list|(
name|arg
argument_list|,
name|baseExprFactory
operator|.
name|apply
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|caseBranches
condition|;
name|i
operator|++
control|)
block|{
name|args
operator|.
name|add
argument_list|(
name|exprFactory
operator|.
name|apply
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|args
operator|.
name|add
argument_list|(
name|resultFactory
operator|.
name|apply
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// then
block|}
name|args
operator|.
name|add
argument_list|(
name|resultFactory
operator|.
name|apply
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// else
return|return
name|case_
argument_list|(
name|args
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RexFuzzer.java
end_comment

end_unit

