begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|TimeFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|TimeFrameSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|TimeFrames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|fraction
operator|.
name|BigFraction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|dateStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|timestampStringToUnixDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|unixDateToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|DateTimeUtils
operator|.
name|unixTimestampToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|CENTURY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|DAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|DECADE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|HOUR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|ISODOW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|ISOYEAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|MICROSECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|MILLENNIUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|MILLISECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|MINUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|MONTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|NANOSECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|QUARTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|SECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|WEEK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
operator|.
name|YEAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_comment
comment|/** Unit test for {@link org.apache.calcite.rel.type.TimeFrame}. */
end_comment

begin_class
specifier|public
class|class
name|TimeFrameTest
block|{
comment|/** Unit test for {@link org.apache.calcite.rel.type.TimeFrames#CORE}. */
annotation|@
name|Test
name|void
name|testAvaticaTimeFrame
parameter_list|()
block|{
specifier|final
name|TimeFrameSet
name|timeFrameSet
init|=
name|TimeFrames
operator|.
name|CORE
decl_stmt|;
specifier|final
name|TimeFrame
name|year
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|year
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|year
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"YEAR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timeFrameSet
operator|.
name|getUnit
argument_list|(
name|year
argument_list|)
argument_list|,
name|is
argument_list|(
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeFrame
name|month
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
name|MONTH
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|month
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|month
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"MONTH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timeFrameSet
operator|.
name|getUnit
argument_list|(
name|month
argument_list|)
argument_list|,
name|is
argument_list|(
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Number
name|monthPerYear
init|=
name|month
operator|.
name|per
argument_list|(
name|year
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|monthPerYear
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|monthPerYear
argument_list|,
name|is
argument_list|(
operator|new
name|BigFraction
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Number
name|yearPerMonth
init|=
name|year
operator|.
name|per
argument_list|(
name|month
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|yearPerMonth
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|yearPerMonth
argument_list|,
name|is
argument_list|(
name|BigFraction
operator|.
name|ONE
operator|.
name|divide
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Number
name|monthPerMonth
init|=
name|month
operator|.
name|per
argument_list|(
name|month
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|monthPerMonth
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|monthPerMonth
argument_list|,
name|is
argument_list|(
name|BigFraction
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeFrame
name|second
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|SECOND
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|second
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|second
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"SECOND"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeFrame
name|minute
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|MINUTE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|minute
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|minute
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"MINUTE"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeFrame
name|nano
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|NANOSECOND
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nano
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nano
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"NANOSECOND"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Number
name|secondPerMonth
init|=
name|second
operator|.
name|per
argument_list|(
name|month
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondPerMonth
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Number
name|nanoPerMinute
init|=
name|nano
operator|.
name|per
argument_list|(
name|minute
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nanoPerMinute
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nanoPerMinute
argument_list|,
name|is
argument_list|(
name|BigFraction
operator|.
name|ONE
operator|.
name|multiply
argument_list|(
literal|1_000
argument_list|)
operator|.
name|multiply
argument_list|(
literal|1_000
argument_list|)
operator|.
name|multiply
argument_list|(
literal|1_000
argument_list|)
operator|.
name|multiply
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ISOWEEK is the only core time frame without a corresponding time unit.
comment|// There is no TimeUnit.ISOWEEK.
specifier|final
name|TimeFrame
name|isoWeek
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"ISOWEEK"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|isoWeek
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isoWeek
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"ISOWEEK"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timeFrameSet
operator|.
name|getUnit
argument_list|(
name|isoWeek
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// FRAC_SECOND is an alias.
specifier|final
name|TimeFrame
name|fracSecond
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"FRAC_SECOND"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fracSecond
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fracSecond
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"MICROSECOND"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timeFrameSet
operator|.
name|getUnit
argument_list|(
name|fracSecond
argument_list|)
argument_list|,
name|is
argument_list|(
name|MICROSECOND
argument_list|)
argument_list|)
expr_stmt|;
comment|// SQL_TSI_QUARTER is an alias.
specifier|final
name|TimeFrame
name|sqlTsiQuarter
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"SQL_TSI_QUARTER"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sqlTsiQuarter
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sqlTsiQuarter
operator|.
name|name
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"QUARTER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timeFrameSet
operator|.
name|getUnit
argument_list|(
name|sqlTsiQuarter
argument_list|)
argument_list|,
name|is
argument_list|(
name|QUARTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testConflict
parameter_list|()
block|{
name|TimeFrameSet
operator|.
name|Builder
name|b
init|=
name|TimeFrameSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|addCore
argument_list|(
literal|"SECOND"
argument_list|)
expr_stmt|;
name|b
operator|.
name|addMultiple
argument_list|(
literal|"MINUTE"
argument_list|,
literal|60
argument_list|,
literal|"SECOND"
argument_list|)
expr_stmt|;
name|b
operator|.
name|addMultiple
argument_list|(
literal|"HOUR"
argument_list|,
literal|60
argument_list|,
literal|"MINUTE"
argument_list|)
expr_stmt|;
name|b
operator|.
name|addMultiple
argument_list|(
literal|"DAY"
argument_list|,
literal|24
argument_list|,
literal|"SECOND"
argument_list|)
expr_stmt|;
name|b
operator|.
name|addDivision
argument_list|(
literal|"MILLISECOND"
argument_list|,
literal|1_000
argument_list|,
literal|"SECOND"
argument_list|)
expr_stmt|;
comment|// It's important that TimeFrame.Builder throws when you attempt to add
comment|// a frame with the same name. It prevents DAGs and cycles.
try|try
block|{
name|b
operator|.
name|addDivision
argument_list|(
literal|"MILLISECOND"
argument_list|,
literal|10_000
argument_list|,
literal|"MINUTE"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"duplicate frame: MILLISECOND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|addCore
argument_list|(
literal|"SECOND"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"duplicate frame: SECOND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|addQuotient
argument_list|(
literal|"SECOND"
argument_list|,
literal|"MINUTE"
argument_list|,
literal|"HOUR"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"duplicate frame: SECOND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|addQuotient
argument_list|(
literal|"MINUTE_OF_WEEK"
argument_list|,
literal|"MINUTE"
argument_list|,
literal|"WEEK"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"unknown frame: WEEK"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|addQuotient
argument_list|(
literal|"DAY_OF_WEEK"
argument_list|,
literal|"DAY"
argument_list|,
literal|"YEAR"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"unknown frame: YEAR"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|addAlias
argument_list|(
literal|"SECOND"
argument_list|,
literal|"DAY"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"duplicate frame: SECOND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|addAlias
argument_list|(
literal|"FOO"
argument_list|,
literal|"BAZ"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"unknown frame: BAZ"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Can't define NANOSECOND in terms of a frame that has not been defined
comment|// yet.
try|try
block|{
name|b
operator|.
name|addDivision
argument_list|(
literal|"NANOSECOND"
argument_list|,
literal|1_000
argument_list|,
literal|"MICROSECOND"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"unknown frame: MICROSECOND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We can define NANOSECOND and MICROSECOND as long as we define each frame
comment|// in terms of previous frames.
name|b
operator|.
name|addDivision
argument_list|(
literal|"NANOSECOND"
argument_list|,
literal|1_000_000
argument_list|,
literal|"MILLISECOND"
argument_list|)
expr_stmt|;
name|b
operator|.
name|addMultiple
argument_list|(
literal|"MICROSECOND"
argument_list|,
literal|1_000
argument_list|,
literal|"NANOSECOND"
argument_list|)
expr_stmt|;
comment|// Can't define a frame in terms of itself.
comment|// (I guess you should use a core frame.)
try|try
block|{
name|b
operator|.
name|addDivision
argument_list|(
literal|"PICOSECOND"
argument_list|,
literal|1
argument_list|,
literal|"PICOSECOND"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"unknown frame: PICOSECOND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TimeFrameSet
name|timeFrameSet
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|TimeFrame
name|second
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"SECOND"
argument_list|)
decl_stmt|;
specifier|final
name|TimeFrame
name|hour
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"HOUR"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hour
operator|.
name|per
argument_list|(
name|second
argument_list|)
argument_list|,
name|is
argument_list|(
name|BigFraction
operator|.
name|ONE
operator|.
name|divide
argument_list|(
literal|3_600
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeFrame
name|millisecond
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"MILLISECOND"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hour
operator|.
name|per
argument_list|(
name|millisecond
argument_list|)
argument_list|,
name|is
argument_list|(
name|BigFraction
operator|.
name|ONE
operator|.
name|divide
argument_list|(
literal|3_600_000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeFrame
name|nanosecond
init|=
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"NANOSECOND"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nanosecond
operator|.
name|per
argument_list|(
name|second
argument_list|)
argument_list|,
name|is
argument_list|(
name|BigFraction
operator|.
name|ONE
operator|.
name|multiply
argument_list|(
literal|1_000_000_000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testEvalFloor
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-01"
argument_list|,
name|WEEK
argument_list|,
name|is
argument_list|(
literal|"1970-07-26"
argument_list|)
argument_list|)
expr_stmt|;
comment|// saturday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-02"
argument_list|,
name|WEEK
argument_list|,
name|is
argument_list|(
literal|"1970-08-02"
argument_list|)
argument_list|)
expr_stmt|;
comment|// sunday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-03"
argument_list|,
name|WEEK
argument_list|,
name|is
argument_list|(
literal|"1970-08-02"
argument_list|)
argument_list|)
expr_stmt|;
comment|// monday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-04"
argument_list|,
name|WEEK
argument_list|,
name|is
argument_list|(
literal|"1970-08-02"
argument_list|)
argument_list|)
expr_stmt|;
comment|// tuesday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-01"
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
name|is
argument_list|(
literal|"1970-07-27"
argument_list|)
argument_list|)
expr_stmt|;
comment|// saturday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-02"
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
name|is
argument_list|(
literal|"1970-07-27"
argument_list|)
argument_list|)
expr_stmt|;
comment|// sunday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-03"
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
name|is
argument_list|(
literal|"1970-08-03"
argument_list|)
argument_list|)
expr_stmt|;
comment|// monday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-04"
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
name|is
argument_list|(
literal|"1970-08-03"
argument_list|)
argument_list|)
expr_stmt|;
comment|// tuesday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-04"
argument_list|,
literal|"WEEK_MONDAY"
argument_list|,
name|is
argument_list|(
literal|"1970-08-03"
argument_list|)
argument_list|)
expr_stmt|;
comment|// tuesday
name|f
operator|.
name|checkDateFloor
argument_list|(
literal|"1970-08-04"
argument_list|,
literal|"WEEK_TUESDAY"
argument_list|,
name|is
argument_list|(
literal|"1970-08-04"
argument_list|)
argument_list|)
expr_stmt|;
comment|// tuesday
name|f
operator|.
name|checkTimestampFloor
argument_list|(
literal|"1970-01-01 01:23:45"
argument_list|,
name|HOUR
argument_list|,
literal|0
argument_list|,
name|is
argument_list|(
literal|"1970-01-01 01:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkTimestampFloor
argument_list|(
literal|"1970-01-01 01:23:45"
argument_list|,
name|MINUTE
argument_list|,
literal|0
argument_list|,
name|is
argument_list|(
literal|"1970-01-01 01:23:00"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkTimestampFloor
argument_list|(
literal|"1970-01-01 01:23:45.67"
argument_list|,
name|SECOND
argument_list|,
literal|0
argument_list|,
name|is
argument_list|(
literal|"1970-01-01 01:23:45"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkTimestampFloor
argument_list|(
literal|"1970-01-01 01:23:45.6789012345"
argument_list|,
name|MILLISECOND
argument_list|,
literal|4
argument_list|,
name|is
argument_list|(
literal|"1970-01-01 01:23:45.6790"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Time frames can represent unlimited precision, but out representation of
comment|// timestamp can't represent more than millisecond precision.
name|f
operator|.
name|checkTimestampFloor
argument_list|(
literal|"1970-01-01 01:23:45.6789012345"
argument_list|,
name|MICROSECOND
argument_list|,
literal|7
argument_list|,
name|is
argument_list|(
literal|"1970-01-01 01:23:45.6790000"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkTimestampFloor
argument_list|(
literal|"1971-12-25 01:23:45"
argument_list|,
name|DAY
argument_list|,
literal|0
argument_list|,
name|is
argument_list|(
literal|"1971-12-25 00:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkTimestampFloor
argument_list|(
literal|"1971-12-25 01:23:45"
argument_list|,
name|WEEK
argument_list|,
literal|0
argument_list|,
name|is
argument_list|(
literal|"1971-12-19 00:00:00"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testCanRollUp
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
comment|// The rollup from DAY to MONTH is special. It provides the bridge between
comment|// the frames in the SECOND family and those in the MONTH family.
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Note 0: when we pass TimeUnit.ISODOW to tests, we mean f.ISOWEEK.
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|NANOSECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|MICROSECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|MILLISECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|SECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|MINUTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|HOUR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|DAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// see note 0
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|NANOSECOND
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|MICROSECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|MILLISECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|SECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|MINUTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|HOUR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|DAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MICROSECOND
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|MILLISECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|SECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|MINUTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|HOUR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|DAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLISECOND
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|SECOND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|MINUTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|HOUR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|DAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|SECOND
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|MINUTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|HOUR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|DAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MINUTE
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|HOUR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|DAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|HOUR
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|DAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DAY
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Note 1. WEEK cannot roll up to MONTH, YEAR or higher.
comment|// Some weeks cross month, year, decade, century and millennium boundaries.
comment|// Note 2. WEEK, MONTH, QUARTER, YEAR, DECADE, CENTURY, MILLENNIUM cannot
comment|// roll up to ISOYEAR. Only f.ISOWEEK can roll up to ISOYEAR.
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|WEEK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|MONTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|QUARTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|YEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|ISOYEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|DECADE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|CENTURY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|WEEK
argument_list|,
name|MILLENNIUM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|WEEK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|MONTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|QUARTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|YEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|ISOYEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|DECADE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|CENTURY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|f
operator|.
name|isoWeek
argument_list|,
name|MILLENNIUM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 1
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|WEEK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|MONTH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|ISOYEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MONTH
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|WEEK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|MONTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|QUARTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|ISOYEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|QUARTER
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|WEEK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|MONTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|QUARTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|YEAR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|ISOYEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|YEAR
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Note 3. DECADE cannot roll up to CENTURY or MILLENNIUM
comment|// because decade starts on year 0, the others start on year 1.
comment|// For example, 2000 is start of a decade, but 2001 is start of a century
comment|// and millennium.
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|WEEK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|MONTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|QUARTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|YEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|ISOYEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|DECADE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|CENTURY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 3
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|DECADE
argument_list|,
name|MILLENNIUM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 3
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|WEEK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|MONTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|QUARTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|YEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|ISOYEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|DECADE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|CENTURY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|CENTURY
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|NANOSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|MICROSECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|MILLISECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|SECOND
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|MINUTE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|HOUR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|DAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|WEEK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|f
operator|.
name|isoWeek
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|MONTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|QUARTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|YEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|ISOYEAR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// see note 2
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|DECADE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|CENTURY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|checkCanRollUp
argument_list|(
name|MILLENNIUM
argument_list|,
name|MILLENNIUM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Test fixture. Contains everything you need to write fluent tests. */
specifier|static
class|class
name|Fixture
block|{
specifier|final
name|TimeUnit
name|isoWeek
init|=
name|TimeUnit
operator|.
name|ISODOW
decl_stmt|;
specifier|final
name|TimeFrameSet
name|timeFrameSet
init|=
name|TimeFrames
operator|.
name|CORE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|MAP
decl_stmt|;
static|static
block|{
name|String
index|[]
name|values
init|=
block|{
literal|"NANOSECOND"
block|,
literal|"2022-06-25 12:34:56.123234456"
block|,
literal|"2022-06-25 12:34:56.123234456"
block|,
literal|"MICROSECOND"
block|,
literal|"2022-06-25 12:34:56.123234"
block|,
literal|"2022-06-25 12:34:56.123234"
block|,
literal|"MILLISECOND"
block|,
literal|"2022-06-25 12:34:56.123"
block|,
literal|"2022-06-25 12:34:56.124"
block|,
literal|"SECOND"
block|,
literal|"2022-06-25 12:34:56"
block|,
literal|"2022-06-25 12:34:57"
block|,
literal|"MINUTE"
block|,
literal|"2022-06-25 12:34:00"
block|,
literal|"2022-06-25 12:35:00"
block|,
literal|"HOUR"
block|,
literal|"2022-06-25 12:00:00"
block|,
literal|"2022-06-25 13:00:00"
block|,
literal|"DAY"
block|,
literal|"2022-06-25 00:00:00"
block|,
literal|"2022-06-26 00:00:00"
block|,
literal|"WEEK"
block|,
literal|"2022-06-19 00:00:00"
block|,
literal|"2022-06-26 00:00:00"
block|,
literal|"ISOWEEK"
block|,
literal|"2022-06-20 00:00:00"
block|,
literal|"2022-06-27 00:00:00"
block|,
literal|"MONTH"
block|,
literal|"2022-06-01 00:00:00"
block|,
literal|"2022-07-01 00:00:00"
block|,
literal|"QUARTER"
block|,
literal|"2022-04-01 00:00:00"
block|,
literal|"2022-07-01 00:00:00"
block|,
literal|"YEAR"
block|,
literal|"2022-01-01 00:00:00"
block|,
literal|"2023-01-01 00:00:00"
block|,
literal|"ISOYEAR"
block|,
literal|"2022-01-03 00:00:00"
block|,
literal|"2023-01-02 00:00:00"
block|,
literal|"DECADE"
block|,
literal|"2020-01-01 00:00:00"
block|,
literal|"2030-01-01 00:00:00"
block|,
literal|"CENTURY"
block|,
literal|"2001-01-01 00:00:00"
block|,
literal|"2101-01-01 00:00:00"
block|,
literal|"MILLENNIUM"
block|,
literal|"2001-01-01 00:00:00"
block|,
literal|"3001-01-01 00:00:00"
block|,       }
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|b
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
control|)
block|{
name|b
operator|.
name|put
argument_list|(
name|values
index|[
name|i
operator|++
index|]
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|values
index|[
name|i
operator|++
index|]
argument_list|,
name|values
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MAP
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|private
name|TimeFrame
name|frame
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
if|if
condition|(
name|unit
operator|==
name|ISODOW
condition|)
block|{
comment|// Just for testing. We want to test f.ISOWEEK but there is no TimeUnit
comment|// for it, so we use ISODOW as a stand-in.
return|return
name|timeFrameSet
operator|.
name|get
argument_list|(
literal|"ISOWEEK"
argument_list|)
return|;
block|}
return|return
name|timeFrameSet
operator|.
name|get
argument_list|(
name|unit
argument_list|)
return|;
block|}
name|void
name|checkDateFloor
parameter_list|(
name|String
name|in
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|int
name|inDate
init|=
name|dateStringToUnixDate
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|outDate
init|=
name|timeFrameSet
operator|.
name|floorDate
argument_list|(
name|inDate
argument_list|,
name|frame
argument_list|(
name|unit
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"floor("
operator|+
name|in
operator|+
literal|" to "
operator|+
name|unit
operator|+
literal|")"
argument_list|,
name|unixDateToString
argument_list|(
name|outDate
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
name|void
name|checkDateFloor
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|timeFrameName
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|int
name|inDate
init|=
name|dateStringToUnixDate
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|outDate
init|=
name|timeFrameSet
operator|.
name|floorDate
argument_list|(
name|inDate
argument_list|,
name|timeFrameSet
operator|.
name|get
argument_list|(
name|timeFrameName
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"floor("
operator|+
name|in
operator|+
literal|" to "
operator|+
name|timeFrameName
operator|+
literal|")"
argument_list|,
name|unixDateToString
argument_list|(
name|outDate
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
name|void
name|checkTimestampFloor
parameter_list|(
name|String
name|in
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|int
name|precision
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|long
name|inTs
init|=
name|timestampStringToUnixDate
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|long
name|outTs
init|=
name|timeFrameSet
operator|.
name|floorTimestamp
argument_list|(
name|inTs
argument_list|,
name|frame
argument_list|(
name|unit
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"floor("
operator|+
name|in
operator|+
literal|" to "
operator|+
name|unit
operator|+
literal|")"
argument_list|,
name|unixTimestampToString
argument_list|(
name|outTs
argument_list|,
name|precision
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
name|void
name|checkTimestampCeil
parameter_list|(
name|String
name|in
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|int
name|precision
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|long
name|inTs
init|=
name|timestampStringToUnixDate
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|long
name|outTs
init|=
name|timeFrameSet
operator|.
name|ceilTimestamp
argument_list|(
name|inTs
argument_list|,
name|frame
argument_list|(
name|unit
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"ceil("
operator|+
name|in
operator|+
literal|" to "
operator|+
name|unit
operator|+
literal|")"
argument_list|,
name|unixTimestampToString
argument_list|(
name|outTs
argument_list|,
name|precision
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
name|void
name|checkCanRollUp
parameter_list|(
name|TimeUnit
name|fromUnit
parameter_list|,
name|TimeUnit
name|toUnit
parameter_list|,
name|boolean
name|can
parameter_list|)
block|{
name|TimeFrame
name|fromFrame
init|=
name|frame
argument_list|(
name|fromUnit
argument_list|)
decl_stmt|;
name|TimeFrame
name|toFrame
init|=
name|frame
argument_list|(
name|toUnit
argument_list|)
decl_stmt|;
if|if
condition|(
name|can
condition|)
block|{
name|assertThat
argument_list|(
literal|"can roll up "
operator|+
name|fromUnit
operator|+
literal|" to "
operator|+
name|toUnit
argument_list|,
name|fromFrame
operator|.
name|canRollUpTo
argument_list|(
name|toFrame
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|precision
decl_stmt|;
switch|switch
condition|(
name|toUnit
condition|)
block|{
case|case
name|NANOSECOND
case|:
name|precision
operator|=
literal|9
expr_stmt|;
break|break;
case|case
name|MICROSECOND
case|:
name|precision
operator|=
literal|6
expr_stmt|;
break|break;
case|case
name|MILLISECOND
case|:
name|precision
operator|=
literal|3
expr_stmt|;
break|break;
default|default:
name|precision
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|precision
operator|<=
literal|3
condition|)
block|{
comment|// Cannot test conversion to NANOSECOND or MICROSECOND because the
comment|// representation is milliseconds.
specifier|final
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fromPair
init|=
name|requireNonNull
argument_list|(
name|MAP
operator|.
name|get
argument_list|(
name|fromFrame
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|timestampString
init|=
name|requireNonNull
argument_list|(
name|fromPair
operator|.
name|left
argument_list|)
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toPair
init|=
name|requireNonNull
argument_list|(
name|MAP
operator|.
name|get
argument_list|(
name|toFrame
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|floorTimestampString
init|=
name|requireNonNull
argument_list|(
name|toPair
operator|.
name|left
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ceilTimestampString
init|=
name|requireNonNull
argument_list|(
name|toPair
operator|.
name|right
argument_list|)
decl_stmt|;
name|checkTimestampFloor
argument_list|(
name|timestampString
argument_list|,
name|toUnit
argument_list|,
name|precision
argument_list|,
name|is
argument_list|(
name|floorTimestampString
argument_list|)
argument_list|)
expr_stmt|;
name|checkTimestampCeil
argument_list|(
name|timestampString
argument_list|,
name|toUnit
argument_list|,
name|precision
argument_list|,
name|is
argument_list|(
name|ceilTimestampString
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|dateString
init|=
name|timestampString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|String
name|floorDateString
init|=
name|floorTimestampString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|checkDateFloor
argument_list|(
name|dateString
argument_list|,
name|toUnit
argument_list|,
name|is
argument_list|(
name|floorDateString
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The 'canRollUpTo' method should be a partial order.
comment|// A partial order is reflexive (for all x, x = x)
comment|// and antisymmetric (for all x, y, if x<= y and x != y, then !(y<= x))
name|assertThat
argument_list|(
name|toFrame
operator|.
name|canRollUpTo
argument_list|(
name|fromFrame
argument_list|)
argument_list|,
name|is
argument_list|(
name|fromUnit
operator|==
name|toUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"can roll up "
operator|+
name|fromUnit
operator|+
literal|" to "
operator|+
name|toUnit
argument_list|,
name|fromFrame
operator|.
name|canRollUpTo
argument_list|(
name|toFrame
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

