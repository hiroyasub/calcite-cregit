begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|DelegatingLatticeStatisticProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|Lattice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|LatticeStatisticProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|materialize
operator|.
name|Lattices
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link LatticeStatisticProvider}  * that has hard-coded values for various attributes in the FoodMart lattice.  *  *<p>This makes testing faster.  */
end_comment

begin_class
specifier|public
class|class
name|FoodMartLatticeStatisticProvider
extends|extends
name|DelegatingLatticeStatisticProvider
block|{
specifier|public
specifier|static
specifier|final
name|FoodMartLatticeStatisticProvider
operator|.
name|Factory
name|FACTORY
init|=
name|lattice
lambda|->
operator|new
name|FoodMartLatticeStatisticProvider
argument_list|(
name|lattice
argument_list|,
name|Lattices
operator|.
name|CACHED_SQL
operator|.
name|apply
argument_list|(
name|lattice
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|CARDINALITY_MAP
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"brand_name"
argument_list|,
literal|111
argument_list|)
decl|.
name|put
argument_list|(
literal|"cases_per_pallet"
argument_list|,
literal|10
argument_list|)
decl|.
name|put
argument_list|(
literal|"customer_id"
argument_list|,
literal|5581
argument_list|)
decl|.
name|put
argument_list|(
literal|"day_of_month"
argument_list|,
literal|30
argument_list|)
decl|.
name|put
argument_list|(
literal|"fiscal_period"
argument_list|,
literal|0
argument_list|)
decl|.
name|put
argument_list|(
literal|"gross_weight"
argument_list|,
literal|376
argument_list|)
decl|.
name|put
argument_list|(
literal|"low_fat"
argument_list|,
literal|2
argument_list|)
decl|.
name|put
argument_list|(
literal|"month_of_year"
argument_list|,
literal|12
argument_list|)
decl|.
name|put
argument_list|(
literal|"net_weight"
argument_list|,
literal|332
argument_list|)
decl|.
name|put
argument_list|(
literal|"product_category"
argument_list|,
literal|45
argument_list|)
decl|.
name|put
argument_list|(
literal|"product_class_id"
argument_list|,
literal|102
argument_list|)
decl|.
name|put
argument_list|(
literal|"product_department"
argument_list|,
literal|22
argument_list|)
decl|.
name|put
argument_list|(
literal|"product_family"
argument_list|,
literal|3
argument_list|)
decl|.
name|put
argument_list|(
literal|"product_id"
argument_list|,
literal|1559
argument_list|)
decl|.
name|put
argument_list|(
literal|"product_name"
argument_list|,
literal|1559
argument_list|)
decl|.
name|put
argument_list|(
literal|"product_subcategory"
argument_list|,
literal|102
argument_list|)
decl|.
name|put
argument_list|(
literal|"promotion_id"
argument_list|,
literal|149
argument_list|)
decl|.
name|put
argument_list|(
literal|"quarter"
argument_list|,
literal|4
argument_list|)
decl|.
name|put
argument_list|(
literal|"recyclable_package"
argument_list|,
literal|2
argument_list|)
decl|.
name|put
argument_list|(
literal|"shelf_depth"
argument_list|,
literal|488
argument_list|)
decl|.
name|put
argument_list|(
literal|"shelf_height"
argument_list|,
literal|524
argument_list|)
decl|.
name|put
argument_list|(
literal|"shelf_width"
argument_list|,
literal|534
argument_list|)
decl|.
name|put
argument_list|(
literal|"SKU"
argument_list|,
literal|1559
argument_list|)
decl|.
name|put
argument_list|(
literal|"SRP"
argument_list|,
literal|315
argument_list|)
decl|.
name|put
argument_list|(
literal|"store_cost"
argument_list|,
literal|10777
argument_list|)
decl|.
name|put
argument_list|(
literal|"store_id"
argument_list|,
literal|13
argument_list|)
decl|.
name|put
argument_list|(
literal|"store_sales"
argument_list|,
literal|1049
argument_list|)
decl|.
name|put
argument_list|(
literal|"the_date"
argument_list|,
literal|323
argument_list|)
decl|.
name|put
argument_list|(
literal|"the_day"
argument_list|,
literal|7
argument_list|)
decl|.
name|put
argument_list|(
literal|"the_month"
argument_list|,
literal|12
argument_list|)
decl|.
name|put
argument_list|(
literal|"the_year"
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|"time_id"
argument_list|,
literal|323
argument_list|)
decl|.
name|put
argument_list|(
literal|"units_per_case"
argument_list|,
literal|36
argument_list|)
decl|.
name|put
argument_list|(
literal|"unit_sales"
argument_list|,
literal|6
argument_list|)
decl|.
name|put
argument_list|(
literal|"week_of_year"
argument_list|,
literal|52
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Lattice
name|lattice
decl_stmt|;
specifier|private
name|FoodMartLatticeStatisticProvider
parameter_list|(
name|Lattice
name|lattice
parameter_list|,
name|LatticeStatisticProvider
name|provider
parameter_list|)
block|{
name|super
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|this
operator|.
name|lattice
operator|=
name|lattice
expr_stmt|;
block|}
specifier|private
name|int
name|cardinality
parameter_list|(
name|Lattice
operator|.
name|Column
name|column
parameter_list|)
block|{
specifier|final
name|Integer
name|integer
init|=
name|CARDINALITY_MAP
operator|.
name|get
argument_list|(
name|column
operator|.
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|integer
operator|!=
literal|null
operator|&&
name|integer
operator|>
literal|0
condition|)
block|{
return|return
name|integer
return|;
block|}
return|return
name|column
operator|.
name|alias
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|cardinality
parameter_list|(
name|List
argument_list|<
name|Lattice
operator|.
name|Column
argument_list|>
name|columns
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Double
argument_list|>
name|cardinalityList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lattice
operator|.
name|Column
name|column
range|:
name|columns
control|)
block|{
name|cardinalityList
operator|.
name|add
argument_list|(
operator|(
name|double
operator|)
name|cardinality
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Lattice
operator|.
name|getRowCount
argument_list|(
name|lattice
operator|.
name|getFactRowCount
argument_list|()
argument_list|,
name|cardinalityList
argument_list|)
return|;
block|}
block|}
end_class

end_unit

