begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Tests for {@link EnumUtils}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EnumUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDateTypeToInnerTypeConvert
parameter_list|()
block|{
comment|// java.sql.Date x;
specifier|final
name|ParameterExpression
name|date
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|dateToInt
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|date
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|dateToInteger
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|date
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|dateToInt
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toInt(x)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|dateToInteger
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toIntOptional(x)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// java.sql.Time x;
specifier|final
name|ParameterExpression
name|time
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeToInt
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|time
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeToInteger
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|time
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeToInt
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toInt(x)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeToInteger
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toIntOptional(x)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// java.sql.TimeStamp x;
specifier|final
name|ParameterExpression
name|timestamp
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeStampToLongPrimitive
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|timestamp
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeStampToLong
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|timestamp
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeStampToLongPrimitive
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toLong(x)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeStampToLong
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toLongOptional(x)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End EnumUtilsTest.java
end_comment

end_unit

