begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|MethodCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|ParameterExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|GeoFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|SqlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|XmlFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Tests for {@link EnumUtils}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EnumUtilsTest
block|{
annotation|@
name|Test
name|void
name|testDateTypeToInnerTypeConvert
parameter_list|()
block|{
comment|// java.sql.Date x;
specifier|final
name|ParameterExpression
name|date
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|dateToInt
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|date
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|dateToInteger
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|date
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|dateToInt
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toInt(x)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|dateToInteger
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toIntOptional(x)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// java.sql.Time x;
specifier|final
name|ParameterExpression
name|time
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeToInt
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|time
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeToInteger
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|time
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeToInt
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toInt(x)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeToInteger
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toIntOptional(x)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// java.sql.TimeStamp x;
specifier|final
name|ParameterExpression
name|timestamp
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeStampToLongPrimitive
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|timestamp
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|timeStampToLong
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|timestamp
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeStampToLongPrimitive
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toLong(x)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|timeStampToLong
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.toLongOptional(x)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTypeConvertFromPrimitiveToBox
parameter_list|()
block|{
specifier|final
name|Expression
name|intVariable
init|=
name|Expressions
operator|.
name|parameter
argument_list|(
literal|0
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|"intV"
argument_list|)
decl_stmt|;
comment|// (byte)(int) -> Byte: Byte.valueOf((byte) intV)
specifier|final
name|Expression
name|bytePrimitiveConverted
init|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|intVariable
argument_list|,
name|byte
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|converted0
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|bytePrimitiveConverted
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|converted0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Byte.valueOf((byte) intV)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// (char)(int) -> Character: Character.valueOf((char) intV)
specifier|final
name|Expression
name|characterPrimitiveConverted
init|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|intVariable
argument_list|,
name|char
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|converted1
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|characterPrimitiveConverted
argument_list|,
name|Character
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|converted1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Character.valueOf((char) intV)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// (short)(int) -> Short: Short.valueOf((short) intV)
specifier|final
name|Expression
name|shortPrimitiveConverted
init|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|intVariable
argument_list|,
name|short
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|converted2
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|shortPrimitiveConverted
argument_list|,
name|Short
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|converted2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Short.valueOf((short) intV)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// (long)(int) -> Long: Long.valueOf(intV)
specifier|final
name|Expression
name|longPrimitiveConverted
init|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|intVariable
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|converted3
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|longPrimitiveConverted
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|converted3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Long.valueOf(intV)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// (float)(int) -> Float: Float.valueOf(intV)
specifier|final
name|Expression
name|floatPrimitiveConverted
init|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|intVariable
argument_list|,
name|float
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|converted4
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|floatPrimitiveConverted
argument_list|,
name|Float
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|converted4
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Float.valueOf(intV)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// (double)(int) -> Double: Double.valueOf(intV)
specifier|final
name|Expression
name|doublePrimitiveConverted
init|=
name|Expressions
operator|.
name|convert_
argument_list|(
name|intVariable
argument_list|,
name|double
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|converted5
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|doublePrimitiveConverted
argument_list|,
name|Double
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|converted5
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Double.valueOf(intV)"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|byteConverted
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|intVariable
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|byteConverted
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Byte.valueOf((byte) intV)"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|shortConverted
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|intVariable
argument_list|,
name|Short
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|shortConverted
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Short.valueOf((short) intV)"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|integerConverted
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|intVariable
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|integerConverted
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Integer.valueOf(intV)"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|longConverted
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|intVariable
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|longConverted
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Long.valueOf((long) intV)"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|floatConverted
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|intVariable
argument_list|,
name|Float
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|floatConverted
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Float.valueOf((float) intV)"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|doubleConverted
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|intVariable
argument_list|,
name|Double
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|doubleConverted
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Double.valueOf((double) intV)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testTypeConvertToString
parameter_list|()
block|{
comment|// Constant Expression: "null"
specifier|final
name|ConstantExpression
name|nullLiteral1
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Constant Expression: "(Object) null"
specifier|final
name|ConstantExpression
name|nullLiteral2
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|e1
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|nullLiteral1
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|e2
init|=
name|EnumUtils
operator|.
name|convert
argument_list|(
name|nullLiteral2
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|e1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"(String) null"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|e2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"(String) (Object) null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testMethodCallExpression
parameter_list|()
block|{
comment|// test for Object.class method parameter type
specifier|final
name|ConstantExpression
name|arg0
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ConstantExpression
name|arg1
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|"x"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MethodCallExpression
name|arrayMethodCall
init|=
name|EnumUtils
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
name|BuiltInMethod
operator|.
name|ARRAY
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|arrayMethodCall
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.array(1, \"x\")"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test for Object.class argument type
specifier|final
name|ConstantExpression
name|nullLiteral
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|MethodCallExpression
name|xmlExtractMethodCall
init|=
name|EnumUtils
operator|.
name|call
argument_list|(
name|XmlFunctions
operator|.
name|class
argument_list|,
name|BuiltInMethod
operator|.
name|EXTRACT_VALUE
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|arg1
argument_list|,
name|nullLiteral
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|xmlExtractMethodCall
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.XmlFunctions.extractValue(\"x\", (String) null)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test "mod(decimal, long)" match to "mod(decimal, decimal)"
specifier|final
name|ConstantExpression
name|arg2
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|12.5
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ConstantExpression
name|arg3
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|3
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MethodCallExpression
name|modMethodCall
init|=
name|EnumUtils
operator|.
name|call
argument_list|(
name|SqlFunctions
operator|.
name|class
argument_list|,
literal|"mod"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|arg2
argument_list|,
name|arg3
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|modMethodCall
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.SqlFunctions.mod("
operator|+
literal|"java.math.BigDecimal.valueOf(125L, 1), "
operator|+
literal|"new java.math.BigDecimal(\n  3L))"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test "ST_MakePoint(int, int)" match to "ST_MakePoint(decimal, decimal)"
specifier|final
name|ConstantExpression
name|arg4
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|1
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ConstantExpression
name|arg5
init|=
name|Expressions
operator|.
name|constant
argument_list|(
literal|2
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|MethodCallExpression
name|geoMethodCall
init|=
name|EnumUtils
operator|.
name|call
argument_list|(
name|GeoFunctions
operator|.
name|class
argument_list|,
literal|"ST_MakePoint"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|arg4
argument_list|,
name|arg5
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|geoMethodCall
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"org.apache.calcite.runtime.GeoFunctions.ST_MakePoint("
operator|+
literal|"new java.math.BigDecimal(\n  1), "
operator|+
literal|"new java.math.BigDecimal(\n  2))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

