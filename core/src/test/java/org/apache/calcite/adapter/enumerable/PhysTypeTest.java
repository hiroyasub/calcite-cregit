begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|enumerable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|JavaTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test for {@link org.apache.calcite.adapter.enumerable.PhysTypeImpl}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PhysTypeTest
block|{
specifier|private
specifier|static
specifier|final
name|JavaTypeFactory
name|TYPE_FACTORY
init|=
operator|new
name|JavaTypeFactoryImpl
argument_list|()
decl_stmt|;
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-2677">[CALCITE-2677]    * Struct types with one field are not mapped correctly to Java Classes</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testFieldClassOnColumnOfOneFieldStructType
parameter_list|()
block|{
name|RelDataType
name|columnType
init|=
name|TYPE_FACTORY
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TYPE_FACTORY
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"intField"
argument_list|)
argument_list|)
decl_stmt|;
name|RelDataType
name|rowType
init|=
name|TYPE_FACTORY
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|columnType
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"structField"
argument_list|)
argument_list|)
decl_stmt|;
name|PhysType
name|rowPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|TYPE_FACTORY
argument_list|,
name|rowType
argument_list|,
name|JavaRowFormat
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|rowPhysType
operator|.
name|fieldClass
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-2677">[CALCITE-2677]    * Struct types with one field are not mapped correctly to Java Classes</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testFieldClassOnColumnOfTwoFieldStructType
parameter_list|()
block|{
name|RelDataType
name|columnType
init|=
name|TYPE_FACTORY
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TYPE_FACTORY
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|,
name|TYPE_FACTORY
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"intField"
argument_list|,
literal|"strField"
argument_list|)
argument_list|)
decl_stmt|;
name|RelDataType
name|rowType
init|=
name|TYPE_FACTORY
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|columnType
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"structField"
argument_list|)
argument_list|)
decl_stmt|;
name|PhysType
name|rowPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|TYPE_FACTORY
argument_list|,
name|rowType
argument_list|,
name|JavaRowFormat
operator|.
name|ARRAY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|rowPhysType
operator|.
name|fieldClass
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-3364">[CALCITE-3364]    * Can't group table function result due to a type cast error if table function    * returns a row with a single value</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testOneColumnJavaRowFormatConversion
parameter_list|()
block|{
name|RelDataType
name|rowType
init|=
name|TYPE_FACTORY
operator|.
name|createStructType
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TYPE_FACTORY
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"intField"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|PhysType
name|rowPhysType
init|=
name|PhysTypeImpl
operator|.
name|of
argument_list|(
name|TYPE_FACTORY
argument_list|,
name|rowType
argument_list|,
name|JavaRowFormat
operator|.
name|ARRAY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|e
init|=
name|rowPhysType
operator|.
name|convertTo
argument_list|(
name|Expressions
operator|.
name|parameter
argument_list|(
name|Enumerable
operator|.
name|class
argument_list|,
literal|"input"
argument_list|)
argument_list|,
name|JavaRowFormat
operator|.
name|SCALAR
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"input.select(new org.apache.calcite.linq4j.function.Function1() {\n"
operator|+
literal|"  public int apply(Object[] o) {\n"
operator|+
literal|"    return org.apache.calcite.runtime.SqlFunctions.toInt(o[0]);\n"
operator|+
literal|"  }\n"
operator|+
literal|"  public Object apply(Object o) {\n"
operator|+
literal|"    return apply(\n"
operator|+
literal|"      (Object[]) o);\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
operator|+
literal|")"
decl_stmt|;
name|assertEquals
argument_list|(
name|Expressions
operator|.
name|toString
argument_list|(
name|e
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

