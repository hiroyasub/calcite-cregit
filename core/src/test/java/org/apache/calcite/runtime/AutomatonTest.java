begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|MemoryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/** Unit tests for {@link Automaton}. */
end_comment

begin_class
specifier|public
class|class
name|AutomatonTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
comment|// pattern(a)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|rows
init|=
block|{
literal|""
block|,
literal|"a"
block|,
literal|""
block|,
literal|"a"
block|}
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"[[a], [a]]"
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|rows
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequence
parameter_list|()
block|{
comment|// pattern(a b)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"b"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a b"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|rows
init|=
block|{
literal|""
block|,
literal|"a"
block|,
literal|""
block|,
literal|"ab"
block|,
literal|"a"
block|,
literal|"ab"
block|,
literal|"b"
block|,
literal|"b"
block|}
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"[[a, ab], [ab, b]]"
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|rows
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStar
parameter_list|()
block|{
comment|// pattern(a* b)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|star
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"b"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"(a)* b"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|rows
init|=
block|{
literal|""
block|,
literal|"a"
block|,
literal|""
block|,
literal|"b"
block|,
literal|""
block|,
literal|"ab"
block|,
literal|"a"
block|,
literal|"ab"
block|,
literal|"b"
block|,
literal|"b"
block|}
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"[[b], [ab], [ab], [ab, a, ab], [a, ab], [b], [ab, b], [ab, a, ab, b], "
operator|+
literal|"[a, ab, b], [b]]"
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|rows
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlus
parameter_list|()
block|{
comment|// pattern(a+ b)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|plus
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"b"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"(a)+ b"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|rows
init|=
block|{
literal|""
block|,
literal|"a"
block|,
literal|""
block|,
literal|"b"
block|,
literal|""
block|,
literal|"ab"
block|,
literal|"a"
block|,
literal|"ab"
block|,
literal|"b"
block|,
literal|"b"
block|}
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"[[ab, a, ab], [a, ab], [ab, b], [ab, a, ab, b], [a, ab, b]]"
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|rows
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOr
parameter_list|()
block|{
comment|// pattern(a+ b)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"b"
argument_list|)
operator|.
name|or
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a|b"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|rows
init|=
block|{
literal|""
block|,
literal|"a"
block|,
literal|""
block|,
literal|"b"
block|,
literal|""
block|,
literal|"ab"
block|,
literal|"a"
block|,
literal|"ab"
block|,
literal|"b"
block|,
literal|"b"
block|}
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"[[a], [b], [ab], [ab], [a], [ab], [ab], [b], [b]]"
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|rows
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptional
parameter_list|()
block|{
comment|// pattern(a+ b)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"b"
argument_list|)
operator|.
name|optional
argument_list|()
operator|.
name|seq
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"c"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a b? c"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|rows
init|=
literal|"acabcabbc"
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|Character
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|Character
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'a'
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'b'
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'c'
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"[[a, c], [a, b, c]]"
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|chars
argument_list|(
name|rows
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeat
parameter_list|()
block|{
comment|// pattern(a b{0, 2} c)
name|checkRepeat
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|"a (b){0, 2} c"
argument_list|,
literal|"[[a, c], [a, b, c], [a, b, b, c]]"
argument_list|)
expr_stmt|;
comment|// pattern(a b{0, 1} c)
name|checkRepeat
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|"a (b){0, 1} c"
argument_list|,
literal|"[[a, c], [a, b, c]]"
argument_list|)
expr_stmt|;
comment|// pattern(a b{1, 1} c)
name|checkRepeat
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"a (b){1} c"
argument_list|,
literal|"[[a, b, c]]"
argument_list|)
expr_stmt|;
comment|// pattern(a b{1,3} c)
name|checkRepeat
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|"a (b){1, 3} c"
argument_list|,
literal|"[[a, b, c], [a, b, b, c], [a, b, b, b, c]]"
argument_list|)
expr_stmt|;
comment|// pattern(a b{1,2} c)
name|checkRepeat
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"a (b){1, 2} c"
argument_list|,
literal|"[[a, b, c], [a, b, b, c]]"
argument_list|)
expr_stmt|;
comment|// pattern(a b{2,3} c)
name|checkRepeat
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"a (b){2, 3} c"
argument_list|,
literal|"[[a, b, b, c], [a, b, b, b, c]]"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRepeat
parameter_list|(
name|int
name|minRepeat
parameter_list|,
name|int
name|maxRepeat
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"b"
argument_list|)
operator|.
name|repeat
argument_list|(
name|minRepeat
argument_list|,
name|maxRepeat
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"c"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|rows
init|=
literal|"acabcabbcabbbcabbbbcabdbc"
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|Character
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|Character
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'a'
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'b'
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'c'
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|chars
argument_list|(
name|rows
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeatComposite
parameter_list|()
block|{
comment|// pattern(a (b a){1, 2} c)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"b"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"a"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|repeat
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"c"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a (b a){1, 2} c"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|rows
init|=
literal|"acabcabbcabbbcabbbbcabdbcabacababcababac"
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|Character
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|Character
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'a'
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'b'
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|==
literal|'c'
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|matcher
operator|.
name|match
argument_list|(
name|chars
argument_list|(
name|rows
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[a, b, a, c], [a, b, a, c], [a, b, a, b, a, c]]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResultWithLabels
parameter_list|()
block|{
comment|// pattern(a)
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"A"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"B"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"A B"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|rows
init|=
block|{
literal|""
block|,
literal|"a"
block|,
literal|"ab"
block|,
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"A"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"B"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Matcher
operator|.
name|PartitionState
argument_list|<
name|String
argument_list|>
name|partitionState
init|=
name|matcher
operator|.
name|createPartitionState
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Matcher
operator|.
name|PartialMatch
argument_list|<
name|String
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|MemoryFactory
argument_list|<
name|String
argument_list|>
name|memoryFactory
init|=
operator|new
name|MemoryFactory
argument_list|<>
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|row
range|:
name|rows
control|)
block|{
name|memoryFactory
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|matcher
operator|.
name|matchOneWithSymbols
argument_list|(
name|memoryFactory
operator|.
name|create
argument_list|()
argument_list|,
name|partitionState
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[(A, a), (B, ab)], [(A, a), (B, b)]]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Converts a string into an iterable collection of its characters. */
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Character
argument_list|>
name|chars
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|Character
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Character
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|s
operator|.
name|length
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_comment
comment|// End AutomatonTest.java
end_comment

end_unit

