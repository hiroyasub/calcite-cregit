begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Coordinate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|jts
operator|.
name|geom
operator|.
name|GeometryFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests {@link org.apache.calcite.runtime.SpatialTypeUtilsTest}.  */
end_comment

begin_class
class|class
name|SpatialTypeUtilsTest
block|{
annotation|@
name|Test
name|void
name|testFromEwkt
parameter_list|()
block|{
name|Geometry
name|g1
init|=
name|SpatialTypeUtils
operator|.
name|fromEwkt
argument_list|(
literal|"POINT(1 2)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|g1
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|g1
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|Geometry
name|g2
init|=
name|SpatialTypeUtils
operator|.
name|fromEwkt
argument_list|(
literal|"srid:1234;POINT(1 2)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|g2
operator|.
name|getSRID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|g2
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|g2
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testAsEwkt
parameter_list|()
block|{
name|GeometryFactory
name|gf
init|=
operator|new
name|GeometryFactory
argument_list|()
decl_stmt|;
name|Geometry
name|g1
init|=
name|gf
operator|.
name|createPoint
argument_list|(
operator|new
name|Coordinate
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|g1
operator|.
name|setSRID
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"srid:1234;POINT (1 2)"
argument_list|,
name|SpatialTypeUtils
operator|.
name|asEwkt
argument_list|(
name|g1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

