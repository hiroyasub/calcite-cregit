begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/** Tests for the {@link DeterministicAutomaton} */
end_comment

begin_class
specifier|public
class|class
name|DeterministicAutomatonTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|convertAutomaton
parameter_list|()
block|{
specifier|final
name|Pattern
operator|.
name|PatternBuilder
name|builder
init|=
name|Pattern
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|pattern
init|=
name|builder
operator|.
name|symbol
argument_list|(
literal|"A"
argument_list|)
operator|.
name|repeat
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Automaton
name|automaton
init|=
name|pattern
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
specifier|final
name|DeterministicAutomaton
name|da
init|=
operator|new
name|DeterministicAutomaton
argument_list|(
name|automaton
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|da
operator|.
name|startState
argument_list|,
name|is
argument_list|(
operator|new
name|DeterministicAutomaton
operator|.
name|MultiState
argument_list|(
operator|new
name|Automaton
operator|.
name|State
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|Automaton
operator|.
name|State
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Result should have three states
comment|// 0 -A-> 1 -A-> 2
comment|// 1 and 2 should be final
name|assertThat
argument_list|(
name|da
operator|.
name|getTransitions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|da
operator|.
name|getEndStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertAutomaton2
parameter_list|()
block|{
specifier|final
name|Pattern
operator|.
name|PatternBuilder
name|builder
init|=
name|Pattern
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|pattern
init|=
name|builder
operator|.
name|symbol
argument_list|(
literal|"A"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"B"
argument_list|)
operator|.
name|or
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Automaton
name|automaton
init|=
name|pattern
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
specifier|final
name|DeterministicAutomaton
name|da
init|=
operator|new
name|DeterministicAutomaton
argument_list|(
name|automaton
argument_list|)
decl_stmt|;
comment|// Result should have two transitions
comment|// 0 -A-> 1
comment|//   -B->
comment|// 1 should be final
name|assertThat
argument_list|(
name|da
operator|.
name|getTransitions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|da
operator|.
name|getEndStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertAutomaton3
parameter_list|()
block|{
specifier|final
name|Pattern
operator|.
name|PatternBuilder
name|builder
init|=
name|Pattern
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|pattern
init|=
name|builder
operator|.
name|symbol
argument_list|(
literal|"A"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"B"
argument_list|)
operator|.
name|star
argument_list|()
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Automaton
name|automaton
init|=
name|pattern
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
specifier|final
name|DeterministicAutomaton
name|da
init|=
operator|new
name|DeterministicAutomaton
argument_list|(
name|automaton
argument_list|)
decl_stmt|;
comment|// Result should have two transitions
comment|// 0 -A-> 1 -B-> 2 (which again goes to 2 on a "B")
comment|// 1 should be final
name|assertThat
argument_list|(
name|da
operator|.
name|getTransitions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|da
operator|.
name|getEndStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertAutomaton4
parameter_list|()
block|{
specifier|final
name|Pattern
operator|.
name|PatternBuilder
name|builder
init|=
name|Pattern
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|pattern
init|=
name|builder
operator|.
name|symbol
argument_list|(
literal|"A"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"B"
argument_list|)
operator|.
name|optional
argument_list|()
operator|.
name|seq
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"A"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Automaton
name|automaton
init|=
name|pattern
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
specifier|final
name|DeterministicAutomaton
name|da
init|=
operator|new
name|DeterministicAutomaton
argument_list|(
name|automaton
argument_list|)
decl_stmt|;
comment|// Result should have four transitions and one end state
name|assertThat
argument_list|(
name|da
operator|.
name|getTransitions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|da
operator|.
name|getEndStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End DeterministicAutomatonTest.java
end_comment

end_unit

