begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|EnumerableDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Disabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link org.apache.calcite.runtime.Enumerables}.  */
end_comment

begin_class
specifier|public
class|class
name|EnumerablesTest
block|{
specifier|private
specifier|static
specifier|final
name|Enumerable
argument_list|<
name|Emp
argument_list|>
name|EMPS
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|10
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Joe"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Enumerable
argument_list|<
name|Dept
argument_list|>
name|DEPTS
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Dept
argument_list|(
literal|20
argument_list|,
literal|"Sales"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|15
argument_list|,
literal|"Marketing"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function2
argument_list|<
name|Emp
argument_list|,
name|Dept
argument_list|,
name|String
argument_list|>
name|EMP_DEPT_TO_STRING
init|=
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
literal|"{"
operator|+
operator|(
name|v0
operator|==
literal|null
condition|?
literal|null
else|:
name|v0
operator|.
name|name
operator|)
operator|+
literal|", "
operator|+
operator|(
name|v0
operator|==
literal|null
condition|?
literal|null
else|:
name|v0
operator|.
name|deptno
operator|)
operator|+
literal|", "
operator|+
operator|(
name|v1
operator|==
literal|null
condition|?
literal|null
else|:
name|v1
operator|.
name|deptno
operator|)
operator|+
literal|", "
operator|+
operator|(
name|v1
operator|==
literal|null
condition|?
literal|null
else|:
name|v1
operator|.
name|name
operator|)
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Predicate2
argument_list|<
name|Emp
argument_list|,
name|Dept
argument_list|>
name|EMP_DEPT_EQUAL_DEPTNO
init|=
parameter_list|(
name|e
parameter_list|,
name|d
parameter_list|)
lambda|->
name|e
operator|.
name|deptno
operator|==
name|d
operator|.
name|deptno
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Predicate2
argument_list|<
name|Dept
argument_list|,
name|Emp
argument_list|>
name|DEPT_EMP_EQUAL_DEPTNO
init|=
parameter_list|(
name|d
parameter_list|,
name|e
parameter_list|)
lambda|->
name|d
operator|.
name|deptno
operator|==
name|e
operator|.
name|deptno
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSemiJoinEmp
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|semiJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
name|Functions
operator|.
name|identityComparer
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(20, Theodore), Emp(20, Sebastian)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSemiJoinDept
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|semiJoin
argument_list|(
name|DEPTS
argument_list|,
name|EMPS
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|Functions
operator|.
name|identityComparer
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Dept(20, Sales)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAntiJoinEmp
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|antiJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
name|Functions
operator|.
name|identityComparer
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(10, Fred), Emp(30, Joe)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAntiJoinDept
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|antiJoin
argument_list|(
name|DEPTS
argument_list|,
name|EMPS
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|Functions
operator|.
name|identityComparer
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Dept(15, Marketing)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeJoin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|mergeJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|10
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Joe"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Greg"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Dept
argument_list|(
literal|15
argument_list|,
literal|"Marketing"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|20
argument_list|,
literal|"Sales"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Research"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Development"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|+
literal|", "
operator|+
name|v1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(20, Theodore), Dept(20, Sales),"
operator|+
literal|" Emp(20, Sebastian), Dept(20, Sales),"
operator|+
literal|" Emp(30, Joe), Dept(30, Research),"
operator|+
literal|" Emp(30, Joe), Dept(30, Development),"
operator|+
literal|" Emp(30, Greg), Dept(30, Research),"
operator|+
literal|" Emp(30, Greg), Dept(30, Development)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeJoinWithNullKeys
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|mergeJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|40
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Dept
argument_list|(
literal|15
argument_list|,
literal|"Marketing"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|20
argument_list|,
literal|"Sales"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|40
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|e
lambda|->
name|e
operator|.
name|name
argument_list|,
name|d
lambda|->
name|d
operator|.
name|name
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|+
literal|", "
operator|+
name|v1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(30, Theodore), Dept(30, Theodore),"
operator|+
literal|" Emp(20, Theodore), Dept(30, Theodore)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeJoin2
parameter_list|()
block|{
comment|// Matching keys at start
name|testIntersect
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"[1, 4]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Matching key at start and end of right, not of left
name|testIntersect
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"[1, 4]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Matching key at start and end of left, not right
name|testIntersect
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"[1, 4]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Matching key not at start or end of left or right
name|testIntersect
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"[3, 4]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeJoin3
parameter_list|()
block|{
comment|// No overlap
name|testIntersect
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Left empty
name|testIntersect
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Right empty
name|testIntersect
argument_list|(
name|newArrayList
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both empty
name|testIntersect
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|void
name|testIntersect
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list0
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|list1
parameter_list|,
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertThat
argument_list|(
name|intersect
argument_list|(
name|list0
argument_list|,
name|list1
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
comment|// Repeat test with nulls at the end of left / right: result should not be impacted
comment|// Null at the end of left
name|list0
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|intersect
argument_list|(
name|list0
argument_list|,
name|list1
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
comment|// Null at the end of right
name|list0
operator|.
name|remove
argument_list|(
name|list0
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|intersect
argument_list|(
name|list0
argument_list|,
name|list1
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
comment|// Null at the end of left and right
name|list0
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|intersect
argument_list|(
name|list0
argument_list|,
name|list1
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Enumerable
argument_list|<
name|T
argument_list|>
name|intersect
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list0
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|list1
parameter_list|)
block|{
return|return
name|EnumerableDefaults
operator|.
name|mergeJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|list0
argument_list|)
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|list1
argument_list|)
argument_list|,
name|Functions
operator|.
name|identitySelector
argument_list|()
argument_list|,
name|Functions
operator|.
name|identitySelector
argument_list|()
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopJoin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
name|EMP_DEPT_TO_STRING
argument_list|,
name|JoinType
operator|.
name|INNER
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{Theodore, 20, 20, Sales}, {Sebastian, 20, 20, Sales}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopLeftJoin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
name|EMP_DEPT_TO_STRING
argument_list|,
name|JoinType
operator|.
name|LEFT
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{Fred, 10, null, null}, {Theodore, 20, 20, Sales}, "
operator|+
literal|"{Sebastian, 20, 20, Sales}, {Joe, 30, null, null}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopRightJoin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
name|EMP_DEPT_TO_STRING
argument_list|,
name|JoinType
operator|.
name|RIGHT
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{Theodore, 20, 20, Sales}, {Sebastian, 20, 20, Sales}, "
operator|+
literal|"{null, null, 15, Marketing}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopFullJoin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
name|EMP_DEPT_TO_STRING
argument_list|,
name|JoinType
operator|.
name|FULL
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{Fred, 10, null, null}, {Theodore, 20, 20, Sales}, "
operator|+
literal|"{Sebastian, 20, 20, Sales}, {Joe, 30, null, null}, "
operator|+
literal|"{null, null, 15, Marketing}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopFullJoinLeftEmpty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
operator|.
name|take
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DEPTS
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
name|EMP_DEPT_TO_STRING
argument_list|,
name|JoinType
operator|.
name|FULL
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Functions
operator|.
name|identitySelector
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{null, null, 15, Marketing}, {null, null, 20, Sales}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopFullJoinRightEmpty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
operator|.
name|take
argument_list|(
literal|0
argument_list|)
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
name|EMP_DEPT_TO_STRING
argument_list|,
name|JoinType
operator|.
name|FULL
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{Fred, 10, null, null}, {Theodore, 20, null, null}, "
operator|+
literal|"{Sebastian, 20, null, null}, {Joe, 30, null, null}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopFullJoinBothEmpty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
operator|.
name|take
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DEPTS
operator|.
name|take
argument_list|(
literal|0
argument_list|)
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
name|EMP_DEPT_TO_STRING
argument_list|,
name|JoinType
operator|.
name|FULL
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopSemiJoinEmp
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
parameter_list|(
name|e
parameter_list|,
name|d
parameter_list|)
lambda|->
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|JoinType
operator|.
name|SEMI
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(20, Theodore), Emp(20, Sebastian)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopSemiJoinDept
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|DEPTS
argument_list|,
name|EMPS
argument_list|,
name|DEPT_EMP_EQUAL_DEPTNO
argument_list|,
parameter_list|(
name|d
parameter_list|,
name|e
parameter_list|)
lambda|->
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|JoinType
operator|.
name|SEMI
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Dept(20, Sales)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopAntiJoinEmp
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|EMPS
argument_list|,
name|DEPTS
argument_list|,
name|EMP_DEPT_EQUAL_DEPTNO
argument_list|,
parameter_list|(
name|e
parameter_list|,
name|d
parameter_list|)
lambda|->
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|JoinType
operator|.
name|ANTI
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(10, Fred), Emp(30, Joe)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedLoopAntiJoinDept
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|nestedLoopJoin
argument_list|(
name|DEPTS
argument_list|,
name|EMPS
argument_list|,
name|DEPT_EMP_EQUAL_DEPTNO
argument_list|,
parameter_list|(
name|d
parameter_list|,
name|e
parameter_list|)
lambda|->
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|JoinType
operator|.
name|ANTI
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Dept(15, Marketing)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Disabled
comment|// TODO fix this
specifier|public
name|void
name|testMatch
parameter_list|()
block|{
specifier|final
name|Enumerable
argument_list|<
name|Emp
argument_list|>
name|emps
init|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|10
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Joe"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|builder
argument_list|()
operator|.
name|symbol
argument_list|(
literal|"A"
argument_list|)
operator|.
name|symbol
argument_list|(
literal|"B"
argument_list|)
operator|.
name|seq
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Matcher
argument_list|<
name|Emp
argument_list|>
name|matcher
init|=
name|Matcher
operator|.
expr|<
name|Emp
operator|>
name|builder
argument_list|(
name|p
operator|.
name|toAutomaton
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"A"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|deptno
operator|==
literal|20
argument_list|)
operator|.
name|add
argument_list|(
literal|"B"
argument_list|,
name|s
lambda|->
name|s
operator|.
name|get
argument_list|()
operator|.
name|deptno
operator|!=
literal|20
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Enumerables
operator|.
name|Emitter
argument_list|<
name|Emp
argument_list|,
name|String
argument_list|>
name|emitter
init|=
parameter_list|(
name|rows
parameter_list|,
name|rowStates
parameter_list|,
name|rowSymbols
parameter_list|,
name|match
parameter_list|,
name|consumer
parameter_list|)
lambda|->
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rowSymbols
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|"A"
operator|.
name|equals
argument_list|(
name|rowSymbols
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"%s %s %d"
argument_list|,
name|rows
argument_list|,
name|rowStates
argument_list|,
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|String
argument_list|>
name|matches
init|=
name|Enumerables
operator|.
name|match
argument_list|(
name|emps
argument_list|,
name|emp
lambda|->
literal|0L
argument_list|,
name|matcher
argument_list|,
name|emitter
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matches
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[[Emp(20, Theodore), Emp(10, Fred)] null 1, "
operator|+
literal|"[Emp(20, Sebastian), Emp(30, Joe)] null 2]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInnerHashJoin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|hashJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|10
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Joe"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Greg"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Dept
argument_list|(
literal|15
argument_list|,
literal|"Marketing"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|20
argument_list|,
literal|"Sales"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Research"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Development"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|+
literal|", "
operator|+
name|v1
argument_list|,
literal|null
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(20, Theodore), Dept(20, Sales),"
operator|+
literal|" Emp(20, Sebastian), Dept(20, Sales),"
operator|+
literal|" Emp(30, Joe), Dept(30, Research),"
operator|+
literal|" Emp(30, Joe), Dept(30, Development),"
operator|+
literal|" Emp(30, Greg), Dept(30, Research),"
operator|+
literal|" Emp(30, Greg), Dept(30, Development)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLeftHashJoinWithNonEquiConditions
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|hashJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|10
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Joe"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Greg"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Dept
argument_list|(
literal|15
argument_list|,
literal|"Marketing"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|20
argument_list|,
literal|"Sales"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Research"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Development"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|+
literal|", "
operator|+
name|v1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|.
name|deptno
operator|<
literal|30
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(10, Fred), null,"
operator|+
literal|" Emp(20, Theodore), Dept(20, Sales),"
operator|+
literal|" Emp(20, Sebastian), Dept(20, Sales),"
operator|+
literal|" Emp(30, Joe), null,"
operator|+
literal|" Emp(30, Greg), null]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRightHashJoinWithNonEquiConditions
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|hashJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|10
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Greg"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Dept
argument_list|(
literal|15
argument_list|,
literal|"Marketing"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|20
argument_list|,
literal|"Sales"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Research"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Development"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|+
literal|", "
operator|+
name|v1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|.
name|deptno
operator|<
literal|30
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(20, Theodore), Dept(20, Sales),"
operator|+
literal|" Emp(20, Sebastian), Dept(20, Sales),"
operator|+
literal|" null, Dept(15, Marketing),"
operator|+
literal|" null, Dept(30, Research),"
operator|+
literal|" null, Dept(30, Development)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullHashJoinWithNonEquiConditions
parameter_list|()
block|{
name|assertThat
argument_list|(
name|EnumerableDefaults
operator|.
name|hashJoin
argument_list|(
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Emp
argument_list|(
literal|10
argument_list|,
literal|"Fred"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Theodore"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|20
argument_list|,
literal|"Sebastian"
argument_list|)
argument_list|,
operator|new
name|Emp
argument_list|(
literal|30
argument_list|,
literal|"Greg"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Dept
argument_list|(
literal|15
argument_list|,
literal|"Marketing"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|20
argument_list|,
literal|"Sales"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Research"
argument_list|)
argument_list|,
operator|new
name|Dept
argument_list|(
literal|30
argument_list|,
literal|"Development"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|e
lambda|->
name|e
operator|.
name|deptno
argument_list|,
name|d
lambda|->
name|d
operator|.
name|deptno
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|+
literal|", "
operator|+
name|v1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
parameter_list|(
name|v0
parameter_list|,
name|v1
parameter_list|)
lambda|->
name|v0
operator|.
name|deptno
operator|<
literal|30
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[Emp(10, Fred), null,"
operator|+
literal|" Emp(20, Theodore), Dept(20, Sales),"
operator|+
literal|" Emp(20, Sebastian), Dept(20, Sales),"
operator|+
literal|" Emp(30, Greg), null,"
operator|+
literal|" null, Dept(15, Marketing),"
operator|+
literal|" null, Dept(30, Research),"
operator|+
literal|" null, Dept(30, Development)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Employee record. */
specifier|private
specifier|static
class|class
name|Emp
block|{
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
name|Emp
parameter_list|(
name|int
name|deptno
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Emp("
operator|+
name|deptno
operator|+
literal|", "
operator|+
name|name
operator|+
literal|")"
return|;
block|}
block|}
comment|/** Department record. */
specifier|private
specifier|static
class|class
name|Dept
block|{
specifier|final
name|int
name|deptno
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
name|Dept
parameter_list|(
name|int
name|deptno
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|deptno
operator|=
name|deptno
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Dept("
operator|+
name|deptno
operator|+
literal|", "
operator|+
name|name
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

