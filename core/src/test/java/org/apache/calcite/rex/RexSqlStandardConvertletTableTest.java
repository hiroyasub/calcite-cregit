begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|SqlToRelTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|FrameworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Frameworks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|Planner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link org.apache.calcite.rex.RexSqlStandardConvertletTable}.  */
end_comment

begin_class
specifier|public
class|class
name|RexSqlStandardConvertletTableTest
extends|extends
name|SqlToRelTestBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCoalesce
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|convertSqlToRel
argument_list|(
literal|"SELECT COALESCE(NULL, 'a')"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|rex
init|=
name|project
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexToSqlNodeConverter
name|rexToSqlNodeConverter
init|=
name|rexToSqlNodeConverter
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|convertedSql
init|=
name|rexToSqlNodeConverter
operator|.
name|convertNode
argument_list|(
name|rex
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CASE WHEN NULL IS NOT NULL THEN NULL ELSE 'a' END"
argument_list|,
name|convertedSql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCaseWithValue
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|convertSqlToRel
argument_list|(
literal|"SELECT CASE NULL WHEN NULL THEN NULL ELSE 'a' END"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|rex
init|=
name|project
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexToSqlNodeConverter
name|rexToSqlNodeConverter
init|=
name|rexToSqlNodeConverter
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|convertedSql
init|=
name|rexToSqlNodeConverter
operator|.
name|convertNode
argument_list|(
name|rex
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CASE WHEN NULL = NULL THEN NULL ELSE 'a' END"
argument_list|,
name|convertedSql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCaseNoValue
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|convertSqlToRel
argument_list|(
literal|"SELECT CASE WHEN NULL IS NULL THEN NULL ELSE 'a' END"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|rex
init|=
name|project
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexToSqlNodeConverter
name|rexToSqlNodeConverter
init|=
name|rexToSqlNodeConverter
argument_list|()
decl_stmt|;
specifier|final
name|SqlNode
name|convertedSql
init|=
name|rexToSqlNodeConverter
operator|.
name|convertNode
argument_list|(
name|rex
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CASE WHEN NULL IS NULL THEN NULL ELSE 'a' END"
argument_list|,
name|convertedSql
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RelNode
name|convertSqlToRel
parameter_list|(
name|String
name|sql
parameter_list|,
name|boolean
name|simplifyRex
parameter_list|)
block|{
specifier|final
name|FrameworkConfig
name|config
init|=
name|Frameworks
operator|.
name|newConfigBuilder
argument_list|()
operator|.
name|defaultSchema
argument_list|(
name|CalciteSchema
operator|.
name|createRootSchema
argument_list|(
literal|false
argument_list|)
operator|.
name|plus
argument_list|()
argument_list|)
operator|.
name|parserConfig
argument_list|(
name|SqlParser
operator|.
name|configBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Planner
name|planner
init|=
name|Frameworks
operator|.
name|getPlanner
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
init|(
name|Closer
name|closer
init|=
operator|new
name|Closer
argument_list|()
init|)
block|{
name|closer
operator|.
name|add
argument_list|(
name|Hook
operator|.
name|REL_BUILDER_SIMPLIFY
operator|.
name|addThread
argument_list|(
name|Hook
operator|.
name|propertyJ
argument_list|(
name|simplifyRex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SqlNode
name|parsed
init|=
name|planner
operator|.
name|parse
argument_list|(
name|sql
argument_list|)
decl_stmt|;
specifier|final
name|SqlNode
name|validated
init|=
name|planner
operator|.
name|validate
argument_list|(
name|parsed
argument_list|)
decl_stmt|;
return|return
name|planner
operator|.
name|rel
argument_list|(
name|validated
argument_list|)
operator|.
name|rel
return|;
block|}
catch|catch
parameter_list|(
name|SqlParseException
decl||
name|RelConversionException
decl||
name|ValidationException
name|e
parameter_list|)
block|{
throw|throw
name|TestUtil
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|RexToSqlNodeConverter
name|rexToSqlNodeConverter
parameter_list|()
block|{
specifier|final
name|RexSqlStandardConvertletTable
name|convertletTable
init|=
operator|new
name|RexSqlStandardConvertletTable
argument_list|()
decl_stmt|;
return|return
operator|new
name|RexToSqlNodeConverterImpl
argument_list|(
name|convertletTable
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End RexSqlStandardConvertletTableTest.java
end_comment

end_unit

