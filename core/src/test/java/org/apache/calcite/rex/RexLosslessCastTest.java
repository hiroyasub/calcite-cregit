begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Tests for {@link org.apache.calcite.rex.RexUtil#isLosslessCast(RexNode)} and related cases.  */
end_comment

begin_class
class|class
name|RexLosslessCastTest
extends|extends
name|RexProgramTestBase
block|{
comment|/** Unit test for {@link org.apache.calcite.rex.RexUtil#isLosslessCast(RexNode)}. */
annotation|@
name|Test
name|void
name|testLosslessCast
parameter_list|()
block|{
specifier|final
name|RelDataType
name|tinyIntType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|smallIntType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|intType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|bigIntType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|floatType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|booleanType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|charType5
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|charType6
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varCharType10
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varCharType11
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|11
argument_list|)
decl_stmt|;
comment|// Negative
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|tinyIntType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|smallIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|smallIntType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|intType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|bigIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|bigIntType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|floatType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|booleanType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|bigIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|intType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|charType5
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|intType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|varCharType10
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varCharType10
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|varCharType11
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|charType5
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|bigIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|charType5
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|smallIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varCharType10
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Positive
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|smallIntType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|tinyIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|intType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|smallIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|bigIntType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|intType
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|charType6
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|smallIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varCharType10
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|smallIntType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varCharType11
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|intType
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varCharType11
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|charType6
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|varCharType11
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|varCharType10
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|removeRedundantCast
parameter_list|()
block|{
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|nullable
argument_list|(
name|tInt
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"?0.int0"
argument_list|)
expr_stmt|;
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|vIntNotNull
argument_list|()
argument_list|,
name|nullable
argument_list|(
name|tInt
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"?0.notNullInt0"
argument_list|)
expr_stmt|;
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|vIntNotNull
argument_list|()
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
literal|"?0.notNullInt0"
argument_list|)
expr_stmt|;
comment|// Nested int int cast is removed
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|vVarchar
argument_list|()
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
literal|"CAST(?0.varchar0):INTEGER NOT NULL"
argument_list|)
expr_stmt|;
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|vVarchar
argument_list|()
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
name|tVarchar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|removeLosslesssCastInt
parameter_list|()
block|{
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|tBigInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// A.1
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|tBigInt
argument_list|()
argument_list|)
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
literal|"CAST(?0.int0):INTEGER NOT NULL"
argument_list|)
expr_stmt|;
name|RexNode
name|core
init|=
name|cast
argument_list|(
name|vIntNotNull
argument_list|()
argument_list|,
name|tBigInt
argument_list|()
argument_list|)
decl_stmt|;
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|core
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
literal|"?0.notNullInt0"
argument_list|)
expr_stmt|;
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|core
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
name|tBigInt
argument_list|()
argument_list|)
argument_list|,
literal|"CAST(?0.notNullInt0):BIGINT NOT NULL"
argument_list|)
expr_stmt|;
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|core
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
name|tBigInt
argument_list|()
argument_list|)
argument_list|,
name|tInt
argument_list|()
argument_list|)
argument_list|,
literal|"?0.notNullInt0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|removeLosslesssCastChar
parameter_list|()
block|{
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|vVarchar
argument_list|()
argument_list|,
name|tChar
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|vVarchar
argument_list|()
argument_list|,
name|tChar
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|tVarchar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RexNode
name|char2
init|=
name|vParam
argument_list|(
literal|"char(2)_"
argument_list|,
name|tChar
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|RexNode
name|char6
init|=
name|vParam
argument_list|(
literal|"char(6)_"
argument_list|,
name|tChar
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|RexNode
name|varchar2
init|=
name|vParam
argument_list|(
literal|"varchar(2)_"
argument_list|,
name|tChar
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// A.2 in RexSimplify
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|char2
argument_list|,
name|tChar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|tChar
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|"CAST(?0.char(2)_0):CHAR(2) NOT NULL"
argument_list|)
expr_stmt|;
comment|// B.1
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|char2
argument_list|,
name|tChar
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|tChar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
literal|"CAST(?0.char(2)_0):CHAR(5) NOT NULL"
argument_list|)
expr_stmt|;
comment|// B.2
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|char2
argument_list|,
name|tChar
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|tChar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
literal|"CAST(?0.char(2)_0):CHAR(5) NOT NULL"
argument_list|)
expr_stmt|;
comment|// B.3
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|char2
argument_list|,
name|tVarchar
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|tChar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
literal|"CAST(?0.char(2)_0):CHAR(5) NOT NULL"
argument_list|)
expr_stmt|;
comment|// B.4
name|checkSimplify
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|char6
argument_list|,
name|tVarchar
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|tChar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
literal|"CAST(?0.char(6)_0):CHAR(5) NOT NULL"
argument_list|)
expr_stmt|;
comment|// C.1
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|char6
argument_list|,
name|tChar
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|tChar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// C.2
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|varchar2
argument_list|,
name|tChar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|tVarchar
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// C.3
name|checkSimplifyUnchanged
argument_list|(
name|cast
argument_list|(
name|cast
argument_list|(
name|char2
argument_list|,
name|tChar
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|tVarchar
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

