begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFieldImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystemImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|BasicSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NlsString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimeString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampWithTimeZoneString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test for {@link RexBuilder}.  */
end_comment

begin_class
class|class
name|RexBuilderTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|PRECISION
init|=
literal|256
decl_stmt|;
comment|/**    * MySqlTypeFactoryImpl provides a specific implementation of    * {@link SqlTypeFactoryImpl} which sets precision to 256 for VARCHAR.    */
specifier|private
specifier|static
class|class
name|MySqlTypeFactoryImpl
extends|extends
name|SqlTypeFactoryImpl
block|{
name|MySqlTypeFactoryImpl
parameter_list|(
name|RelDataTypeSystem
name|typeSystem
parameter_list|)
block|{
name|super
argument_list|(
name|typeSystem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|createTypeWithNullability
parameter_list|(
specifier|final
name|RelDataType
name|type
parameter_list|,
specifier|final
name|boolean
name|nullable
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|VARCHAR
condition|)
block|{
return|return
operator|new
name|BasicSqlType
argument_list|(
name|this
operator|.
name|typeSystem
argument_list|,
name|type
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|PRECISION
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createTypeWithNullability
argument_list|(
name|type
argument_list|,
name|nullable
argument_list|)
return|;
block|}
block|}
comment|/**    * Test RexBuilder.ensureType()    */
annotation|@
name|Test
name|void
name|testEnsureTypeWithAny
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|RexNode
name|node
init|=
operator|new
name|RexLiteral
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|RexNode
name|ensuredNode
init|=
name|builder
operator|.
name|ensureType
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|ensuredNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RexBuilder.ensureType()    */
annotation|@
name|Test
name|void
name|testEnsureTypeWithItself
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|RexNode
name|node
init|=
operator|new
name|RexLiteral
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|RexNode
name|ensuredNode
init|=
name|builder
operator|.
name|ensureType
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|ensuredNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RexBuilder.ensureType()    */
annotation|@
name|Test
name|void
name|testEnsureTypeWithDifference
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|RexNode
name|node
init|=
operator|new
name|RexLiteral
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|RexNode
name|ensuredNode
init|=
name|builder
operator|.
name|ensureType
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|node
argument_list|,
name|ensuredNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ensuredNode
operator|.
name|getType
argument_list|()
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|MOON
init|=
operator|-
literal|14159025000L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MOON_DAY
init|=
operator|-
literal|164
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MOON_TIME
init|=
literal|10575000
decl_stmt|;
comment|/** Tests {@link RexBuilder#makeTimestampLiteral(TimestampString, int)}. */
annotation|@
name|Test
name|void
name|testTimestampLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType3
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType9
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType18
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// Old way: provide a Calendar
specifier|final
name|Calendar
name|calendar
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|1969
argument_list|,
name|Calendar
operator|.
name|JULY
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// one small step
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkTimestamp
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|calendar
argument_list|,
name|timestampType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old way #2: Provide a Long
name|checkTimestamp
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|MOON
argument_list|,
name|timestampType
argument_list|)
argument_list|)
expr_stmt|;
comment|// The new way
specifier|final
name|TimestampString
name|ts
init|=
operator|new
name|TimestampString
argument_list|(
literal|1969
argument_list|,
literal|7
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|checkTimestamp
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts
argument_list|,
name|timestampType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with milliseconds
specifier|final
name|TimestampString
name|ts2
init|=
name|ts
operator|.
name|withMillis
argument_list|(
literal|56
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexLiteral
name|literal2
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts2
argument_list|,
name|timestampType3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal2
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with nanoseconds
specifier|final
name|TimestampString
name|ts3
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|56
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal3
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3
argument_list|,
name|timestampType9
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal3
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimestampString
name|ts3b
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|2345678
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal3b
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3b
argument_list|,
name|timestampType9
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal3b
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.002"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with a very long fraction
specifier|final
name|TimestampString
name|ts4
init|=
name|ts
operator|.
name|withFraction
argument_list|(
literal|"102030405060708090102"
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal4
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts4
argument_list|,
name|timestampType18
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal4
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// toString
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.05"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimestampString
operator|.
name|fromMillisSinceEpoch
argument_list|(
literal|1456513560123L
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2016-02-26 19:06:00.123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTimestamp
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
name|assertThat
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Calendar
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Long
operator|)
name|literal
operator|.
name|getValue2
argument_list|()
argument_list|,
name|is
argument_list|(
name|MOON
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Calendar
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Tests    * {@link RexBuilder#makeTimestampWithLocalTimeZoneLiteral(TimestampString, int)}. */
annotation|@
name|Test
name|void
name|testTimestampWithLocalTimeZoneLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType3
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType9
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType18
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// The new way
specifier|final
name|TimestampWithTimeZoneString
name|ts
init|=
operator|new
name|TimestampWithTimeZoneString
argument_list|(
literal|1969
argument_list|,
literal|7
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"PST"
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|checkTimestampWithLocalTimeZone
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with milliseconds
specifier|final
name|TimestampWithTimeZoneString
name|ts2
init|=
name|ts
operator|.
name|withMillis
argument_list|(
literal|56
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056 PST"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexLiteral
name|literal2
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts2
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal2
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with nanoseconds
specifier|final
name|TimestampWithTimeZoneString
name|ts3
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|56
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal3
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType9
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal3
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimestampWithTimeZoneString
name|ts3b
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|2345678
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal3b
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3b
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType9
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal3b
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.002"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with a very long fraction
specifier|final
name|TimestampWithTimeZoneString
name|ts4
init|=
name|ts
operator|.
name|withFraction
argument_list|(
literal|"102030405060708090102"
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal4
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts4
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType18
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal4
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// toString
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.05 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056000 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.00 PST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTimestampWithLocalTimeZone
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
name|assertThat
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15:TIMESTAMP_WITH_LOCAL_TIME_ZONE(0)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|TimestampString
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexBuilder#makeTimeLiteral(TimeString, int)}. */
annotation|@
name|Test
name|void
name|testTimeLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|timeType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timeType3
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timeType9
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timeType18
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// Old way: provide a Calendar
specifier|final
name|Calendar
name|calendar
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|1969
argument_list|,
name|Calendar
operator|.
name|JULY
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// one small step
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkTime
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|calendar
argument_list|,
name|timeType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old way #2: Provide a Long
name|checkTime
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|MOON_TIME
argument_list|,
name|timeType
argument_list|)
argument_list|)
expr_stmt|;
comment|// The new way
specifier|final
name|TimeString
name|t
init|=
operator|new
name|TimeString
argument_list|(
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575000
argument_list|)
argument_list|)
expr_stmt|;
name|checkTime
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t
argument_list|,
name|timeType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with milliseconds
specifier|final
name|TimeString
name|t2
init|=
name|t
operator|.
name|withMillis
argument_list|(
literal|56
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575056
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexLiteral
name|literal2
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t2
argument_list|,
name|timeType3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal2
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with nanoseconds
specifier|final
name|TimeString
name|t3
init|=
name|t
operator|.
name|withNanos
argument_list|(
literal|2345678
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t3
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575002
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexLiteral
name|literal3
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t3
argument_list|,
name|timeType9
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal3
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.002"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with a very long fraction
specifier|final
name|TimeString
name|t4
init|=
name|t
operator|.
name|withFraction
argument_list|(
literal|"102030405060708090102"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t4
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575102
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexLiteral
name|literal4
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t4
argument_list|,
name|timeType18
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal4
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// toString
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.05"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeString
operator|.
name|fromMillisOfDay
argument_list|(
literal|53560123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"14:52:40.123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTime
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
name|assertThat
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Calendar
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|literal
operator|.
name|getValue2
argument_list|()
argument_list|,
name|is
argument_list|(
name|MOON_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Calendar
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexBuilder#makeDateLiteral(DateString)}. */
annotation|@
name|Test
name|void
name|testDateLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|dateType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// Old way: provide a Calendar
specifier|final
name|Calendar
name|calendar
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|1969
argument_list|,
name|Calendar
operator|.
name|JULY
argument_list|,
literal|21
argument_list|)
expr_stmt|;
comment|// one small step
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDate
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|calendar
argument_list|,
name|dateType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old way #2: Provide in Integer
name|checkDate
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|MOON_DAY
argument_list|,
name|dateType
argument_list|)
argument_list|)
expr_stmt|;
comment|// The new way
specifier|final
name|DateString
name|d
init|=
operator|new
name|DateString
argument_list|(
literal|1969
argument_list|,
literal|7
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|checkDate
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|d
argument_list|,
name|dateType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDate
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
name|assertThat
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Calendar
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|literal
operator|.
name|getValue2
argument_list|()
argument_list|,
name|is
argument_list|(
name|MOON_DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Calendar
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|DateString
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-2306">[CALCITE-2306]    * AssertionError in {@link RexLiteral#getValue3} with null literal of type    * DECIMAL</a>. */
annotation|@
name|Test
name|void
name|testDecimalLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RexLiteral
name|literal
init|=
name|builder
operator|.
name|makeExactLiteral
argument_list|(
literal|null
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test case for    *<a href="https://issues.apache.org/jira/browse/CALCITE-3587">[CALCITE-3587]    * RexBuilder may lose decimal fraction for creating literal with DECIMAL type</a>.    */
annotation|@
name|Test
name|void
name|testDecimal
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|type
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|makeLiteral
argument_list|(
literal|12.3
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"java.lang.Double is not compatible with DECIMAL, try to use makeExactLiteral"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests {@link DateString} year range. */
annotation|@
name|Test
name|void
name|testDateStringYearError
parameter_list|()
block|{
try|try
block|{
specifier|final
name|DateString
name|dateString
init|=
operator|new
name|DateString
argument_list|(
literal|11969
argument_list|,
literal|7
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|dateString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Year out of range: [11969]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|DateString
name|dateString
init|=
operator|new
name|DateString
argument_list|(
literal|"12345-01-23"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|dateString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Invalid date format: [12345-01-23]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests {@link DateString} month range. */
annotation|@
name|Test
name|void
name|testDateStringMonthError
parameter_list|()
block|{
try|try
block|{
specifier|final
name|DateString
name|dateString
init|=
operator|new
name|DateString
argument_list|(
literal|1969
argument_list|,
literal|27
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|dateString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Month out of range: [27]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|DateString
name|dateString
init|=
operator|new
name|DateString
argument_list|(
literal|"1234-13-02"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|dateString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Month out of range: [13]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests {@link DateString} day range. */
annotation|@
name|Test
name|void
name|testDateStringDayError
parameter_list|()
block|{
try|try
block|{
specifier|final
name|DateString
name|dateString
init|=
operator|new
name|DateString
argument_list|(
literal|1969
argument_list|,
literal|7
argument_list|,
literal|41
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|dateString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Day out of range: [41]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|DateString
name|dateString
init|=
operator|new
name|DateString
argument_list|(
literal|"1234-01-32"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|dateString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Day out of range: [32]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We don't worry about the number of days in a month. 30 is in range.
specifier|final
name|DateString
name|dateString
init|=
operator|new
name|DateString
argument_list|(
literal|"1234-02-30"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|dateString
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link TimeString} hour range. */
annotation|@
name|Test
name|void
name|testTimeStringHourError
parameter_list|()
block|{
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|111
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Hour out of range: [111]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|"24:00:00"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Hour out of range: [24]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|"24:00"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Invalid time format: [24:00]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests {@link TimeString} minute range. */
annotation|@
name|Test
name|void
name|testTimeStringMinuteError
parameter_list|()
block|{
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|12
argument_list|,
literal|334
argument_list|,
literal|56
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Minute out of range: [334]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|"12:60:23"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Minute out of range: [60]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests {@link TimeString} second range. */
annotation|@
name|Test
name|void
name|testTimeStringSecondError
parameter_list|()
block|{
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|567
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Second out of range: [567]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
operator|-
literal|4
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Second out of range: [-4]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|TimeString
name|timeString
init|=
operator|new
name|TimeString
argument_list|(
literal|"12:34:60"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|timeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Second out of range: [60]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test string literal encoding.    */
annotation|@
name|Test
name|void
name|testStringLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|varchar
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|NlsString
name|latin1
init|=
operator|new
name|NlsString
argument_list|(
literal|"foobar"
argument_list|,
literal|"LATIN1"
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
decl_stmt|;
specifier|final
name|NlsString
name|utf8
init|=
operator|new
name|NlsString
argument_list|(
literal|"foobar"
argument_list|,
literal|"UTF8"
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
decl_stmt|;
name|RexLiteral
name|literal
init|=
name|builder
operator|.
name|makePreciseStringLiteral
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"'foobar'"
argument_list|,
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|literal
operator|=
name|builder
operator|.
name|makePreciseStringLiteral
argument_list|(
operator|new
name|ByteString
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'f'
block|,
literal|'o'
block|,
literal|'o'
block|,
literal|'b'
block|,
literal|'a'
block|,
literal|'r'
block|}
argument_list|)
argument_list|,
literal|"UTF8"
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_UTF8'foobar'"
argument_list|,
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_UTF8'foobar':CHAR(6) CHARACTER SET \"UTF-8\""
argument_list|,
operator|(
operator|(
name|RexLiteral
operator|)
name|literal
operator|)
operator|.
name|computeDigest
argument_list|(
name|RexDigestIncludeType
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|literal
operator|=
name|builder
operator|.
name|makePreciseStringLiteral
argument_list|(
operator|new
name|ByteString
argument_list|(
literal|"\u82f1\u56fd"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
literal|"UTF8"
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_UTF8'\u82f1\u56fd'"
argument_list|,
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test again to check decode cache.
name|literal
operator|=
name|builder
operator|.
name|makePreciseStringLiteral
argument_list|(
operator|new
name|ByteString
argument_list|(
literal|"\u82f1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
literal|"UTF8"
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_UTF8'\u82f1'"
argument_list|,
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|literal
operator|=
name|builder
operator|.
name|makePreciseStringLiteral
argument_list|(
operator|new
name|ByteString
argument_list|(
literal|"\u82f1\u56fd"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
literal|"GB2312"
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|literal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Failed to encode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|literal
operator|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|latin1
argument_list|,
name|varchar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_LATIN1'foobar'"
argument_list|,
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|literal
operator|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|utf8
argument_list|,
name|varchar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_UTF8'foobar'"
argument_list|,
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexBuilder#makeExactLiteral(java.math.BigDecimal)}. */
annotation|@
name|Test
name|void
name|testBigDecimalLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
operator|new
name|RelDataTypeSystemImpl
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getMaxPrecision
parameter_list|(
name|SqlTypeName
name|typeName
parameter_list|)
block|{
return|return
literal|38
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"25"
argument_list|)
expr_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"9.9"
argument_list|)
expr_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"-75.5"
argument_list|)
expr_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"10000000"
argument_list|)
expr_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"100000.111111111111111111"
argument_list|)
expr_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"-100000.111111111111111111"
argument_list|)
expr_stmt|;
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"73786976294838206464"
argument_list|)
expr_stmt|;
comment|// 2^66
name|checkBigDecimalLiteral
argument_list|(
name|builder
argument_list|,
literal|"-73786976294838206464"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testMakeIn
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|floatType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|RexNode
name|left
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|floatType
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal1
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|1.0f
argument_list|,
name|floatType
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal2
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|2.0f
argument_list|,
name|floatType
argument_list|)
decl_stmt|;
name|RexNode
name|inCall
init|=
name|rexBuilder
operator|.
name|makeIn
argument_list|(
name|left
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|literal1
argument_list|,
name|literal2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|inCall
operator|.
name|getKind
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlKind
operator|.
name|SEARCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexCopier#visitOver(RexOver)}. */
annotation|@
name|Test
name|void
name|testCopyOver
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|sourceTypeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|type
init|=
name|sourceTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|65536
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|targetTypeFactory
init|=
operator|new
name|MySqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|targetTypeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RexOver
name|node
init|=
operator|(
name|RexOver
operator|)
name|builder
operator|.
name|makeOver
argument_list|(
name|type
argument_list|,
name|SqlStdOperatorTable
operator|.
name|COUNT
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|builder
operator|.
name|makeInputRef
argument_list|(
name|type
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|builder
operator|.
name|makeInputRef
argument_list|(
name|type
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|RexFieldCollation
argument_list|(
name|builder
operator|.
name|makeInputRef
argument_list|(
name|type
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|RexWindowBounds
operator|.
name|UNBOUNDED_PRECEDING
argument_list|,
name|RexWindowBounds
operator|.
name|CURRENT_ROW
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|copy
init|=
name|builder
operator|.
name|copy
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|instanceof
name|RexOver
argument_list|)
expr_stmt|;
name|RexOver
name|result
init|=
operator|(
name|RexOver
operator|)
name|copy
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|is
argument_list|(
name|PRECISION
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getWindow
argument_list|()
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getWindow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getAggOperator
argument_list|()
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getAggOperator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getAggOperator
argument_list|()
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getAggOperator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|result
operator|.
name|isDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|ignoreNulls
argument_list|()
argument_list|,
name|result
operator|.
name|ignoreNulls
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|is
argument_list|(
name|PRECISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests {@link RexCopier#visitCorrelVariable(RexCorrelVariable)}. */
annotation|@
name|Test
name|void
name|testCopyCorrelVariable
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|sourceTypeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|type
init|=
name|sourceTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|65536
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|targetTypeFactory
init|=
operator|new
name|MySqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|targetTypeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RexCorrelVariable
name|node
init|=
operator|(
name|RexCorrelVariable
operator|)
name|builder
operator|.
name|makeCorrel
argument_list|(
name|type
argument_list|,
operator|new
name|CorrelationId
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|copy
init|=
name|builder
operator|.
name|copy
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|instanceof
name|RexCorrelVariable
argument_list|)
expr_stmt|;
specifier|final
name|RexCorrelVariable
name|result
init|=
operator|(
name|RexCorrelVariable
operator|)
name|copy
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|id
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|is
argument_list|(
name|PRECISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexCopier#visitLocalRef(RexLocalRef)}. */
annotation|@
name|Test
name|void
name|testCopyLocalRef
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|sourceTypeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|type
init|=
name|sourceTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|65536
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|targetTypeFactory
init|=
operator|new
name|MySqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|targetTypeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RexLocalRef
name|node
init|=
operator|new
name|RexLocalRef
argument_list|(
literal|0
argument_list|,
name|type
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|copy
init|=
name|builder
operator|.
name|copy
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|instanceof
name|RexLocalRef
argument_list|)
expr_stmt|;
specifier|final
name|RexLocalRef
name|result
init|=
operator|(
name|RexLocalRef
operator|)
name|copy
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getIndex
argument_list|()
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|is
argument_list|(
name|PRECISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexCopier#visitDynamicParam(RexDynamicParam)}. */
annotation|@
name|Test
name|void
name|testCopyDynamicParam
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|sourceTypeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|type
init|=
name|sourceTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|65536
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|targetTypeFactory
init|=
operator|new
name|MySqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|targetTypeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RexDynamicParam
name|node
init|=
name|builder
operator|.
name|makeDynamicParam
argument_list|(
name|type
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|copy
init|=
name|builder
operator|.
name|copy
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|instanceof
name|RexDynamicParam
argument_list|)
expr_stmt|;
specifier|final
name|RexDynamicParam
name|result
init|=
operator|(
name|RexDynamicParam
operator|)
name|copy
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getIndex
argument_list|()
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|is
argument_list|(
name|PRECISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexCopier#visitRangeRef(RexRangeRef)}. */
annotation|@
name|Test
name|void
name|testCopyRangeRef
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|sourceTypeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|type
init|=
name|sourceTypeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
literal|65536
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
name|targetTypeFactory
init|=
operator|new
name|MySqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|targetTypeFactory
argument_list|)
decl_stmt|;
specifier|final
name|RexRangeRef
name|node
init|=
name|builder
operator|.
name|makeRangeReference
argument_list|(
name|type
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|copy
init|=
name|builder
operator|.
name|copy
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|instanceof
name|RexRangeRef
argument_list|)
expr_stmt|;
specifier|final
name|RexRangeRef
name|result
init|=
operator|(
name|RexRangeRef
operator|)
name|copy
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getOffset
argument_list|()
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|,
name|is
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getType
argument_list|()
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|is
argument_list|(
name|PRECISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkBigDecimalLiteral
parameter_list|(
name|RexBuilder
name|builder
parameter_list|,
name|String
name|val
parameter_list|)
block|{
specifier|final
name|RexLiteral
name|literal
init|=
name|builder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|val
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"builder.makeExactLiteral(new BigDecimal("
operator|+
name|val
operator|+
literal|")).getValueAs(BigDecimal.class).toString()"
argument_list|,
name|literal
operator|.
name|getValueAs
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testValidateRexFieldAccess
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|RelDataType
name|intType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|RelDataType
name|longType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl_stmt|;
name|RelDataType
name|structType
init|=
name|typeFactory
operator|.
name|createStructType
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|intType
argument_list|,
name|longType
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
decl_stmt|;
name|RexInputRef
name|inputRef
init|=
name|builder
operator|.
name|makeInputRef
argument_list|(
name|structType
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// construct RexFieldAccess fails because of negative index
name|IllegalArgumentException
name|e1
init|=
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|RelDataTypeField
name|field
init|=
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"z"
argument_list|,
operator|-
literal|1
argument_list|,
name|intType
argument_list|)
decl_stmt|;
operator|new
name|RexFieldAccess
argument_list|(
name|inputRef
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Field #-1: z INTEGER does not exist for expression $0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// construct RexFieldAccess fails because of too large index
name|IllegalArgumentException
name|e2
init|=
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|RelDataTypeField
name|field
init|=
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"z"
argument_list|,
literal|2
argument_list|,
name|intType
argument_list|)
decl_stmt|;
operator|new
name|RexFieldAccess
argument_list|(
name|inputRef
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e2
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Field #2: z INTEGER does not exist for expression $0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// construct RexFieldAccess fails because of incorrect type
name|IllegalArgumentException
name|e3
init|=
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|RelDataTypeField
name|field
init|=
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"z"
argument_list|,
literal|0
argument_list|,
name|longType
argument_list|)
decl_stmt|;
operator|new
name|RexFieldAccess
argument_list|(
name|inputRef
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e3
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Field #0: z BIGINT does not exist for expression $0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// construct RexFieldAccess successfully
name|RelDataTypeField
name|field
init|=
operator|new
name|RelDataTypeFieldImpl
argument_list|(
literal|"x"
argument_list|,
literal|0
argument_list|,
name|intType
argument_list|)
decl_stmt|;
name|RexFieldAccess
name|fieldAccess
init|=
operator|new
name|RexFieldAccess
argument_list|(
name|inputRef
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|RexChecker
name|checker
init|=
operator|new
name|RexChecker
argument_list|(
name|structType
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|,
name|Litmus
operator|.
name|THROW
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fieldAccess
operator|.
name|accept
argument_list|(
name|checker
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

