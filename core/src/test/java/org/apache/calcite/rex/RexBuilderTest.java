begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|DateString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimeString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|TimestampWithTimeZoneString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test for {@link RexBuilder}.  */
end_comment

begin_class
specifier|public
class|class
name|RexBuilderTest
block|{
comment|/**    * Test RexBuilder.ensureType()    */
annotation|@
name|Test
specifier|public
name|void
name|testEnsureTypeWithAny
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|RexNode
name|node
init|=
operator|new
name|RexLiteral
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|RexNode
name|ensuredNode
init|=
name|builder
operator|.
name|ensureType
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|ensuredNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RexBuilder.ensureType()    */
annotation|@
name|Test
specifier|public
name|void
name|testEnsureTypeWithItself
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|RexNode
name|node
init|=
operator|new
name|RexLiteral
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|RexNode
name|ensuredNode
init|=
name|builder
operator|.
name|ensureType
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|ensuredNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RexBuilder.ensureType()    */
annotation|@
name|Test
specifier|public
name|void
name|testEnsureTypeWithDifference
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
name|RexNode
name|node
init|=
operator|new
name|RexLiteral
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
name|RexNode
name|ensuredNode
init|=
name|builder
operator|.
name|ensureType
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|node
argument_list|,
name|ensuredNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ensuredNode
operator|.
name|getType
argument_list|()
argument_list|,
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|MOON
init|=
operator|-
literal|14159025000L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MOON_DAY
init|=
operator|-
literal|164
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MOON_TIME
init|=
literal|10575000
decl_stmt|;
comment|/** Tests {@link RexBuilder#makeTimestampLiteral(TimestampString, int)}. */
annotation|@
name|Test
specifier|public
name|void
name|testTimestampLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType3
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType9
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType18
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// Old way: provide a Calendar
specifier|final
name|Calendar
name|calendar
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|1969
argument_list|,
name|Calendar
operator|.
name|JULY
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// one small step
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkTimestamp
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|calendar
argument_list|,
name|timestampType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old way #2: Provide a Long
name|checkTimestamp
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|MOON
argument_list|,
name|timestampType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The new way
specifier|final
name|TimestampString
name|ts
init|=
operator|new
name|TimestampString
argument_list|(
literal|1969
argument_list|,
literal|7
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|checkTimestamp
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts
argument_list|,
name|timestampType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with milliseconds
specifier|final
name|TimestampString
name|ts2
init|=
name|ts
operator|.
name|withMillis
argument_list|(
literal|56
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|literal2
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts2
argument_list|,
name|timestampType3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal2
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with nanoseconds
specifier|final
name|TimestampString
name|ts3
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|56
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal3
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3
argument_list|,
name|timestampType9
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal3
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimestampString
name|ts3b
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|2345678
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal3b
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3b
argument_list|,
name|timestampType9
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal3b
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.002"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with a very long fraction
specifier|final
name|TimestampString
name|ts4
init|=
name|ts
operator|.
name|withFraction
argument_list|(
literal|"102030405060708090102"
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal4
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts4
argument_list|,
name|timestampType18
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal4
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// toString
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.05"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimestampString
operator|.
name|fromMillisSinceEpoch
argument_list|(
literal|1456513560123L
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2016-02-26 19:06:00.123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTimestamp
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|assertThat
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|node
decl_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Calendar
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Long
operator|)
name|literal
operator|.
name|getValue2
argument_list|()
argument_list|,
name|is
argument_list|(
name|MOON
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Calendar
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Tests    * {@link RexBuilder#makeTimestampWithLocalTimeZoneLiteral(TimestampString, int)}. */
annotation|@
name|Test
specifier|public
name|void
name|testTimestampWithLocalTimeZoneLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType3
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType9
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timestampType18
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// The new way
specifier|final
name|TimestampWithTimeZoneString
name|ts
init|=
operator|new
name|TimestampWithTimeZoneString
argument_list|(
literal|1969
argument_list|,
literal|7
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"PST"
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|checkTimestampWithLocalTimeZone
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with milliseconds
specifier|final
name|TimestampWithTimeZoneString
name|ts2
init|=
name|ts
operator|.
name|withMillis
argument_list|(
literal|56
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056 PST"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|literal2
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts2
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal2
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with nanoseconds
specifier|final
name|TimestampWithTimeZoneString
name|ts3
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|56
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal3
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType9
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal3
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimestampWithTimeZoneString
name|ts3b
init|=
name|ts
operator|.
name|withNanos
argument_list|(
literal|2345678
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal3b
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts3b
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType9
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal3b
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.002"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with a very long fraction
specifier|final
name|TimestampWithTimeZoneString
name|ts4
init|=
name|ts
operator|.
name|withFraction
argument_list|(
literal|"102030405060708090102"
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literal4
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|ts4
operator|.
name|getLocalTimestampString
argument_list|()
argument_list|,
name|timestampType18
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal4
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimestampString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// toString
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.05 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.056000 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.0 PST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ts2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15.00 PST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTimestampWithLocalTimeZone
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|assertThat
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21 02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|node
decl_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|TimestampString
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Long
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexBuilder#makeTimeLiteral(TimeString, int)}. */
annotation|@
name|Test
specifier|public
name|void
name|testTimeLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|timeType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timeType3
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timeType9
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|timeType18
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIME
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// Old way: provide a Calendar
specifier|final
name|Calendar
name|calendar
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|1969
argument_list|,
name|Calendar
operator|.
name|JULY
argument_list|,
literal|21
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// one small step
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkTime
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|calendar
argument_list|,
name|timeType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old way #2: Provide a Long
name|checkTime
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|MOON_TIME
argument_list|,
name|timeType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The new way
specifier|final
name|TimeString
name|t
init|=
operator|new
name|TimeString
argument_list|(
literal|2
argument_list|,
literal|56
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575000
argument_list|)
argument_list|)
expr_stmt|;
name|checkTime
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t
argument_list|,
name|timeType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with milliseconds
specifier|final
name|TimeString
name|t2
init|=
name|t
operator|.
name|withMillis
argument_list|(
literal|56
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575056
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|literal2
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t2
argument_list|,
name|timeType3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal2
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with nanoseconds
specifier|final
name|TimeString
name|t3
init|=
name|t
operator|.
name|withNanos
argument_list|(
literal|2345678
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t3
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575002
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|literal3
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t3
argument_list|,
name|timeType9
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal3
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.002"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now with a very long fraction
specifier|final
name|TimeString
name|t4
init|=
name|t
operator|.
name|withFraction
argument_list|(
literal|"102030405060708090102"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|t4
operator|.
name|getMillisOfDay
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10575102
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RexNode
name|literal4
init|=
name|builder
operator|.
name|makeLiteral
argument_list|(
name|t4
argument_list|,
name|timeType18
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|literal4
operator|)
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// toString
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.05"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.056000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|t2
operator|.
name|round
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"02:56:15.00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeString
operator|.
name|fromMillisOfDay
argument_list|(
literal|53560123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"14:52:40.123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTime
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|assertThat
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"02:56:15"
argument_list|)
argument_list|)
expr_stmt|;
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|node
decl_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Calendar
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|literal
operator|.
name|getValue2
argument_list|()
argument_list|,
name|is
argument_list|(
name|MOON_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Calendar
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|TimeString
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RexBuilder#makeDateLiteral(DateString)}. */
annotation|@
name|Test
specifier|public
name|void
name|testDateLiteral
parameter_list|()
block|{
specifier|final
name|RelDataTypeFactory
name|typeFactory
init|=
operator|new
name|SqlTypeFactoryImpl
argument_list|(
name|RelDataTypeSystem
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|RelDataType
name|dateType
init|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|builder
init|=
operator|new
name|RexBuilder
argument_list|(
name|typeFactory
argument_list|)
decl_stmt|;
comment|// Old way: provide a Calendar
specifier|final
name|Calendar
name|calendar
init|=
name|Util
operator|.
name|calendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|1969
argument_list|,
name|Calendar
operator|.
name|JULY
argument_list|,
literal|21
argument_list|)
expr_stmt|;
comment|// one small step
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDate
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|calendar
argument_list|,
name|dateType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old way #2: Provide in Integer
name|checkDate
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|MOON_DAY
argument_list|,
name|dateType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The new way
specifier|final
name|DateString
name|d
init|=
operator|new
name|DateString
argument_list|(
literal|1969
argument_list|,
literal|7
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|checkDate
argument_list|(
name|builder
operator|.
name|makeLiteral
argument_list|(
name|d
argument_list|,
name|dateType
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDate
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|assertThat
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1969-07-21"
argument_list|)
argument_list|)
expr_stmt|;
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|node
decl_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Calendar
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue2
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValue3
argument_list|()
operator|instanceof
name|Integer
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|literal
operator|.
name|getValue2
argument_list|()
argument_list|,
name|is
argument_list|(
name|MOON_DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|Calendar
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|literal
operator|.
name|getValueAs
argument_list|(
name|DateString
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End RexBuilderTest.java
end_comment

end_unit

