begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_class
class|class
name|RexCallNormalizationTest
extends|extends
name|RexProgramTestBase
block|{
annotation|@
name|Test
name|void
name|digestIsNormalized
parameter_list|()
block|{
specifier|final
name|RexNode
name|node
init|=
name|and
argument_list|(
name|or
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
name|vBool
argument_list|()
argument_list|)
decl_stmt|;
name|checkDigest
argument_list|(
name|node
argument_list|,
literal|"AND(?0.bool0, OR(?0.bool0, ?0.bool1))"
argument_list|)
expr_stmt|;
name|checkRaw
argument_list|(
name|node
argument_list|,
literal|"AND(OR(?0.bool1, ?0.bool0), ?0.bool0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|eq
argument_list|(
name|vVarchar
argument_list|()
argument_list|,
name|literal
argument_list|(
literal|"0123456789012345"
argument_list|)
argument_list|)
argument_list|,
literal|"=(?0.varchar0, '0123456789012345')"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|eq
argument_list|(
name|vVarchar
argument_list|()
argument_list|,
name|literal
argument_list|(
literal|"01"
argument_list|)
argument_list|)
argument_list|,
literal|"=('01', ?0.varchar0)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|skipNormalizationWorks
parameter_list|()
block|{
specifier|final
name|RexNode
name|node
init|=
name|and
argument_list|(
name|or
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
name|vBool
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|RexNode
operator|.
name|Closeable
name|ignored
init|=
name|RexNode
operator|.
name|skipNormalize
argument_list|()
init|)
block|{
name|checkDigest
argument_list|(
name|node
argument_list|,
literal|"AND(OR(?0.bool1, ?0.bool0), ?0.bool0)"
argument_list|)
expr_stmt|;
name|checkRaw
argument_list|(
name|node
argument_list|,
literal|"AND(OR(?0.bool1, ?0.bool0), ?0.bool0)"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|skipNormalizeWorks
parameter_list|()
block|{
name|checkDigest
argument_list|(
name|and
argument_list|(
name|or
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
literal|"AND(?0.bool0, OR(?0.bool0, ?0.bool1))"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|reversibleSameArgOpsNormalizedToLess
parameter_list|()
block|{
name|checkDigest
argument_list|(
name|lt
argument_list|(
name|vBool
argument_list|()
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
literal|"<(?0.bool0, ?0.bool0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|gt
argument_list|(
name|vBool
argument_list|()
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
literal|"<(?0.bool0, ?0.bool0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|le
argument_list|(
name|vBool
argument_list|()
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
literal|"<=(?0.bool0, ?0.bool0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|ge
argument_list|(
name|vBool
argument_list|()
argument_list|,
name|vBool
argument_list|()
argument_list|)
argument_list|,
literal|"<=(?0.bool0, ?0.bool0)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|reversibleDifferentArgTypesShouldNotBeShuffled
parameter_list|()
block|{
name|checkDigest
argument_list|(
name|plus
argument_list|(
name|vSmallInt
argument_list|()
argument_list|,
name|vInt
argument_list|()
argument_list|)
argument_list|,
literal|"+(?0.smallint0, ?0.int0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|plus
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|vSmallInt
argument_list|()
argument_list|)
argument_list|,
literal|"+(?0.int0, ?0.smallint0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|mul
argument_list|(
name|vSmallInt
argument_list|()
argument_list|,
name|vInt
argument_list|()
argument_list|)
argument_list|,
literal|"*(?0.smallint0, ?0.int0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|mul
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|vSmallInt
argument_list|()
argument_list|)
argument_list|,
literal|"*(?0.int0, ?0.smallint0)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|reversibleDifferentNullabilityArgsAreNormalized
parameter_list|()
block|{
name|checkDigest
argument_list|(
name|plus
argument_list|(
name|vIntNotNull
argument_list|()
argument_list|,
name|vInt
argument_list|()
argument_list|)
argument_list|,
literal|"+(?0.int0, ?0.notNullInt0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|plus
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|vIntNotNull
argument_list|()
argument_list|)
argument_list|,
literal|"+(?0.int0, ?0.notNullInt0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|mul
argument_list|(
name|vIntNotNull
argument_list|()
argument_list|,
name|vInt
argument_list|()
argument_list|)
argument_list|,
literal|"*(?0.int0, ?0.notNullInt0)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|mul
argument_list|(
name|vInt
argument_list|()
argument_list|,
name|vIntNotNull
argument_list|()
argument_list|)
argument_list|,
literal|"*(?0.int0, ?0.notNullInt0)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|symmetricalDifferentArgOps
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
literal|1
operator|-
name|i
decl_stmt|;
name|checkDigest
argument_list|(
name|eq
argument_list|(
name|vBool
argument_list|(
name|i
argument_list|)
argument_list|,
name|vBool
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
literal|"=(?0.bool0, ?0.bool1)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|ne
argument_list|(
name|vBool
argument_list|(
name|i
argument_list|)
argument_list|,
name|vBool
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
literal|"<>(?0.bool0, ?0.bool1)"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
name|void
name|reversibleDifferentArgOps
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
literal|1
operator|-
name|i
decl_stmt|;
name|checkDigest
argument_list|(
name|lt
argument_list|(
name|vBool
argument_list|(
name|i
argument_list|)
argument_list|,
name|vBool
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
name|i
operator|<
name|j
condition|?
literal|"<(?0.bool0, ?0.bool1)"
else|:
literal|">(?0.bool0, ?0.bool1)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|le
argument_list|(
name|vBool
argument_list|(
name|i
argument_list|)
argument_list|,
name|vBool
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
name|i
operator|<
name|j
condition|?
literal|"<=(?0.bool0, ?0.bool1)"
else|:
literal|">=(?0.bool0, ?0.bool1)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|gt
argument_list|(
name|vBool
argument_list|(
name|i
argument_list|)
argument_list|,
name|vBool
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
name|i
operator|<
name|j
condition|?
literal|">(?0.bool0, ?0.bool1)"
else|:
literal|"<(?0.bool0, ?0.bool1)"
argument_list|)
expr_stmt|;
name|checkDigest
argument_list|(
name|ge
argument_list|(
name|vBool
argument_list|(
name|i
argument_list|)
argument_list|,
name|vBool
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
name|i
operator|<
name|j
condition|?
literal|">=(?0.bool0, ?0.bool1)"
else|:
literal|"<=(?0.bool0, ?0.bool1)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

