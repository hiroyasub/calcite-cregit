begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/** Test cases for {@link RexNormalize}. */
end_comment

begin_class
class|class
name|RexNormalizeTest
extends|extends
name|RexProgramTestBase
block|{
annotation|@
name|Test
name|void
name|digestIsNormalized
parameter_list|()
block|{
name|assertNodeEquals
argument_list|(
name|and
argument_list|(
name|or
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|and
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|or
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeEquals
argument_list|(
name|and
argument_list|(
name|or
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|and
argument_list|(
name|or
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeEquals
argument_list|(
name|eq
argument_list|(
name|vVarchar
argument_list|(
literal|0
argument_list|)
argument_list|,
name|literal
argument_list|(
literal|"0123456789012345"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|literal
argument_list|(
literal|"0123456789012345"
argument_list|)
argument_list|,
name|vVarchar
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeEquals
argument_list|(
name|eq
argument_list|(
name|vVarchar
argument_list|(
literal|0
argument_list|)
argument_list|,
name|literal
argument_list|(
literal|"01"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|literal
argument_list|(
literal|"01"
argument_list|)
argument_list|,
name|vVarchar
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|reversibleNormalizedToLess
parameter_list|()
block|{
comment|// Same type operands.
name|assertNodeEquals
argument_list|(
name|lt
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|gt
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeEquals
argument_list|(
name|le
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|ge
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different type operands.
name|assertNodeEquals
argument_list|(
name|lt
argument_list|(
name|vSmallInt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|gt
argument_list|(
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vSmallInt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeEquals
argument_list|(
name|le
argument_list|(
name|vSmallInt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|ge
argument_list|(
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vSmallInt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|reversibleDifferentArgTypesShouldNotBeShuffled
parameter_list|()
block|{
name|assertNodeNotEqual
argument_list|(
name|plus
argument_list|(
name|vSmallInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vInt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|plus
argument_list|(
name|vInt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vSmallInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeNotEqual
argument_list|(
name|mul
argument_list|(
name|vSmallInt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|mul
argument_list|(
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vSmallInt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|reversibleDifferentNullabilityArgsAreNormalized
parameter_list|()
block|{
name|assertNodeEquals
argument_list|(
name|plus
argument_list|(
name|vIntNotNull
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|plus
argument_list|(
name|vInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vIntNotNull
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeEquals
argument_list|(
name|mul
argument_list|(
name|vIntNotNull
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vInt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|mul
argument_list|(
name|vInt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vIntNotNull
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|symmetricalDifferentArgOps
parameter_list|()
block|{
name|assertNodeEquals
argument_list|(
name|eq
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeEquals
argument_list|(
name|ne
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|ne
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|reversibleDifferentArgOps
parameter_list|()
block|{
name|assertNodeNotEqual
argument_list|(
name|lt
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|lt
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeNotEqual
argument_list|(
name|le
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|le
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeNotEqual
argument_list|(
name|gt
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|gt
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeNotEqual
argument_list|(
name|ge
argument_list|(
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|ge
argument_list|(
name|vBool
argument_list|(
literal|1
argument_list|)
argument_list|,
name|vBool
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Asserts two rex nodes are equal. */
specifier|private
specifier|static
name|void
name|assertNodeEquals
parameter_list|(
name|RexNode
name|node1
parameter_list|,
name|RexNode
name|node2
parameter_list|)
block|{
specifier|final
name|String
name|reason
init|=
name|getReason
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reason
argument_list|,
name|node1
argument_list|,
name|equalTo
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reason
argument_list|,
name|node1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Asserts two rex nodes are not equal. */
specifier|private
specifier|static
name|void
name|assertNodeNotEqual
parameter_list|(
name|RexNode
name|node1
parameter_list|,
name|RexNode
name|node2
parameter_list|)
block|{
specifier|final
name|String
name|reason
init|=
name|getReason
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reason
argument_list|,
name|node1
argument_list|,
name|CoreMatchers
operator|.
name|not
argument_list|(
name|equalTo
argument_list|(
name|node2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reason
argument_list|,
name|node1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|not
argument_list|(
name|equalTo
argument_list|(
name|node2
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the assertion reason. */
specifier|private
specifier|static
name|String
name|getReason
parameter_list|(
name|RexNode
name|node1
parameter_list|,
name|RexNode
name|node2
parameter_list|,
name|boolean
name|equal
parameter_list|)
block|{
name|StringBuilder
name|reason
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Rex nodes ["
argument_list|)
decl_stmt|;
name|reason
operator|.
name|append
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|reason
operator|.
name|append
argument_list|(
literal|"] and ["
argument_list|)
expr_stmt|;
name|reason
operator|.
name|append
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|reason
operator|.
name|append
argument_list|(
literal|"] expect to be "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|equal
condition|)
block|{
name|reason
operator|.
name|append
argument_list|(
literal|"not "
argument_list|)
expr_stmt|;
block|}
name|reason
operator|.
name|append
argument_list|(
literal|"equal"
argument_list|)
expr_stmt|;
return|return
name|reason
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

