begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|AvaticaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|Spaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|examples
operator|.
name|RelBuilderExample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|FlatLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|util
operator|.
name|SqlString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|DiffTestCase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Util} and other classes in this package.  */
end_comment

begin_class
specifier|public
class|class
name|UtilTest
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|UtilTest
parameter_list|()
block|{
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUSLocale
parameter_list|()
block|{
comment|// This ensures numbers in exceptions are printed as in asserts.
comment|// For example, 1,000 vs 1 000
name|Locale
operator|.
name|setDefault
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrintEquals
parameter_list|()
block|{
name|assertPrintEquals
argument_list|(
literal|"\"x\""
argument_list|,
literal|"x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrintEquals2
parameter_list|()
block|{
name|assertPrintEquals
argument_list|(
literal|"\"x\""
argument_list|,
literal|"x"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrintEquals3
parameter_list|()
block|{
name|assertPrintEquals
argument_list|(
literal|"null"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrintEquals4
parameter_list|()
block|{
name|assertPrintEquals
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrintEquals5
parameter_list|()
block|{
name|assertPrintEquals
argument_list|(
literal|"\"\\\\\\\"\\r\\n\""
argument_list|,
literal|"\\\"\r\n"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScientificNotation
parameter_list|()
block|{
name|BigDecimal
name|bd
decl_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"0.001234"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1.234E-3"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"0.001"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1E-3"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"-0.001"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"-1E-3"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1E0"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"-1E0"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1.0E0"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1.2345E4"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345.00"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1.234500E4"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345.001"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1.2345001E4"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
comment|// test truncate
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"1.23456789012345678901"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"1.2345678901234567890E0"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"-1.23456789012345678901"
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|assertEqualsVerbose
argument_list|(
literal|"-1.2345678901234567890E0"
argument_list|,
name|Util
operator|.
name|toScientificNotation
argument_list|(
name|bd
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToJavaId
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|assertEquals
argument_list|(
literal|"ID$0$foo"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID$0$foo_20_bar"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"foo bar"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID$0$foo__bar"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"foo_bar"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID$100$_30_bar"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"0bar"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID$0$foo0bar"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"foo0bar"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID$0$it_27_s_20_a_20_bird_2c__20_it_27_s_20_a_20_plane_21_"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"it's a bird, it's a plane!"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try some funny non-ASCII charsets
name|assertEquals
argument_list|(
literal|"ID$0$_f6__cb__c4__ca__ae__c1__f9__cb_"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"\u00f6\u00cb\u00c4\u00ca\u00ae\u00c1\u00f9\u00cb"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID$0$_f6cb__c4ca__aec1__f9cb_"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
literal|"\uf6cb\uc4ca\uaec1\uf9cb"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes1
init|=
block|{
literal|3
block|,
literal|12
block|,
literal|54
block|,
literal|23
block|,
literal|33
block|,
literal|23
block|,
literal|45
block|,
literal|21
block|,
literal|127
block|,
operator|-
literal|34
block|,
operator|-
literal|92
block|,
operator|-
literal|113
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ID$0$_3__c_6_17__21__17__2d__15__7f__6cd9__fffd_"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
operator|new
name|String
argument_list|(
name|bytes1
argument_list|,
literal|"EUC-JP"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes2
init|=
block|{
literal|64
block|,
literal|32
block|,
literal|43
block|,
operator|-
literal|45
block|,
operator|-
literal|23
block|,
literal|0
block|,
literal|43
block|,
literal|54
block|,
literal|119
block|,
operator|-
literal|32
block|,
operator|-
literal|56
block|,
operator|-
literal|34
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ID$0$_30c__3617__2117__2d15__7fde__a48f_"
argument_list|,
name|Util
operator|.
name|toJavaId
argument_list|(
operator|new
name|String
argument_list|(
name|bytes1
argument_list|,
literal|"UTF-16"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertPrintEquals
parameter_list|(
name|String
name|expect
parameter_list|,
name|String
name|in
parameter_list|,
name|boolean
name|nullMeansNull
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|Util
operator|.
name|printJavaString
argument_list|(
name|pw
argument_list|,
name|in
argument_list|,
name|nullMeansNull
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|out
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit-test for {@link BitString}.    */
annotation|@
name|Test
specifier|public
name|void
name|testBitString
parameter_list|()
block|{
comment|// Powers of two, minimal length.
specifier|final
name|BitString
name|b0
init|=
operator|new
name|BitString
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b1
init|=
operator|new
name|BitString
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b2
init|=
operator|new
name|BitString
argument_list|(
literal|"10"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b4
init|=
operator|new
name|BitString
argument_list|(
literal|"100"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b8
init|=
operator|new
name|BitString
argument_list|(
literal|"1000"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b16
init|=
operator|new
name|BitString
argument_list|(
literal|"10000"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b32
init|=
operator|new
name|BitString
argument_list|(
literal|"100000"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b64
init|=
operator|new
name|BitString
argument_list|(
literal|"1000000"
argument_list|,
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b128
init|=
operator|new
name|BitString
argument_list|(
literal|"10000000"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b256
init|=
operator|new
name|BitString
argument_list|(
literal|"100000000"
argument_list|,
literal|9
argument_list|)
decl_stmt|;
comment|// other strings
specifier|final
name|BitString
name|b0x1
init|=
operator|new
name|BitString
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|BitString
name|b0x12
init|=
operator|new
name|BitString
argument_list|(
literal|""
argument_list|,
literal|12
argument_list|)
decl_stmt|;
comment|// conversion to hex strings
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|b0
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|b1
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|b2
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|b4
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8"
argument_list|,
name|b8
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|b16
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"20"
argument_list|,
name|b32
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"40"
argument_list|,
name|b64
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"80"
argument_list|,
name|b128
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"100"
argument_list|,
name|b256
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|b0x1
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"000"
argument_list|,
name|b0x12
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
comment|// to byte array
name|assertByteArray
argument_list|(
literal|"01"
argument_list|,
literal|"1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
literal|"01"
argument_list|,
literal|"1"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
literal|"01"
argument_list|,
literal|"1"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
literal|"00, 01"
argument_list|,
literal|"1"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
literal|"00"
argument_list|,
literal|"0"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertByteArray
argument_list|(
literal|"00"
argument_list|,
literal|"0000"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// bit count less than string
name|assertByteArray
argument_list|(
literal|"00"
argument_list|,
literal|"000"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// bit count larger than string
name|assertByteArray
argument_list|(
literal|"00"
argument_list|,
literal|"0"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// precisely 1 byte
name|assertByteArray
argument_list|(
literal|"00, 00"
argument_list|,
literal|"00"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// just over 1 byte
comment|// from hex string
name|assertReversible
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"1000"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"10000"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"100000"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"1000000"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"10000000"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"100000000"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"01"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"001010"
argument_list|)
expr_stmt|;
name|assertReversible
argument_list|(
literal|"000000000100"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertReversible
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|s
argument_list|,
name|BitString
operator|.
name|createFromBitString
argument_list|(
name|s
argument_list|)
operator|.
name|toBitString
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|BitString
operator|.
name|createFromHexString
argument_list|(
name|s
argument_list|)
operator|.
name|toHexString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertByteArray
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|bits
parameter_list|,
name|int
name|bitCount
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|BitString
operator|.
name|toByteArrayFromBitString
argument_list|(
name|bits
argument_list|,
name|bitCount
argument_list|)
decl_stmt|;
specifier|final
name|String
name|s
init|=
name|toString
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts a byte array to a hex string like "AB, CD".    */
specifier|private
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|b
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|b
operator|<
literal|16
operator|)
condition|?
operator|(
literal|"0"
operator|+
name|s
operator|)
else|:
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Tests {@link org.apache.calcite.util.CastingList} and {@link Util#cast}.    */
annotation|@
name|Test
specifier|public
name|void
name|testCastingList
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Number
argument_list|>
name|numberList
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|numberList
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|numberList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|numberList
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|integerList
init|=
name|Util
operator|.
name|cast
argument_list|(
name|numberList
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|integerList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|integerList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Nulls are OK.
name|assertNull
argument_list|(
name|integerList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can update the underlying list.
name|integerList
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|345
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|345
argument_list|)
argument_list|,
name|integerList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|integerList
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|integerList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can add a member of the wrong type to the underlying list.
name|numberList
operator|.
name|add
argument_list|(
operator|new
name|Double
argument_list|(
literal|3.1415
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|integerList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Access a member which is of the wrong type.
try|try
block|{
name|integerList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIterableProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"george"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"ringo"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|Util
operator|.
name|toMap
argument_list|(
name|properties
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"bar=ringo;foo=george;"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Util
operator|.
name|toMap
argument_list|(
name|properties
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"nonString"
argument_list|,
literal|34
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|Util
operator|.
name|toMap
argument_list|(
name|properties
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|s
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
comment|/**    * Tests the difference engine, {@link DiffTestCase#diff}.    */
annotation|@
name|Test
specifier|public
name|void
name|testDiffLines
parameter_list|()
block|{
name|String
index|[]
name|before
init|=
block|{
literal|"Get a dose of her in jackboots and kilt"
block|,
literal|"She's killer-diller when she's dressed to the hilt"
block|,
literal|"She's the kind of a girl that makes The News of The World"
block|,
literal|"Yes you could say she was attractively built."
block|,
literal|"Yeah yeah yeah."
block|}
decl_stmt|;
name|String
index|[]
name|after
init|=
block|{
literal|"Get a dose of her in jackboots and kilt"
block|,
literal|"(they call her \"Polythene Pam\")"
block|,
literal|"She's killer-diller when she's dressed to the hilt"
block|,
literal|"She's the kind of a girl that makes The Sunday Times"
block|,
literal|"seem more interesting."
block|,
literal|"Yes you could say she was attractively built."
block|}
decl_stmt|;
name|String
name|diff
init|=
name|DiffTestCase
operator|.
name|diffLines
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|before
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|after
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|toLinux
argument_list|(
name|diff
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1a2\n"
operator|+
literal|"> (they call her \"Polythene Pam\")\n"
operator|+
literal|"3c4,5\n"
operator|+
literal|"< She's the kind of a girl that makes The News of The World\n"
operator|+
literal|"---\n"
operator|+
literal|"> She's the kind of a girl that makes The Sunday Times\n"
operator|+
literal|"> seem more interesting.\n"
operator|+
literal|"5d6\n"
operator|+
literal|"< Yeah yeah yeah.\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the {@link Util#toPosix(TimeZone, boolean)} method.    */
annotation|@
name|Test
specifier|public
name|void
name|testPosixTimeZone
parameter_list|()
block|{
comment|// NOTE jvs 31-July-2007:  First two tests are disabled since
comment|// not everyone may have patched their system yet for recent
comment|// DST change.
comment|// Pacific Standard Time. Effective 2007, the local time changes from
comment|// PST to PDT at 02:00 LST to 03:00 LDT on the second Sunday in March
comment|// and returns at 02:00 LDT to 01:00 LST on the first Sunday in
comment|// November.
if|if
condition|(
literal|false
condition|)
block|{
name|assertEquals
argument_list|(
literal|"PST-8PDT,M3.2.0,M11.1.0"
argument_list|,
name|Util
operator|.
name|toPosix
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"PST"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PST-8PDT1,M3.2.0/2,M11.1.0/2"
argument_list|,
name|Util
operator|.
name|toPosix
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"PST"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tokyo has +ve offset, no DST
name|assertEquals
argument_list|(
literal|"JST9"
argument_list|,
name|Util
operator|.
name|toPosix
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Asia/Tokyo"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sydney, Australia lies ten hours east of GMT and makes a one hour
comment|// shift forward during daylight savings. Being located in the southern
comment|// hemisphere, daylight savings begins on the last Sunday in October at
comment|// 2am and ends on the last Sunday in March at 3am.
comment|// (Uses STANDARD_TIME time-transition mode.)
comment|// Because australia changed their daylight savings rules, some JVMs
comment|// have a different (older and incorrect) timezone settings for
comment|// Australia.  So we test for the older one first then do the
comment|// correct assert based upon what the toPosix method returns
name|String
name|posixTime
init|=
name|Util
operator|.
name|toPosix
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Australia/Sydney"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|posixTime
operator|.
name|equals
argument_list|(
literal|"EST10EST1,M10.5.0/2,M3.5.0/3"
argument_list|)
condition|)
block|{
comment|// very old JVMs without the fix
name|assertEquals
argument_list|(
literal|"EST10EST1,M10.5.0/2,M3.5.0/3"
argument_list|,
name|posixTime
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|posixTime
operator|.
name|equals
argument_list|(
literal|"EST10EST1,M10.1.0/2,M4.1.0/3"
argument_list|)
condition|)
block|{
comment|// old JVMs without the fix
name|assertEquals
argument_list|(
literal|"EST10EST1,M10.1.0/2,M4.1.0/3"
argument_list|,
name|posixTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// newer JVMs with the fix
name|assertEquals
argument_list|(
literal|"AEST10AEDT1,M10.1.0/2,M4.1.0/3"
argument_list|,
name|posixTime
argument_list|)
expr_stmt|;
block|}
comment|// Paris, France. (Uses UTC_TIME time-transition mode.)
name|assertEquals
argument_list|(
literal|"CET1CEST1,M3.5.0/2,M10.5.0/3"
argument_list|,
name|Util
operator|.
name|toPosix
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Europe/Paris"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTC0"
argument_list|,
name|Util
operator|.
name|toPosix
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the methods {@link Util#enumConstants(Class)} and    * {@link Util#enumVal(Class, String)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testEnumConstants
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MemoryType
argument_list|>
name|memoryTypeMap
init|=
name|Util
operator|.
name|enumConstants
argument_list|(
name|MemoryType
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memoryTypeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MemoryType
operator|.
name|HEAP
argument_list|,
name|memoryTypeMap
operator|.
name|get
argument_list|(
literal|"HEAP"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MemoryType
operator|.
name|NON_HEAP
argument_list|,
name|memoryTypeMap
operator|.
name|get
argument_list|(
literal|"NON_HEAP"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|memoryTypeMap
operator|.
name|put
argument_list|(
literal|"FOO"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected: map is immutable
block|}
name|assertEquals
argument_list|(
literal|"HEAP"
argument_list|,
name|Util
operator|.
name|enumVal
argument_list|(
name|MemoryType
operator|.
name|class
argument_list|,
literal|"HEAP"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Util
operator|.
name|enumVal
argument_list|(
name|MemoryType
operator|.
name|class
argument_list|,
literal|"heap"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Util
operator|.
name|enumVal
argument_list|(
name|MemoryType
operator|.
name|class
argument_list|,
literal|"nonexistent"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests SQL builders.    */
annotation|@
name|Test
specifier|public
name|void
name|testSqlBuilder
parameter_list|()
block|{
specifier|final
name|SqlBuilder
name|buf
init|=
operator|new
name|SqlBuilder
argument_list|(
name|SqlDialect
operator|.
name|CALCITE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"select "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"select "
argument_list|,
name|buf
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|identifier
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"select \"x\""
argument_list|,
name|buf
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|identifier
argument_list|(
literal|"y"
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"select \"x\", \"y\".\"a b\""
argument_list|,
name|buf
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SqlString
name|sqlString
init|=
name|buf
operator|.
name|toSqlString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SqlDialect
operator|.
name|CALCITE
argument_list|,
name|sqlString
operator|.
name|getDialect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|getSql
argument_list|()
argument_list|,
name|sqlString
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|.
name|getSql
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|getSqlAndClear
argument_list|()
argument_list|,
name|sqlString
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|literal
argument_list|(
literal|"can't get no satisfaction"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'can''t get no satisfaction'"
argument_list|,
name|buf
operator|.
name|getSqlAndClear
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|literal
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TIMESTAMP '1970-01-01 00:00:00'"
argument_list|,
name|buf
operator|.
name|getSqlAndClear
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hello world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buf
operator|.
name|indexOf
argument_list|(
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|buf
operator|.
name|indexOf
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|buf
operator|.
name|indexOf
argument_list|(
literal|"l"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link org.apache.calcite.util.CompositeList}.    */
annotation|@
name|Test
specifier|public
name|void
name|testCompositeList
parameter_list|()
block|{
comment|// Made up of zero lists
comment|//noinspection unchecked
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|CompositeList
operator|.
name|of
argument_list|(
operator|new
name|List
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|s
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|assertFalse
argument_list|(
name|list
operator|.
name|listIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listEmpty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listAbc
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listEmpty2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Made up of three lists, two of which are empty
name|list
operator|=
name|CompositeList
operator|.
name|of
argument_list|(
name|listEmpty
argument_list|,
name|listAbc
argument_list|,
name|listEmpty2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|s
init|=
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
specifier|final
name|String
name|s
init|=
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ok
block|}
comment|// Iterator
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Extend one of the backing lists, and list grows.
name|listEmpty2
operator|.
name|add
argument_list|(
literal|"zz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zz"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Syntactic sugar 'of' method
name|String
name|ss
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|CompositeList
operator|.
name|of
argument_list|(
name|list
argument_list|,
name|list
argument_list|)
control|)
block|{
name|ss
operator|+=
name|s
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"abczzabczz"
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Template}.    */
annotation|@
name|Test
specifier|public
name|void
name|testTemplate
parameter_list|()
block|{
comment|// Regular java message format.
name|assertEquals
argument_list|(
literal|"Hello, world, what a nice day."
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Hello, {0}, what a nice {1}."
argument_list|,
literal|"world"
argument_list|,
literal|"day"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Our extended message format. First, just strings.
specifier|final
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"person"
argument_list|,
literal|"world"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
literal|"day"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello, world, what a nice day."
argument_list|,
name|Template
operator|.
name|formatByName
argument_list|(
literal|"Hello, {person}, what a nice {time}."
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// String and an integer.
specifier|final
name|Template
name|template
init|=
name|Template
operator|.
name|of
argument_list|(
literal|"Happy {age,number,#.00}th birthday, {person}!"
argument_list|)
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"person"
argument_list|,
literal|"Ringo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"age"
argument_list|,
literal|64.5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Happy 64.50th birthday, Ringo!"
argument_list|,
name|template
operator|.
name|format
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// Missing parameters evaluate to null.
name|map
operator|.
name|remove
argument_list|(
literal|"person"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Happy 64.50th birthday, null!"
argument_list|,
name|template
operator|.
name|format
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// Specify parameter by Integer ordinal.
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"Ringo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"0"
argument_list|,
literal|64.5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Happy 64.50th birthday, Ringo!"
argument_list|,
name|template
operator|.
name|format
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// Too many parameters supplied.
name|map
operator|.
name|put
argument_list|(
literal|"lastName"
argument_list|,
literal|"Starr"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"homeTown"
argument_list|,
literal|"Liverpool"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Happy 64.50th birthday, Ringo!"
argument_list|,
name|template
operator|.
name|format
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get parameter names. In order of appearance.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"age"
argument_list|,
literal|"person"
argument_list|)
argument_list|,
name|template
operator|.
name|getParameterNames
argument_list|()
argument_list|)
expr_stmt|;
comment|// No parameters; doubled single quotes; quoted braces.
specifier|final
name|Template
name|template2
init|=
name|Template
operator|.
name|of
argument_list|(
literal|"Don''t expand 'this {brace}'."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|template2
operator|.
name|getParameterNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Don't expand this {brace}."
argument_list|,
name|template2
operator|.
name|format
argument_list|(
name|Collections
operator|.
expr|<
name|Object
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty template.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Template
operator|.
name|formatByName
argument_list|(
literal|""
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Util#parseLocale(String)} method.    */
annotation|@
name|Test
specifier|public
name|void
name|testParseLocale
parameter_list|()
block|{
name|Locale
index|[]
name|locales
init|=
block|{
name|Locale
operator|.
name|CANADA
block|,
name|Locale
operator|.
name|CANADA_FRENCH
block|,
name|Locale
operator|.
name|getDefault
argument_list|()
block|,
name|Locale
operator|.
name|US
block|,
name|Locale
operator|.
name|TRADITIONAL_CHINESE
block|,     }
decl_stmt|;
for|for
control|(
name|Locale
name|locale
range|:
name|locales
control|)
block|{
name|assertEquals
argument_list|(
name|locale
argument_list|,
name|Util
operator|.
name|parseLocale
argument_list|(
name|locale
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Example locale names in Locale.toString() javadoc.
name|String
index|[]
name|localeNames
init|=
block|{
literal|"en"
block|,
literal|"de_DE"
block|,
literal|"_GB"
block|,
literal|"en_US_WIN"
block|,
literal|"de__POSIX"
block|,
literal|"fr__MAC"
block|}
decl_stmt|;
for|for
control|(
name|String
name|localeName
range|:
name|localeNames
control|)
block|{
name|assertEquals
argument_list|(
name|localeName
argument_list|,
name|Util
operator|.
name|parseLocale
argument_list|(
name|localeName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpaces
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Spaces
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|Spaces
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|Spaces
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"         "
argument_list|,
name|Spaces
operator|.
name|of
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"     "
argument_list|,
name|Spaces
operator|.
name|of
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|Spaces
operator|.
name|of
argument_list|(
literal|1000
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpaceString
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Spaces
operator|.
name|sequence
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|sequence
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|sequence
argument_list|(
literal|9
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"         "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|sequence
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"     "
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"xx"
argument_list|)
operator|.
name|append
argument_list|(
name|Spaces
operator|.
name|MAX
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|102
argument_list|)
argument_list|)
expr_stmt|;
comment|// this would blow memory if the string were materialized... check that it
comment|// is not
name|assertThat
argument_list|(
name|Spaces
operator|.
name|sequence
argument_list|(
literal|1000000000
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1000000000
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Spaces
operator|.
name|append
argument_list|(
name|sw
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"    "
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Spaces
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"    "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|padLeft
argument_list|(
literal|"xy"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"   xy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|padLeft
argument_list|(
literal|"abcde"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abcde"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|padLeft
argument_list|(
literal|"abcdef"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|padRight
argument_list|(
literal|"xy"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"xy   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|padRight
argument_list|(
literal|"abcde"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abcde"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Spaces
operator|.
name|padRight
argument_list|(
literal|"abcdef"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Pair#zip(java.util.List, java.util.List)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testPairZip
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"paul"
argument_list|,
literal|"george"
argument_list|,
literal|"john"
argument_list|,
literal|"ringo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|integers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1942
argument_list|,
literal|1943
argument_list|,
literal|1940
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|zip
init|=
name|Pair
operator|.
name|zip
argument_list|(
name|strings
argument_list|,
name|integers
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|zip
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"paul:1942"
argument_list|,
name|zip
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|left
operator|+
literal|":"
operator|+
name|zip
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|right
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"john"
argument_list|,
name|zip
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|left
argument_list|)
expr_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|pair
range|:
name|zip
control|)
block|{
name|x
operator|+=
name|pair
operator|.
name|right
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5825
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Pair#adjacents(Iterable)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testPairAdjacents
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|adjacents
argument_list|(
name|strings
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pair
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[<a, b>,<b, c>]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty source yields empty result
name|assertThat
argument_list|(
name|Pair
operator|.
name|adjacents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// source with 1 element yields empty result
name|assertThat
argument_list|(
name|Pair
operator|.
name|adjacents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// source with 100 elements yields result with 99 elements;
comment|// null elements are ok
name|assertThat
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|Pair
operator|.
name|adjacents
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|100
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Pair#firstAnd(Iterable)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testPairFirstAnd
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|Pair
operator|.
name|firstAnd
argument_list|(
name|strings
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pair
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[<a, b>,<a, c>]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty source yields empty result
name|assertThat
argument_list|(
name|Pair
operator|.
name|firstAnd
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// source with 1 element yields empty result
name|assertThat
argument_list|(
name|Pair
operator|.
name|firstAnd
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// source with 100 elements yields result with 99 elements;
comment|// null elements are ok
name|assertThat
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|Pair
operator|.
name|firstAnd
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
literal|100
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Util#quotientList(java.util.List, int, int)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testQuotientList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|beatles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"john"
argument_list|,
literal|"paul"
argument_list|,
literal|"george"
argument_list|,
literal|"ringo"
argument_list|)
decl_stmt|;
specifier|final
name|List
name|list0
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"john"
argument_list|,
name|list0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ringo"
argument_list|,
name|list0
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
name|list1
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"paul"
argument_list|,
name|list1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
name|list2
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"george"
argument_list|,
name|list2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|List
name|listBad
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected error, got "
operator|+
name|listBad
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
specifier|final
name|List
name|listBad
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected error, got "
operator|+
name|listBad
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
specifier|final
name|List
name|listBad
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected error, got "
operator|+
name|listBad
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
comment|// empty
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list3
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|empty
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// shorter than n
specifier|final
name|List
name|list4
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list4
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"john"
argument_list|,
name|list4
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
name|list5
init|=
name|Util
operator|.
name|quotientList
argument_list|(
name|beatles
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list5
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImmutableIntList
parameter_list|()
block|{
specifier|final
name|ImmutableIntList
name|list
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|BitSets
operator|.
name|of
argument_list|(
name|list
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BitSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableIntList
name|list2
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 3, 5]"
argument_list|,
name|list2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list2
operator|.
name|hashCode
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|integers
init|=
name|list2
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|integers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|integers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
name|integers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|//noinspection EqualsWithItself
name|assertThat
argument_list|(
name|list
operator|.
name|equals
argument_list|(
name|list
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|equals
argument_list|(
name|list2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list2
operator|.
name|equals
argument_list|(
name|list
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//noinspection EqualsWithItself
name|assertThat
argument_list|(
name|list2
operator|.
name|equals
argument_list|(
name|list2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link IntegerIntervalSet}.    */
annotation|@
name|Test
specifier|public
name|void
name|testIntegerIntervalSet
parameter_list|()
block|{
name|checkIntegerIntervalSet
argument_list|(
literal|"1,5"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// empty
name|checkIntegerIntervalSet
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// empty due to exclusions
name|checkIntegerIntervalSet
argument_list|(
literal|"2,4,-1-5"
argument_list|)
expr_stmt|;
comment|// open range
name|checkIntegerIntervalSet
argument_list|(
literal|"1-6,-3-5,4,9"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// repeats
name|checkIntegerIntervalSet
argument_list|(
literal|"1,3,1,2-4,-2,-4"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|checkIntegerIntervalSet
parameter_list|(
name|String
name|s
parameter_list|,
name|int
modifier|...
name|ints
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|IntegerIntervalSet
operator|.
name|of
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|set
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|integer
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|IntList
operator|.
name|asList
argument_list|(
name|ints
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|/**    * Tests that flat lists behave like regular lists in terms of equals    * and hashCode.    */
annotation|@
name|Test
specifier|public
name|void
name|testFlatList
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|emp
init|=
name|FlatLists
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|emp0
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|emp
argument_list|,
name|emp0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emp
operator|.
name|hashCode
argument_list|()
argument_list|,
name|emp0
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ab
init|=
name|FlatLists
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ab0
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ab
argument_list|,
name|ab0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ab
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ab0
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|abc
init|=
name|FlatLists
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|abc0
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|abc
argument_list|,
name|abc0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|abc
operator|.
name|hashCode
argument_list|()
argument_list|,
name|abc0
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|abc1
init|=
name|FlatLists
operator|.
name|of
argument_list|(
operator|(
name|Object
operator|)
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|abc1
argument_list|,
name|abc0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|abc
argument_list|,
name|abc0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|abc1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|abc0
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|an
init|=
name|FlatLists
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|an0
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|an
argument_list|,
name|an0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|an
operator|.
name|hashCode
argument_list|()
argument_list|,
name|an0
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|anb
init|=
name|FlatLists
operator|.
name|of
argument_list|(
literal|"A"
argument_list|,
literal|null
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|anb0
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A"
argument_list|,
literal|null
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|anb
argument_list|,
name|anb0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|anb
operator|.
name|hashCode
argument_list|()
argument_list|,
name|anb0
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Comparisons
name|assertThat
argument_list|(
name|emp
argument_list|,
name|instanceOf
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ab
argument_list|,
name|instanceOf
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Comparable
argument_list|<
name|List
argument_list|>
name|cemp
init|=
operator|(
name|Comparable
operator|)
name|emp
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Comparable
argument_list|<
name|List
argument_list|>
name|cab
init|=
operator|(
name|Comparable
operator|)
name|ab
decl_stmt|;
name|assertThat
argument_list|(
name|cemp
operator|.
name|compareTo
argument_list|(
name|emp
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cemp
operator|.
name|compareTo
argument_list|(
name|ab
argument_list|)
operator|<
literal|0
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cab
operator|.
name|compareTo
argument_list|(
name|ab
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cab
operator|.
name|compareTo
argument_list|(
name|emp
argument_list|)
operator|>
literal|0
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cab
operator|.
name|compareTo
argument_list|(
name|anb
argument_list|)
operator|>
literal|0
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link AvaticaUtils#toCamelCase(String)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testToCamelCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"myJdbcDriver"
argument_list|,
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
literal|"MY_JDBC_DRIVER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myJdbcDriver"
argument_list|,
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
literal|"MY_JDBC__DRIVER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myJdbcDriver"
argument_list|,
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
literal|"my_jdbc_driver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abCdefGHij"
argument_list|,
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
literal|"ab_cdEf_g_Hij"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JdbcDriver"
argument_list|,
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
literal|"_JDBC_DRIVER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AvaticaUtils
operator|.
name|toCamelCase
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link AvaticaUtils#camelToUpper(String)}. */
annotation|@
name|Test
specifier|public
name|void
name|testCamelToUpper
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"MY_JDBC_DRIVER"
argument_list|,
name|AvaticaUtils
operator|.
name|camelToUpper
argument_list|(
literal|"myJdbcDriver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MY_J_D_B_C_DRIVER"
argument_list|,
name|AvaticaUtils
operator|.
name|camelToUpper
argument_list|(
literal|"myJDBCDriver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AB_CDEF_G_HIJ"
argument_list|,
name|AvaticaUtils
operator|.
name|camelToUpper
argument_list|(
literal|"abCdefGHij"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_JDBC_DRIVER"
argument_list|,
name|AvaticaUtils
operator|.
name|camelToUpper
argument_list|(
literal|"JdbcDriver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|AvaticaUtils
operator|.
name|camelToUpper
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Util#isDistinct(java.util.List)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testDistinct
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Util
operator|.
name|isDistinct
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link org.apache.calcite.util.JsonBuilder}.    */
annotation|@
name|Test
specifier|public
name|void
name|testJsonBuilder
parameter_list|()
block|{
name|JsonBuilder
name|builder
init|=
operator|new
name|JsonBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|builder
operator|.
name|map
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"baz"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"can't"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|builder
operator|.
name|list
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"list"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|builder
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|builder
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"nullValue"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  \"foo\": 1,\n"
operator|+
literal|"  \"baz\": true,\n"
operator|+
literal|"  \"bar\": \"can't\",\n"
operator|+
literal|"  \"list\": [\n"
operator|+
literal|"    2,\n"
operator|+
literal|"    3,\n"
operator|+
literal|"    [],\n"
operator|+
literal|"    {},\n"
operator|+
literal|"    null\n"
operator|+
literal|"  ],\n"
operator|+
literal|"  \"nullValue\": null\n"
operator|+
literal|"}"
argument_list|,
name|builder
operator|.
name|toJsonString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompositeMap
parameter_list|()
block|{
name|String
index|[]
name|beatles
init|=
block|{
literal|"john"
block|,
literal|"paul"
block|,
literal|"george"
block|,
literal|"ringo"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|beatleMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|beatle
range|:
name|beatles
control|)
block|{
name|beatleMap
operator|.
name|put
argument_list|(
name|beatle
argument_list|,
name|beatle
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompositeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|CompositeMap
operator|.
name|of
argument_list|(
name|beatleMap
argument_list|)
decl_stmt|;
name|checkCompositeMap
argument_list|(
name|beatles
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|CompositeMap
operator|.
name|of
argument_list|(
name|beatleMap
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|checkCompositeMap
argument_list|(
name|beatles
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|CompositeMap
operator|.
name|of
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|beatleMap
argument_list|)
expr_stmt|;
name|checkCompositeMap
argument_list|(
name|beatles
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|CompositeMap
operator|.
name|of
argument_list|(
name|beatleMap
argument_list|,
name|beatleMap
argument_list|)
expr_stmt|;
name|checkCompositeMap
argument_list|(
name|beatles
argument_list|,
name|map
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|founderMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|founderMap
operator|.
name|put
argument_list|(
literal|"ben"
argument_list|,
literal|1706
argument_list|)
expr_stmt|;
name|founderMap
operator|.
name|put
argument_list|(
literal|"george"
argument_list|,
literal|1732
argument_list|)
expr_stmt|;
name|founderMap
operator|.
name|put
argument_list|(
literal|"thomas"
argument_list|,
literal|1743
argument_list|)
expr_stmt|;
name|map
operator|=
name|CompositeMap
operator|.
name|of
argument_list|(
name|beatleMap
argument_list|,
name|founderMap
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"john"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"george"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"ben"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"andrew"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"ben"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1706
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"george"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// use value from first map
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
literal|1743
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
literal|1732
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// masked
name|assertThat
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
literal|1999
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCompositeMap
parameter_list|(
name|String
index|[]
name|beatles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|4
argument_list|,
name|equalTo
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|false
argument_list|,
name|equalTo
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|beatles
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link Util#commaList(java.util.List)}. */
annotation|@
name|Test
specifier|public
name|void
name|testCommaList
parameter_list|()
block|{
try|try
block|{
name|String
name|s
init|=
name|Util
operator|.
name|commaList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected NPE, got "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|assertThat
argument_list|(
name|Util
operator|.
name|commaList
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Object
operator|>
name|of
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|commaList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|commaList
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2, 3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|commaList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2, null, 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Util#firstDuplicate(java.util.List)}. */
annotation|@
name|Test
specifier|public
name|void
name|testFirstDuplicate
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// list longer than 15, the threshold where we move to set-based algorithm
name|assertThat
argument_list|(
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|,
literal|3
argument_list|,
literal|19
argument_list|,
literal|3
argument_list|,
literal|21
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Benchmark for {@link Util#isDistinct}. Has determined that map-based    * implementation is better than nested loops implementation if list is larger    * than about 15. */
annotation|@
name|Test
specifier|public
name|void
name|testIsDistinctBenchmark
parameter_list|()
block|{
comment|// Run a much quicker form of the test during regular testing.
specifier|final
name|int
name|limit
init|=
name|Benchmark
operator|.
name|enabled
argument_list|()
condition|?
literal|1000000
else|:
literal|10
decl_stmt|;
specifier|final
name|int
name|zMax
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|size
init|=
name|i
decl_stmt|;
operator|new
name|Benchmark
argument_list|(
literal|"isDistinct "
operator|+
name|i
operator|+
literal|" (set)"
argument_list|,
operator|new
name|Function1
argument_list|<
name|Benchmark
operator|.
name|Statistician
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|Benchmark
operator|.
name|Statistician
name|statistician
parameter_list|)
block|{
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|lists
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|zMax
condition|;
name|z
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
name|k
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|size
operator|*
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|long
name|nanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|limit
condition|;
name|j
operator|++
control|)
block|{
name|n
operator|+=
name|Util
operator|.
name|firstDuplicate
argument_list|(
name|lists
operator|.
name|get
argument_list|(
name|j
operator|%
name|zMax
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|statistician
operator|.
name|record
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
name|Util
operator|.
name|discard
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|5
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Unit test for {@link Util#hashCode(double)}. */
annotation|@
name|Test
specifier|public
name|void
name|testHash
parameter_list|()
block|{
name|checkHash
argument_list|(
literal|0d
argument_list|)
expr_stmt|;
name|checkHash
argument_list|(
literal|1d
argument_list|)
expr_stmt|;
name|checkHash
argument_list|(
operator|-
literal|2.5d
argument_list|)
expr_stmt|;
name|checkHash
argument_list|(
literal|10d
operator|/
literal|3d
argument_list|)
expr_stmt|;
name|checkHash
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|checkHash
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|checkHash
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|checkHash
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkHash
parameter_list|(
name|double
name|v
parameter_list|)
block|{
name|assertThat
argument_list|(
operator|new
name|Double
argument_list|(
name|v
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Util
operator|.
name|hashCode
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Util#startsWith}. */
annotation|@
name|Test
specifier|public
name|void
name|testStartsWithList
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Util
operator|.
name|startsWith
argument_list|(
name|list
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|list
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|startsWith
argument_list|(
name|list
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|list
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|startsWith
argument_list|(
name|list
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|list
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|startsWith
argument_list|(
name|list
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|list
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|startsWith
argument_list|(
name|list
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|,
name|list
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|startsWith
argument_list|(
name|list
argument_list|()
argument_list|,
name|list
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|startsWith
argument_list|(
name|list
argument_list|()
argument_list|,
name|list
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|(
name|String
modifier|...
name|xs
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|xs
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResources
parameter_list|()
block|{
name|Resources
operator|.
name|validate
argument_list|(
name|Static
operator|.
name|RESOURCE
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that sorted sets behave the way we expect. */
annotation|@
name|Test
specifier|public
name|void
name|testSortedSet
parameter_list|()
block|{
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|treeSet
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|treeSet
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"fOo"
argument_list|,
literal|"FOO"
argument_list|,
literal|"pug"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|treeSet
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|treeSet2
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|treeSet2
operator|.
name|addAll
argument_list|(
name|treeSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|treeSet2
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
name|String
name|u1
init|=
name|o1
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|String
name|u2
init|=
name|o2
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|u1
operator|.
name|compareTo
argument_list|(
name|u2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|treeSet3
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|treeSet3
operator|.
name|addAll
argument_list|(
name|treeSet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|treeSet3
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|treeSet3
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|treeSet3
argument_list|,
literal|"FOO"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|treeSet3
argument_list|,
literal|"FoO"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|treeSet3
argument_list|,
literal|"BAR"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|treeSet4
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|comparator
argument_list|,
name|treeSet
argument_list|)
decl_stmt|;
specifier|final
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|navigableSet4
init|=
name|Compatible
operator|.
name|INSTANCE
operator|.
name|navigableSet
argument_list|(
name|treeSet4
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|treeSet4
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|navigableSet4
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|navigableSet4
argument_list|,
name|equalTo
argument_list|(
operator|(
name|SortedSet
argument_list|<
name|String
argument_list|>
operator|)
name|treeSet4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|navigableSet4
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|navigableSet4
argument_list|,
literal|"FOO"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|navigableSet4
argument_list|,
literal|"FoO"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkNav
argument_list|(
name|navigableSet4
argument_list|,
literal|"BAR"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|checkNav
parameter_list|(
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|set
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|set
operator|.
name|subSet
argument_list|(
name|s
operator|.
name|toUpperCase
argument_list|()
argument_list|,
literal|true
argument_list|,
name|s
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Test for {@link org.apache.calcite.util.ImmutableNullableList}. */
annotation|@
name|Test
specifier|public
name|void
name|testImmutableNullableList
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|arrayList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|arrayList
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|arrayList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
argument_list|,
name|equalTo
argument_list|(
name|arrayList
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|arrayList
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|arrayList
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|z
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|z
operator|+=
name|s
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|z
argument_list|,
name|equalTo
argument_list|(
literal|"anullc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// changes to array list do not affect copy
name|arrayList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|arrayList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|b
init|=
name|list
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|String
name|b
init|=
name|list
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ok
block|}
comment|// empty list uses ImmutableList
name|assertThat
argument_list|(
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|ImmutableList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// list with no nulls uses ImmutableList
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|abcList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|abcList
argument_list|)
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|ImmutableList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// list with no nulls uses ImmutableList
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|abc
init|=
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|abcList
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|abc
argument_list|)
argument_list|,
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|ImmutableList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|abc
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|abcList
argument_list|)
argument_list|)
expr_stmt|;
comment|// list with no nulls uses ImmutableList
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ab0cList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|ab0c
init|=
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|ab0cList
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|ab0c
argument_list|)
argument_list|,
name|not
argument_list|(
name|isA
argument_list|(
operator|(
name|Class
operator|)
name|ImmutableList
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableNullableList
operator|.
name|copyOf
argument_list|(
name|ab0c
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ab0cList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test for {@link org.apache.calcite.util.UnmodifiableArrayList}. */
annotation|@
name|Test
specifier|public
name|void
name|testUnmodifiableArrayList
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|strings
init|=
block|{
literal|"a"
block|,
literal|null
block|,
literal|"c"
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|arrayList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|strings
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|UnmodifiableArrayList
operator|.
name|of
argument_list|(
name|strings
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|arrayList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
argument_list|,
name|equalTo
argument_list|(
name|arrayList
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|arrayList
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|arrayList
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|z
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|z
operator|+=
name|s
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|z
argument_list|,
name|equalTo
argument_list|(
literal|"anullc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// changes to array list do affect copy
name|arrayList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|arrayList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|b
init|=
name|list
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|String
name|b
init|=
name|list
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|"z"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected error, got "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
comment|/** Test for {@link org.apache.calcite.util.ImmutableNullableList.Builder}. */
annotation|@
name|Test
specifier|public
name|void
name|testImmutableNullableListBuilder
parameter_list|()
block|{
specifier|final
name|ImmutableNullableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableNullableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|arrayList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|arrayList
operator|.
name|equals
argument_list|(
name|list
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHuman
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|19D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"19"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|198D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"198"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1000D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.00K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1002D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.00K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1009D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.01K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1234D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.23K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1987D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.99K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1999D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2.00K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|86837.2D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"86.8K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|868372.8D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"868K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1009000D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.01M"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1999999D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2.00M"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1009000000D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.01G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|1999999000D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2.00G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
operator|-
literal|1D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
operator|-
literal|19D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-19"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
operator|-
literal|198D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-198"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
operator|-
literal|1999999000D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-2.00G"
argument_list|)
argument_list|)
expr_stmt|;
comment|// not ideal - should use m (milli) and u (micro)
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.18D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"0.18"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.018D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"0.018"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.0018D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"0.0018"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.00018D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.8E-4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.000018D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.8E-5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.0000018D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.8E-6"
argument_list|)
argument_list|)
expr_stmt|;
comment|// bad - should round to 3 digits
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.181111D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"0.181111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.0181111D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"0.0181111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.00181111D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"0.00181111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.000181111D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.81111E-4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.0000181111D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.81111E-5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|human
argument_list|(
literal|0.00000181111D
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1.81111E-6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsIndexView
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"abCde"
argument_list|,
literal|"X"
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Util
operator|.
name|asIndexMap
argument_list|(
name|values
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"X"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"y"
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"ABCDE"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abCde"
argument_list|)
argument_list|)
expr_stmt|;
comment|// If you change the values collection, the map changes.
name|values
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"X"
argument_list|)
argument_list|,
name|is
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelBuilderExample
parameter_list|()
block|{
operator|new
name|RelBuilderExample
argument_list|(
literal|false
argument_list|)
operator|.
name|runAllExamples
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrdReverse
parameter_list|()
block|{
name|checkOrdReverse
argument_list|(
name|Ord
operator|.
name|reverse
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkOrdReverse
argument_list|(
name|Ord
operator|.
name|reverse
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Ord
operator|.
name|reverse
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Ord
operator|.
name|reverse
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkOrdReverse
parameter_list|(
name|Iterable
argument_list|<
name|Ord
argument_list|<
name|String
argument_list|>
argument_list|>
name|reverse1
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Ord
argument_list|<
name|String
argument_list|>
argument_list|>
name|reverse
init|=
name|reverse1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|reverse
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reverse
operator|.
name|next
argument_list|()
operator|.
name|i
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reverse
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reverse
operator|.
name|next
argument_list|()
operator|.
name|e
argument_list|,
name|is
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reverse
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reverse
operator|.
name|next
argument_list|()
operator|.
name|e
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reverse
operator|.
name|hasNext
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link org.apache.calcite.util.ReflectUtil#getParameterName}. */
annotation|@
name|Test
specifier|public
name|void
name|testParameterName
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
specifier|final
name|Method
name|method
init|=
name|UtilTest
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"foo"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ReflectUtil
operator|.
name|getParameterName
argument_list|(
name|method
argument_list|,
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"arg0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ReflectUtil
operator|.
name|getParameterName
argument_list|(
name|method
argument_list|,
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"j"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Dummy method for {@link #testParameterName()} to inspect. */
specifier|public
specifier|static
name|void
name|foo
parameter_list|(
name|int
name|i
parameter_list|,
annotation|@
name|Parameter
argument_list|(
name|name
operator|=
literal|"j"
argument_list|)
name|int
name|j
parameter_list|)
block|{
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListToString
parameter_list|()
block|{
name|checkListToString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|()
expr_stmt|;
name|checkListToString
argument_list|(
literal|"ab"
argument_list|,
literal|"c"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|"ab"
argument_list|,
literal|"c"
argument_list|,
literal|""
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|"ab"
argument_list|,
literal|"c."
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|"ab"
argument_list|,
literal|"c.d"
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|"ab"
argument_list|,
literal|".d"
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|".ab"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|".a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|checkListToString
argument_list|(
literal|"a."
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkListToString
parameter_list|(
name|String
modifier|...
name|strings
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|strings
argument_list|)
decl_stmt|;
specifier|final
name|String
name|asString
init|=
name|Util
operator|.
name|listToString
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Util
operator|.
name|stringToList
argument_list|(
name|asString
argument_list|)
argument_list|,
name|is
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link org.apache.calcite.util.TryThreadLocal}.    *    *<p>TryThreadLocal was introduced to fix    *<a href="https://issues.apache.org/jira/browse/CALCITE-915">[CALCITE-915]    * Tests do not unset ThreadLocal values on exit</a>. */
annotation|@
name|Test
specifier|public
name|void
name|testTryThreadLocal
parameter_list|()
block|{
specifier|final
name|TryThreadLocal
argument_list|<
name|String
argument_list|>
name|local1
init|=
name|TryThreadLocal
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|local1
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|TryThreadLocal
operator|.
name|Memo
name|memo1
init|=
name|local1
operator|.
name|push
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|local1
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|local1
operator|.
name|set
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|local1
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|memo1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|local1
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TryThreadLocal
argument_list|<
name|String
argument_list|>
name|local2
init|=
name|TryThreadLocal
operator|.
name|of
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|TryThreadLocal
operator|.
name|Memo
name|memo2
init|=
name|local2
operator|.
name|push
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|local2
operator|.
name|set
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|TryThreadLocal
operator|.
name|Memo
name|memo2B
init|=
name|local2
operator|.
name|push
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|memo2B
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|memo2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|local2
operator|.
name|set
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
try|try
init|(
name|TryThreadLocal
operator|.
name|Memo
name|ignore
init|=
name|local2
operator|.
name|push
argument_list|(
literal|"y"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|local2
operator|.
name|set
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|local2
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End UtilTest.java
end_comment

end_unit

