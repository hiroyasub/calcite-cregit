begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|format
operator|.
name|FormatElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|format
operator|.
name|FormatModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|format
operator|.
name|FormatModels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link FormatModel}.  */
end_comment

begin_class
specifier|public
class|class
name|FormatModelTest
block|{
specifier|private
name|void
name|assertThatFormatElementParse
parameter_list|(
name|String
name|formatString
parameter_list|,
name|Matcher
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|matcher
parameter_list|)
block|{
name|List
argument_list|<
name|FormatElement
argument_list|>
name|elements
init|=
name|FormatModels
operator|.
name|BIG_QUERY
operator|.
name|parse
argument_list|(
name|formatString
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stringResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FormatElement
name|element
range|:
name|elements
control|)
block|{
name|element
operator|.
name|flatten
argument_list|(
name|i
lambda|->
name|stringResults
operator|.
name|add
argument_list|(
name|i
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|stringResults
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSingleElement
parameter_list|()
block|{
name|assertThatFormatElementParse
argument_list|(
literal|"%j"
argument_list|,
name|is
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testMultipleElements
parameter_list|()
block|{
name|assertThatFormatElementParse
argument_list|(
literal|"%b-%d-%Y"
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"MON"
argument_list|,
literal|"-"
argument_list|,
literal|"DD"
argument_list|,
literal|"-"
argument_list|,
literal|"YYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testArbitraryText
parameter_list|()
block|{
name|assertThatFormatElementParse
argument_list|(
literal|"%jtext%b"
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"DDD"
argument_list|,
literal|"text"
argument_list|,
literal|"MON"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testAliasText
parameter_list|()
block|{
name|assertThatFormatElementParse
argument_list|(
literal|"%R"
argument_list|,
name|is
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"HH24"
argument_list|,
literal|":"
argument_list|,
literal|"MI"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

