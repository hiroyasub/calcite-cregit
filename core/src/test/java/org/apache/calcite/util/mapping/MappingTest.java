begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit test for mappings.  *  * @see Mapping  * @see Mappings  */
end_comment

begin_class
class|class
name|MappingTest
block|{
annotation|@
name|Test
name|void
name|testMappings
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_SURJECTION
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_SURJECTION
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_SURJECTION
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mapping
name|identity
init|=
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getTargetCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getSourceCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getTarget
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getTarget
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getTarget
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getSource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getSource
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getSource
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getTargetOpt
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|identity
operator|.
name|getSourceOpt
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getSourceOpt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getSource
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getTargetOpt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getTarget
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getSourceOpt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getSource
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getTargetOpt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|identity
operator|.
name|getTarget
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Mapping
name|infiniteIdentity
init|=
name|Mappings
operator|.
name|createIdentity
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|infiniteIdentity
operator|.
name|getTarget
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|infiniteIdentity
operator|.
name|getSource
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|infiniteIdentity
operator|.
name|getTargetOpt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|infiniteIdentity
operator|.
name|getSourceOpt
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infiniteIdentity
operator|.
name|getTarget
argument_list|(
literal|100
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infiniteIdentity
operator|.
name|getSource
argument_list|(
literal|100
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Mappings#createShiftMapping}.    */
annotation|@
name|Test
name|void
name|testMappingsCreateShiftMapping
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[size=5, sourceCount=20, targetCount=13, elements=[6:3, 7:4, 15:10, 16:11, 17:12]]"
argument_list|,
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
literal|20
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// no triples makes for a mapping with 0 targets, 20 sources, but still
comment|// valid
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=0, sourceCount=20, targetCount=0, elements=[]]"
argument_list|,
name|mapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|mapping
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Mappings#append}.    */
annotation|@
name|Test
name|void
name|testMappingsAppend
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Mappings
operator|.
name|isIdentity
argument_list|(
name|Mappings
operator|.
name|append
argument_list|(
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mapping
name|mapping0
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_SURJECTION
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|mapping0
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mapping0
operator|.
name|set
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mapping0
operator|.
name|set
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[size=5, sourceCount=7, targetCount=5, elements=[0:2, 3:1, 4:0, 5:3, 6:4]]"
argument_list|,
name|Mappings
operator|.
name|append
argument_list|(
name|mapping0
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unit test for {@link Mappings#offsetSource}.    */
annotation|@
name|Test
name|void
name|testMappingsOffsetSource
parameter_list|()
block|{
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping
init|=
name|Mappings
operator|.
name|target
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=2, sourceCount=2, targetCount=8, elements=[0:5, 1:7]]"
argument_list|,
name|mapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapping
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping1
init|=
name|Mappings
operator|.
name|offsetSource
argument_list|(
name|mapping
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=2, sourceCount=5, targetCount=8, elements=[3:5, 4:7]]"
argument_list|,
name|mapping1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|mapping1
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mapping1
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// mapping that extends RHS
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping2
init|=
name|Mappings
operator|.
name|offsetSource
argument_list|(
name|mapping
argument_list|,
literal|3
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[size=2, sourceCount=15, targetCount=8, elements=[3:5, 4:7]]"
argument_list|,
name|mapping2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|mapping2
operator|.
name|getSourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mapping2
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Mappings
operator|.
name|offsetSource
argument_list|(
name|mapping
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Mappings#source(List, int)}    * and its converse, {@link Mappings#asList(Mappings.TargetMapping)}. */
annotation|@
name|Test
name|void
name|testSource
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|targets
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|source
argument_list|(
name|targets
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getSourceCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTargetOpt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTargetOpt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTarget
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTargetOpt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTarget
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|integers
init|=
name|Mappings
operator|.
name|asList
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Mappings.asList"
operator|+
name|mapping
operator|+
literal|")"
argument_list|,
name|integers
argument_list|,
name|equalTo
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Mappings.asListNonNull("
operator|+
name|mapping
operator|+
literal|")"
argument_list|,
name|Mappings
operator|.
name|asListNonNull
argument_list|(
name|mapping
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Mapping
name|inverse
init|=
name|mapping
operator|.
name|inverse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|inverse
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[size=5, sourceCount=10, targetCount=5, elements=[1:1, 3:0, 4:2, 5:3, 8:4]]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Mappings#target(List, int)}. */
annotation|@
name|Test
name|void
name|testTarget
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|sources
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|target
argument_list|(
name|sources
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|Mappings
operator|.
name|NoElementException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTargetOpt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTarget
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTargetOpt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTarget
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getSourceCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|integers
init|=
name|Mappings
operator|.
name|asList
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|integers
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note: exception is thrown on list.get, so it is needed to trigger the exception
name|IllegalArgumentException
name|exception
init|=
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Mappings
operator|.
name|asListNonNull
argument_list|(
name|mapping
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Element 0 is not found in mapping [size=5, sourceCount=10, targetCount=5"
operator|+
literal|", elements=[1:1, 3:0, 4:2, 5:3, 8:4]]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for {@link Mappings#bijection(List)}. */
annotation|@
name|Test
name|void
name|testBijection
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|targets
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|bijection
argument_list|(
name|targets
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTarget
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTargetOpt
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getSource
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getSourceOpt
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getSourceOpt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getSource
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTargetOpt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTarget
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getSourceOpt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getSource
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTargetOpt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapping
operator|.
name|getTarget
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|getSourceCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[3, 0, 1, 2]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|inverse
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[1, 2, 3, 0]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty is OK
specifier|final
name|Mapping
name|empty
init|=
name|Mappings
operator|.
name|bijection
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|empty
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|empty
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|empty
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Mappings
operator|.
name|bijection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|"target out of range"
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Mappings
operator|.
name|bijection
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|"more than one permutation element maps to position 1"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

