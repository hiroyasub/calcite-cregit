begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Source}.  */
end_comment

begin_class
specifier|public
class|class
name|SourceTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
block|{
specifier|final
name|Source
name|foo
init|=
name|Sources
operator|.
name|file
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|bar
init|=
name|Sources
operator|.
name|file
argument_list|(
literal|null
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|fooBar
init|=
name|foo
operator|.
name|append
argument_list|(
name|bar
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fooBar
operator|.
name|file
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelative
parameter_list|()
block|{
specifier|final
name|Source
name|fooBar
init|=
name|Sources
operator|.
name|file
argument_list|(
literal|null
argument_list|,
literal|"/foo/bar"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|foo
init|=
name|Sources
operator|.
name|file
argument_list|(
literal|null
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|baz
init|=
name|Sources
operator|.
name|file
argument_list|(
literal|null
argument_list|,
literal|"/baz"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|bar
init|=
name|fooBar
operator|.
name|relative
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bar
operator|.
name|file
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooBar
operator|.
name|relative
argument_list|(
name|baz
argument_list|)
argument_list|,
name|is
argument_list|(
name|fooBar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End SourceTest.java
end_comment

end_unit

