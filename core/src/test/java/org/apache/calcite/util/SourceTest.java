begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CharSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Sources
operator|.
name|file
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Sources
operator|.
name|url
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Source}.  */
end_comment

begin_class
class|class
name|SourceTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_PREFIX
init|=
name|getRootPrefix
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|getRootPrefix
parameter_list|()
block|{
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"c:/"
block|}
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|s
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported operation system detected. Both / and c:/ produce relative paths"
argument_list|)
throw|;
block|}
comment|/**    * Read lines from {@link CharSource}    */
annotation|@
name|Test
name|void
name|charSource
parameter_list|()
throws|throws
name|IOException
block|{
name|Source
name|source
init|=
name|Sources
operator|.
name|fromCharSource
argument_list|(
name|CharSource
operator|.
name|wrap
argument_list|(
literal|"a\nb"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Reader
name|r
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|source
operator|.
name|reader
argument_list|()
argument_list|,
operator|new
name|InputStreamReader
argument_list|(
name|source
operator|.
name|openStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
name|r
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
name|void
name|testAppendWithSpaces
parameter_list|()
block|{
name|String
name|fooRelative
init|=
literal|"fo o+"
decl_stmt|;
name|String
name|fooAbsolute
init|=
name|ROOT_PREFIX
operator|+
literal|"fo o+"
decl_stmt|;
name|String
name|barRelative
init|=
literal|"b ar+"
decl_stmt|;
name|String
name|barAbsolute
init|=
name|ROOT_PREFIX
operator|+
literal|"b ar+"
decl_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooRelative
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barRelative
argument_list|)
argument_list|,
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooRelative
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooAbsolute
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barRelative
argument_list|)
argument_list|,
name|ROOT_PREFIX
operator|+
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooAbsolute
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
name|String
name|urlFooRelative
init|=
literal|"file:fo%20o+"
decl_stmt|;
name|String
name|urlFooAbsolute
init|=
literal|"file:"
operator|+
name|ROOT_PREFIX
operator|+
literal|"fo%20o+"
decl_stmt|;
name|String
name|urlBarRelative
init|=
literal|"file:b%20ar+"
decl_stmt|;
name|String
name|urlBarAbsolute
init|=
literal|"file:"
operator|+
name|ROOT_PREFIX
operator|+
literal|"b%20ar+"
decl_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooRelative
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarRelative
argument_list|)
argument_list|,
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooRelative
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooAbsolute
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarRelative
argument_list|)
argument_list|,
name|ROOT_PREFIX
operator|+
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooAbsolute
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooRelative
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarRelative
argument_list|)
argument_list|,
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooRelative
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooAbsolute
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarRelative
argument_list|)
argument_list|,
name|ROOT_PREFIX
operator|+
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|file
argument_list|(
literal|null
argument_list|,
name|fooAbsolute
argument_list|)
argument_list|,
name|url
argument_list|(
name|urlBarAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooRelative
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barRelative
argument_list|)
argument_list|,
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooRelative
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooAbsolute
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barRelative
argument_list|)
argument_list|,
name|ROOT_PREFIX
operator|+
literal|"fo o+/b ar+"
argument_list|)
expr_stmt|;
name|assertAppend
argument_list|(
name|url
argument_list|(
name|urlFooAbsolute
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
name|barAbsolute
argument_list|)
argument_list|,
name|barAbsolute
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testAppendHttp
parameter_list|()
block|{
comment|// I've truly no idea what append of two URLs should be, yet it does something
name|assertAppendUrl
argument_list|(
name|url
argument_list|(
literal|"http://fo%20o+/ba%20r+"
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
literal|"no idea what I am doing+"
argument_list|)
argument_list|,
literal|"http://fo%20o+/ba%20r+/no%20idea%20what%20I%20am%20doing+"
argument_list|)
expr_stmt|;
name|assertAppendUrl
argument_list|(
name|url
argument_list|(
literal|"http://fo%20o+"
argument_list|)
argument_list|,
name|file
argument_list|(
literal|null
argument_list|,
literal|"no idea what I am doing+"
argument_list|)
argument_list|,
literal|"http://fo%20o+/no%20idea%20what%20I%20am%20doing+"
argument_list|)
expr_stmt|;
name|assertAppendUrl
argument_list|(
name|url
argument_list|(
literal|"http://fo%20o+/ba%20r+"
argument_list|)
argument_list|,
name|url
argument_list|(
literal|"file:no%20idea%20what%20I%20am%20doing+"
argument_list|)
argument_list|,
literal|"http://fo%20o+/ba%20r+/no%20idea%20what%20I%20am%20doing+"
argument_list|)
expr_stmt|;
name|assertAppendUrl
argument_list|(
name|url
argument_list|(
literal|"http://fo%20o+"
argument_list|)
argument_list|,
name|url
argument_list|(
literal|"file:no%20idea%20what%20I%20am%20doing+"
argument_list|)
argument_list|,
literal|"http://fo%20o+/no%20idea%20what%20I%20am%20doing+"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAppend
parameter_list|(
name|Source
name|parent
parameter_list|,
name|Source
name|child
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|parent
operator|+
literal|".append("
operator|+
name|child
operator|+
literal|")"
argument_list|,
name|parent
operator|.
name|append
argument_list|(
name|child
argument_list|)
operator|.
name|file
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
comment|// This should transparently support various OS
name|is
argument_list|(
operator|new
name|File
argument_list|(
name|expected
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAppendUrl
parameter_list|(
name|Source
name|parent
parameter_list|,
name|Source
name|child
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|parent
operator|+
literal|".append("
operator|+
name|child
operator|+
literal|")"
argument_list|,
name|parent
operator|.
name|append
argument_list|(
name|child
argument_list|)
operator|.
name|url
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSpaceInUrl
parameter_list|()
block|{
name|String
name|url
init|=
literal|"file:"
operator|+
name|ROOT_PREFIX
operator|+
literal|"dir%20name/test%20file.json"
decl_stmt|;
specifier|final
name|Source
name|foo
init|=
name|url
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|ROOT_PREFIX
operator|+
literal|"dir name/test file.json"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|foo
operator|.
name|file
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|url
operator|+
literal|" .file().getAbsolutePath()"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testSpaceInRelativeUrl
parameter_list|()
block|{
name|String
name|url
init|=
literal|"file:dir%20name/test%20file.json"
decl_stmt|;
specifier|final
name|Source
name|foo
init|=
name|url
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dir name/test file.json"
argument_list|,
name|foo
operator|.
name|file
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|url
operator|+
literal|" .file().getAbsolutePath()"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
name|void
name|testRelative
parameter_list|()
block|{
specifier|final
name|Source
name|fooBar
init|=
name|file
argument_list|(
literal|null
argument_list|,
name|ROOT_PREFIX
operator|+
literal|"foo/bar"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|foo
init|=
name|file
argument_list|(
literal|null
argument_list|,
name|ROOT_PREFIX
operator|+
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|baz
init|=
name|file
argument_list|(
literal|null
argument_list|,
name|ROOT_PREFIX
operator|+
literal|"baz"
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|bar
init|=
name|fooBar
operator|.
name|relative
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bar
operator|.
name|file
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooBar
operator|.
name|relative
argument_list|(
name|baz
argument_list|)
argument_list|,
name|is
argument_list|(
name|fooBar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

