begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link org.apache.calcite.util.ImmutableBitSet}.  */
end_comment

begin_class
specifier|public
class|class
name|ImmutableBitSetTest
block|{
comment|/** Tests the method {@link ImmutableBitSet#iterator()}. */
annotation|@
name|Test
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
name|assertToIterBitSet
argument_list|(
literal|""
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertToIterBitSet
argument_list|(
literal|"0"
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertToIterBitSet
argument_list|(
literal|"0, 1"
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertToIterBitSet
argument_list|(
literal|"10"
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that iterating over an    * {@link org.apache.calcite.util.ImmutableBitSet} yields the expected string.    *    * @param expected Expected string    * @param bitSet   Bit set    */
specifier|private
name|void
name|assertToIterBitSet
parameter_list|(
name|String
name|expected
parameter_list|,
name|ImmutableBitSet
name|bitSet
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|bitSet
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the method    * {@link org.apache.calcite.util.ImmutableBitSet#toList()}.    */
annotation|@
name|Test
specifier|public
name|void
name|testToList
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|63
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|63
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|63
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|63
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|64
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the method {@link BitSets#range(int, int)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testRange
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|4
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|63
argument_list|,
literal|66
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{63, 64, 65}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|65
argument_list|,
literal|68
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{65, 66, 67}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|65
argument_list|,
literal|65
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|65
argument_list|,
literal|65
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|65
argument_list|,
literal|165
argument_list|)
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same tests as above, using a builder.
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
operator|.
name|set
argument_list|(
literal|63
argument_list|,
literal|66
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{63, 64, 65}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
operator|.
name|set
argument_list|(
literal|65
argument_list|,
literal|68
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{65, 66, 67}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
operator|.
name|set
argument_list|(
literal|65
argument_list|,
literal|65
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
operator|.
name|set
argument_list|(
literal|65
argument_list|,
literal|65
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
operator|.
name|set
argument_list|(
literal|65
argument_list|,
literal|165
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|e0
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|e1
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|e0
operator|.
name|equals
argument_list|(
name|e1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e0
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|e1
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty builder returns the singleton empty set.
name|assertTrue
argument_list|(
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
operator|==
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|sorted
init|=
name|getSortedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sorted
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sorted
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|ImmutableBitSet
name|set0
init|=
name|sorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|set1
init|=
name|sorted
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|set0
operator|.
name|compareTo
argument_list|(
name|set1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|i
operator|==
name|j
operator|||
name|i
operator|==
literal|3
operator|&&
name|j
operator|==
literal|4
operator|||
name|i
operator|==
literal|4
operator|&&
name|j
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|c
argument_list|,
name|Utilities
operator|.
name|compare
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|c
operator|==
literal|0
argument_list|,
name|set0
operator|.
name|equals
argument_list|(
name|set1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|==
literal|0
argument_list|,
name|set1
operator|.
name|equals
argument_list|(
name|set0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompare2
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|sorted
init|=
name|getSortedList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|ImmutableBitSet
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sorted
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{0, 1, 3}, {0, 1}, {1, 1000}, {1}, {1}, {2, 3}, {}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getSortedList
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Tests the method    * {@link org.apache.calcite.util.ImmutableBitSet#toArray}.    */
annotation|@
name|Test
specifier|public
name|void
name|testToArray
parameter_list|()
block|{
name|int
index|[]
index|[]
name|arrays
init|=
block|{
block|{}
block|,
block|{
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|1
block|,
literal|65
block|}
block|,
block|{
literal|100
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
index|[]
name|array
range|:
name|arrays
control|)
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|array
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the methods    * {@link org.apache.calcite.util.ImmutableBitSet#toList} and    * {@link org.apache.calcite.util.ImmutableBitSet#asList}.    */
annotation|@
name|Test
specifier|public
name|void
name|testAsList
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|list
init|=
name|getSortedList
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|bitSet
range|:
name|list
control|)
block|{
specifier|final
name|IntList
name|list1
init|=
name|bitSet
operator|.
name|toList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|listView
init|=
name|bitSet
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|bitSet
operator|.
name|cardinality
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list1
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|listView
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list1
operator|.
name|equals
argument_list|(
name|listView
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|listView
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the method    * {@link org.apache.calcite.util.ImmutableBitSet#union(ImmutableBitSet)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testUnion
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
operator|.
name|union
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{1, 3}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
operator|.
name|union
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{1, 3, 100}"
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableBitSet
name|x
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addAll
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|addAll
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|addAll
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|x
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{1, 2, 3}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntersect
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
operator|.
name|intersect
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{2, 100}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|101
argument_list|,
literal|20001
argument_list|)
operator|.
name|intersect
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|==
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the method    * {@link org.apache.calcite.util.ImmutableBitSet#contains(org.apache.calcite.util.ImmutableBitSet)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testBitSetsContains
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|14
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|20
argument_list|,
literal|25
argument_list|)
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|14
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|empty
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|20
argument_list|,
literal|25
argument_list|)
operator|.
name|contains
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|empty
operator|.
name|contains
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|63
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
operator|.
name|contains
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the method    * {@link org.apache.calcite.util.ImmutableBitSet#of(org.apache.calcite.util.ImmutableIntList)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testBitSetOfImmutableIntList
parameter_list|()
block|{
name|ImmutableIntList
name|list
init|=
name|ImmutableIntList
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|list
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|ImmutableIntList
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|70
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|list
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|70
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the method    * {@link org.apache.calcite.util.ImmutableBitSet#previousClearBit(int)}.    */
annotation|@
name|Test
specifier|public
name|void
name|testPreviousClearBit
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|previousClearBit
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|previousClearBit
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|previousClearBit
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|int
name|actual
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|previousClearBit
argument_list|(
operator|-
literal|2
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"expected exception, got "
operator|+
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|previousClearBit
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|previousClearBit
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|previousClearBit
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|previousClearBit
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|previousClearBit
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuilder
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
operator|.
name|set
argument_list|(
literal|9
argument_list|)
operator|.
name|set
argument_list|(
literal|100
argument_list|)
operator|.
name|set
argument_list|(
literal|1000
argument_list|)
operator|.
name|clear
argument_list|(
literal|250
argument_list|)
operator|.
name|set
argument_list|(
literal|88
argument_list|)
operator|.
name|clear
argument_list|(
literal|100
argument_list|)
operator|.
name|clear
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{9, 88}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unit test for    * {@link org.apache.calcite.util.ImmutableBitSet.Builder#build(ImmutableBitSet)}. */
annotation|@
name|Test
specifier|public
name|void
name|testBuilderUseOriginal
parameter_list|()
block|{
specifier|final
name|ImmutableBitSet
name|fives
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|fives2
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|(
name|fives
argument_list|)
operator|.
name|clear
argument_list|(
literal|2
argument_list|)
operator|.
name|set
argument_list|(
literal|10
argument_list|)
operator|.
name|build
argument_list|(
name|fives
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fives2
operator|==
name|fives
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|fives3
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|(
name|fives
argument_list|)
operator|.
name|clear
argument_list|(
literal|2
argument_list|)
operator|.
name|set
argument_list|(
literal|10
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fives3
operator|!=
name|fives
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fives3
operator|.
name|equals
argument_list|(
name|fives
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fives3
operator|.
name|equals
argument_list|(
name|fives2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIndexOf
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|indexOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|indexOf
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|indexOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|indexOf
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNth
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|nth
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|nth
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|nth
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|63
argument_list|)
operator|.
name|nth
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|64
argument_list|)
operator|.
name|nth
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|)
operator|.
name|nth
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|,
literal|65
argument_list|)
operator|.
name|nth
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|,
literal|65
argument_list|)
operator|.
name|nth
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|65
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|,
literal|128
argument_list|)
operator|.
name|nth
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|nth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|ImmutableBitSet
operator|.
name|of
argument_list|()
operator|.
name|nth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|)
operator|.
name|nth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|64
argument_list|)
operator|.
name|nth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
comment|/** Tests the method    * {@link org.apache.calcite.util.BitSets#closure(java.util.SortedMap)}. */
annotation|@
name|Test
specifier|public
name|void
name|testClosure
parameter_list|()
block|{
specifier|final
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBitSet
argument_list|>
name|empty
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|closure
argument_list|(
name|empty
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
comment|// Currently you need an entry for each position, otherwise you get an NPE.
comment|// We should fix that.
specifier|final
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBitSet
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|5
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|6
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|7
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|8
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|9
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|10
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|11
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|12
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|original
init|=
name|map
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|closure
argument_list|(
name|map
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{0={3, 4, 12}, 1={}, 2={7}, 3={3, 4, 12}, 4={4, 12}, 5={}, 6={}, 7={7}, 8={}, 9={}, 10={}, 11={}, 12={4, 12}}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"argument modified"
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPowerSet
parameter_list|()
block|{
specifier|final
name|ImmutableBitSet
name|empty
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|empty
operator|.
name|powerSet
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|empty
operator|.
name|powerSet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{}]"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|single
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|single
operator|.
name|powerSet
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|single
operator|.
name|powerSet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{}, {2}]"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|two
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|two
operator|.
name|powerSet
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|two
operator|.
name|powerSet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[{}, {10}, {2}, {2, 10}]"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|seventeen
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|seventeen
operator|.
name|powerSet
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|131072
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateLongs
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
literal|0xAL
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
literal|0xAL
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xAL
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|129
argument_list|,
literal|131
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateLongBuffer
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
name|LongBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|long
index|[]
block|{}
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
name|LongBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0xAL
block|}
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
name|LongBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0xAL
block|,
literal|0
block|}
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|129
argument_list|,
literal|131
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToLongArray
parameter_list|()
block|{
specifier|final
name|ImmutableBitSet
name|bitSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
literal|29
argument_list|,
literal|4
argument_list|,
literal|1969
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
name|bitSet
operator|.
name|toLongArray
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|bitSet
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableBitSet
operator|.
name|valueOf
argument_list|(
name|LongBuffer
operator|.
name|wrap
argument_list|(
name|bitSet
operator|.
name|toLongArray
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|bitSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// End ImmutableBitSetTest.java
end_comment

end_unit

