begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableRangeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|RangeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeRangeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link RangeSets} and other utilities relating to Guava  * {@link Range} and {@link RangeSet}.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnstableApiUsage"
argument_list|)
class|class
name|RangeSetTest
block|{
comment|/** Tests {@link RangeSets#minus(RangeSet, Range)}. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnstableApiUsage"
argument_list|)
annotation|@
name|Test
name|void
name|testRangeSetMinus
parameter_list|()
block|{
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|setNone
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|setAll
init|=
name|setNone
operator|.
name|complement
argument_list|()
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|setGt2
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|setGt1
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|setGe1
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|setGt0
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|setComplex
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|setComplex
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[0\u20252], [3\u20253], (5\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setAll
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[(-\u221e\u20251), (1\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setNone
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|setNone
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setGt2
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|setGt2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setGt1
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|setGt1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setGe1
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|setGt1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setGt0
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[(0\u20251), (1\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setComplex
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[0\u20251), (1\u20252], [3\u20253], (5\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setComplex
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[0\u20252), [3\u20253], (5\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setComplex
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[0\u20252], (5\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setComplex
argument_list|,
name|Range
operator|.
name|open
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[0\u20252], [3\u20253], (5\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setComplex
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[0\u20252), (5\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|minus
argument_list|(
name|setComplex
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"[[0\u20252), (7\u2025+\u221e)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RangeSets#isPoint(Range)}. */
annotation|@
name|Test
name|void
name|testRangeSetIsPoint
parameter_list|()
block|{
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The integer range '0> x and x< 2' contains only one valid integer
comment|// but it is not a point.
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|isPoint
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RangeSets#countPoints(RangeSet)}. */
annotation|@
name|Test
name|void
name|testRangeCountPoints
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|countPoints
argument_list|(
name|f
operator|.
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|countPoints
argument_list|(
name|f
operator|.
name|zeroRangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|countPoints
argument_list|(
name|f
operator|.
name|rangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|countPoints
argument_list|(
name|set
argument_list|)
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|set2
init|=
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|countPoints
argument_list|(
name|set2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RangeSets#map} and {@link RangeSets#forEach}. */
annotation|@
name|Test
name|void
name|testRangeMap
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RangeSets
operator|.
name|Handler
argument_list|<
name|Integer
argument_list|,
name|StringBuilder
argument_list|>
name|h
init|=
operator|new
name|RangeSets
operator|.
name|Handler
argument_list|<
name|Integer
argument_list|,
name|StringBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringBuilder
name|all
parameter_list|()
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"all()"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|atLeast
parameter_list|(
name|Integer
name|lower
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"atLeast("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|atMost
parameter_list|(
name|Integer
name|upper
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"atMost("
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|greaterThan
parameter_list|(
name|Integer
name|lower
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"greaterThan("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|lessThan
parameter_list|(
name|Integer
name|upper
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"lessThan("
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|singleton
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"singleton("
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|closed
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"closed("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|closedOpen
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"closedOpen("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|openClosed
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"openClosed("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuilder
name|open
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"open("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|RangeSets
operator|.
name|Consumer
argument_list|<
name|Integer
argument_list|>
name|c
init|=
operator|new
name|RangeSets
operator|.
name|Consumer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|all
parameter_list|()
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"all()"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|atLeast
parameter_list|(
name|Integer
name|lower
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"atLeast("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|atMost
parameter_list|(
name|Integer
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"atMost("
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|greaterThan
parameter_list|(
name|Integer
name|lower
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"greaterThan("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lessThan
parameter_list|(
name|Integer
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"lessThan("
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|singleton
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"singleton("
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closed
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"closed("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closedOpen
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"closedOpen("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|openClosed
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"openClosed("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|Integer
name|lower
parameter_list|,
name|Integer
name|upper
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"open("
argument_list|)
operator|.
name|append
argument_list|(
name|lower
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|upper
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|f
operator|.
name|ranges
control|)
block|{
name|RangeSets
operator|.
name|map
argument_list|(
name|range
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|f
operator|.
name|rangesString
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|f
operator|.
name|ranges
control|)
block|{
name|RangeSets
operator|.
name|forEach
argument_list|(
name|range
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|f
operator|.
name|rangesString
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use a smaller set of ranges that does not overlap
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
range|:
name|f
operator|.
name|disjointRanges
control|)
block|{
name|RangeSets
operator|.
name|forEach
argument_list|(
name|range
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|f
operator|.
name|disjointRangesString
argument_list|)
argument_list|)
expr_stmt|;
comment|// For a RangeSet consisting of disjointRanges the effect is the same,
comment|// but the ranges are sorted.
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|RangeSets
operator|.
name|forEach
argument_list|(
name|f
operator|.
name|rangeSet
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|f
operator|.
name|disjointRangesSortedString
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that {@link RangeSets#hashCode(RangeSet)} returns the same result    * as the hashCode of a list of the same ranges. */
annotation|@
name|Test
name|void
name|testRangeSetHashCode
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
specifier|final
name|int
name|h
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|f
operator|.
name|rangeSet
operator|.
name|asRanges
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|hashCode
argument_list|(
name|f
operator|.
name|rangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|hashCode
argument_list|(
name|f
operator|.
name|treeRangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|hashCode
argument_list|(
name|ImmutableRangeSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Tests {@link RangeSets#compare(Range, Range)}. */
annotation|@
name|Test
name|void
name|testRangeCompare
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
name|Ord
operator|.
name|forEach
argument_list|(
name|f
operator|.
name|sortedRanges
argument_list|,
parameter_list|(
name|r0
parameter_list|,
name|i
parameter_list|)
lambda|->
name|Ord
operator|.
name|forEach
argument_list|(
name|f
operator|.
name|sortedRanges
argument_list|,
parameter_list|(
name|r1
parameter_list|,
name|j
parameter_list|)
lambda|->
block|{
name|final
name|String
name|reason
operator|=
literal|"compare "
operator|+
name|r0
operator|+
literal|" to "
operator|+
name|r1
argument_list|;
name|assertThat
argument_list|(
name|reason
argument_list|,
name|RangeSets
operator|.
name|compare
argument_list|(
name|r0
argument_list|,
name|r1
argument_list|)
argument_list|,
name|is
argument_list|(
name|Integer
operator|.
name|compare
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/** Tests {@link RangeSets#compare(RangeSet, RangeSet)}. */
end_comment

begin_function
unit|@
name|Test
name|void
name|testRangeSetCompare
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|rangeSet
argument_list|,
name|f
operator|.
name|treeRangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|rangeSet
argument_list|,
name|f
operator|.
name|rangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|treeRangeSet
argument_list|,
name|f
operator|.
name|rangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty range set collates before everything
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|empty
argument_list|,
name|f
operator|.
name|treeRangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|treeRangeSet
argument_list|,
name|f
operator|.
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|empty
argument_list|,
name|f
operator|.
name|zeroRangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|zeroRangeSet
argument_list|,
name|f
operator|.
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// removing the first element (if it's not the only element)
comment|// makes a range set collate later
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|s2
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|(
name|f
operator|.
name|treeRangeSet
argument_list|)
decl_stmt|;
name|s2
operator|.
name|asRanges
argument_list|()
operator|.
name|remove
argument_list|(
name|Iterables
operator|.
name|getFirst
argument_list|(
name|s2
operator|.
name|asRanges
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|f
operator|.
name|treeRangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|treeRangeSet
argument_list|,
name|s2
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|empty
argument_list|,
name|s2
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|f
operator|.
name|empty
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// removing the last element
comment|// makes a range set collate earlier
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|s3
init|=
name|TreeRangeSet
operator|.
name|create
argument_list|(
name|f
operator|.
name|treeRangeSet
argument_list|)
decl_stmt|;
name|s3
operator|.
name|asRanges
argument_list|()
operator|.
name|remove
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|s3
operator|.
name|asRanges
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|s3
argument_list|,
name|f
operator|.
name|treeRangeSet
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RangeSets
operator|.
name|compare
argument_list|(
name|f
operator|.
name|treeRangeSet
argument_list|,
name|s3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Tests {@link RangeSets#printer(StringBuilder, BiConsumer)}. */
end_comment

begin_function
annotation|@
name|Test
name|void
name|testRangePrint
parameter_list|()
block|{
specifier|final
name|Fixture
name|f
init|=
operator|new
name|Fixture
argument_list|()
decl_stmt|;
comment|// RangeSet's native printing
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|f
operator|.
name|ranges
operator|.
name|forEach
argument_list|(
name|r
lambda|->
name|list
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"[(-\u221e\u2025+\u221e), (-\u221e\u20253], "
operator|+
literal|"[4\u2025+\u221e), (-\u221e\u20255), (6\u2025+\u221e), [7\u20257], "
operator|+
literal|"(8\u20259), (10\u202511], [12\u202513], [14\u202515)]"
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|f
operator|.
name|ranges
operator|.
name|forEach
argument_list|(
name|r
lambda|->
block|{
name|RangeSets
operator|.
name|forEach
argument_list|(
name|r
argument_list|,
name|RangeSets
operator|.
name|printer
argument_list|(
name|sb
argument_list|,
name|StringBuilder
operator|::
name|append
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// our format matches Guava's, except points ("7" vs "[7, 7]")
specifier|final
name|String
name|expected2
init|=
literal|"[(-\u221e\u2025+\u221e), (-\u221e\u20253], "
operator|+
literal|"[4\u2025+\u221e), (-\u221e\u20255), (6\u2025+\u221e), 7, "
operator|+
literal|"(8\u20259), (10\u202511], [12\u202513], [14\u202515)]"
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected2
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Data sets used by various tests. */
end_comment

begin_class
specifier|static
class|class
name|Fixture
block|{
specifier|final
name|ImmutableRangeSet
argument_list|<
name|Integer
argument_list|>
name|empty
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|ranges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|,
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Range
operator|.
name|lessThan
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|open
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|rangesString
init|=
literal|"all()"
operator|+
literal|"atMost(3)"
operator|+
literal|"atLeast(4)"
operator|+
literal|"lessThan(5)"
operator|+
literal|"greaterThan(6)"
operator|+
literal|"singleton(7)"
operator|+
literal|"open(8, 9)"
operator|+
literal|"openClosed(10, 11)"
operator|+
literal|"closed(12, 13)"
operator|+
literal|"closedOpen(14, 15)"
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|sortedRanges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Range
operator|.
name|lessThan
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|all
argument_list|()
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|6
argument_list|)
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|open
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Range
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|disjointRanges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|16
argument_list|)
argument_list|,
name|Range
operator|.
name|singleton
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|open
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|disjointRangesString
init|=
literal|"lessThan(5)"
operator|+
literal|"greaterThan(16)"
operator|+
literal|"singleton(7)"
operator|+
literal|"open(8, 9)"
operator|+
literal|"openClosed(10, 11)"
operator|+
literal|"closed(12, 13)"
operator|+
literal|"closedOpen(14, 15)"
decl_stmt|;
specifier|final
name|String
name|disjointRangesSortedString
init|=
literal|"lessThan(5)"
operator|+
literal|"singleton(7)"
operator|+
literal|"open(8, 9)"
operator|+
literal|"openClosed(10, 11)"
operator|+
literal|"closed(12, 13)"
operator|+
literal|"closedOpen(14, 15)"
operator|+
literal|"greaterThan(16)"
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|rangeSet
decl_stmt|;
specifier|final
name|TreeRangeSet
argument_list|<
name|Integer
argument_list|>
name|treeRangeSet
decl_stmt|;
specifier|final
name|RangeSet
argument_list|<
name|Integer
argument_list|>
name|zeroRangeSet
init|=
name|ImmutableRangeSet
operator|.
name|of
argument_list|(
name|Range
operator|.
name|singleton
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Fixture
parameter_list|()
block|{
specifier|final
name|ImmutableRangeSet
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableRangeSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|disjointRanges
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|add
argument_list|)
expr_stmt|;
name|rangeSet
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|treeRangeSet
operator|=
name|TreeRangeSet
operator|.
name|create
argument_list|()
expr_stmt|;
name|treeRangeSet
operator|.
name|addAll
argument_list|(
name|rangeSet
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

