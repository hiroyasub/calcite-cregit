begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|jdbc
operator|.
name|CalciteConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|NullSentinel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|runtime
operator|.
name|PredicateImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|CalciteAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Profiler}.  */
end_comment

begin_class
specifier|public
class|class
name|ProfilerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testProfileZeroRows
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from \"scott\".dept where false"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[DEPTNO,DNAME,LOC],cardinality:0.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DNAME],cardinality:0.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,LOC],cardinality:0.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[],cardinality:0.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME,LOC],cardinality:0.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[],cardinality:0.0}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[],cardinality:0.0}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:0.0}"
argument_list|,
literal|"{type:rowCount,rowCount:0}"
argument_list|,
literal|"{type:unique,columns:[]}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProfileOneRow
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from \"scott\".dept where deptno = 10"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[DEPTNO,DNAME,LOC],cardinality:1.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DNAME],cardinality:1.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,LOC],cardinality:1.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[10],cardinality:1.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME,LOC],cardinality:1.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[ACCOUNTING],cardinality:1.0}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[NEWYORK],cardinality:1.0}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0}"
argument_list|,
literal|"{type:rowCount,rowCount:1}"
argument_list|,
literal|"{type:unique,columns:[]}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProfileTwoRows
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from \"scott\".dept where deptno in (10, 20)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[DEPTNO,DNAME,LOC],cardinality:2.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DNAME],cardinality:2.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,LOC],cardinality:2.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[10,20],cardinality:2.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME,LOC],cardinality:2.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[ACCOUNTING,RESEARCH],cardinality:2.0}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[DALLAS,NEWYORK],cardinality:2.0}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0}"
argument_list|,
literal|"{type:rowCount,rowCount:2}"
argument_list|,
literal|"{type:unique,columns:[DEPTNO]}"
argument_list|,
literal|"{type:unique,columns:[DNAME]}"
argument_list|,
literal|"{type:unique,columns:[LOC]}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProfileScott
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from \"scott\".emp\n"
operator|+
literal|"join \"scott\".dept using (deptno)"
decl_stmt|;
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|PredicateImpl
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|Profiler
operator|.
name|Statistic
name|statistic
parameter_list|)
block|{
return|return
operator|!
operator|(
name|statistic
operator|instanceof
name|Profiler
operator|.
name|Distribution
operator|)
operator|||
operator|(
operator|(
name|Profiler
operator|.
name|Distribution
operator|)
name|statistic
operator|)
operator|.
name|cardinality
operator|<
literal|14
operator|&&
operator|(
operator|(
name|Profiler
operator|.
name|Distribution
operator|)
name|statistic
operator|)
operator|.
name|minimal
return|;
block|}
block|}
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[COMM,DEPTNO0],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[COMM,DEPTNO],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[COMM,DNAME],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[COMM,LOC],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[COMM],values:[0.00,300.00,500.00,1400.00],cardinality:5.0,nullCount:10}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DEPTNO0],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DNAME],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,LOC],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0,DNAME],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0,LOC],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0],values:[10,20,30],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[10,20,30],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME,LOC],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[ACCOUNTING,RESEARCH,SALES],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[HIREDATE,COMM],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[HIREDATE],values:[1980-12-17,1981-01-05,1981-02-04,1981-02-20,1981-02-22,1981-06-09,1981-09-08,1981-09-28,1981-11-17,1981-12-03,1982-01-23,1987-04-19,1987-05-23],cardinality:13.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,COMM],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,DEPTNO0],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,DEPTNO],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,DNAME],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,LOC],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,MGR,DEPTNO0],cardinality:10.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,MGR,DEPTNO],cardinality:10.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,MGR,DNAME],cardinality:10.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,MGR,LOC],cardinality:10.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,MGR],cardinality:8.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB,SAL],cardinality:12.0}"
argument_list|,
literal|"{type:distribution,columns:[JOB],values:[ANALYST,CLERK,MANAGER,PRESIDENT,SALESMAN],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[CHICAGO,DALLAS,NEWYORK],cardinality:3.0}"
argument_list|,
literal|"{type:distribution,columns:[MGR,COMM],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[MGR,DEPTNO0],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[MGR,DEPTNO],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[MGR,DNAME],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[MGR,LOC],cardinality:9.0}"
argument_list|,
literal|"{type:distribution,columns:[MGR,SAL],cardinality:12.0}"
argument_list|,
literal|"{type:distribution,columns:[MGR],values:[7566,7698,7782,7788,7839,7902],cardinality:7.0,nullCount:1}"
argument_list|,
literal|"{type:distribution,columns:[SAL,COMM],cardinality:5.0}"
argument_list|,
literal|"{type:distribution,columns:[SAL,DEPTNO0],cardinality:12.0}"
argument_list|,
literal|"{type:distribution,columns:[SAL,DEPTNO],cardinality:12.0}"
argument_list|,
literal|"{type:distribution,columns:[SAL,DNAME],cardinality:12.0}"
argument_list|,
literal|"{type:distribution,columns:[SAL,LOC],cardinality:12.0}"
argument_list|,
literal|"{type:distribution,columns:[SAL],values:[800.00,950.00,1100.00,1250.00,1300.00,1500.00,1600.00,2450.00,2850.00,2975.00,3000.00,5000.00],cardinality:12.0}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0}"
argument_list|,
literal|"{type:fd,columns:[DEPTNO0],dependentColumn:DEPTNO}"
argument_list|,
literal|"{type:fd,columns:[DEPTNO0],dependentColumn:DNAME}"
argument_list|,
literal|"{type:fd,columns:[DEPTNO0],dependentColumn:LOC}"
argument_list|,
literal|"{type:fd,columns:[DEPTNO],dependentColumn:DEPTNO0}"
argument_list|,
literal|"{type:fd,columns:[DEPTNO],dependentColumn:DNAME}"
argument_list|,
literal|"{type:fd,columns:[DEPTNO],dependentColumn:LOC}"
argument_list|,
literal|"{type:fd,columns:[DNAME],dependentColumn:DEPTNO0}"
argument_list|,
literal|"{type:fd,columns:[DNAME],dependentColumn:DEPTNO}"
argument_list|,
literal|"{type:fd,columns:[DNAME],dependentColumn:LOC}"
argument_list|,
literal|"{type:fd,columns:[JOB],dependentColumn:COMM}"
argument_list|,
literal|"{type:fd,columns:[LOC],dependentColumn:DEPTNO0}"
argument_list|,
literal|"{type:fd,columns:[LOC],dependentColumn:DEPTNO}"
argument_list|,
literal|"{type:fd,columns:[LOC],dependentColumn:DNAME}"
argument_list|,
literal|"{type:fd,columns:[SAL],dependentColumn:DEPTNO0}"
argument_list|,
literal|"{type:fd,columns:[SAL],dependentColumn:DEPTNO}"
argument_list|,
literal|"{type:fd,columns:[SAL],dependentColumn:DNAME}"
argument_list|,
literal|"{type:fd,columns:[SAL],dependentColumn:JOB}"
argument_list|,
literal|"{type:fd,columns:[SAL],dependentColumn:LOC}"
argument_list|,
literal|"{type:fd,columns:[SAL],dependentColumn:MGR}"
argument_list|,
literal|"{type:rowCount,rowCount:14}"
argument_list|,
literal|"{type:unique,columns:[EMPNO]}"
argument_list|,
literal|"{type:unique,columns:[ENAME]}"
argument_list|,
literal|"{type:unique,columns:[HIREDATE,DEPTNO0]}"
argument_list|,
literal|"{type:unique,columns:[HIREDATE,DEPTNO]}"
argument_list|,
literal|"{type:unique,columns:[HIREDATE,DNAME]}"
argument_list|,
literal|"{type:unique,columns:[HIREDATE,LOC]}"
argument_list|,
literal|"{type:unique,columns:[HIREDATE,SAL]}"
argument_list|,
literal|"{type:unique,columns:[JOB,HIREDATE]}"
argument_list|)
expr_stmt|;
block|}
comment|/** As {@link #testProfileScott()}, but prints only the most surprising    * distributions. */
annotation|@
name|Test
specifier|public
name|void
name|testProfileScott2
parameter_list|()
throws|throws
name|Exception
block|{
name|scott
argument_list|()
operator|.
name|factory
argument_list|(
name|Fluid
operator|.
name|SIMPLE_FACTORY
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[COMM],values:[0.00,300.00,500.00,1400.00],cardinality:5.0,nullCount:10,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DEPTNO0],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DNAME],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,LOC],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0,DNAME],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0,LOC],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DNAME,LOC],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[ACCOUNTING,RESEARCH,SALES],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[HIREDATE,COMM],cardinality:5.0,expectedCardinality:12.682618485430247,surprise:0.4344728973121492}"
argument_list|,
literal|"{type:distribution,columns:[HIREDATE],values:[1980-12-17,1981-01-05,1981-02-04,1981-02-20,1981-02-22,1981-06-09,1981-09-08,1981-09-28,1981-11-17,1981-12-03,1982-01-23,1987-04-19,1987-05-23],cardinality:13.0,expectedCardinality:14.0,surprise:0.037037037037037035}"
argument_list|,
literal|"{type:distribution,columns:[JOB],values:[ANALYST,CLERK,MANAGER,PRESIDENT,SALESMAN],cardinality:5.0,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[CHICAGO,DALLAS,NEWYORK],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[MGR,COMM],cardinality:5.0,expectedCardinality:11.675074674157162,surprise:0.400302535646339}"
argument_list|,
literal|"{type:distribution,columns:[MGR],values:[7566,7698,7782,7788,7839,7902],cardinality:7.0,nullCount:1,expectedCardinality:14.0,surprise:0.3333333333333333}"
argument_list|,
literal|"{type:distribution,columns:[SAL,COMM],cardinality:5.0,expectedCardinality:12.579960871109892,surprise:0.43117052004174}"
argument_list|,
literal|"{type:distribution,columns:[SAL],values:[800.00,950.00,1100.00,1250.00,1300.00,1500.00,1600.00,2450.00,2850.00,2975.00,3000.00,5000.00],cardinality:12.0,expectedCardinality:14.0,surprise:0.07692307692307693}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0,expectedCardinality:1.0,surprise:0.0}"
argument_list|)
expr_stmt|;
block|}
comment|/** As {@link #testProfileScott2()}, but uses the breadth-first profiler.    * Results should be the same, but are slightly different (extra EMPNO    * and ENAME distributions). */
annotation|@
name|Test
specifier|public
name|void
name|testProfileScott3
parameter_list|()
throws|throws
name|Exception
block|{
name|scott
argument_list|()
operator|.
name|factory
argument_list|(
name|Fluid
operator|.
name|BETTER_FACTORY
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[COMM],values:[0.00,300.00,500.00,1400.00],cardinality:5.0,nullCount:10,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DEPTNO0,DNAME,LOC],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DEPTNO0],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DNAME],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,LOC],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0,DNAME,LOC],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[ACCOUNTING,RESEARCH,SALES],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[EMPNO],values:[7369,7499,7521,7566,7654,7698,7782,7788,7839,7844,7876,7900,7902,7934],cardinality:14.0,expectedCardinality:14.0,surprise:0.0}"
argument_list|,
literal|"{type:distribution,columns:[ENAME],values:[ADAMS,ALLEN,BLAKE,CLARK,FORD,JAMES,JONES,KING,MARTIN,MILLER,SCOTT,SMITH,TURNER,WARD],cardinality:14.0,expectedCardinality:14.0,surprise:0.0}"
argument_list|,
literal|"{type:distribution,columns:[HIREDATE],values:[1980-12-17,1981-01-05,1981-02-04,1981-02-20,1981-02-22,1981-06-09,1981-09-08,1981-09-28,1981-11-17,1981-12-03,1982-01-23,1987-04-19,1987-05-23],cardinality:13.0,expectedCardinality:14.0,surprise:0.037037037037037035}"
argument_list|,
literal|"{type:distribution,columns:[JOB],values:[ANALYST,CLERK,MANAGER,PRESIDENT,SALESMAN],cardinality:5.0,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[CHICAGO,DALLAS,NEWYORK],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[MGR],values:[7566,7698,7782,7788,7839,7902],cardinality:7.0,nullCount:1,expectedCardinality:14.0,surprise:0.3333333333333333}"
argument_list|,
literal|"{type:distribution,columns:[SAL],values:[800.00,950.00,1100.00,1250.00,1300.00,1500.00,1600.00,2450.00,2850.00,2975.00,3000.00,5000.00],cardinality:12.0,expectedCardinality:14.0,surprise:0.07692307692307693}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0,expectedCardinality:1.0,surprise:0.0}"
argument_list|)
expr_stmt|;
block|}
comment|/** As {@link #testProfileScott3()}, but uses the breadth-first profiler    * and deems everything uninteresting. Only first-level combinations (those    * consisting of a single column) are computed. */
annotation|@
name|Test
specifier|public
name|void
name|testProfileScott4
parameter_list|()
throws|throws
name|Exception
block|{
name|scott
argument_list|()
operator|.
name|factory
argument_list|(
name|Fluid
operator|.
name|INCURIOUS_PROFILER_FACTORY
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[COMM],values:[0.00,300.00,500.00,1400.00],cardinality:5.0,nullCount:10,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0,DNAME,LOC],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[ACCOUNTING,RESEARCH,SALES],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[EMPNO],values:[7369,7499,7521,7566,7654,7698,7782,7788,7839,7844,7876,7900,7902,7934],cardinality:14.0,expectedCardinality:14.0,surprise:0.0}"
argument_list|,
literal|"{type:distribution,columns:[ENAME],values:[ADAMS,ALLEN,BLAKE,CLARK,FORD,JAMES,JONES,KING,MARTIN,MILLER,SCOTT,SMITH,TURNER,WARD],cardinality:14.0,expectedCardinality:14.0,surprise:0.0}"
argument_list|,
literal|"{type:distribution,columns:[HIREDATE],values:[1980-12-17,1981-01-05,1981-02-04,1981-02-20,1981-02-22,1981-06-09,1981-09-08,1981-09-28,1981-11-17,1981-12-03,1982-01-23,1987-04-19,1987-05-23],cardinality:13.0,expectedCardinality:14.0,surprise:0.037037037037037035}"
argument_list|,
literal|"{type:distribution,columns:[JOB],values:[ANALYST,CLERK,MANAGER,PRESIDENT,SALESMAN],cardinality:5.0,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[CHICAGO,DALLAS,NEWYORK],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[MGR],values:[7566,7698,7782,7788,7839,7902],cardinality:7.0,nullCount:1,expectedCardinality:14.0,surprise:0.3333333333333333}"
argument_list|,
literal|"{type:distribution,columns:[SAL],values:[800.00,950.00,1100.00,1250.00,1300.00,1500.00,1600.00,2450.00,2850.00,2975.00,3000.00,5000.00],cardinality:12.0,expectedCardinality:14.0,surprise:0.07692307692307693}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0,expectedCardinality:1.0,surprise:0.0}"
argument_list|)
expr_stmt|;
block|}
comment|/** As {@link #testProfileScott3()}, but uses the breadth-first profiler. */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testProfileScott5
parameter_list|()
throws|throws
name|Exception
block|{
name|scott
argument_list|()
operator|.
name|factory
argument_list|(
name|Fluid
operator|.
name|PROFILER_FACTORY
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[COMM],values:[0.00,300.00,500.00,1400.00],cardinality:5.0,nullCount:10,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DEPTNO0,DNAME,LOC],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DEPTNO0],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,DNAME],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO,LOC],cardinality:3.0,expectedCardinality:7.269756624410332,surprise:0.41576025416819384}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0,DNAME,LOC],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO0],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DEPTNO],values:[10,20,30],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[DNAME],values:[ACCOUNTING,RESEARCH,SALES],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[EMPNO],values:[7369,7499,7521,7566,7654,7698,7782,7788,7839,7844,7876,7900,7902,7934],cardinality:14.0,expectedCardinality:14.0,surprise:0.0}"
argument_list|,
literal|"{type:distribution,columns:[ENAME],values:[ADAMS,ALLEN,BLAKE,CLARK,FORD,JAMES,JONES,KING,MARTIN,MILLER,SCOTT,SMITH,TURNER,WARD],cardinality:14.0,expectedCardinality:14.0,surprise:0.0}"
argument_list|,
literal|"{type:distribution,columns:[HIREDATE],values:[1980-12-17,1981-01-05,1981-02-04,1981-02-20,1981-02-22,1981-06-09,1981-09-08,1981-09-28,1981-11-17,1981-12-03,1982-01-23,1987-04-19,1987-05-23],cardinality:13.0,expectedCardinality:14.0,surprise:0.037037037037037035}"
argument_list|,
literal|"{type:distribution,columns:[JOB],values:[ANALYST,CLERK,MANAGER,PRESIDENT,SALESMAN],cardinality:5.0,expectedCardinality:14.0,surprise:0.47368421052631576}"
argument_list|,
literal|"{type:distribution,columns:[LOC],values:[CHICAGO,DALLAS,NEWYORK],cardinality:3.0,expectedCardinality:14.0,surprise:0.6470588235294118}"
argument_list|,
literal|"{type:distribution,columns:[MGR],values:[7566,7698,7782,7788,7839,7902],cardinality:7.0,nullCount:1,expectedCardinality:14.0,surprise:0.3333333333333333}"
argument_list|,
literal|"{type:distribution,columns:[SAL],values:[800.00,950.00,1100.00,1250.00,1300.00,1500.00,1600.00,2450.00,2850.00,2975.00,3000.00,5000.00],cardinality:12.0,expectedCardinality:14.0,surprise:0.07692307692307693}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0,expectedCardinality:1.0,surprise:0.0}"
argument_list|)
expr_stmt|;
block|}
comment|/** Profiles a star-join query on the Foodmart schema using the breadth-first    * profiler. */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testProfileFoodmart
parameter_list|()
throws|throws
name|Exception
block|{
name|foodmart
argument_list|()
operator|.
name|factory
argument_list|(
name|Fluid
operator|.
name|PROFILER_FACTORY
argument_list|)
operator|.
name|unordered
argument_list|(
literal|"{type:distribution,columns:[brand_name],cardinality:111.0,expectedCardinality:86837.0,surprise:0.9974467497814786}"
argument_list|,
literal|"{type:distribution,columns:[cases_per_pallet],values:[5,6,7,8,9,10,11,12,13,14],cardinality:10.0,expectedCardinality:86837.0,surprise:0.9997697099496816}"
argument_list|,
literal|"{type:distribution,columns:[day_of_month],cardinality:30.0,expectedCardinality:86837.0,surprise:0.9993092889129359}"
argument_list|,
literal|"{type:distribution,columns:[fiscal_period],values:[],cardinality:1.0,nullCount:86837,expectedCardinality:86837.0,surprise:0.999976968608213}"
argument_list|,
literal|"{type:distribution,columns:[low_fat],values:[false,true],cardinality:2.0,expectedCardinality:86837.0,surprise:0.9999539377468649}"
argument_list|,
literal|"{type:distribution,columns:[month_of_year],values:[1,2,3,4,5,6,7,8,9,10,11,12],cardinality:12.0,expectedCardinality:86837.0,surprise:0.9997236583034923}"
argument_list|,
literal|"{type:distribution,columns:[product_category],cardinality:45.0,expectedCardinality:86837.0,surprise:0.9989641122441932}"
argument_list|,
literal|"{type:distribution,columns:[product_class_id0,product_subcategory,product_category,product_department,product_family],cardinality:102.0,expectedCardinality:86837.0,surprise:0.997653527185728}"
argument_list|,
literal|"{type:distribution,columns:[product_class_id0],cardinality:102.0,expectedCardinality:86837.0,surprise:0.997653527185728}"
argument_list|,
literal|"{type:distribution,columns:[product_class_id],cardinality:102.0,expectedCardinality:86837.0,surprise:0.997653527185728}"
argument_list|,
literal|"{type:distribution,columns:[product_department],cardinality:22.0,expectedCardinality:86837.0,surprise:0.9994934318838578}"
argument_list|,
literal|"{type:distribution,columns:[product_family],values:[Drink,Food,Non-Consumable],cardinality:3.0,expectedCardinality:86837.0,surprise:0.9999309074159374}"
argument_list|,
literal|"{type:distribution,columns:[product_subcategory],cardinality:102.0,expectedCardinality:86837.0,surprise:0.997653527185728}"
argument_list|,
literal|"{type:distribution,columns:[quarter],values:[Q1,Q2,Q3,Q4],cardinality:4.0,expectedCardinality:86837.0,surprise:0.9999078776154121}"
argument_list|,
literal|"{type:distribution,columns:[recyclable_package],values:[false,true],cardinality:2.0,expectedCardinality:86837.0,surprise:0.9999539377468649}"
argument_list|,
literal|"{type:distribution,columns:[store_cost,fiscal_period],cardinality:10601.0,nullCount:86724,expectedCardinality:10.0,surprise:0.9981151635095655}"
argument_list|,
literal|"{type:distribution,columns:[store_cost,low_fat],cardinality:17673.0,expectedCardinality:20.0,surprise:0.99773921890013}"
argument_list|,
literal|"{type:distribution,columns:[store_cost,product_family],cardinality:19453.0,expectedCardinality:30.0,surprise:0.9969203921367346}"
argument_list|,
literal|"{type:distribution,columns:[store_cost,quarter],cardinality:29590.0,expectedCardinality:40.0,surprise:0.9973000337495781}"
argument_list|,
literal|"{type:distribution,columns:[store_cost,recyclable_package],cardinality:17847.0,expectedCardinality:20.0,surprise:0.9977612357978396}"
argument_list|,
literal|"{type:distribution,columns:[store_cost,the_year],cardinality:10944.0,expectedCardinality:10.0,surprise:0.9981741829468688}"
argument_list|,
literal|"{type:distribution,columns:[store_cost],cardinality:10.0,expectedCardinality:86837.0,surprise:0.9997697099496816}"
argument_list|,
literal|"{type:distribution,columns:[store_id],values:[2,3,6,7,11,13,14,15,16,17,22,23,24],cardinality:13.0,expectedCardinality:86837.0,surprise:0.9997006332757629}"
argument_list|,
literal|"{type:distribution,columns:[store_sales],cardinality:21.0,expectedCardinality:86837.0,surprise:0.999516452140275}"
argument_list|,
literal|"{type:distribution,columns:[the_day],values:[Friday,Monday,Saturday,Sunday,Thursday,Tuesday,Wednesday],cardinality:7.0,expectedCardinality:86837.0,surprise:0.9998387913960665}"
argument_list|,
literal|"{type:distribution,columns:[the_month],values:[April,August,December,February,January,July,June,March,May,November,October,September],cardinality:12.0,expectedCardinality:86837.0,surprise:0.9997236583034923}"
argument_list|,
literal|"{type:distribution,columns:[the_year],values:[1997],cardinality:1.0,expectedCardinality:86837.0,surprise:0.999976968608213}"
argument_list|,
literal|"{type:distribution,columns:[unit_sales],values:[1.0000,2.0000,3.0000,4.0000,5.0000,6.0000],cardinality:6.0,expectedCardinality:86837.0,surprise:0.999861819605495}"
argument_list|,
literal|"{type:distribution,columns:[units_per_case],cardinality:36.0,expectedCardinality:86837.0,surprise:0.9991712039413857}"
argument_list|,
literal|"{type:distribution,columns:[week_of_year],cardinality:52.0,expectedCardinality:86837.0,surprise:0.9988030705843087}"
argument_list|,
literal|"{type:distribution,columns:[],cardinality:1.0,expectedCardinality:1.0,surprise:0.0}"
argument_list|)
expr_stmt|;
block|}
comment|/** Tests    * {@link org.apache.calcite.profile.ProfilerImpl.SurpriseQueue}. */
annotation|@
name|Test
specifier|public
name|void
name|testSurpriseQueue
parameter_list|()
block|{
name|ProfilerImpl
operator|.
name|SurpriseQueue
name|q
init|=
operator|new
name|ProfilerImpl
operator|.
name|SurpriseQueue
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 2.0, contents: [2.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|4
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 2.0, contents: [2.0, 4.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since we're in the warm-up period, a value lower than the minimum is
comment|// accepted.
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 1.0, contents: [2.0, 4.0, 1.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|5
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 1.0, contents: [4.0, 1.0, 5.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 1.0, contents: [1.0, 5.0, 3.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Duplicate entry
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|5
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 3.0, contents: [5.0, 3.0, 5.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now that the list is full, a value below the minimum is refused.
comment|// "offer" returns false, and the value is not added to the queue.
comment|// Thus the median never decreases.
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 3.0, contents: [5.0, 3.0, 5.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same applies for a value equal to the minimum.
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 3.0, contents: [5.0, 3.0, 5.0]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a value that is above the minimum.
name|assertThat
argument_list|(
name|q
operator|.
name|offer
argument_list|(
literal|4.5
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"min: 3.0, contents: [3.0, 5.0, 4.5]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Fluid
name|scott
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"select * from \"scott\".emp\n"
operator|+
literal|"join \"scott\".dept using (deptno)"
decl_stmt|;
return|return
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|where
argument_list|(
name|Fluid
operator|.
name|STATISTIC_PREDICATE
argument_list|)
operator|.
name|sort
argument_list|(
name|Fluid
operator|.
name|ORDERING
operator|.
name|reverse
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
literal|30
argument_list|)
operator|.
name|project
argument_list|(
name|Fluid
operator|.
name|EXTENDED_COLUMNS
argument_list|)
return|;
block|}
specifier|private
name|Fluid
name|foodmart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sql
init|=
literal|"select \"s\".*, \"p\".*, \"t\".*, \"pc\".*\n"
operator|+
literal|"from \"foodmart\".\"sales_fact_1997\" as \"s\"\n"
operator|+
literal|"join \"foodmart\".\"product\" as \"p\" using (\"product_id\")\n"
operator|+
literal|"join \"foodmart\".\"time_by_day\" as \"t\" using (\"time_id\")\n"
operator|+
literal|"join \"foodmart\".\"product_class\" as \"pc\"\n"
operator|+
literal|"  on \"p\".\"product_class_id\" = \"pc\".\"product_class_id\"\n"
decl_stmt|;
return|return
name|sql
argument_list|(
name|sql
argument_list|)
operator|.
name|config
argument_list|(
name|CalciteAssert
operator|.
name|Config
operator|.
name|JDBC_FOODMART
argument_list|)
operator|.
name|where
argument_list|(
name|Fluid
operator|.
name|STATISTIC_PREDICATE
argument_list|)
operator|.
name|sort
argument_list|(
name|Fluid
operator|.
name|ORDERING
operator|.
name|reverse
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
literal|30
argument_list|)
operator|.
name|project
argument_list|(
name|Fluid
operator|.
name|EXTENDED_COLUMNS
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Fluid
name|sql
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
return|return
operator|new
name|Fluid
argument_list|(
name|CalciteAssert
operator|.
name|Config
operator|.
name|SCOTT
argument_list|,
name|sql
argument_list|,
name|Fluid
operator|.
name|SIMPLE_FACTORY
argument_list|,
name|Predicates
operator|.
expr|<
name|Profiler
operator|.
name|Statistic
operator|>
name|alwaysTrue
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|Fluid
operator|.
name|DEFAULT_COLUMNS
argument_list|)
return|;
block|}
comment|/** Fluid interface for writing profiler test cases. */
specifier|private
specifier|static
class|class
name|Fluid
block|{
specifier|static
specifier|final
name|Supplier
argument_list|<
name|Profiler
argument_list|>
name|SIMPLE_FACTORY
init|=
operator|new
name|Supplier
argument_list|<
name|Profiler
argument_list|>
argument_list|()
block|{
specifier|public
name|Profiler
name|get
parameter_list|()
block|{
return|return
operator|new
name|SimpleProfiler
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|Supplier
argument_list|<
name|Profiler
argument_list|>
name|BETTER_FACTORY
init|=
operator|new
name|Supplier
argument_list|<
name|Profiler
argument_list|>
argument_list|()
block|{
specifier|public
name|Profiler
name|get
parameter_list|()
block|{
specifier|final
name|Predicate
argument_list|<
name|Pair
argument_list|<
name|ProfilerImpl
operator|.
name|Space
argument_list|,
name|Profiler
operator|.
name|Column
argument_list|>
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
decl_stmt|;
return|return
operator|new
name|ProfilerImpl
argument_list|(
literal|600
argument_list|,
literal|200
argument_list|,
name|predicate
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|ORDERING
init|=
operator|new
name|Ordering
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Profiler
operator|.
name|Statistic
name|left
parameter_list|,
name|Profiler
operator|.
name|Statistic
name|right
parameter_list|)
block|{
name|int
name|c
init|=
name|left
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
operator|&&
name|left
operator|instanceof
name|Profiler
operator|.
name|Distribution
operator|&&
name|right
operator|instanceof
name|Profiler
operator|.
name|Distribution
condition|)
block|{
specifier|final
name|Profiler
operator|.
name|Distribution
name|d0
init|=
operator|(
name|Profiler
operator|.
name|Distribution
operator|)
name|left
decl_stmt|;
specifier|final
name|Profiler
operator|.
name|Distribution
name|d1
init|=
operator|(
name|Profiler
operator|.
name|Distribution
operator|)
name|right
decl_stmt|;
name|c
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|d0
operator|.
name|surprise
argument_list|()
argument_list|,
name|d1
operator|.
name|surprise
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|d0
operator|.
name|columns
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d1
operator|.
name|columns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|Predicate
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|STATISTIC_PREDICATE
init|=
operator|new
name|PredicateImpl
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|Profiler
operator|.
name|Statistic
name|statistic
parameter_list|)
block|{
comment|// Include distributions of zero columns (the grand total)
comment|// and singleton columns, plus "surprising" distributions
comment|// (with significantly higher NDVs than predicted from their
comment|// constituent columns).
return|return
name|statistic
operator|instanceof
name|Profiler
operator|.
name|Distribution
operator|&&
operator|(
operator|(
operator|(
name|Profiler
operator|.
name|Distribution
operator|)
name|statistic
operator|)
operator|.
name|columns
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
operator|(
operator|(
name|Profiler
operator|.
name|Distribution
operator|)
name|statistic
operator|)
operator|.
name|surprise
argument_list|()
operator|>
literal|0.4D
operator|)
operator|&&
operator|(
operator|(
name|Profiler
operator|.
name|Distribution
operator|)
name|statistic
operator|)
operator|.
name|minimal
return|;
block|}
block|}
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_COLUMNS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"type"
argument_list|,
literal|"distribution"
argument_list|,
literal|"columns"
argument_list|,
literal|"cardinality"
argument_list|,
literal|"values"
argument_list|,
literal|"nullCount"
argument_list|,
literal|"dependentColumn"
argument_list|,
literal|"rowCount"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|EXTENDED_COLUMNS
init|=
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|DEFAULT_COLUMNS
argument_list|)
operator|.
name|add
argument_list|(
literal|"expectedCardinality"
argument_list|,
literal|"surprise"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Supplier
argument_list|<
name|Profiler
argument_list|>
name|PROFILER_FACTORY
init|=
operator|new
name|Supplier
argument_list|<
name|Profiler
argument_list|>
argument_list|()
block|{
specifier|public
name|Profiler
name|get
parameter_list|()
block|{
return|return
operator|new
name|ProfilerImpl
argument_list|(
literal|7500
argument_list|,
literal|100
argument_list|,
operator|new
name|PredicateImpl
argument_list|<
name|Pair
argument_list|<
name|ProfilerImpl
operator|.
name|Space
argument_list|,
name|Profiler
operator|.
name|Column
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|test
parameter_list|(
name|Pair
argument_list|<
name|ProfilerImpl
operator|.
name|Space
argument_list|,
name|Profiler
operator|.
name|Column
argument_list|>
name|p
parameter_list|)
block|{
specifier|final
name|Profiler
operator|.
name|Distribution
name|distribution
init|=
name|p
operator|.
name|left
operator|.
name|distribution
argument_list|()
decl_stmt|;
if|if
condition|(
name|distribution
operator|==
literal|null
condition|)
block|{
comment|// We don't have a distribution yet, because this space
comment|// has not yet been evaluated. Let's do it anyway.
return|return
literal|true
return|;
block|}
return|return
name|distribution
operator|.
name|surprise
argument_list|()
operator|>=
literal|0.3D
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Supplier
argument_list|<
name|Profiler
argument_list|>
name|INCURIOUS_PROFILER_FACTORY
init|=
operator|new
name|Supplier
argument_list|<
name|Profiler
argument_list|>
argument_list|()
block|{
specifier|public
name|Profiler
name|get
parameter_list|()
block|{
specifier|final
name|Predicate
argument_list|<
name|Pair
argument_list|<
name|ProfilerImpl
operator|.
name|Space
argument_list|,
name|Profiler
operator|.
name|Column
argument_list|>
argument_list|>
name|p
init|=
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
decl_stmt|;
return|return
operator|new
name|ProfilerImpl
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|,
name|p
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|String
name|sql
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columns
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|comparator
decl_stmt|;
specifier|private
specifier|final
name|int
name|limit
decl_stmt|;
specifier|private
specifier|final
name|Predicate
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|predicate
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Profiler
argument_list|>
name|factory
decl_stmt|;
specifier|private
specifier|final
name|CalciteAssert
operator|.
name|Config
name|config
decl_stmt|;
name|Fluid
parameter_list|(
name|CalciteAssert
operator|.
name|Config
name|config
parameter_list|,
name|String
name|sql
parameter_list|,
name|Supplier
argument_list|<
name|Profiler
argument_list|>
name|factory
parameter_list|,
name|Predicate
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|predicate
parameter_list|,
name|Comparator
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|comparator
parameter_list|,
name|int
name|limit
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|sql
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
comment|// null means sort on JSON representation
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
name|Fluid
name|config
parameter_list|(
name|CalciteAssert
operator|.
name|Config
name|config
parameter_list|)
block|{
return|return
operator|new
name|Fluid
argument_list|(
name|config
argument_list|,
name|sql
argument_list|,
name|factory
argument_list|,
name|predicate
argument_list|,
name|comparator
argument_list|,
name|limit
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|Fluid
name|factory
parameter_list|(
name|Supplier
argument_list|<
name|Profiler
argument_list|>
name|factory
parameter_list|)
block|{
return|return
operator|new
name|Fluid
argument_list|(
name|config
argument_list|,
name|sql
argument_list|,
name|factory
argument_list|,
name|predicate
argument_list|,
name|comparator
argument_list|,
name|limit
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|Fluid
name|project
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|)
block|{
return|return
operator|new
name|Fluid
argument_list|(
name|config
argument_list|,
name|sql
argument_list|,
name|factory
argument_list|,
name|predicate
argument_list|,
name|comparator
argument_list|,
name|limit
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|Fluid
name|sort
parameter_list|(
name|Ordering
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|Fluid
argument_list|(
name|config
argument_list|,
name|sql
argument_list|,
name|factory
argument_list|,
name|predicate
argument_list|,
name|comparator
argument_list|,
name|limit
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|Fluid
name|limit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
return|return
operator|new
name|Fluid
argument_list|(
name|config
argument_list|,
name|sql
argument_list|,
name|factory
argument_list|,
name|predicate
argument_list|,
name|comparator
argument_list|,
name|limit
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|Fluid
name|where
parameter_list|(
name|Predicate
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|Fluid
argument_list|(
name|config
argument_list|,
name|sql
argument_list|,
name|factory
argument_list|,
name|predicate
argument_list|,
name|comparator
argument_list|,
name|limit
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|Fluid
name|unordered
parameter_list|(
name|String
modifier|...
name|lines
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|check
argument_list|(
name|Matchers
operator|.
name|equalsUnordered
argument_list|(
name|lines
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Fluid
name|check
parameter_list|(
specifier|final
name|Matcher
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|matcher
parameter_list|)
throws|throws
name|Exception
block|{
name|CalciteAssert
operator|.
name|that
argument_list|(
name|config
argument_list|)
operator|.
name|doWithConnection
argument_list|(
operator|new
name|Function
argument_list|<
name|CalciteConnection
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|CalciteConnection
name|c
parameter_list|)
block|{
try|try
init|(
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|)
block|{
specifier|final
name|ResultSetMetaData
name|m
init|=
name|s
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Profiler
operator|.
name|Column
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|m
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|Profiler
operator|.
name|Column
argument_list|(
name|i
argument_list|,
name|m
operator|.
name|getColumnLabel
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create an initial group for each table in the query.
comment|// Columns in the same table will tend to have the same
comment|// cardinality as the table, and as the table's primary key.
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|groups
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|groups
operator|.
name|put
argument_list|(
name|m
operator|.
name|getTableName
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SortedSet
argument_list|<
name|ImmutableBitSet
argument_list|>
name|initialGroups
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|integers
range|:
name|groups
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|initialGroups
operator|.
name|add
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|integers
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Profiler
name|p
init|=
name|factory
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Enumerable
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|rows
init|=
name|getRows
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|Profiler
operator|.
name|Profile
name|profile
init|=
name|p
operator|.
name|profile
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|,
name|initialGroups
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|statistics
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|filter
argument_list|(
name|profile
operator|.
name|statistics
argument_list|()
argument_list|,
name|predicate
argument_list|)
argument_list|)
decl_stmt|;
comment|// If no comparator specified, use the function that converts to
comment|// JSON strings
specifier|final
name|Function
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|,
name|String
argument_list|>
name|toJson
init|=
name|toJsonFunction
argument_list|()
decl_stmt|;
name|Ordering
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|comp
init|=
name|comparator
operator|!=
literal|null
condition|?
name|Ordering
operator|.
name|from
argument_list|(
name|comparator
argument_list|)
else|:
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|toJson
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|>
name|statistics2
init|=
name|comp
operator|.
name|immutableSortedCopy
argument_list|(
name|statistics
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|0
operator|&&
name|limit
operator|<
name|statistics2
operator|.
name|size
argument_list|()
condition|)
block|{
name|statistics2
operator|=
name|statistics2
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|statistics2
argument_list|,
name|toJson
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|strings
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Returns a function that converts a statistic to a JSON string. */
name|Function
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|,
name|String
argument_list|>
name|toJsonFunction
parameter_list|()
block|{
return|return
operator|new
name|Function
argument_list|<
name|Profiler
operator|.
name|Statistic
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|final
name|JsonBuilder
name|jb
init|=
operator|new
name|JsonBuilder
argument_list|()
decl_stmt|;
specifier|public
name|String
name|apply
parameter_list|(
name|Profiler
operator|.
name|Statistic
name|statistic
parameter_list|)
block|{
name|Object
name|map
init|=
name|statistic
operator|.
name|toMap
argument_list|(
name|jb
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map1
init|=
operator|(
name|Map
operator|)
name|map
decl_stmt|;
name|map1
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|Fluid
operator|.
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|json
init|=
name|jb
operator|.
name|toJsonString
argument_list|(
name|map
argument_list|)
decl_stmt|;
return|return
name|json
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Enumerable
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|getRows
parameter_list|(
specifier|final
name|PreparedStatement
name|s
parameter_list|)
block|{
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|enumerator
parameter_list|()
block|{
try|try
block|{
specifier|final
name|ResultSet
name|r
init|=
name|s
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
return|return
name|getListEnumerator
argument_list|(
name|r
argument_list|,
name|r
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|private
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|getListEnumerator
parameter_list|(
specifier|final
name|ResultSet
name|r
parameter_list|,
specifier|final
name|int
name|columnCount
parameter_list|)
block|{
return|return
operator|new
name|Enumerator
argument_list|<
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|final
name|Comparable
index|[]
name|values
init|=
operator|new
name|Comparable
index|[
name|columnCount
index|]
decl_stmt|;
specifier|public
name|List
argument_list|<
name|Comparable
argument_list|>
name|current
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
specifier|final
name|Comparable
name|value
init|=
operator|(
name|Comparable
operator|)
name|r
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|NullSentinel
operator|.
name|mask
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|values
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|moveNext
parameter_list|()
block|{
try|try
block|{
return|return
name|r
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End ProfilerTest.java
end_comment

end_unit

