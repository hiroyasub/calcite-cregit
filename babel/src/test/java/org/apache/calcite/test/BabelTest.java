begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|DelegatingTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|TimeFrameSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlLibraryOperatorTableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|babel
operator|.
name|SqlBabelParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Unit tests for Babel framework.  */
end_comment

begin_class
class|class
name|BabelTest
block|{
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"jdbc:calcite:"
decl_stmt|;
specifier|private
specifier|static
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|useParserFactory
parameter_list|()
block|{
return|return
name|propBuilder
lambda|->
name|propBuilder
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|PARSER_FACTORY
argument_list|,
name|SqlBabelParserImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"#FACTORY"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|useLibraryList
parameter_list|(
name|String
name|libraryList
parameter_list|)
block|{
return|return
name|propBuilder
lambda|->
name|propBuilder
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|FUN
argument_list|,
name|libraryList
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|useLenientOperatorLookup
parameter_list|(
name|boolean
name|lenient
parameter_list|)
block|{
return|return
name|propBuilder
lambda|->
name|propBuilder
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|LENIENT_OPERATOR_LOOKUP
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|lenient
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|SqlOperatorTable
name|operatorTableFor
parameter_list|(
name|SqlLibrary
name|library
parameter_list|)
block|{
return|return
name|SqlLibraryOperatorTableFactory
operator|.
name|INSTANCE
operator|.
name|getOperatorTable
argument_list|(
name|SqlLibrary
operator|.
name|STANDARD
argument_list|,
name|library
argument_list|)
return|;
block|}
specifier|static
name|Connection
name|connect
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connect
argument_list|(
name|UnaryOperator
operator|.
name|identity
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|Connection
name|connect
parameter_list|(
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|propBuild
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|CalciteAssert
operator|.
name|PropBuilder
name|propBuilder
init|=
name|CalciteAssert
operator|.
name|propBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|info
init|=
name|propBuild
operator|.
name|andThen
argument_list|(
name|useParserFactory
argument_list|()
argument_list|)
operator|.
name|andThen
argument_list|(
name|useLenientOperatorLookup
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|propBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|URL
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Test
name|void
name|testInfixCast
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|connect
argument_list|(
name|useLibraryList
argument_list|(
literal|"standard,postgresql"
argument_list|)
argument_list|)
init|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"integer"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"varchar"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"boolean"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"double"
argument_list|,
name|Types
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"bigint"
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkInfixCast
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|sqlType
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"SELECT x::"
operator|+
name|typeName
operator|+
literal|"\n"
operator|+
literal|"FROM (VALUES ('1', '2')) as tbl(x, y)"
decl_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
init|)
block|{
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Invalid column count"
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Invalid column type"
argument_list|,
name|metaData
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|sqlType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests that you can run tests via {@link Fixtures}. */
annotation|@
name|Test
name|void
name|testFixtures
parameter_list|()
block|{
specifier|final
name|SqlValidatorFixture
name|v
init|=
name|Fixtures
operator|.
name|forValidator
argument_list|()
decl_stmt|;
name|v
operator|.
name|withSql
argument_list|(
literal|"select ^1 + date '2002-03-04'^"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"(?s).*Cannot apply '\\+' to arguments of"
operator|+
literal|" type '<INTEGER> \\+<DATE>'.*"
argument_list|)
expr_stmt|;
name|v
operator|.
name|withSql
argument_list|(
literal|"select 1 + 2 as three"
argument_list|)
operator|.
name|type
argument_list|(
literal|"RecordType(INTEGER NOT NULL THREE) NOT NULL"
argument_list|)
expr_stmt|;
comment|// 'as' as identifier is invalid with Core parser
specifier|final
name|SqlParserFixture
name|p
init|=
name|Fixtures
operator|.
name|forParser
argument_list|()
decl_stmt|;
name|p
operator|.
name|sql
argument_list|(
literal|"select ^as^ from t"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"(?s)Encountered \"as\".*"
argument_list|)
expr_stmt|;
comment|// 'as' as identifier is invalid if you use Babel's tester and Core parser
name|p
operator|.
name|sql
argument_list|(
literal|"select ^as^ from t"
argument_list|)
operator|.
name|withTester
argument_list|(
operator|new
name|BabelParserTest
operator|.
name|BabelTesterImpl
argument_list|()
argument_list|)
operator|.
name|fails
argument_list|(
literal|"(?s)Encountered \"as\".*"
argument_list|)
expr_stmt|;
comment|// 'as' as identifier is valid with Babel parser
name|p
operator|.
name|withConfig
argument_list|(
name|c
lambda|->
name|c
operator|.
name|withParserFactory
argument_list|(
name|SqlBabelParserImpl
operator|.
name|FACTORY
argument_list|)
argument_list|)
operator|.
name|sql
argument_list|(
literal|"select as from t"
argument_list|)
operator|.
name|ok
argument_list|(
literal|"SELECT `AS`\n"
operator|+
literal|"FROM `T`"
argument_list|)
expr_stmt|;
comment|// Postgres cast is invalid with core parser
name|p
operator|.
name|sql
argument_list|(
literal|"select 1 ^:^: integer as x"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"(?s).*Encountered \":\" at .*"
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that DATEADD, DATEDIFF, DATEPART, DATE_PART allow custom time    * frames. */
annotation|@
name|Test
name|void
name|testTimeFrames
parameter_list|()
block|{
specifier|final
name|SqlValidatorFixture
name|f
init|=
name|Fixtures
operator|.
name|forValidator
argument_list|()
operator|.
name|withParserConfig
argument_list|(
name|p
lambda|->
name|p
operator|.
name|withParserFactory
argument_list|(
name|SqlBabelParserImpl
operator|.
name|FACTORY
argument_list|)
argument_list|)
operator|.
name|withOperatorTable
argument_list|(
name|operatorTableFor
argument_list|(
name|SqlLibrary
operator|.
name|MSSQL
argument_list|)
argument_list|)
operator|.
name|withFactory
argument_list|(
name|tf
lambda|->
name|tf
operator|.
name|withTypeSystem
argument_list|(
name|typeSystem
lambda|->
operator|new
name|DelegatingTypeSystem
argument_list|(
name|typeSystem
argument_list|)
block|{
block_content|@Override public TimeFrameSet deriveTimeFrameSet(                       TimeFrameSet frameSet
argument_list|)
block|{
return|return
name|TimeFrameSet
operator|.
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|frameSet
argument_list|)
operator|.
name|addDivision
argument_list|(
literal|"minute15"
argument_list|,
literal|4
argument_list|,
literal|"HOUR"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|final
name|String
name|ts
init|=
literal|"timestamp '2020-06-27 12:34:56'"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|String
name|ts2
init|=
literal|"timestamp '2020-06-27 13:45:56'"
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEADD(YEAR, 3, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEADD(HOUR^.^A, 3, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"(?s).*Encountered \".\" at .*"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEADD(^A^, 3, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"'A' is not a valid time frame"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEADD(minute15, 3, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEDIFF(^A^, "
operator|+
name|ts
operator|+
literal|", "
operator|+
name|ts2
operator|+
literal|")"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"'A' is not a valid time frame"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEDIFF(minute15, "
operator|+
name|ts
operator|+
literal|", "
operator|+
name|ts2
operator|+
literal|")"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEPART(^A^, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"'A' is not a valid time frame"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT DATEPART(minute15, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Where DATEPART is MSSQL, DATE_PART is Postgres
end_comment

begin_expr_stmt
name|f
operator|.
name|withSql
argument_list|(
literal|"SELECT ^DATE_PART(A, "
operator|+
name|ts
operator|+
literal|")^"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"No match found for function signature "
operator|+
literal|"DATE_PART\\(<INTERVAL_DAY_TIME>,<TIMESTAMP>\\)"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|SqlValidatorFixture
name|f2
init|=
name|f
operator|.
name|withOperatorTable
argument_list|(
name|operatorTableFor
argument_list|(
name|SqlLibrary
operator|.
name|POSTGRESQL
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|f2
operator|.
name|withSql
argument_list|(
literal|"SELECT ^DATEPART(A, "
operator|+
name|ts
operator|+
literal|")^"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"No match found for function signature "
operator|+
literal|"DATEPART\\(<INTERVAL_DAY_TIME>,<TIMESTAMP>\\)"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f2
operator|.
name|withSql
argument_list|(
literal|"SELECT DATE_PART(^A^, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|fails
argument_list|(
literal|"'A' is not a valid time frame"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|f2
operator|.
name|withSql
argument_list|(
literal|"SELECT DATE_PART(minute15, "
operator|+
name|ts
operator|+
literal|")"
argument_list|)
operator|.
name|ok
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
name|void
name|testNullSafeEqual
parameter_list|()
block|{
comment|// x<=> y
name|checkSqlResult
argument_list|(
literal|"mysql"
argument_list|,
literal|"SELECT 1<=> NULL"
argument_list|,
literal|"EXPR$0=false\n"
argument_list|)
expr_stmt|;
name|checkSqlResult
argument_list|(
literal|"mysql"
argument_list|,
literal|"SELECT NULL<=> NULL"
argument_list|,
literal|"EXPR$0=true\n"
argument_list|)
expr_stmt|;
comment|// (a, b)<=> (x, y)
name|checkSqlResult
argument_list|(
literal|"mysql"
argument_list|,
literal|"SELECT (CAST(NULL AS Integer), 1)<=> (1, CAST(NULL AS Integer))"
argument_list|,
literal|"EXPR$0=false\n"
argument_list|)
expr_stmt|;
name|checkSqlResult
argument_list|(
literal|"mysql"
argument_list|,
literal|"SELECT (CAST(NULL AS Integer), CAST(NULL AS Integer))\n"
operator|+
literal|"<=> (CAST(NULL AS Integer), CAST(NULL AS Integer))"
argument_list|,
literal|"EXPR$0=true\n"
argument_list|)
expr_stmt|;
comment|// the higher precedence
name|checkSqlResult
argument_list|(
literal|"mysql"
argument_list|,
literal|"SELECT x<=> 1 + 3 FROM (VALUES (1, 2)) as tbl(x,y)"
argument_list|,
literal|"EXPR$0=false\n"
argument_list|)
expr_stmt|;
comment|// the lower precedence
name|checkSqlResult
argument_list|(
literal|"mysql"
argument_list|,
literal|"SELECT NOT x<=> 1 FROM (VALUES (1, 2)) as tbl(x,y)"
argument_list|,
literal|"EXPR$0=false\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|checkSqlResult
parameter_list|(
name|String
name|funLibrary
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|result
parameter_list|)
block|{
name|CalciteAssert
operator|.
name|that
argument_list|()
operator|.
name|with
argument_list|(
name|CalciteConnectionProperty
operator|.
name|PARSER_FACTORY
argument_list|,
name|SqlBabelParserImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"#FACTORY"
argument_list|)
operator|.
name|with
argument_list|(
name|CalciteConnectionProperty
operator|.
name|FUN
argument_list|,
name|funLibrary
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|returns
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

