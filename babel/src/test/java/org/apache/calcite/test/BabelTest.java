begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|config
operator|.
name|CalciteConnectionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|babel
operator|.
name|SqlBabelParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Unit tests for Babel framework.  */
end_comment

begin_class
specifier|public
class|class
name|BabelTest
block|{
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"jdbc:calcite:"
decl_stmt|;
specifier|private
specifier|static
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|useParserFactory
parameter_list|()
block|{
return|return
name|propBuilder
lambda|->
name|propBuilder
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|PARSER_FACTORY
argument_list|,
name|SqlBabelParserImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"#FACTORY"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|useLibraryList
parameter_list|(
name|String
name|libraryList
parameter_list|)
block|{
return|return
name|propBuilder
lambda|->
name|propBuilder
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|FUN
argument_list|,
name|libraryList
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|useLenientOperatorLookup
parameter_list|(
name|boolean
name|lenient
parameter_list|)
block|{
return|return
name|propBuilder
lambda|->
name|propBuilder
operator|.
name|set
argument_list|(
name|CalciteConnectionProperty
operator|.
name|LENIENT_OPERATOR_LOOKUP
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|lenient
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|static
name|Connection
name|connect
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connect
argument_list|(
name|UnaryOperator
operator|.
name|identity
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|Connection
name|connect
parameter_list|(
name|UnaryOperator
argument_list|<
name|CalciteAssert
operator|.
name|PropBuilder
argument_list|>
name|propBuild
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|CalciteAssert
operator|.
name|PropBuilder
name|propBuilder
init|=
name|CalciteAssert
operator|.
name|propBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|info
init|=
name|propBuild
operator|.
name|andThen
argument_list|(
name|useParserFactory
argument_list|()
argument_list|)
operator|.
name|andThen
argument_list|(
name|useLenientOperatorLookup
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|propBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|URL
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInfixCast
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|connect
argument_list|(
name|useLibraryList
argument_list|(
literal|"standard,postgresql"
argument_list|)
argument_list|)
init|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"integer"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"varchar"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"boolean"
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"double"
argument_list|,
name|Types
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|checkInfixCast
argument_list|(
name|statement
argument_list|,
literal|"bigint"
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkInfixCast
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|sqlType
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"SELECT x::"
operator|+
name|typeName
operator|+
literal|"\n"
operator|+
literal|"FROM (VALUES ('1', '2')) as tbl(x, y)"
decl_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
init|)
block|{
specifier|final
name|ResultSetMetaData
name|metaData
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Invalid column count"
argument_list|,
name|metaData
operator|.
name|getColumnCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Invalid column type"
argument_list|,
name|metaData
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|sqlType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End BabelTest.java
end_comment

end_unit

